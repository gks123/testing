(function () {

   //Extension Server Details
    var app_name                    = 'GiniCube';
    var app_name_internal           = 'ginicube';
    var app_version                 = 'ChromeExtension+'+app_name+'+1.2';
    var app_version_number          = '1.2';
    //var server_url                  = "https://myaccount.sugargini.com/prod/current/chrome";
    var server_url                  = "https://sugarstaging.osscube.com/dev/gaurav/chrome";
    var launchpad_url               = server_url + "/launchpad.js?client="+app_version;
    var company_exceptions          = new Array('gmail', 'yahoo', 'msn', 'linkedin', 'twitter', 'facebook');

    //Application, WEB SERVICES SERVER Details

    //var proxy_base_url              = "https://myaccount.sugargini.com/prod/current/apps";
    var proxy_base_url              = "https://sugarstaging.osscube.com/dev/gaurav/apps";
    var profiles_base_url           = proxy_base_url + "/services/v2";
    var crm_base_url                = proxy_base_url + "/services/v2";
    var services_base_url           = proxy_base_url + "/services/v2";
    var server_log_level            = "info";
    var img_base_url                = server_url + "/images";

    function stackTrace(e) {
        function chrome(e) {
            var stack = (e.stack + '\n').replace(/^\S[^\(]+?[\n$]/gm, '').replace(/^\s+at\s+/gm, '').replace(/^([^\(]+?)([\n$])/gm, '{anonymous}()@$1$2').replace(/^Object.<anonymous>\s*\(([^\)]+)\)/gm, '{anonymous}()@$1').split('\n');
            stack.pop();
            return stack;
        }

        function firefox(e) {
            return e.stack.replace(/(?:\n@:0)?\s+$/m, '').replace(/^\(/gm, '{anonymous}(').split('\n');
        }

        function opera10(e) {
            var stack = e.stacktrace;
            var lines = stack.split('\n'),
                ANON = '{anonymous}',
                lineRE = /.*line (\d+), column (\d+) in ((<anonymous function\:?\s*(\S+))|([^\(]+)\([^\)]*\))(?: in )?(.*)\s*$/i,
                i, j, len;
            for (i = 2, j = 0, len = lines.length; i < len - 2; i++) {
                if (lineRE.test(lines[i])) {
                    var location = RegExp.$6 + ':' + RegExp.$1 + ':' + RegExp.$2;
                    var fnName = RegExp.$3;
                    fnName = fnName.replace(/<anonymous function\:?\s?(\S+)?>/g, ANON);
                    lines[j++] = fnName + '@' + location;
                }
            }
            lines.splice(j, lines.length - j);
            return lines;
        }

        function opera(e) {
            var lines = e.message.split('\n'),
                ANON = '{anonymous}',
                lineRE = /Line\s+(\d+).*script\s+(http\S+)(?:.*in\s+function\s+(\S+))?/i,
                i, j, len;
            for (i = 4, j = 0, len = lines.length; i < len; i += 2) {
                if (lineRE.test(lines[i])) {
                    lines[j++] = (RegExp.$3 ? RegExp.$3 + '()@' + RegExp.$2 + RegExp.$1 : ANON + '()@' + RegExp.$2 + ':' + RegExp.$1) + ' -- ' + lines[i + 1].replace(/^\s+/, '');
                }
            }
            lines.splice(j, lines.length - j);
            return lines;
        }

        function stringifyArguments(args) {
            var slice = Array.prototype.slice;
            for (var i = 0; i < args.length; ++i) {
                var arg = args[i];
                if (arg === undefined) {
                    args[i] = 'undefined';
                } else if (arg === null) {
                    args[i] = 'null';
                } else if (arg.constructor) {
                    if (arg.constructor === Array) {
                        if (arg.length < 3) {
                            args[i] = '[' + stringifyArguments(arg) + ']';
                        } else {
                            args[i] = '[' + stringifyArguments(slice.call(arg, 0, 1)) + '...' + stringifyArguments(slice.call(arg, -1)) + ']';
                        }
                    } else if (arg.constructor === Object) {
                        args[i] = '#object';
                    } else if (arg.constructor === Function) {
                        args[i] = '#function';
                    } else if (arg.constructor === String) {
                        args[i] = '"' + arg + '"';
                    }
                }
            }
            return args.join(',');
        }

        function other(curr) {
            var ANON = '{anonymous}',
                fnRE = /function\s*([\w\-$]+)?\s*\(/i,
                stack = [],
                fn, args, maxStackSize = 10;
            while (curr && stack.length < maxStackSize) {
                fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
                args = Array.prototype.slice.call(curr['arguments'] || []);
                stack[stack.length] = fn + '(' + stringifyArguments(args) + ')';
                curr = curr.caller;
            }
            return stack;
        }
        if (e['arguments'] && e.stack) {
            return chrome(e);
        } else if (e.message && typeof window !== 'undefined' && window.opera) {
            return e.stacktrace ? opera10(e) : opera(e);
        } else if (e.stack) {
            return firefox(e);
        }
        return other(e);
    }

    function loggily(category, continuation) {
        
        return function loggilyInternal() {
            try {
                return continuation.apply(this, arguments);
            } catch (exception) {
                
                var e = exception;
                if (!e || typeof e !== 'object') {
                    try {
                        throw new Error(e);
                    } catch (e2) {
                        e = e2;
                    }
                }
                if (e.loggedByLoggily) {
                    throw e;
                }
                var exception_details = {};
                var trace = stackTrace(e);
                if (trace) {
                    exception_details.backtrace = trace.join("\n");
                    if(trace[1] && typeof trace[1] == "string" && e.message && typeof e.message == "string") {
                        var emailId = 'Not found.';
                        if(ginipkg.user_email !== undefined){
                            emailId = ginipkg.user_email + ' ---> ';
                        }
                        ginipkg.request({
                            url: server_url + '/logs/createLog.php?',
                            data :{
                                message  : 'email : '+ emailId + encodeURIComponent(e.message+" : "+trace[1]),
                                 filepath : 'applicationLog.txt',
                                 skipThis : true
                            },
                            // jsonp : true,
                            success: function (data, status) {
                                console.log('Error Successfully Logged in Application Log file...');
                            },
                            error: function (response) {
                                console.log('Error Logging Failed...');
                                console.log(response);
                            }
                        });                        
                    }

                }
                exception_details.message = (e && e.message ? e.message : "" + e);
                if (typeof ginipkg === 'object' && ginipkg && ginipkg.clientCodeTimestamp) {
                    exception_details.clientCodeTimestamp = ginipkg.clientCodeTimestamp;
                }
                ginipkgLogger.error(category, app_name + " exception: " + e, exception_details);
                ginipkgLogger.consoleLog( app_name + " exception: " + category + ": " + e);
                if (exception_details.backtrace) {
                    ginipkgLogger.consoleLog(exception_details.backtrace);
                }
                try {
                    e.loggedByLoggily = true;
                } catch (e3) {}
                throw e;
            }
        };
    }

    function giniLogger(server, minLevel, args) {
        var _public = {}, _protected = {};
        var max_log_history = 10000;
        var bad_params = {
            user_id: 1,
            type: 1,
            timestamp: 1,
            controller: 1,
            action: 1,
            callback: 1,
            category: 1,
            level: 1,
            path: 1,
            format: 1
        };
        var levels = {
            all: 0,
            debug: 10,
            info: 20,
            warn: 30,
            warning: 30,
            error: 40,
            fatal: 100
        };
        var callbackCount = (new Date()).getTime();
        _public.server = server;
        _public.minLevel = minLevel;

        function baseUrl(level, category) {
            return _public.server + "/logs/" + encodeURIComponent(category) + "/" + encodeURIComponent(level);
        }

        function garbageCollectionCode(callback) {
            return "function " + callback + " () {\n" + "   try {\n" + "       window." + callback + " = undefined;\n" + "       delete window." + callback + ";\n" + "   } catch (e) {}\n" + "   var request = document.getElementById('" + callback + "request');\n" + "   if (request) request.parentNode.removeChild(request);\n" + "   var callback = document.getElementById('" + callback + "callback');\n" + "   if (callback) callback.parentNode.removeChild(callback);\n" + "}\n";
        }

        function makeRequest(url, callback) {
            var head = document.getElementsByTagName("head")[0] || document.documentElement;
            var garbageCollect = document.createElement("script");
            garbageCollect.id = callback + 'callback';
            garbageCollect.type = 'text/javascript';
            garbageCollect.text = garbageCollectionCode(callback);
            head.insertBefore(garbageCollect, head.firstChild);
            var request = document.createElement("script");
            request.id = callback + 'request';
            request.type = 'text/javascript';
            request.src = url;
            head.insertBefore(request, head.firstChild);
        }
        _public.log = function (level, category, message, params) {
            if (message === undefined && params === undefined) {
                throw new Error("Please specify level, category and message");
            }
            if (levels[level] < levels[_public.minLevel]) {
                return;
            }
            var callback = 'logger' + callbackCount;
            callbackCount += 1;
            var data = 'message=' + encodeURIComponent(message) + '&callback=' + callback;
            if (params) {
                for (var param in params) {
                    if (params.hasOwnProperty(param)) {
                        if (bad_params[param]) {
                            throw new Error("Parameter '" + param + "' is reserved!");
                        }
                        data += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(params[param]);
                    }
                }
            }
            //makeRequest(baseUrl(level, category) + '?' + data, callback);
          makeRequest(server_url + '/logs/createLog.php?level='+ level+ '&category='+ category + '&' + data, callback);
        };
        _public.debug = function (category, message, params) {
            _public.log("debug", category, message, params);
        };
        _public.info = function (category, message, params) {
            _public.log("info", category, message, params);
        };
        _public.warning = _public.warn = function (category, message, params) {
            _public.log("warning", category, message, params);
        };
        _public.error = function (category, message, params) {
            _public.log("error", category, message, params);
        };
        _public.fatal = function (category, message, params) {
            _public.log("fatal", category, message, params);
        };
        _public.track = function (message, params, probability) {
            if (undefined !== probability) {
                var params_with_probability = {
                    probability: probability
                };
                for (var param in params) {
                    if (params.hasOwnProperty(param)) {
                        params_with_probability[param] = params[param];
                    }
                }
                params = params_with_probability;
            }
            //_public.log("info", "track", message, params);
        };
        _public.consoleLog = function (message, server_category, server_level) {
            var use_top_window = !(args && args.in_iframe);
            try {
                if (use_top_window && window.top && window.top.console) {
                    window.top.console.log(message);
                } else if (window.console) {
                    window.console.log(message);
                }
            } catch (e) {}
            _public.silentLog(message, server_category, server_level);
        };
        _public.silentLog = function (message, server_category, server_level) {
            if (args && args.log_history) {
                while (args.log_history.length > max_log_history) {
                    args.log_history.shift();
                }
                args.log_history.push('[' + (new Date()).toGMTString() + '] ' + message);
            }
            if (server_category) {
                _public.log(server_level || 'debug', server_category, message);
            }
        };
        return _public;
    }

    function delayedConditionalExecute(options) {
        var default_options = {
            poll_delay: 200,
            max_poll_attempts: 100,
            failure_message: "Ran out of delayedConditionalExecute search attempts -- giving up!",
            condition: function () {
                throw "No condition supplied to delayedConditionalExecute!";
            },
            continuation: function () {},
            error_continuation: function () {},
            log_level_on_failure: "error",
            log_level_on_error: null
        };
        for (var key in options) {
            if (options.hasOwnProperty(key)) {
                default_options[key] = options[key];
            }
        }
        options = default_options;
        if (!options.log_category) {
            throw "delayedConditionalExecute needs a log_category";
        }
        var attempts = 0;

        function log(message, additional_message, category, level) {
            if (typeof (message) === "function") {
                message = message();
            }
            if (message) {
                fsLog(message + " " + (additional_message || ""), category, level);
            }
        }

        function doAttempt() {
            if (options.condition()) {
                loggily(options.log_category + ".success." + options.continuation.name, options.continuation)();
            } else {
                if (attempts < options.max_poll_attempts) {
                    attempts += 1;
                    log(options.retry_message);
                    window.setTimeout(loggily(options.log_category + ".attempt.subsequent", doAttempt), options.poll_delay);
                } else {
                    loggily(options.log_category + ".error." + options.error_continuation.name, options.error_continuation)();
                    log(options.failure_message, null, options.log_category, options.log_level_on_failure);
                }
            }
        }
        loggily(options.log_category + ".attempt.first", doAttempt)();
    }

    function fireWhenVisible(options) {
        var attempts = 500,
            poll_delay = 20;
        if (options && options.max_wait) {
            attempts = (1000 / poll_delay) * options.max_wait;
        }
        delayedConditionalExecute({
            poll_delay: poll_delay,
            max_poll_attempts: attempts,
            failure_message: "Failed to find visible item",
            log_category: options.log_category,
            condition: function () {
                return options.condition().is(':visible');
            },
            continuation: options.continuation || function () {},
            error_continuation: options.error_continuation || function () {}
        });
    }
    
    
    //Underscore.js Starts Here
    (function () {
        var root = this;
        var previousUnderscore = root._;
        var breaker = {};
        var ArrayProto = Array.prototype,
            ObjProto = Object.prototype,
            FuncProto = Function.prototype;
        var slice = ArrayProto.slice,
            unshift = ArrayProto.unshift,
            toString = ObjProto.toString,
            hasOwnProperty = ObjProto.hasOwnProperty;
        var
        nativeForEach = ArrayProto.forEach,
            nativeMap = ArrayProto.map,
            nativeReduce = ArrayProto.reduce,
            nativeReduceRight = ArrayProto.reduceRight,
            nativeFilter = ArrayProto.filter,
            nativeEvery = ArrayProto.every,
            nativeSome = ArrayProto.some,
            nativeIndexOf = ArrayProto.indexOf,
            nativeLastIndexOf = ArrayProto.lastIndexOf,
            nativeIsArray = Array.isArray,
            nativeKeys = Object.keys,
            nativeBind = FuncProto.bind;
        var _ = function (obj) {
            return new wrapper(obj);
        };
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = _;
            _._ = _;
        } else {
            root._ = _;
        }
        _.VERSION = '1.0.0';
        var each = _.each = _.forEach = function (obj, iterator, context) {
            if (obj == null) return;
            if (nativeForEach && obj.forEach === nativeForEach) {
                obj.forEach(iterator, context);
            } else if (_.isNumber(obj.length)) {
                for (var i = 0, l = obj.length; i < l; i++) {
                    if (iterator.call(context, obj[i], i, obj) === breaker) return;
                }
            } else {
                for (var key in obj) {
                    if (hasOwnProperty.call(obj, key)) {
                        if (iterator.call(context, obj[key], key, obj) === breaker) return;
                    }
                }
            }
        };
        _.map = function (obj, iterator, context) {
            var results = [];
            if (obj == null) return results;
            if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
            each(obj, function (value, index, list) {
                results[results.length] = iterator.call(context, value, index, list);
            });
            return results;
        };
        _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
            var initial = memo !== void 0;
            if (obj == null) obj = [];
            if (nativeReduce && obj.reduce === nativeReduce) {
                if (context) iterator = _.bind(iterator, context);
                return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
            }
            each(obj, function (value, index, list) {
                if (!initial && index === 0) {
                    memo = value;
                    initial = true;
                } else {
                    memo = iterator.call(context, memo, value, index, list);
                }
            });
            if (!initial) throw new TypeError("Reduce of empty array with no initial value");
            return memo;
        };
        _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
            if (obj == null) obj = [];
            if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                if (context) iterator = _.bind(iterator, context);
                return memo !== void 0 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
            }
            var reversed = (_.isArray(obj) ? obj.slice() : _.toArray(obj)).reverse();
            return _.reduce(reversed, iterator, memo, context);
        };
        _.find = _.detect = function (obj, iterator, context) {
            var result;
            any(obj, function (value, index, list) {
                if (iterator.call(context, value, index, list)) {
                    result = value;
                    return true;
                }
            });
            return result;
        };
        _.filter = _.select = function (obj, iterator, context) {
            var results = [];
            if (obj == null) return results;
            if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
            each(obj, function (value, index, list) {
                if (iterator.call(context, value, index, list)) results[results.length] = value;
            });
            return results;
        };
        _.reject = function (obj, iterator, context) {
            var results = [];
            if (obj == null) return results;
            each(obj, function (value, index, list) {
                if (!iterator.call(context, value, index, list)) results[results.length] = value;
            });
            return results;
        };
        _.every = _.all = function (obj, iterator, context) {
            var result = true;
            if (obj == null) return result;
            if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
            each(obj, function (value, index, list) {
                if (!(result = result && iterator.call(context, value, index, list))) return breaker;
            });
            return result;
        };
        var any = _.some = _.any = function (obj, iterator, context) {
            iterator || (iterator = _.identity);
            var result = false;
            if (obj == null) return result;
            if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
            each(obj, function (value, index, list) {
                if (result = iterator.call(context, value, index, list)) return breaker;
            });
            return result;
        };
        _.include = _.contains = function (obj, target) {
            var found = false;
            if (obj == null) return found;
            if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
            any(obj, function (value) {
                if (found = value === target) return true;
            });
            return found;
        };
        _.invoke = function (obj, method) {
            
            var args = slice.call(arguments, 2);
            return _.map(obj, function (value) {
                return (method.call ? method || value : value[method]).apply(value, args);
            });
        };
        _.pluck = function (obj, key) {
            return _.map(obj, function (value) {
                return value[key];
            });
        };
        _.max = function (obj, iterator, context) {
            if (!iterator && _.isArray(obj)) return Math.max.apply(Math, obj);
            var result = {
                computed: -Infinity
            };
            each(obj, function (value, index, list) {
                var computed = iterator ? iterator.call(context, value, index, list) : value;
                computed >= result.computed && (result = {
                    value: value,
                    computed: computed
                });
            });
            return result.value;
        };
        _.min = function (obj, iterator, context) {
            if (!iterator && _.isArray(obj)) return Math.min.apply(Math, obj);
            var result = {
                computed: Infinity
            };
            each(obj, function (value, index, list) {
                var computed = iterator ? iterator.call(context, value, index, list) : value;
                computed < result.computed && (result = {
                    value: value,
                    computed: computed
                });
            });
            return result.value;
        };
        _.sortBy = function (obj, iterator, context) {
            return _.pluck(_.map(obj, function (value, index, list) {
                return {
                    value: value,
                    criteria: iterator.call(context, value, index, list)
                };
            }).sort(function (left, right) {
                var a = left.criteria,
                    b = right.criteria;
                return a < b ? -1 : a > b ? 1 : 0;
            }), 'value');
        };
        _.sortedIndex = function (array, obj, iterator) {
            iterator || (iterator = _.identity);
            var low = 0,
                high = array.length;
            while (low < high) {
                var mid = (low + high) >> 1;
                iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
            }
            return low;
        };
        _.toArray = function (iterable) {
            if (!iterable) return [];
            if (iterable.toArray) return iterable.toArray();
            if (_.isArray(iterable)) return iterable;
            if (_.isArguments(iterable)) return slice.call(iterable);
            return _.values(iterable);
        };
        _.size = function (obj) {
            return _.toArray(obj).length;
        };
        _.first = _.head = function (array, n, guard) {
            return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
        };
        _.rest = _.tail = function (array, index, guard) {
            return slice.call(array, (index == null) || guard ? 1 : index);
        };
        _.last = function (array) {
            return array[array.length - 1];
        };
        _.compact = function (array) {
            return _.filter(array, function (value) {
                return !!value;
            });
        };
        _.flatten = function (array) {
            return _.reduce(array, function (memo, value) {
                if (_.isArray(value)) return memo.concat(_.flatten(value));
                memo[memo.length] = value;
                return memo;
            }, []);
        };
        _.without = function (array) {
            var values = slice.call(arguments, 1);
            return _.filter(array, function (value) {
                return !_.include(values, value);
            });
        };
        _.uniq = _.unique = function (array, isSorted) {
            return _.reduce(array, function (memo, el, i) {
                if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) memo[memo.length] = el;
                return memo;
            }, []);
        };
        _.intersect = function (array) {
            var rest = slice.call(arguments, 1);
            return _.filter(_.uniq(array), function (item) {
                return _.every(rest, function (other) {
                    return _.indexOf(other, item) >= 0;
                });
            });
        };
        _.zip = function () {
            var args = slice.call(arguments);
            var length = _.max(_.pluck(args, 'length'));
            var results = new Array(length);
            for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
            return results;
        };
        _.indexOf = function (array, item, isSorted) {
            if (array == null) return -1;
            var i, l;
            if (isSorted) {
                i = _.sortedIndex(array, item);
                return array[i] === item ? i : -1;
            }
            if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
            for (i = 0, l = array.length; i < l; i++) if (array[i] === item) return i;
            return -1;
        };
        _.lastIndexOf = function (array, item) {
            if (array == null) return -1;
            if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
            var i = array.length;
            while (i--) if (array[i] === item) return i;
            return -1;
        };
        _.range = function (start, stop, step) {
            if (arguments.length <= 1) {
                stop = start || 0;
                start = 0;
            }
            step = arguments[2] || 1;
            var len = Math.max(Math.ceil((stop - start) / step), 0);
            var idx = 0;
            var range = new Array(len);
            while (idx < len) {
                range[idx++] = start;
                start += step;
            }
            return range;
        };
        _.bind = function (func, obj) {
            if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
            var args = slice.call(arguments, 2);
            return function () {
                return func.apply(obj, args.concat(slice.call(arguments)));
            };
        };
        _.bindAll = function (obj) {
            var funcs = slice.call(arguments, 1);
            if (funcs.length == 0) funcs = _.functions(obj);
            each(funcs, function (f) {
                obj[f] = _.bind(obj[f], obj);
            });
            return obj;
        };
        _.memoize = function (func, hasher) {
            var memo = {};
            hasher || (hasher = _.identity);
            return function () {
                var key = hasher.apply(this, arguments);
                return hasOwnProperty.call(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
            };
        };
        _.delay = function (func, wait) {
            var args = slice.call(arguments, 2);
            return setTimeout(function () {
                return func.apply(func, args);
            }, wait);
        };
        _.defer = function (func) {
            return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
        };
        var limit = function (func, wait, debounce) {
            var timeout;
            return function () {
                var context = this,
                    args = arguments;
                var throttler = function () {
                    timeout = null;
                    func.apply(context, args);
                };
                if (debounce) clearTimeout(timeout);
                if (debounce || !timeout) timeout = setTimeout(throttler, wait);
            };
        };
        _.throttle = function (func, wait) {
            return limit(func, wait, false);
        };
        _.debounce = function (func, wait) {
            return limit(func, wait, true);
        };
        _.once = function (func) {
            var ran = false,
                memo;
            return function () {
                if (ran) return memo;
                ran = true;
                return memo = func.apply(this, arguments);
            };
        };
        _.wrap = function (func, wrapper) {
            return function () {
                var args = [func].concat(slice.call(arguments));
                return wrapper.apply(this, args);
            };
        };
        _.compose = function () {
            var funcs = slice.call(arguments);
            return function () {
                var args = slice.call(arguments);
                for (var i = funcs.length - 1; i >= 0; i--) {
                    args = [funcs[i].apply(this, args)];
                }
                return args[0];
            };
        };
        _.after = function (times, func) {
            return function () {
                if (--times < 1) {
                    return func.apply(this, arguments);
                }
            };
        };
        _.keys = nativeKeys || function (obj) {
            if (obj !== Object(obj)) throw new TypeError('Invalid object');
            var keys = [];
            for (var key in obj) if (hasOwnProperty.call(obj, key)) keys[keys.length] = key;
            return keys;
        };
        _.values = function (obj) {
            return _.map(obj, _.identity);
        };
        _.functions = _.methods = function (obj) {
            return _.filter(_.keys(obj), function (key) {
                return _.isFunction(obj[key]);
            }).sort();
        };
        _.extend = function (obj) {
            each(slice.call(arguments, 1), function (source) {
                for (var prop in source) {
                    if (source[prop] !== void 0) obj[prop] = source[prop];
                }
            });
            return obj;
        };
        _.defaults = function (obj) {
            each(slice.call(arguments, 1), function (source) {
                for (var prop in source) {
                    if (obj[prop] == null) obj[prop] = source[prop];
                }
            });
            return obj;
        };
        _.clone = function (obj) {
            return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };
        _.tap = function (obj, interceptor) {
            interceptor(obj);
            return obj;
        };
        _.isEqual = function (a, b) {
            if (a === b) return true;
            var atype = typeof (a),
                btype = typeof (b);
            if (atype != btype) return false;
            if (a == b) return true;
            if ((!a && b) || (a && !b)) return false;
            if (a._chain) a = a._wrapped;
            if (b._chain) b = b._wrapped;
            if (a.isEqual) return a.isEqual(b);
            if (_.isDate(a) && _.isDate(b)) return a.getTime() === b.getTime();
            if (_.isNaN(a) && _.isNaN(b)) return false;
            if (_.isRegExp(a) && _.isRegExp(b))
                return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline;
            if (atype !== 'object') return false;
            if (a.length && (a.length !== b.length)) return false;
            var aKeys = _.keys(a),
                bKeys = _.keys(b);
            if (aKeys.length != bKeys.length) return false;
            for (var key in a) if (!(key in b) || !_.isEqual(a[key], b[key])) return false;
            return true;
        };
        _.isEmpty = function (obj) {
            if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
            for (var key in obj) if (hasOwnProperty.call(obj, key)) return false;
            return true;
        };
        _.isElement = function (obj) {
            return !!(obj && obj.nodeType == 1);
        };
        _.isArray = nativeIsArray || function (obj) {
            return toString.call(obj) === '[object Array]';
        };
        _.isArguments = function (obj) {
            return !!(obj && hasOwnProperty.call(obj, 'callee'));
        };
        _.isFunction = function (obj) {
            return !!(obj && obj.constructor && obj.call && obj.apply);
        };
        _.isString = function (obj) {
            return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
        };
        _.isNumber = function (obj) {
            return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));
        };
        _.isNaN = function (obj) {
            return obj !== obj;
        };
        _.isBoolean = function (obj) {
            return obj === true || obj === false;
        };
        _.isDate = function (obj) {
            return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);
        };
        _.isRegExp = function (obj) {
            return !!(obj && obj.test && obj.exec && (obj.ignoreCase || obj.ignoreCase === false));
        };
        _.isNull = function (obj) {
                return obj === null;
        };
        _.isUndefined = function (obj) {
            return obj === void 0;
        };
        _.noConflict = function () {
            root._ = previousUnderscore;
            return this;
        };
        _.identity = function (value) {
            return value;
        };
        _.times = function (n, iterator, context) {
            for (var i = 0; i < n; i++) iterator.call(context, i);
        };
        _.mixin = function (obj) {
            each(_.functions(obj), function (name) {
                addToWrapper(name, _[name] = obj[name]);
            });
        };
        var idCounter = 0;
        _.uniqueId = function (prefix) {
            var id = idCounter++;
            return prefix ? prefix + id : id;
        };
        _.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g
        };
        _.template = function (str, data) {
            var c = _.templateSettings;
            var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' + 'with(obj||{}){__p.push(\'' +
                str.replace(/\\/g, '\\\\').replace(/'/g, "\\'").replace(c.interpolate, function (match, code) {
                return "'," + code.replace(/\\'/g, "'") + ",'";
            }).replace(c.evaluate || null, function (match, code) {
                return "');" + code.replace(/\\'/g, "'").replace(/[\r\n\t]/g, ' ') + "__p.push('";
            }).replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\t/g, '\\t') + "');}return __p.join('');";
            var func = new Function('obj', tmpl);
            return data ? func(data) : func;
        };
        var wrapper = function (obj) {
            this._wrapped = obj;
        };
        _.prototype = wrapper.prototype;
        var result = function (obj, chain) {
            return chain ? _(obj).chain() : obj;
        };
        var addToWrapper = function (name, func) {
            wrapper.prototype[name] = function () {
                var args = slice.call(arguments);
                unshift.call(args, this._wrapped);
                return result(func.apply(_, args), this._chain);
            };
        };
        _.mixin(_);
        each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {
            var method = ArrayProto[name];
            wrapper.prototype[name] = function () {
                method.apply(this._wrapped, arguments);
                return result(this._wrapped, this._chain);
            };
        });
        each(['concat', 'join', 'slice'], function (name) {
            var method = ArrayProto[name];
            wrapper.prototype[name] = function () {
                return result(method.apply(this._wrapped, arguments), this._chain);
            };
        });
        wrapper.prototype.chain = function () {
            this._chain = true;
            return this;
        };
        wrapper.prototype.value = function () {
            return this._wrapped;
        };
    })();

    //Underscore.js Ends Here

    var _ = window._.noConflict();

    //Custom Functions added to underscore.js Starts Here
    
    (function (_) {
        _.mixin({
            andand: function (obj, func) {
                if (obj) {
                    return func ? func(obj) : obj;
                }
                return {};
            },
            chomp: function (input, separator) {
                if (!separator) {
                    separator = "[\r\n ]";
                }
                return input.replace(new RegExp(separator + '+$'), '');
            },
            squeeze: function (input, other_string) {
                if (!other_string) {
                    throw "squeeze() without a specific string to squeeze, is not supported.";
                }
                return input.replace(new RegExp("(" + other_string + ")+", 'g'), other_string);
            },
            difference: function (ary1, ary2) {
                return _.without.apply(_, [ary1].concat(ary2));
            },
            capitalize: function (str) {
                return str.charAt(0).toUpperCase() + str.slice(1);
            },
            uncapitalize: function (str) {
                return str.charAt(0).toLowerCase() + str.slice(1);
            },
            camelize: function (str, first_letter_lowercase) {
                        
                var camelized = _(str.split(/_/)).map(function (word) {
                    return _.capitalize(word);
                }).join('');
                return (first_letter_lowercase ? _.uncapitalize(camelized) : _.capitalize(camelized));
            },
            underscore: function (str) {
                return str.replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z0-9])([A-Z])/g, '$1_$2').replace(/\-/g, '_').toLowerCase();
            },
            regexpEscape: function (str) {
                return str.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
            },
            uniqBy: function (ary, func, isSorted, context) {
                var seen = [],
                    uniq = [];
                _.each(ary, function (el, i) {
                    var key = func.call(context, el, i, ary);
                    if (0 === i || (isSorted === true ? _.last(seen) !== key : !_.include(seen, key))) {
                        seen.push(key);
                        uniq.push(el);
                    }
                });
                return uniq;
            },
            plucker: function (key) {
                return function (el) {
                    return el[key];
                };
            },
            firstMap: function (obj, iterator, context) {
                var result;
                _.any(obj, function (value, index, list) {
                    result = iterator.call(context, value, index, list);
                    return !!result;
                });
                return result;
            },
            informalize: function (input, fallback) {
                function potentialFirst(words) {
                    var blacklist = ['mr', 'mrs', 'miss', 'ms', 'lord', 'lady', 'dame', 'dr', 'doctor', 'sir', 'master'];
                    words = _(words).clone();
                    var first_word = words.shift();
                    if (_(blacklist).indexOf(first_word.toLowerCase()) > -1) {
                        return potentialFirst(words);
                    } else if ((first_word.toUpperCase() === first_word && first_word.length < 3) || first_word.charAt(first_word.length - 1) === '.') {
                        return null;
                    }
                    return first_word;
                }

                function clean(name) {
                    if (name.length < 3) {
                        return name;
                    }
                    if (name.toUpperCase() === name) {
                        name = name.toLowerCase();
                    }
                    return _(name).capitalize();
                }
                if (!input || !_(input).isString()) {
                    return fallback || "";
                }
                var name = _(input).squeeze(' ').trim();
                fallback = fallback || name;
                if (!name || name.match(/[0-9"\|\*\?\,\(\)\[\]<>_\-@~&]/) || name.length > 30) {
                    return fallback;
                }
                var first_name = potentialFirst(name.split(/[\s]+/));
                if (!first_name) {
                    return fallback;
                }
                return clean(first_name);
            },
            cleanEmail: function (input) {
                return _.extractEmails(input)[0] || null;
            },
            nameFromEmail: function (input) {
                if (!input) {
                    return null;
                }
                if (input.indexOf('@') > -1 && input.indexOf('<') === -1) {
                    return null;
                }
                input = input.replace(/<.+$/, '').replace(_.RE_PUNCT, '').trim();
                if (input.indexOf('@') > -1) {
                    return null;
                }
                return input || null;
            },
            extractEmails: function (input) {
                return _((input || "").split(_.RE_EMAIL)).chain().select(function (str, index) {
                    return index % 2 === 1;
                }).invoke('toLowerCase').value();
            },
            inspect: function (obj) {
                return JSON.stringify(obj);
            },
            throttle: function (func, wait) {
                var context, args, timeout, throttling, more;
                var whenDone = _.debounce(function () {
                    more = throttling = false;
                }, wait);
                return function () {
                    context = this;
                    args = arguments;
                    var later = function () {
                        timeout = null;
                        if (more) {
                            func.apply(context, args);
                        }
                        whenDone();
                    };
                    if (!timeout) {
                        timeout = setTimeout(later, wait);
                    }
                    if (throttling) {
                        more = true;
                    } else {
                        func.apply(context, args);
                    }
                    whenDone();
                    throttling = true;
                };
            },
            debounce: function (func, wait) {
                var timeout;
                return function () {
                    var context = this,
                        args = arguments;
                    var later = function () {
                        timeout = null;
                        func.apply(context, args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            },
            deferInSequence: function (functions) {
                var funcs = _.clone(functions);
                return _.defer(function () {
                    if (funcs[0]) {
                        funcs.shift().apply();
                        return _.deferInSequence(funcs);
                    }
                });
            },
            conversationEmails : function(active_view_element){
                var objEmails = [];
                var emails  = jQuery(active_view_element).find(".iw span[email], span.gD[email], span.g2[email]");
                $.each(emails , function (i,emailSpan)
                {
                    var email   = jQuery(emailSpan).attr("email");
                    var name        = jQuery(emailSpan).text();
                    var attrEmail   = {"email":email,"name":name};
                    objEmails.push(attrEmail);
                });
                return objEmails;
            }
        });
        _.RE_EMAIL = /([a-z0-9!#$%&'\*+\-\/=?\^_`\{\|\}~\.]+@(?:[a-z0-9\-]+)(?:\.[a-z0-9\-]+)+)/i;
        _.RE_PUNCT = new RegExp('([\"\'/\\\\~|.<>:;\\-=#_' + ["\u00a6", "\u00ab", "\u00b7", "\u00bb", "\u2010", "\u2011", "\u2012", "\u2013", "\u2014", "\u2015", "\u2016", "\u2022", "\u2023", "\u2039", "\u203a"].join("") + "])", "g");
    }(_));

    //Custom Functions added to underscore.js Ends Here

    /*
    * Code added by rahul
    * nicEditor starts here
    */
    var bkExtend = function(){
        var args = arguments;
        if (args.length == 1) args = [this, args[0]];
        for (var prop in args[1]) args[0][prop] = args[1][prop];
        return args[0];
    };
    function bkClass() { }
    bkClass.prototype.construct = function() {};
    bkClass.extend = function(def) {
      var classDef = function() {
          if (arguments[0] !== bkClass) { return this.construct.apply(this, arguments); }
      };
      var proto = new this(bkClass);
      bkExtend(proto,def);
      classDef.prototype = proto;
      classDef.extend = this.extend;      
      return classDef;
    };

    var bkElement = bkClass.extend({
        construct : function(elm,d) {
            if(typeof(elm) == "string") {
                elm = (d || document).createElement(elm);
            }
            elm = $BK(elm);
            return elm;
        },
        
        appendTo : function(elm) {
            elm.appendChild(this);  
            return this;
        },
        
        appendBefore : function(elm) {
            elm.parentNode.insertBefore(this,elm);  
            return this;
        },
        
        addEvent : function(type, fn) {
            bkLib.addEvent(this,type,fn);
            return this;    
        },
        
        setContent : function(c) {
            this.innerHTML = c;
            return this;
        },
        
        pos : function() {
            var curleft = curtop = 0;
            var o = obj = this;
            if (obj.offsetParent) {
                do {
                    curleft += obj.offsetLeft;
                    curtop += obj.offsetTop;
                } while (obj = obj.offsetParent);
            }
            var b = (!window.opera) ? parseInt(this.getStyle('border-width') || this.style.border) || 0 : 0;
            return [curleft+b,curtop+b+this.offsetHeight];
        },
        
        noSelect : function() {
            bkLib.noSelect(this);
            return this;
        },
        
        parentTag : function(t) {
            var elm = this;
             do {
                if(elm && elm.nodeName && elm.nodeName.toUpperCase() == t) {
                    return elm;
                }
                elm = elm.parentNode;
            } while(elm);
            return false;
        },
        
        hasClass : function(cls) {
            return this.className.match(new RegExp('(\\s|^)nicEdit-'+cls+'(\\s|$)'));
        },
        
        addClass : function(cls) {
            if (!this.hasClass(cls)) { this.className += " nicEdit-"+cls };
            return this;
        },
        
        removeClass : function(cls) {
            if (this.hasClass(cls)) {
                this.className = this.className.replace(new RegExp('(\\s|^)nicEdit-'+cls+'(\\s|$)'),' ');
            }
            return this;
        },

        setStyle : function(st) {
            var elmStyle = this.style;
            for(var itm in st) {
                switch(itm) {
                    case 'float':
                        elmStyle['cssFloat'] = elmStyle['styleFloat'] = st[itm];
                        break;
                    case 'opacity':
                        elmStyle.opacity = st[itm];
                        elmStyle.filter = "alpha(opacity=" + Math.round(st[itm]*100) + ")"; 
                        break;
                    case 'className':
                        this.className = st[itm];
                        break;
                    default:
                        //if(document.compatMode || itm != "cursor") { // Nasty Workaround for IE 5.5
                            elmStyle[itm] = st[itm];
                        //}     
                }
            }
            return this;
        },
        
        getStyle : function( cssRule, d ) {
            var doc = (!d) ? document.defaultView : d; 
            if(this.nodeType == 1)
            return (doc && doc.getComputedStyle) ? doc.getComputedStyle( this, null ).getPropertyValue(cssRule) : this.currentStyle[ bkLib.camelize(cssRule) ];
        },
        
        remove : function() {
            this.parentNode.removeChild(this);
            return this;    
        },
        
        setAttributes : function(at) {
            for(var itm in at) {
                this[itm] = at[itm];
            }
            return this;
        }
    });

    var bkLib = {
        isMSIE : (navigator.appVersion.indexOf("MSIE") != -1),
        
        addEvent : function(obj, type, fn) {
            (obj.addEventListener) ? obj.addEventListener( type, fn, false ) : obj.attachEvent("on"+type, fn);  
        },
        
        toArray : function(iterable) {
            var length = iterable.length, results = new Array(length);
            while (length--) { results[length] = iterable[length] };
            return results; 
        },
        
        noSelect : function(element) {
            if(element.setAttribute && element.nodeName.toLowerCase() != 'input' && element.nodeName.toLowerCase() != 'textarea') {
                element.setAttribute('unselectable','on');
            }
            for(var i=0;i<element.childNodes.length;i++) {
                bkLib.noSelect(element.childNodes[i]);
            }
        },
        camelize : function(s) {
            return s.replace(/\-(.)/g, function(m, l){return l.toUpperCase()});
        },
        inArray : function(arr,item) {
            return (bkLib.search(arr,item) != null);
        },
        search : function(arr,itm) {
            for(var i=0; i < arr.length; i++) {
                if(arr[i] == itm)
                    return i;
            }
            return null;    
        },
        cancelEvent : function(e) {
            e = e || window.event;
            if(e.preventDefault && e.stopPropagation) {
                e.preventDefault();
                e.stopPropagation();
            }
            return false;
        },
        domLoad : [],
        domLoaded : function() {
            if (arguments.callee.done) return;
            arguments.callee.done = true;
            for (i = 0;i < bkLib.domLoad.length;i++) bkLib.domLoad[i]();
        },
        onDomLoaded : function(fireThis) {
            this.domLoad.push(fireThis);
            if (document.addEventListener) {
                document.addEventListener("DOMContentLoaded", bkLib.domLoaded, null);
            } else if(bkLib.isMSIE) {
                document.write("<style>.nicEdit-main p { margin: 0; }</style><scr"+"ipt id=__ie_onload defer " + ((location.protocol == "https:") ? "src='javascript:void(0)'" : "src=//0") + "><\/scr"+"ipt>");
                $BK("__ie_onload").onreadystatechange = function() {
                    if (this.readyState == "complete"){bkLib.domLoaded();}
                };
            }
            window.onload = bkLib.domLoaded;
        }
    };

    function $BK(elm) {
        if(typeof(elm) == "string") {
            elm = document.getElementById(elm);
        }
        return (elm && !elm.appendTo) ? bkExtend(elm,bkElement.prototype) : elm;
    }

    var bkEvent = {
        addEvent : function(evType, evFunc) {
            if(evFunc) {
                this.eventList = this.eventList || {};
                this.eventList[evType] = this.eventList[evType] || [];
                this.eventList[evType].push(evFunc);
            }
            return this;
        },
        fireEvent : function() {
            var args = bkLib.toArray(arguments), evType = args.shift();
            if(this.eventList && this.eventList[evType]) {
                for(var i=0;i<this.eventList[evType].length;i++) {
                    this.eventList[evType][i].apply(this,args);
                }
            }
        }   
    };

    function __(s) {
        return s;
    }

    Function.prototype.closure = function() {
      var __method = this, args = bkLib.toArray(arguments), obj = args.shift();
      return function() { if(typeof(bkLib) != 'undefined') { return __method.apply(obj,args.concat(bkLib.toArray(arguments))); } };
    }
        
    Function.prototype.closureListener = function() {
        var __method = this, args = bkLib.toArray(arguments), object = args.shift(); 
        return function(e) { 
        e = e || window.event;
        if(e.target) { var target = e.target; } else { var target =  e.srcElement };
            return __method.apply(object, [e,target].concat(args) ); 
        };
    }       


    /* START CONFIG */

    var nicEditorConfig = bkClass.extend({
        buttons : {
            'bold' : {name : __('Click to Bold'), command : 'Bold', tags : ['B','STRONG'], css : {'font-weight' : 'bold'}, key : 'b'},
            'italic' : {name : __('Click to Italic'), command : 'Italic', tags : ['EM','I'], css : {'font-style' : 'italic'}, key : 'i'},
            'underline' : {name : __('Click to Underline'), command : 'Underline', tags : ['U'], css : {'text-decoration' : 'underline'}, key : 'u'},
            'left' : {name : __('Left Align'), command : 'justifyleft', noActive : true},
            'center' : {name : __('Center Align'), command : 'justifycenter', noActive : true},
            'right' : {name : __('Right Align'), command : 'justifyright', noActive : true},
            'justify' : {name : __('Justify Align'), command : 'justifyfull', noActive : true},
            'ol' : {name : __('Insert Ordered List'), command : 'insertorderedlist', tags : ['OL']},
            'ul' :  {name : __('Insert Unordered List'), command : 'insertunorderedlist', tags : ['UL']},
            'subscript' : {name : __('Click to Subscript'), command : 'subscript', tags : ['SUB']},
            'superscript' : {name : __('Click to Superscript'), command : 'superscript', tags : ['SUP']},
            'strikethrough' : {name : __('Click to Strike Through'), command : 'strikeThrough', css : {'text-decoration' : 'line-through'}},
            'removeformat' : {name : __('Remove Formatting'), command : 'removeformat', noActive : true},
            'indent' : {name : __('Indent Text'), command : 'indent', noActive : true},
            'outdent' : {name : __('Remove Indent'), command : 'outdent', noActive : true},
            'hr' : {name : __('Horizontal Rule'), command : 'insertHorizontalRule', noActive : true}
        },
        iconsPath : '../nicEditorIcons.gif',
        buttonList : ['save','bold','italic','underline','left','center','right','justify','ol','ul','fontSize','fontFamily','fontFormat','indent','outdent','image','upload','link','unlink','forecolor','bgcolor'],
        iconList : {"bgcolor":1,"forecolor":2,"bold":3,"center":4,"hr":5,"indent":6,"italic":7,"justify":8,"left":9,"ol":10,"outdent":11,"removeformat":12,"right":13,"save":14,"strikethrough":15,"subscript":16,"superscript":17,"ul":18,"underline":19,"close":20,"arrow":21}
        
    });
    /* END CONFIG */


    var nicEditors = {
        nicPlugins : [],
        editors : [],
        
        registerPlugin : function(plugin,options) {
            this.nicPlugins.push({p : plugin, o : options});
        },

        allTextAreas : function(nicOptions) {
            var textareas = document.getElementsByTagName("textarea");
            for(var i=0;i<textareas.length;i++) {
                nicEditors.editors.push(new nicEditor(nicOptions).panelInstance(textareas[i]));
            }
            return nicEditors.editors;
        },
        
        findEditor : function(e) {
            var editors = nicEditors.editors;
            for(var i=0;i<editors.length;i++) {
                if(editors[i].instanceById(e)) {
                    return editors[i].instanceById(e);
                }
            }
        }
    };


    var nicEditor = bkClass.extend({
        construct : function(o) {
            this.options = new nicEditorConfig();
            bkExtend(this.options,o);
            this.nicInstances = new Array();
            this.loadedPlugins = new Array();
            
            var plugins = nicEditors.nicPlugins;
            for(var i=0;i<plugins.length;i++) {
                this.loadedPlugins.push(new plugins[i].p(this,plugins[i].o));
            }
            nicEditors.editors.push(this);
            bkLib.addEvent(document.body,'mousedown', this.selectCheck.closureListener(this) );
        },
        
        panelInstance : function(e,o) {
            e = this.checkReplace($BK(e));
            var panelElm = new bkElement('DIV').setStyle({width : (parseInt(e.getStyle('width')) || e.clientWidth)+'px'}).appendBefore(e);
            this.setPanel(panelElm);
            return this.addInstance(e,o);   
        },

        checkReplace : function(e) {
            var r = nicEditors.findEditor(e);
            if(r) {
                r.removeInstance(e);
                r.removePanel();
            }
            return e;
        },

        addInstance : function(e,o) {
            e = this.checkReplace($BK(e));
            if( e.contentEditable || !!window.opera ) {
                var newInstance = new nicEditorInstance(e,o,this);
            } else {
                var newInstance = new nicEditorIFrameInstance(e,o,this);
            }
            this.nicInstances.push(newInstance);
            return this;
        },
        
        removeInstance : function(e) {
            e = $BK(e);
            var instances = this.nicInstances;
            for(var i=0;i<instances.length;i++) {   
                if(instances[i].e == e) {
                    instances[i].remove();
                    this.nicInstances.splice(i,1);
                }
            }
        },

        removePanel : function(e) {
            if(this.nicPanel) {
                this.nicPanel.remove();
                this.nicPanel = null;
            }   
        },

        instanceById : function(e) {
            e = $BK(e);
            var instances = this.nicInstances;
            for(var i=0;i<instances.length;i++) {
                if(instances[i].e == e) {
                    return instances[i];
                }
            }   
        },

        setPanel : function(e) {
            this.nicPanel = new nicEditorPanel($BK(e),this.options,this);
            this.fireEvent('panel',this.nicPanel);
            return this;
        },
        
        nicCommand : function(cmd,args) {   
            if(this.selectedInstance) {
                this.selectedInstance.nicCommand(cmd,args);
            }
        },
        
        getIcon : function(iconName,options) {
            var icon = this.options.iconList[iconName];
            var file = (options.iconFiles) ? options.iconFiles[iconName] : '';
            return {backgroundImage : "url('"+((icon) ? this.options.iconsPath : file)+"')", backgroundPosition : ((icon) ? ((icon-1)*-18) : 0)+'px 0px'};  
        },
            
        selectCheck : function(e,t) {
            var found = false;
            do{
                if(t.className && t.className.indexOf('nicEdit') != -1) {
                    return false;
                }
            } while(t = t.parentNode);
            this.fireEvent('blur',this.selectedInstance,t);
            this.lastSelectedInstance = this.selectedInstance;
            this.selectedInstance = null;
            return false;
        }
        
    });
    nicEditor = nicEditor.extend(bkEvent);

     
    var nicEditorInstance = bkClass.extend({
        isSelected : false,
        
        construct : function(e,options,nicEditor) {
            this.ne = nicEditor;
            this.elm = this.e = e;
            this.options = options || {};
            
            newX = parseInt(e.getStyle('width')) || e.clientWidth;
            newY = parseInt(e.getStyle('height')) || e.clientHeight;
            this.initialHeight = newY-8;
            
            var isTextarea = (e.nodeName.toLowerCase() == "textarea");
            if(isTextarea || this.options.hasPanel) {
                var ie7s = (bkLib.isMSIE && !((typeof document.body.style.maxHeight != "undefined") && document.compatMode == "CSS1Compat"))
                var s = {width: newX+'px', border : '1px solid #ccc', borderTop : 0, overflowY : 'auto', overflowX: 'hidden' };
                s[(ie7s) ? 'height' : 'maxHeight'] = (this.ne.options.maxHeight) ? this.ne.options.maxHeight+'px' : null;
                this.editorContain = new bkElement('DIV').setStyle(s).appendBefore(e);
                var editorElm = new bkElement('DIV').setStyle({width : (newX-8)+'px', margin: '4px', minHeight : newY+'px'}).addClass('main').appendTo(this.editorContain);

                e.setStyle({display : 'none'});
                    
                editorElm.innerHTML = e.innerHTML;      
                if(isTextarea) {
                    editorElm.setContent(e.value);
                    this.copyElm = e;
                    var f = e.parentTag('FORM');
                    if(f) { bkLib.addEvent( f, 'submit', this.saveContent.closure(this)); }
                }
                editorElm.setStyle((ie7s) ? {height : newY+'px'} : {overflow: 'hidden'});
                this.elm = editorElm;   
            }
            this.ne.addEvent('blur',this.blur.closure(this));

            this.init();
            this.blur();
        },
        
        init : function() {
            this.elm.setAttribute('contentEditable','true');    
            if(this.getContent() == "") {
                this.setContent('<br />');
            }
            this.instanceDoc = document.defaultView;
            this.elm.addEvent('mousedown',this.selected.closureListener(this)).addEvent('keypress',this.keyDown.closureListener(this)).addEvent('focus',this.selected.closure(this)).addEvent('blur',this.blur.closure(this)).addEvent('keyup',this.selected.closure(this));
            this.ne.fireEvent('add',this);
        },
        
        remove : function() {
            this.saveContent();
            if(this.copyElm || this.options.hasPanel) {
                this.editorContain.remove();
                this.e.setStyle({'display' : 'block'});
                this.ne.removePanel();
            }
            this.disable();
            this.ne.fireEvent('remove',this);
        },
        
        disable : function() {
            this.elm.setAttribute('contentEditable','false');
        },
        
        getSel : function() {
            return (window.getSelection) ? window.getSelection() : document.selection;  
        },
        
        getRng : function() {
            var s = this.getSel();
            if(!s || s.rangeCount === 0) { return; }
            return (s.rangeCount > 0) ? s.getRangeAt(0) : s.createRange();
        },
        
        selRng : function(rng,s) {
            if(window.getSelection) {
                s.removeAllRanges();
                s.addRange(rng);
            } else {
                rng.select();
            }
        },
        
        selElm : function() {
            var r = this.getRng();
            if(!r) { return; }
            if(r.startContainer) {
                var contain = r.startContainer;
                if(r.cloneContents().childNodes.length == 1) {
                    for(var i=0;i<contain.childNodes.length;i++) {
                        var rng = contain.childNodes[i].ownerDocument.createRange();
                        rng.selectNode(contain.childNodes[i]);                  
                        if(r.compareBoundaryPoints(Range.START_TO_START,rng) != 1 && 
                            r.compareBoundaryPoints(Range.END_TO_END,rng) != -1) {
                            return $BK(contain.childNodes[i]);
                        }
                    }
                }
                return $BK(contain);
            } else {
                return $BK((this.getSel().type == "Control") ? r.item(0) : r.parentElement());
            }
        },
        
        saveRng : function() {
            this.savedRange = this.getRng();
            this.savedSel = this.getSel();
        },
        
        restoreRng : function() {
            if(this.savedRange) {
                this.selRng(this.savedRange,this.savedSel);
            }
        },
        
        keyDown : function(e,t) {
            if(e.ctrlKey) {
                this.ne.fireEvent('key',this,e);
            }
        },
        
        selected : function(e,t) {
            if(!t && !(t = this.selElm)) { t = this.selElm(); }
            if(!e.ctrlKey) {
                var selInstance = this.ne.selectedInstance;
                if(selInstance != this) {
                    if(selInstance) {
                        this.ne.fireEvent('blur',selInstance,t);
                    }
                    this.ne.selectedInstance = this;    
                    this.ne.fireEvent('focus',selInstance,t);
                }
                this.ne.fireEvent('selected',selInstance,t);
                this.isFocused = true;
                this.elm.addClass('selected');
            }
            return false;
        },
        
        blur : function() {
            this.isFocused = false;
            this.elm.removeClass('selected');
        },
        
        saveContent : function() {
            if(this.copyElm || this.options.hasPanel) {
                this.ne.fireEvent('save',this);
                (this.copyElm) ? this.copyElm.value = this.getContent() : this.e.innerHTML = this.getContent();
            }   
        },
        
        getElm : function() {
            return this.elm;
        },
        
        getContent : function() {
            this.content = this.getElm().innerHTML;
            this.ne.fireEvent('get',this);
            return this.content;
        },
        
        setContent : function(e) {
            this.content = e;
            this.ne.fireEvent('set',this);
            this.elm.innerHTML = this.content;  
        },
        
        nicCommand : function(cmd,args) {
            document.execCommand(cmd,false,args);
        }       
    });

    var nicEditorIFrameInstance = nicEditorInstance.extend({
        savedStyles : [],
        
        init : function() { 
            var c = this.elm.innerHTML.replace(/^\s+|\s+$/g, '');
            this.elm.innerHTML = '';
            (!c) ? c = "<br />" : c;
            this.initialContent = c;
            
            this.elmFrame = new bkElement('iframe').setAttributes({'src' : 'javascript:;', 'frameBorder' : 0, 'allowTransparency' : 'true', 'scrolling' : 'no'}).setStyle({height: '100px', width: '100%'}).addClass('frame').appendTo(this.elm);

            if(this.copyElm) { this.elmFrame.setStyle({width : (this.elm.offsetWidth-4)+'px'}); }
            
            var styleList = ['font-size','font-family','font-weight','color'];
            for(itm in styleList) {
                this.savedStyles[bkLib.camelize(itm)] = this.elm.getStyle(itm);
            }
            
            setTimeout(this.initFrame.closure(this),50);
        },
        
        disable : function() {
            this.elm.innerHTML = this.getContent();
        },
        
        initFrame : function() {
            var fd = $BK(this.elmFrame.contentWindow.document);
            fd.designMode = "on";       
            fd.open();
            var css = this.ne.options.externalCSS;
            fd.write('<html><head>'+((css) ? '<link href="'+css+'" rel="stylesheet" type="text/css" />' : '')+'</head><body id="nicEditContent" style="margin: 0 !important; background-color: transparent !important;">'+this.initialContent+'</body></html>');
            fd.close();
            this.frameDoc = fd;

            this.frameWin = $BK(this.elmFrame.contentWindow);
            this.frameContent = $BK(this.frameWin.document.body).setStyle(this.savedStyles);
            this.instanceDoc = this.frameWin.document.defaultView;
            
            this.heightUpdate();
            this.frameDoc.addEvent('mousedown', this.selected.closureListener(this)).addEvent('keyup',this.heightUpdate.closureListener(this)).addEvent('keydown',this.keyDown.closureListener(this)).addEvent('keyup',this.selected.closure(this));
            this.ne.fireEvent('add',this);
        },
        
        getElm : function() {
            return this.frameContent;
        },
        
        setContent : function(c) {
            this.content = c;
            this.ne.fireEvent('set',this);
            this.frameContent.innerHTML = this.content; 
            this.heightUpdate();
        },
        
        getSel : function() {
            return (this.frameWin) ? this.frameWin.getSelection() : this.frameDoc.selection;
        },
        
        heightUpdate : function() { 
            this.elmFrame.style.height = Math.max(this.frameContent.offsetHeight,this.initialHeight)+'px';
        },
        
        nicCommand : function(cmd,args) {
            this.frameDoc.execCommand(cmd,false,args);
            setTimeout(this.heightUpdate.closure(this),100);
        }

        
    });
    var nicEditorPanel = bkClass.extend({
        construct : function(e,options,nicEditor) {
            this.elm = e;
            this.options = options;
            this.ne = nicEditor;
            this.panelButtons = new Array();
            this.buttonList = bkExtend([],this.ne.options.buttonList);
            
            this.panelContain = new bkElement('DIV').setStyle({overflow : 'hidden', width : '100%', border : '1px solid #cccccc', backgroundColor : '#efefef'}).addClass('panelContain');
            this.panelElm = new bkElement('DIV').setStyle({margin : '2px', marginTop : '0px', zoom : 1, overflow : 'hidden'}).addClass('panel').appendTo(this.panelContain);
            this.panelContain.appendTo(e);

            var opt = this.ne.options;
            var buttons = opt.buttons;
            for(button in buttons) {
                    this.addButton(button,opt,true);
            }
            this.reorder();
            e.noSelect();
        },
        
        addButton : function(buttonName,options,noOrder) {
            var button = options.buttons[buttonName];
            var type = (button['type']) ? eval('(typeof('+button['type']+') == "undefined") ? null : '+button['type']+';') : nicEditorButton;
            var hasButton = bkLib.inArray(this.buttonList,buttonName);
            if(type && (hasButton || this.ne.options.fullPanel)) {
                this.panelButtons.push(new type(this.panelElm,buttonName,options,this.ne));
                if(!hasButton) {    
                    this.buttonList.push(buttonName);
                }
            }
        },
        
        findButton : function(itm) {
            for(var i=0;i<this.panelButtons.length;i++) {
                if(this.panelButtons[i].name == itm)
                    return this.panelButtons[i];
            }   
        },
        
        reorder : function() {
            var bl = this.buttonList;
            for(var i=0;i<bl.length;i++) {
                var button = this.findButton(bl[i]);
                if(button) {
                    this.panelElm.appendChild(button.margin);
                }
            }   
        },
        
        remove : function() {
            this.elm.remove();
        }
    });
    var nicEditorButton = bkClass.extend({
        
        construct : function(e,buttonName,options,nicEditor) {
            this.options = options.buttons[buttonName];
            this.name = buttonName;
            this.ne = nicEditor;
            this.elm = e;

            this.margin = new bkElement('DIV').setStyle({'float' : 'left', marginTop : '2px'}).appendTo(e);
            this.contain = new bkElement('DIV').setStyle({width : '20px', height : '20px'}).addClass('buttonContain').appendTo(this.margin);
            this.border = new bkElement('DIV').setStyle({backgroundColor : '#efefef', border : '1px solid #efefef'}).appendTo(this.contain);
            this.button = new bkElement('DIV').setStyle({width : '18px', height : '18px', overflow : 'hidden', zoom : 1, cursor : 'pointer'}).addClass('button').setStyle(this.ne.getIcon(buttonName,options)).appendTo(this.border);
            this.button.addEvent('mouseover', this.hoverOn.closure(this)).addEvent('mouseout',this.hoverOff.closure(this)).addEvent('mousedown',this.mouseClick.closure(this)).noSelect();
            
            if(!window.opera) {
                this.button.onmousedown = this.button.onclick = bkLib.cancelEvent;
            }
            
            nicEditor.addEvent('selected', this.enable.closure(this)).addEvent('blur', this.disable.closure(this)).addEvent('key',this.key.closure(this));
            
            this.disable();
            this.init();
        },
        
        init : function() {  },
        
        hide : function() {
            this.contain.setStyle({display : 'none'});
        },
        
        updateState : function() {
            if(this.isDisabled) { this.setBg(); }
            else if(this.isHover) { this.setBg('hover'); }
            else if(this.isActive) { this.setBg('active'); }
            else { this.setBg(); }
        },
        
        setBg : function(state) {
            switch(state) {
                case 'hover':
                    var stateStyle = {border : '1px solid #666', backgroundColor : '#ddd'};
                    break;
                case 'active':
                    var stateStyle = {border : '1px solid #666', backgroundColor : '#ccc'};
                    break;
                default:
                    var stateStyle = {border : '1px solid #efefef', backgroundColor : '#efefef'};   
            }
            this.border.setStyle(stateStyle).addClass('button-'+state);
        },
        
        checkNodes : function(e) {
            var elm = e;    
            do {
                if(this.options.tags && bkLib.inArray(this.options.tags,elm.nodeName)) {
                    this.activate();
                    return true;
                }
            } while(elm = elm.parentNode && elm.className != "nicEdit");
            elm = $BK(e);
            while(elm.nodeType == 3) {
                elm = $BK(elm.parentNode);
            }
            if(this.options.css) {
                for(itm in this.options.css) {
                    if(elm.getStyle(itm,this.ne.selectedInstance.instanceDoc) == this.options.css[itm]) {
                        this.activate();
                        return true;
                    }
                }
            }
            this.deactivate();
            return false;
        },
        
        activate : function() {
            if(!this.isDisabled) {
                this.isActive = true;
                this.updateState(); 
                this.ne.fireEvent('buttonActivate',this);
            }
        },
        
        deactivate : function() {
            this.isActive = false;
            this.updateState(); 
            if(!this.isDisabled) {
                this.ne.fireEvent('buttonDeactivate',this);
            }
        },
        
        enable : function(ins,t) {
            this.isDisabled = false;
            this.contain.setStyle({'opacity' : 1}).addClass('buttonEnabled');
            this.updateState();
            this.checkNodes(t);
        },
        
        disable : function(ins,t) {     
            this.isDisabled = true;
            this.contain.setStyle({'opacity' : 0.6}).removeClass('buttonEnabled');
            this.updateState(); 
        },
        
        toggleActive : function() {
            (this.isActive) ? this.deactivate() : this.activate();  
        },
        
        hoverOn : function() {
            if(!this.isDisabled) {
                this.isHover = true;
                this.updateState();
                this.ne.fireEvent("buttonOver",this);
            }
        }, 
        
        hoverOff : function() {
            this.isHover = false;
            this.updateState();
            this.ne.fireEvent("buttonOut",this);
        },
        
        mouseClick : function() {
            if(this.options.command) {
                this.ne.nicCommand(this.options.command,this.options.commandArgs);
                if(!this.options.noActive) {
                    this.toggleActive();
                }
            }
            this.ne.fireEvent("buttonClick",this);
        },
        
        key : function(nicInstance,e) {
            if(this.options.key && e.ctrlKey && String.fromCharCode(e.keyCode || e.charCode).toLowerCase() == this.options.key) {
                this.mouseClick();
                if(e.preventDefault) e.preventDefault();
            }
        }
        
    });

     
    var nicPlugin = bkClass.extend({
        
        construct : function(nicEditor,options) {
            this.options = options;
            this.ne = nicEditor;
            this.ne.addEvent('panel',this.loadPanel.closure(this));
            
            this.init();
        },

        loadPanel : function(np) {
            var buttons = this.options.buttons;
            for(var button in buttons) {
                np.addButton(button,this.options);
            }
            np.reorder();
        },

        init : function() {  }
    });



     
     /* START CONFIG */
    var nicPaneOptions = { };
    /* END CONFIG */

    var nicEditorPane = bkClass.extend({
        construct : function(elm,nicEditor,options,openButton) {
            this.ne = nicEditor;
            this.elm = elm;
            this.pos = elm.pos();
            
            this.contain = new bkElement('div').setStyle({zIndex : '99999', overflow : 'hidden', position : 'absolute', left : this.pos[0]+'px', top : this.pos[1]+'px'})
            this.pane = new bkElement('div').setStyle({fontSize : '12px', border : '1px solid #ccc', 'overflow': 'hidden', padding : '4px', textAlign: 'left', backgroundColor : '#ffffc9'}).addClass('pane').setStyle(options).appendTo(this.contain);
            
            if(openButton && !openButton.options.noClose) {
                this.close = new bkElement('div').setStyle({'float' : 'right', height: '16px', width : '16px', cursor : 'pointer'}).setStyle(this.ne.getIcon('close',nicPaneOptions)).addEvent('mousedown',openButton.removePane.closure(this)).appendTo(this.pane);
            }
            
            this.contain.noSelect().appendTo(document.body);
            
            this.position();
            this.init();    
        },
        
        init : function() { },
        
        position : function() {
            if(this.ne.nicPanel) {
                var panelElm = this.ne.nicPanel.elm;    
                var panelPos = panelElm.pos();
                var newLeft = panelPos[0]+parseInt(panelElm.getStyle('width'))-(parseInt(this.pane.getStyle('width'))+8);
                if(newLeft < this.pos[0]) {
                    this.contain.setStyle({left : newLeft+'px'});
                }
            }
        },
        
        toggle : function() {
            this.isVisible = !this.isVisible;
            this.contain.setStyle({display : ((this.isVisible) ? 'block' : 'none')});
        },
        
        remove : function() {
            if(this.contain) {
                this.contain.remove();
                this.contain = null;
            }
        },
        
        append : function(c) {
            c.appendTo(this.pane);
        },
        
        setContent : function(c) {
            this.pane.setContent(c);
        }
        
    });


     
    var nicEditorAdvancedButton = nicEditorButton.extend({
        
        init : function() {
            this.ne.addEvent('selected',this.removePane.closure(this)).addEvent('blur',this.removePane.closure(this));  
        },
        
        mouseClick : function() {
            if(!this.isDisabled) {
                if(this.pane && this.pane.pane) {
                    this.removePane();
                } else {
                    this.pane = new nicEditorPane(this.contain,this.ne,{width : (this.width || '270px'), backgroundColor : '#fff'},this);
                    this.addPane();
                    this.ne.selectedInstance.saveRng();
                }
            }
        },
        
        addForm : function(f,elm) {
            this.form = new bkElement('form').addEvent('submit',this.submit.closureListener(this));
            this.pane.append(this.form);
            this.inputs = {};
            
            for(itm in f) {
                var field = f[itm];
                var val = '';
                if(elm) {
                    val = elm.getAttribute(itm);
                }
                if(!val) {
                    val = field['value'] || '';
                }
                var type = f[itm].type;
                
                if(type == 'title') {
                        new bkElement('div').setContent(field.txt).setStyle({fontSize : '14px', fontWeight: 'bold', padding : '0px', margin : '2px 0'}).appendTo(this.form);
                } else {
                    var contain = new bkElement('div').setStyle({overflow : 'hidden', clear : 'both'}).appendTo(this.form);
                    if(field.txt) {
                        new bkElement('label').setAttributes({'for' : itm}).setContent(field.txt).setStyle({margin : '2px 4px', fontSize : '13px', width: '50px', lineHeight : '20px', textAlign : 'right', 'float' : 'left'}).appendTo(contain);
                    }
                    
                    switch(type) {
                        case 'text':
                            this.inputs[itm] = new bkElement('input').setAttributes({id : itm, 'value' : val, 'type' : 'text'}).setStyle({margin : '2px 0', fontSize : '13px', 'float' : 'left', height : '20px', border : '1px solid #ccc', overflow : 'hidden'}).setStyle(field.style).appendTo(contain);
                            break;
                        case 'select':
                            this.inputs[itm] = new bkElement('select').setAttributes({id : itm}).setStyle({border : '1px solid #ccc', 'float' : 'left', margin : '2px 0'}).appendTo(contain);
                            for(opt in field.options) {
                                var o = new bkElement('option').setAttributes({value : opt, selected : (opt == val) ? 'selected' : ''}).setContent(field.options[opt]).appendTo(this.inputs[itm]);
                            }
                            break;
                        case 'content':
                            this.inputs[itm] = new bkElement('textarea').setAttributes({id : itm}).setStyle({border : '1px solid #ccc', 'float' : 'left'}).setStyle(field.style).appendTo(contain);
                            this.inputs[itm].value = val;
                    }   
                }
            }
            new bkElement('input').setAttributes({'type' : 'submit'}).setStyle({backgroundColor : '#efefef',border : '1px solid #ccc', margin : '3px 0', 'float' : 'left', 'clear' : 'both'}).appendTo(this.form);
            this.form.onsubmit = bkLib.cancelEvent; 
        },
        
        submit : function() { },
        
        findElm : function(tag,attr,val) {
            var list = this.ne.selectedInstance.getElm().getElementsByTagName(tag);
            for(var i=0;i<list.length;i++) {
                if(list[i].getAttribute(attr) == val) {
                    return $BK(list[i]);
                }
            }
        },
        
        removePane : function() {
            if(this.pane) {
                this.pane.remove();
                this.pane = null;
                this.ne.selectedInstance.restoreRng();
            }   
        }   
    });


     
     /* START CONFIG */
    var nicSelectOptions = {
        buttons : {
            'fontSize' : {name : __('Select Font Size'), type : 'nicEditorFontSizeSelect', command : 'fontsize'},
            'fontFamily' : {name : __('Select Font Family'), type : 'nicEditorFontFamilySelect', command : 'fontname'},
            'fontFormat' : {name : __('Select Font Format'), type : 'nicEditorFontFormatSelect', command : 'formatBlock'}
        }
    };
    /* END CONFIG */
    var nicEditorSelect = bkClass.extend({
        
        construct : function(e,buttonName,options,nicEditor) {
            this.options = options.buttons[buttonName];
            this.elm = e;
            this.ne = nicEditor;
            this.name = buttonName;
            this.selOptions = new Array();
            
            this.margin = new bkElement('div').setStyle({'float' : 'left', margin : '2px 1px 0 1px'}).appendTo(this.elm);
            this.contain = new bkElement('div').setStyle({width: '90px', height : '20px', cursor : 'pointer', overflow: 'hidden'}).addClass('selectContain').addEvent('click',this.toggle.closure(this)).appendTo(this.margin);
            this.items = new bkElement('div').setStyle({overflow : 'hidden', zoom : 1, border: '1px solid #ccc', paddingLeft : '3px', backgroundColor : '#fff'}).appendTo(this.contain);
            this.control = new bkElement('div').setStyle({overflow : 'hidden', 'float' : 'right', height: '18px', width : '16px'}).addClass('selectControl').setStyle(this.ne.getIcon('arrow',options)).appendTo(this.items);
            this.txt = new bkElement('div').setStyle({overflow : 'hidden', 'float' : 'left', width : '66px', height : '14px', marginTop : '1px', fontFamily : 'sans-serif', textAlign : 'center', fontSize : '12px'}).addClass('selectTxt').appendTo(this.items);
            
            if(!window.opera) {
                this.contain.onmousedown = this.control.onmousedown = this.txt.onmousedown = bkLib.cancelEvent;
            }
            
            this.margin.noSelect();
            
            this.ne.addEvent('selected', this.enable.closure(this)).addEvent('blur', this.disable.closure(this));
            
            this.disable();
            this.init();
        },
        
        disable : function() {
            this.isDisabled = true;
            this.close();
            this.contain.setStyle({opacity : 0.6});
        },
        
        enable : function(t) {
            this.isDisabled = false;
            this.close();
            this.contain.setStyle({opacity : 1});
        },
        
        setDisplay : function(txt) {
            this.txt.setContent(txt);
        },
        
        toggle : function() {
            if(!this.isDisabled) {
                (this.pane) ? this.close() : this.open();
            }
        },
        
        open : function() {
            this.pane = new nicEditorPane(this.items,this.ne,{width : '88px', padding: '0px', borderTop : 0, borderLeft : '1px solid #ccc', borderRight : '1px solid #ccc', borderBottom : '0px', backgroundColor : '#fff'});
            
            for(var i=0;i<this.selOptions.length;i++) {
                var opt = this.selOptions[i];
                var itmContain = new bkElement('div').setStyle({overflow : 'hidden', borderBottom : '1px solid #ccc', width: '88px', textAlign : 'left', overflow : 'hidden', cursor : 'pointer'});
                var itm = new bkElement('div').setStyle({padding : '0px 4px'}).setContent(opt[1]).appendTo(itmContain).noSelect();
                itm.addEvent('click',this.update.closure(this,opt[0])).addEvent('mouseover',this.over.closure(this,itm)).addEvent('mouseout',this.out.closure(this,itm)).setAttributes('id',opt[0]);
                this.pane.append(itmContain);
                if(!window.opera) {
                    itm.onmousedown = bkLib.cancelEvent;
                }
            }
        },
        
        close : function() {
            if(this.pane) {
                this.pane = this.pane.remove();
            }   
        },
        
        over : function(opt) {
            opt.setStyle({backgroundColor : '#ccc'});           
        },
        
        out : function(opt) {
            opt.setStyle({backgroundColor : '#fff'});
        },
        
        
        add : function(k,v) {
            this.selOptions.push(new Array(k,v));   
        },
        
        update : function(elm) {
            this.ne.nicCommand(this.options.command,elm);
            this.close();   
        }
    });

    var nicEditorFontSizeSelect = nicEditorSelect.extend({
        sel : {1 : '1&nbsp;(8pt)', 2 : '2&nbsp;(10pt)', 3 : '3&nbsp;(12pt)', 4 : '4&nbsp;(14pt)', 5 : '5&nbsp;(18pt)', 6 : '6&nbsp;(24pt)'},
        init : function() {
            this.setDisplay('Font&nbsp;Size...');
            for(itm in this.sel) {
                this.add(itm,'<font size="'+itm+'">'+this.sel[itm]+'</font>');
            }       
        }
    });

    var nicEditorFontFamilySelect = nicEditorSelect.extend({
        sel : {'arial' : 'Arial','comic sans ms' : 'Comic Sans','courier new' : 'Courier New','georgia' : 'Georgia', 'helvetica' : 'Helvetica', 'impact' : 'Impact', 'times new roman' : 'Times', 'trebuchet ms' : 'Trebuchet', 'verdana' : 'Verdana'},
        
        init : function() {
            this.setDisplay('Font&nbsp;Family...');
            for(itm in this.sel) {
                this.add(itm,'<font face="'+itm+'">'+this.sel[itm]+'</font>');
            }
        }
    });

    var nicEditorFontFormatSelect = nicEditorSelect.extend({
            sel : {'p' : 'Paragraph', 'pre' : 'Pre', 'h6' : 'Heading&nbsp;6', 'h5' : 'Heading&nbsp;5', 'h4' : 'Heading&nbsp;4', 'h3' : 'Heading&nbsp;3', 'h2' : 'Heading&nbsp;2', 'h1' : 'Heading&nbsp;1'},
            
        init : function() {
            this.setDisplay('Font&nbsp;Format...');
            for(itm in this.sel) {
                var tag = itm.toUpperCase();
                this.add('<'+tag+'>','<'+itm+' style="padding: 0px; margin: 0px;">'+this.sel[itm]+'</'+tag+'>');
            }
        }
    });

    nicEditors.registerPlugin(nicPlugin,nicSelectOptions);



    /* START CONFIG */
    var nicColorOptions = {
        buttons : {
            'forecolor' : {name : __('Change Text Color'), type : 'nicEditorColorButton', noClose : true},
            'bgcolor' : {name : __('Change Background Color'), type : 'nicEditorBgColorButton', noClose : true}
        }
    };
    /* END CONFIG */

    var nicEditorColorButton = nicEditorAdvancedButton.extend({ 
        addPane : function() {
                var colorList = {0 : '00',1 : '33',2 : '66',3 :'99',4 : 'CC',5 : 'FF'};
                var colorItems = new bkElement('DIV').setStyle({width: '270px'});
                
                for(var r in colorList) {
                    for(var b in colorList) {
                        for(var g in colorList) {
                            var colorCode = '#'+colorList[r]+colorList[g]+colorList[b];
                            
                            var colorSquare = new bkElement('DIV').setStyle({'cursor' : 'pointer', 'height' : '15px', 'float' : 'left'}).appendTo(colorItems);
                            var colorBorder = new bkElement('DIV').setStyle({border: '2px solid '+colorCode}).appendTo(colorSquare);
                            var colorInner = new bkElement('DIV').setStyle({backgroundColor : colorCode, overflow : 'hidden', width : '11px', height : '11px'}).addEvent('click',this.colorSelect.closure(this,colorCode)).addEvent('mouseover',this.on.closure(this,colorBorder)).addEvent('mouseout',this.off.closure(this,colorBorder,colorCode)).appendTo(colorBorder);
                            
                            if(!window.opera) {
                                colorSquare.onmousedown = colorInner.onmousedown = bkLib.cancelEvent;
                            }

                        }   
                    }   
                }
                this.pane.append(colorItems.noSelect());    
        },
        
        colorSelect : function(c) {
            this.ne.nicCommand('foreColor',c);
            this.removePane();
        },
        
        on : function(colorBorder) {
            colorBorder.setStyle({border : '2px solid #000'});
        },
        
        off : function(colorBorder,colorCode) {
            colorBorder.setStyle({border : '2px solid '+colorCode});        
        }
    });

    var nicEditorBgColorButton = nicEditorColorButton.extend({
        colorSelect : function(c) {
            this.ne.nicCommand('hiliteColor',c);
            this.removePane();
        }   
    });

    nicEditors.registerPlugin(nicPlugin,nicColorOptions);
    /*
    * nicEditor ends here
    */

    //JQuery 1.4.2 Starts Here

    function freshJQuery() {
        //start of Jquery 1.4.2
        (function (window, undefined) {
            var jQuery = function (selector, context) {
                return new jQuery.fn.init(selector, context);
            }, _jQuery = window.jQuery,
                _$ = window.$,
                document = window.document,
                rootjQuery, quickExpr = /^[^<]*(<[\w\W]+>)[^>]*$|^#([\w-]+)$/,
                isSimple = /^.[^:#\[\.,]*$/,
                rnotwhite = /\S/,
                rtrim = /^(\s|\u00A0)+|(\s|\u00A0)+$/g,
                rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
                userAgent = navigator.userAgent,
                browserMatch, readyBound = false,
                readyList = [],
                DOMContentLoaded, toString = Object.prototype.toString,
                hasOwnProperty = Object.prototype.hasOwnProperty,
                push = Array.prototype.push,
                slice = Array.prototype.slice,
                indexOf = Array.prototype.indexOf;
            jQuery.fn = jQuery.prototype = {
                init: function (selector, context) {
                    var match, elem, ret, doc;
                    if (!selector) {
                        return this;
                    }
                    if (selector.nodeType) {
                        this.context = this[0] = selector;
                        this.length = 1;
                        return this;
                    }
                    if (selector === "body" && !context) {
                        this.context = document;
                        this[0] = document.body;
                        this.selector = "body";
                        this.length = 1;
                        return this;
                    }
                    if (typeof selector === "string") {
                        match = quickExpr.exec(selector);
                        if (match && (match[1] || !context)) {
                            if (match[1]) {
                                doc = (context ? context.ownerDocument || context : document);
                                ret = rsingleTag.exec(selector);
                                if (ret) {
                                    if (jQuery.isPlainObject(context)) {
                                        selector = [document.createElement(ret[1])];
                                        jQuery.fn.attr.call(selector, context, true);
                                    } else {
                                        selector = [doc.createElement(ret[1])];
                                    }
                                } else {
                                    ret = buildFragment([match[1]], [doc]);
                                    selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes;
                                }
                                return jQuery.merge(this, selector);
                            } else {
                                elem = document.getElementById(match[2]);
                                if (elem) {
                                    if (elem.id !== match[2]) {
                                        return rootjQuery.find(selector);
                                    }
                                    this.length = 1;
                                    this[0] = elem;
                                }
                                this.context = document;
                                this.selector = selector;
                                return this;
                            }
                        } else if (!context && /^\w+$/.test(selector)) {
                            this.selector = selector;
                            this.context = document;
                            selector = document.getElementsByTagName(selector);
                            return jQuery.merge(this, selector);
                        } else if (!context || context.jquery) {
                            return (context || rootjQuery).find(selector);
                        } else {
                            return jQuery(context).find(selector);
                        }
                    } else if (jQuery.isFunction(selector)) {
                        return rootjQuery.ready(selector);
                    }
                    if (selector.selector !== undefined) {
                        this.selector = selector.selector;
                        this.context = selector.context;
                    }
                    return jQuery.makeArray(selector, this);
                },
                selector: "",
                jquery: "1.4.2",
                length: 0,
                size: function () {
                    return this.length;
                },
                toArray: function () {
                    return slice.call(this, 0);
                },
                get: function (num) {
                    return num == null ? this.toArray() : (num < 0 ? this.slice(num)[0] : this[num]);
                },
                pushStack: function (elems, name, selector) {
                    var ret = jQuery();
                    if (jQuery.isArray(elems)) {
                        push.apply(ret, elems);
                    } else {
                        jQuery.merge(ret, elems);
                    }
                    ret.prevObject = this;
                    ret.context = this.context;
                    if (name === "find") {
                        ret.selector = this.selector + (this.selector ? " " : "") + selector;
                    } else if (name) {
                        ret.selector = this.selector + "." + name + "(" + selector + ")";
                    }
                    return ret;
                },
                each: function (callback, args) {
                    return jQuery.each(this, callback, args);
                },
                ready: function (fn) {
                    jQuery.bindReady();
                    if (jQuery.isReady) {
                        fn.call(document, jQuery);
                    } else if (readyList) {
                        readyList.push(fn);
                    }
                    return this;
                },
                eq: function (i) {
                    return i === -1 ? this.slice(i) : this.slice(i, +i + 1);
                },
                first: function () {
                    return this.eq(0);
                },
                last: function () {
                    return this.eq(-1);
                },
                slice: function () {
                    return this.pushStack(slice.apply(this, arguments), "slice", slice.call(arguments).join(","));
                },
                map: function (callback) {
                    return this.pushStack(jQuery.map(this, function (elem, i) {
                        return callback.call(elem, i, elem);
                    }));
                },
                end: function () {
                    return this.prevObject || jQuery(null);
                },
                push: push,
                sort: [].sort,
                splice: [].splice
            };
            jQuery.fn.init.prototype = jQuery.fn;
            jQuery.extend = jQuery.fn.extend = function () {
                var target = arguments[0] || {}, i = 1,
                    length = arguments.length,
                    deep = false,
                    options, name, src, copy;
                if (typeof target === "boolean") {
                    deep = target;
                    target = arguments[1] || {};
                    i = 2;
                }
                if (typeof target !== "object" && !jQuery.isFunction(target)) {
                    target = {};
                }
                if (length === i) {
                    target = this;
                    --i;
                }
                for (; i < length; i++) {
                    if ((options = arguments[i]) != null) {
                        for (name in options) {
                            src = target[name];
                            copy = options[name];
                            if (target === copy) {
                                continue;
                            }
                            if (deep && copy && (jQuery.isPlainObject(copy) || jQuery.isArray(copy))) {
                                var clone = src && (jQuery.isPlainObject(src) || jQuery.isArray(src)) ? src : jQuery.isArray(copy) ? [] : {};
                                target[name] = jQuery.extend(deep, clone, copy);
                            } else if (copy !== undefined) {
                                target[name] = copy;
                            }
                        }
                    }
                }
                return target;
            };
            jQuery.extend({
                noConflict: function (deep) {
                    window.$ = _$;
                    if (deep) {
                        window.jQuery = _jQuery;
                    }
                    return jQuery;
                },
                isReady: false,
                ready: function () {
                    if (!jQuery.isReady) {
                        if (!document.body) {
                            return setTimeout(jQuery.ready, 13);
                        }
                        jQuery.isReady = true;
                        if (readyList) {
                            var fn, i = 0;
                            while ((fn = readyList[i++])) {
                                fn.call(document, jQuery);
                            }
                            readyList = null;
                        }
                        if (jQuery.fn.triggerHandler) {
                            jQuery(document).triggerHandler("ready");
                        }
                    }
                },
                bindReady: function () {
                    if (readyBound) {
                        return;
                    }
                    readyBound = true;
                    if (document.readyState === "complete") {
                        return jQuery.ready();
                    }
                    if (document.addEventListener) {
                        document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                        window.addEventListener("load", jQuery.ready, false);
                    } else if (document.attachEvent) {
                        document.attachEvent("onreadystatechange", DOMContentLoaded);
                        window.attachEvent("onload", jQuery.ready);
                        var toplevel = false;
                        try {
                            toplevel = window.frameElement == null;
                        } catch (e) {}
                        if (document.documentElement.doScroll && toplevel) {
                            doScrollCheck();
                        }
                    }
                },
                isFunction: function (obj) {
                    return toString.call(obj) === "[object Function]";
                },
                isArray: function (obj) {
                    return toString.call(obj) === "[object Array]";
                },
                isPlainObject: function (obj) {
                    if (!obj || toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval) {
                        return false;
                    }
                    if (obj.constructor && !hasOwnProperty.call(obj, "constructor") && !hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false;
                    }
                    var key;
                    for (key in obj) {}
                    return key === undefined || hasOwnProperty.call(obj, key);
                },
                isEmptyObject: function (obj) {
                    for (var name in obj) {
                        return false;
                    }
                    return true;
                },
                error: function (msg) {
                    throw msg;
                },
                parseJSON: function (data) {
                    if (typeof data !== "string" || !data) {
                        return null;
                    }
                    data = jQuery.trim(data);
                    if (/^[\],:{}\s]*$/.test(data.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                        return window.JSON && window.JSON.parse ? window.JSON.parse(data) : (new Function("return " + data))();
                    } else {
                        jQuery.error("Invalid JSON: " + data);
                    }
                },
                noop: function () {},
                globalEval: function (data) {
                    if (data && rnotwhite.test(data)) {
                        var head = document.getElementsByTagName("head")[0] || document.documentElement,
                            script = document.createElement("script");
                        script.type = "text/javascript";
                        if (jQuery.support.scriptEval) {
                            script.appendChild(document.createTextNode(data));
                        } else {
                            script.text = data;
                        }
                        head.insertBefore(script, head.firstChild);
                        head.removeChild(script);
                    }
                },
                nodeName: function (elem, name) {
                    return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
                },
                each: function (object, callback, args) {
                    var name, i = 0,
                        length = object.length,
                        isObj = length === undefined || jQuery.isFunction(object);
                    if (args) {
                        if (isObj) {
                            for (name in object) {
                                if (callback.apply(object[name], args) === false) {
                                    break;
                                }
                            }
                        } else {
                            for (; i < length;) {
                                if (callback.apply(object[i++], args) === false) {
                                    break;
                                }
                            }
                        }
                    } else {
                        if (isObj) {
                            for (name in object) {
                                if (callback.call(object[name], name, object[name]) === false) {
                                    break;
                                }
                            }
                        } else {
                            for (var value = object[0]; i < length && callback.call(value, i, value) !== false; value = object[++i]) {}
                        }
                    }
                    return object;
                },
                trim: function (text) {
                    return (text || "").replace(rtrim, "");
                },
                makeArray: function (array, results) {
                    var ret = results || [];
                    if (array != null) {
                        if (array.length == null || typeof array === "string" || jQuery.isFunction(array) || (typeof array !== "function" && array.setInterval)) {
                            push.call(ret, array);
                        } else {
                            jQuery.merge(ret, array);
                        }
                    }
                    return ret;
                },
                inArray: function (elem, array) {
                    if (array.indexOf) {
                        return array.indexOf(elem);
                    }
                    for (var i = 0, length = array.length; i < length; i++) {
                        if (array[i] === elem) {
                            return i;
                        }
                    }
                    return -1;
                },
                merge: function (first, second) {
                    var i = first.length,
                        j = 0;
                    if (typeof second.length === "number") {
                        for (var l = second.length; j < l; j++) {
                            first[i++] = second[j];
                        }
                    } else {
                        while (second[j] !== undefined) {
                            first[i++] = second[j++];
                        }
                    }
                    first.length = i;
                    return first;
                },
                grep: function (elems, callback, inv) {
                    var ret = [];
                    for (var i = 0, length = elems.length; i < length; i++) {
                        if (!inv !== !callback(elems[i], i)) {
                            ret.push(elems[i]);
                        }
                    }
                    return ret;
                },
                map: function (elems, callback, arg) {
                    var ret = [],
                        value;
                    for (var i = 0, length = elems.length; i < length; i++) {
                        value = callback(elems[i], i, arg);
                        if (value != null) {
                            ret[ret.length] = value;
                        }
                    }
                    return ret.concat.apply([], ret);
                },
                guid: 1,
                proxy: function (fn, proxy, thisObject) {
                    if (arguments.length === 2) {
                        if (typeof proxy === "string") {
                            thisObject = fn;
                            fn = thisObject[proxy];
                            proxy = undefined;
                        } else if (proxy && !jQuery.isFunction(proxy)) {
                            thisObject = proxy;
                            proxy = undefined;
                        }
                    }
                    if (!proxy && fn) {
                        proxy = function () {
                            return fn.apply(thisObject || this, arguments);
                        };
                    }
                    if (fn) {
                        proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
                    }
                    return proxy;
                },
                uaMatch: function (ua) {
                    ua = ua.toLowerCase();
                    var match = /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version)?[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || !/compatible/.test(ua) && /(mozilla)(?:.*? rv:([\w.]+))?/.exec(ua) || [];
                    return {
                        browser: match[1] || "",
                        version: match[2] || "0"
                    };
                },
                browser: {}
            });
            browserMatch = jQuery.uaMatch(userAgent);
            if (browserMatch.browser) {
                jQuery.browser[browserMatch.browser] = true;
                jQuery.browser.version = browserMatch.version;
            }
            if (jQuery.browser.webkit) {
                jQuery.browser.safari = true;
            }
            if (indexOf) {
                jQuery.inArray = function (elem, array) {
                    return indexOf.call(array, elem);
                };
            }
            rootjQuery = jQuery(document);
            if (document.addEventListener) {
                DOMContentLoaded = function () {
                    document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                    jQuery.ready();
                };
            } else if (document.attachEvent) {
                DOMContentLoaded = function () {
                    if (document.readyState === "complete") {
                        document.detachEvent("onreadystatechange", DOMContentLoaded);
                        jQuery.ready();
                    }
                };
            }

            function doScrollCheck() {
                if (jQuery.isReady) {
                    return;
                }
                try {
                    document.documentElement.doScroll("left");
                } catch (error) {
                    setTimeout(doScrollCheck, 1);
                    return;
                }
                jQuery.ready();
            }

            function evalScript(i, elem) {
                if (elem.src) {
                    jQuery.ajax({
                        url: elem.src,
                        async: false,
                        dataType: "script"
                    });
                } else {
                    jQuery.globalEval(elem.text || elem.textContent || elem.innerHTML || "");
                }
                if (elem.parentNode) {
                    elem.parentNode.removeChild(elem);
                }
            }

            function access(elems, key, value, exec, fn, pass) {
                var length = elems.length;
                if (typeof key === "object") {
                    for (var k in key) {
                        access(elems, k, key[k], exec, fn, value);
                    }
                    return elems;
                }
                if (value !== undefined) {
                    exec = !pass && exec && jQuery.isFunction(value);
                    for (var i = 0; i < length; i++) {
                        fn(elems[i], key, exec ? value.call(elems[i], i, fn(elems[i], key)) : value, pass);
                    }
                    return elems;
                }
                return length ? fn(elems[0], key) : undefined;
            }

            function now() {
                return (new Date).getTime();
            }
            (function () {
                jQuery.support = {};
                var root = document.documentElement,
                    script = document.createElement("script"),
                    div = document.createElement("div"),
                    id = "script" + now();
                div.style.display = "none";
                div.innerHTML = "   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";
                var all = div.getElementsByTagName("*"),
                    a = div.getElementsByTagName("a")[0];
                if (!all || !all.length || !a) {
                    return;
                }
                jQuery.support = {
                    leadingWhitespace: div.firstChild.nodeType === 3,
                    tbody: !div.getElementsByTagName("tbody").length,
                    htmlSerialize: !! div.getElementsByTagName("link").length,
                    style: /red/.test(a.getAttribute("style")),
                    hrefNormalized: a.getAttribute("href") === "/a",
                    opacity: /^0.55$/.test(a.style.opacity),
                    cssFloat: !! a.style.cssFloat,
                    checkOn: div.getElementsByTagName("input")[0].value === "on",
                    optSelected: document.createElement("select").appendChild(document.createElement("option")).selected,
                    parentNode: div.removeChild(div.appendChild(document.createElement("div"))).parentNode === null,
                    deleteExpando: true,
                    checkClone: false,
                    scriptEval: false,
                    noCloneEvent: true,
                    boxModel: null
                };
                script.type = "text/javascript";
                try {
                    script.appendChild(document.createTextNode("window." + id + "=1;"));
                } catch (e) {}
                root.insertBefore(script, root.firstChild);
                if (window[id]) {
                    jQuery.support.scriptEval = true;
                    delete window[id];
                }
                try {
                    delete script.test;
                } catch (e) {
                    jQuery.support.deleteExpando = false;
                }
                root.removeChild(script);
                if (div.attachEvent && div.fireEvent) {
                    div.attachEvent("onclick", function click() {
                        jQuery.support.noCloneEvent = false;
                        div.detachEvent("onclick", click);
                    });
                    div.cloneNode(true).fireEvent("onclick");
                }
                div = document.createElement("div");
                div.innerHTML = "<input type='radio' name='radiotest' checked='checked'/>";
                var fragment = document.createDocumentFragment();
                fragment.appendChild(div.firstChild);
                jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
                jQuery(function () {
                    var div = document.createElement("div");
                    div.style.width = div.style.paddingLeft = "1px";
                    document.body.appendChild(div);
                    jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;
                    document.body.removeChild(div).style.display = 'none';
                    div = null;
                });
                var eventSupported = function (eventName) {
                    var el = document.createElement("div");
                    eventName = "on" + eventName;
                    var isSupported = (eventName in el);
                    if (!isSupported) {
                        el.setAttribute(eventName, "return;");
                        isSupported = typeof el[eventName] === "function";
                    }
                    el = null;
                    return isSupported;
                };
                jQuery.support.submitBubbles = eventSupported("submit");
                jQuery.support.changeBubbles = eventSupported("change");
                root = script = div = all = a = null;
            })();
            jQuery.props = {
                "for": "htmlFor",
                "class": "className",
                readonly: "readOnly",
                maxlength: "maxLength",
                cellspacing: "cellSpacing",
                rowspan: "rowSpan",
                colspan: "colSpan",
                tabindex: "tabIndex",
                usemap: "useMap",
                frameborder: "frameBorder"
            };
            var expando = "jQuery" + now(),
                uuid = 0,
                windowData = {};
            jQuery.extend({
                cache: {},
                expando: expando,
                noData: {
                    "embed": true,
                    "object": true,
                    "applet": true
                },
                data: function (elem, name, data) {
                    if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                        return;
                    }
                    elem = elem == window ? windowData : elem;
                    var id = elem[expando],
                        cache = jQuery.cache,
                        thisCache;
                    if (!id && typeof name === "string" && data === undefined) {
                        return null;
                    }
                    if (!id) {
                        id = ++uuid;
                    }
                    if (typeof name === "object") {
                        elem[expando] = id;
                        thisCache = cache[id] = jQuery.extend(true, {}, name);
                    } else if (!cache[id]) {
                        elem[expando] = id;
                        cache[id] = {};
                    }
                    thisCache = cache[id];
                    if (data !== undefined) {
                        thisCache[name] = data;
                    }
                    return typeof name === "string" ? thisCache[name] : thisCache;
                },
                removeData: function (elem, name) {
                    if (elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) {
                        return;
                    }
                    elem = elem == window ? windowData : elem;
                    var id = elem[expando],
                        cache = jQuery.cache,
                        thisCache = cache[id];
                    if (name) {
                        if (thisCache) {
                            delete thisCache[name];
                            if (jQuery.isEmptyObject(thisCache)) {
                                jQuery.removeData(elem);
                            }
                        }
                    } else {
                        if (jQuery.support.deleteExpando) {
                            delete elem[jQuery.expando];
                        } else if (elem.removeAttribute) {
                            elem.removeAttribute(jQuery.expando);
                        }
                        delete cache[id];
                    }
                }
            });
            jQuery.fn.extend({
                data: function (key, value) {
                    if (typeof key === "undefined" && this.length) {
                        return jQuery.data(this[0]);
                    } else if (typeof key === "object") {
                        return this.each(function () {
                            jQuery.data(this, key);
                        });
                    }
                    var parts = key.split(".");
                    parts[1] = parts[1] ? "." + parts[1] : "";
                    if (value === undefined) {
                        var data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);
                        if (data === undefined && this.length) {
                            data = jQuery.data(this[0], key);
                        }
                        return data === undefined && parts[1] ? this.data(parts[0]) : data;
                    } else {
                        return this.trigger("setData" + parts[1] + "!", [parts[0], value]).each(function () {
                            jQuery.data(this, key, value);
                        });
                    }
                },
                removeData: function (key) {
                    return this.each(function () {
                        jQuery.removeData(this, key);
                    });
                }
            });
            jQuery.extend({
                queue: function (elem, type, data) {
                    if (!elem) {
                        return;
                    }
                    type = (type || "fx") + "queue";
                    var q = jQuery.data(elem, type);
                    if (!data) {
                        return q || [];
                    }
                    if (!q || jQuery.isArray(data)) {
                        q = jQuery.data(elem, type, jQuery.makeArray(data));
                    } else {
                        q.push(data);
                    }
                    return q;
                },
                dequeue: function (elem, type) {
                    type = type || "fx";
                    var queue = jQuery.queue(elem, type),
                        fn = queue.shift();
                    if (fn === "inprogress") {
                        fn = queue.shift();
                    }
                    if (fn) {
                        if (type === "fx") {
                            queue.unshift("inprogress");
                        }
                        fn.call(elem, function () {
                            jQuery.dequeue(elem, type);
                        });
                    }
                }
            });
            jQuery.fn.extend({
                queue: function (type, data) {
                    if (typeof type !== "string") {
                        data = type;
                        type = "fx";
                    }
                    if (data === undefined) {
                        return jQuery.queue(this[0], type);
                    }
                    return this.each(function (i, elem) {
                        var queue = jQuery.queue(this, type, data);
                        if (type === "fx" && queue[0] !== "inprogress") {
                            jQuery.dequeue(this, type);
                        }
                    });
                },
                dequeue: function (type) {
                    return this.each(function () {
                        jQuery.dequeue(this, type);
                    });
                },
                delay: function (time, type) {
                    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                    type = type || "fx";
                    return this.queue(type, function () {
                        var elem = this;
                        setTimeout(function () {
                            jQuery.dequeue(elem, type);
                        }, time);
                    });
                },
                clearQueue: function (type) {
                    return this.queue(type || "fx", []);
                }
            });
            var rclass = /[\n\t]/g,
                rspace = /\s+/,
                rreturn = /\r/g,
                rspecialurl = /href|src|style/,
                rtype = /(button|input)/i,
                rfocusable = /(button|input|object|select|textarea)/i,
                rclickable = /^(a|area)$/i,
                rradiocheck = /radio|checkbox/;
            jQuery.fn.extend({
                attr: function (name, value) {
                    return access(this, name, value, true, jQuery.attr);
                },
                removeAttr: function (name, fn) {
                    return this.each(function () {
                        jQuery.attr(this, name, "");
                        if (this.nodeType === 1) {
                            this.removeAttribute(name);
                        }
                    });
                },
                addClass: function (value) {
                    if (jQuery.isFunction(value)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            self.addClass(value.call(this, i, self.attr("class")));
                        });
                    }
                    if (value && typeof value === "string") {
                        var classNames = (value || "").split(rspace);
                        for (var i = 0, l = this.length; i < l; i++) {
                            var elem = this[i];
                            if (elem.nodeType === 1) {
                                if (!elem.className) {
                                    elem.className = value;
                                } else {
                                    var className = " " + elem.className + " ",
                                        setClass = elem.className;
                                    for (var c = 0, cl = classNames.length; c < cl; c++) {
                                        if (className.indexOf(" " + classNames[c] + " ") < 0) {
                                            setClass += " " + classNames[c];
                                        }
                                    }
                                    elem.className = jQuery.trim(setClass);
                                }
                            }
                        }
                    }
                    return this;
                },
                removeClass: function (value) {
                    if (jQuery.isFunction(value)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            self.removeClass(value.call(this, i, self.attr("class")));
                        });
                    }
                    if ((value && typeof value === "string") || value === undefined) {
                        var classNames = (value || "").split(rspace);
                        for (var i = 0, l = this.length; i < l; i++) {
                            var elem = this[i];
                            if (elem.nodeType === 1 && elem.className) {
                                if (value) {
                                    var className = (" " + elem.className + " ").replace(rclass, " ");
                                    for (var c = 0, cl = classNames.length; c < cl; c++) {
                                        className = className.replace(" " + classNames[c] + " ", " ");
                                    }
                                    elem.className = jQuery.trim(className);
                                } else {
                                    elem.className = "";
                                }
                            }
                        }
                    }
                    return this;
                },
                toggleClass: function (value, stateVal) {
                    var type = typeof value,
                        isBool = typeof stateVal === "boolean";
                    if (jQuery.isFunction(value)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            self.toggleClass(value.call(this, i, self.attr("class"), stateVal), stateVal);
                        });
                    }
                    return this.each(function () {
                        if (type === "string") {
                            var className, i = 0,
                                self = jQuery(this),
                                state = stateVal,
                                classNames = value.split(rspace);
                            while ((className = classNames[i++])) {
                                state = isBool ? state : !self.hasClass(className);
                                self[state ? "addClass" : "removeClass"](className);
                            }
                        } else if (type === "undefined" || type === "boolean") {
                            if (this.className) {
                                jQuery.data(this, "__className__", this.className);
                            }
                            this.className = this.className || value === false ? "" : jQuery.data(this, "__className__") || "";
                        }
                    });
                },
                hasClass: function (selector) {
                    var className = " " + selector + " ";
                    for (var i = 0, l = this.length; i < l; i++) {
                        if ((" " + this[i].className + " ").replace(rclass, " ").indexOf(className) > -1) {
                            return true;
                        }
                    }
                    return false;
                },
                val: function (value) {
                    if (value === undefined) {
                        var elem = this[0];
                        if (elem) {
                            if (jQuery.nodeName(elem, "option")) {
                                return (elem.attributes.value || {}).specified ? elem.value : elem.text;
                            }
                            if (jQuery.nodeName(elem, "select")) {
                                var index = elem.selectedIndex,
                                    values = [],
                                    options = elem.options,
                                    one = elem.type === "select-one";
                                if (index < 0) {
                                    return null;
                                }
                                for (var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++) {
                                    var option = options[i];
                                    if (option.selected) {
                                        value = jQuery(option).val();
                                        if (one) {
                                            return value;
                                        }
                                        values.push(value);
                                    }
                                }
                                return values;
                            }
                            if (rradiocheck.test(elem.type) && !jQuery.support.checkOn) {
                                return elem.getAttribute("value") === null ? "on" : elem.value;
                            }
                            return (elem.value || "").replace(rreturn, "");
                        }
                        return undefined;
                    }
                    var isFunction = jQuery.isFunction(value);
                    return this.each(function (i) {
                        var self = jQuery(this),
                            val = value;
                        if (this.nodeType !== 1) {
                            return;
                        }
                        if (isFunction) {
                            val = value.call(this, i, self.val());
                        }
                        if (typeof val === "number") {
                            val += "";
                        }
                        if (jQuery.isArray(val) && rradiocheck.test(this.type)) {
                            this.checked = jQuery.inArray(self.val(), val) >= 0;
                        } else if (jQuery.nodeName(this, "select")) {
                            var values = jQuery.makeArray(val);
                            jQuery("option", this).each(function () {
                                this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                            });
                            if (!values.length) {
                                this.selectedIndex = -1;
                            }
                        } else {
                            this.value = val;
                        }
                    });
                }
            });
            jQuery.extend({
                attrFn: {
                    val: true,
                    css: true,
                    html: true,
                    text: true,
                    data: true,
                    width: true,
                    height: true,
                    offset: true
                },
                attr: function (elem, name, value, pass) {
                    if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                        return undefined;
                    }
                    if (pass && name in jQuery.attrFn) {
                        return jQuery(elem)[name](value);
                    }
                    var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc(elem),
                        set = value !== undefined;
                    name = notxml && jQuery.props[name] || name;
                    if (elem.nodeType === 1) {
                        var special = rspecialurl.test(name);
                        if (name === "selected" && !jQuery.support.optSelected) {
                            var parent = elem.parentNode;
                            if (parent) {
                                parent.selectedIndex;
                                if (parent.parentNode) {
                                    parent.parentNode.selectedIndex;
                                }
                            }
                        }
                        if (name in elem && notxml && !special) {
                            if (set) {
                                if (name === "type" && rtype.test(elem.nodeName) && elem.parentNode) {
                                    jQuery.error("type property can't be changed");
                                }
                                elem[name] = value;
                            }
                            if (jQuery.nodeName(elem, "form") && elem.getAttributeNode(name)) {
                                return elem.getAttributeNode(name).nodeValue;
                            }
                            if (name === "tabIndex") {
                                var attributeNode = elem.getAttributeNode("tabIndex");
                                return attributeNode && attributeNode.specified ? attributeNode.value : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;
                            }
                            return elem[name];
                        }
                        if (!jQuery.support.style && notxml && name === "style") {
                            if (set) {
                                elem.style.cssText = "" + value;
                            }
                            return elem.style.cssText;
                        }
                        if (set) {
                            elem.setAttribute(name, "" + value);
                        }
                        var attr = !jQuery.support.hrefNormalized && notxml && special ? elem.getAttribute(name, 2) : elem.getAttribute(name);
                        return attr === null ? undefined : attr;
                    }
                    return jQuery.style(elem, name, value);
                }
            });
            var rnamespaces = /\.(.*)$/,
                fcleanup = function (nm) {
                    return nm.replace(/[^\w\s\.\|`]/g, function (ch) {
                        return "\\" + ch;
                    });
                };
            jQuery.event = {
                add: function (elem, types, handler, data) {
                    if (elem.nodeType === 3 || elem.nodeType === 8) {
                        return;
                    }
                    if (elem.setInterval && (elem !== window && !elem.frameElement)) {
                        elem = window;
                    }
                    var handleObjIn, handleObj;
                    if (handler.handler) {
                        handleObjIn = handler;
                        handler = handleObjIn.handler;
                    }
                    if (!handler.guid) {
                        handler.guid = jQuery.guid++;
                    }
                    var elemData = jQuery.data(elem);
                    if (!elemData) {
                        return;
                    }
                    var events = elemData.events = elemData.events || {}, eventHandle = elemData.handle,
                        eventHandle;
                    if (!eventHandle) {
                        elemData.handle = eventHandle = function () {
                            return typeof jQuery !== "undefined" && !jQuery.event.triggered ? jQuery.event.handle.apply(eventHandle.elem, arguments) : undefined;
                        };
                    }
                    eventHandle.elem = elem;
                    types = types.split(" ");
                    var type, i = 0,
                        namespaces;
                    while ((type = types[i++])) {
                        handleObj = handleObjIn ? jQuery.extend({}, handleObjIn) : {
                            handler: handler,
                            data: data
                        };
                        if (type.indexOf(".") > -1) {
                            namespaces = type.split(".");
                            type = namespaces.shift();
                            handleObj.namespace = namespaces.slice(0).sort().join(".");
                        } else {
                            namespaces = [];
                            handleObj.namespace = "";
                        }
                        handleObj.type = type;
                        handleObj.guid = handler.guid;
                        var handlers = events[type],
                            special = jQuery.event.special[type] || {};
                        if (!handlers) {
                            handlers = events[type] = [];
                            if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false);
                                } else if (elem.attachEvent) {
                                    elem.attachEvent("on" + type, eventHandle);
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid;
                            }
                        }
                        handlers.push(handleObj);
                        jQuery.event.global[type] = true;
                    }
                    elem = null;
                },
                global: {},
                remove: function (elem, types, handler, pos) {
                    if (elem.nodeType === 3 || elem.nodeType === 8) {
                        return;
                    }
                    var ret, type, fn, i = 0,
                        all, namespaces, namespace, special, eventType, handleObj, origType, elemData = jQuery.data(elem),
                        events = elemData && elemData.events;
                    if (!elemData || !events) {
                        return;
                    }
                    if (types && types.type) {
                        handler = types.handler;
                        types = types.type;
                    }
                    if (!types || typeof types === "string" && types.charAt(0) === ".") {
                        types = types || "";
                        for (type in events) {
                            jQuery.event.remove(elem, type + types);
                        }
                        return;
                    }
                    types = types.split(" ");
                    while ((type = types[i++])) {
                        origType = type;
                        handleObj = null;
                        all = type.indexOf(".") < 0;
                        namespaces = [];
                        if (!all) {
                            namespaces = type.split(".");
                            type = namespaces.shift();
                            namespace = new RegExp("(^|\\.)" +
                                jQuery.map(namespaces.slice(0).sort(), fcleanup).join("\\.(?:.*\\.)?") + "(\\.|$)")
                        }
                        eventType = events[type];
                        if (!eventType) {
                            continue;
                        }
                        if (!handler) {
                            for (var j = 0; j < eventType.length; j++) {
                                handleObj = eventType[j];
                                if (all || namespace.test(handleObj.namespace)) {
                                    jQuery.event.remove(elem, origType, handleObj.handler, j);
                                    eventType.splice(j--, 1);
                                }
                            }
                            continue;
                        }
                        special = jQuery.event.special[type] || {};
                        for (var j = pos || 0; j < eventType.length; j++) {
                            handleObj = eventType[j];
                            if (handler.guid === handleObj.guid) {
                                if (all || namespace.test(handleObj.namespace)) {
                                    if (pos == null) {
                                        eventType.splice(j--, 1);
                                    }
                                    if (special.remove) {
                                        special.remove.call(elem, handleObj);
                                    }
                                }
                                if (pos != null) {
                                    break;
                                }
                            }
                        }
                        if (eventType.length === 0 || pos != null && eventType.length === 1) {
                            if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                                removeEvent(elem, type, elemData.handle);
                            }
                            ret = null;
                            delete events[type];
                        }
                    }
                    if (jQuery.isEmptyObject(events)) {
                        var handle = elemData.handle;
                        if (handle) {
                            handle.elem = null;
                        }
                        delete elemData.events;
                        delete elemData.handle;
                        if (jQuery.isEmptyObject(elemData)) {
                            jQuery.removeData(elem);
                        }
                    }
                },
                trigger: function (event, data, elem) {
                    var type = event.type || event,
                        bubbling = arguments[3];
                    if (!bubbling) {
                        event = typeof event === "object" ? event[expando] ? event : jQuery.extend(jQuery.Event(type), event) : jQuery.Event(type);
                        if (type.indexOf("!") >= 0) {
                            event.type = type = type.slice(0, -1);
                            event.exclusive = true;
                        }
                        if (!elem) {
                            event.stopPropagation();
                            if (jQuery.event.global[type]) {
                                jQuery.each(jQuery.cache, function () {
                                    if (this.events && this.events[type]) {
                                        jQuery.event.trigger(event, data, this.handle.elem);
                                    }
                                });
                            }
                        }
                        if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                            return undefined;
                        }
                        event.result = undefined;
                        event.target = elem;
                        data = jQuery.makeArray(data);
                        data.unshift(event);
                    }
                    event.currentTarget = elem;
                    var handle = jQuery.data(elem, "handle");
                    if (handle) {
                        handle.apply(elem, data);
                    }
                    var parent = elem.parentNode || elem.ownerDocument;
                    try {
                        if (!(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()])) {
                            if (elem["on" + type] && elem["on" + type].apply(elem, data) === false) {
                                event.result = false;
                            }
                        }
                    } catch (e) {}
                    if (!event.isPropagationStopped() && parent) {
                        jQuery.event.trigger(event, data, parent, true);
                    } else if (!event.isDefaultPrevented()) {
                        var target = event.target,
                            old, isClick = jQuery.nodeName(target, "a") && type === "click",
                            special = jQuery.event.special[type] || {};
                        if ((!special._default || special._default.call(elem, event) === false) && !isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()])) {
                            try {
                                if (target[type]) {
                                    old = target["on" + type];
                                    if (old) {
                                        target["on" + type] = null;
                                    }
                                    jQuery.event.triggered = true;
                                    target[type]();
                                }
                            } catch (e) {}
                            if (old) {
                                target["on" + type] = old;
                            }
                            jQuery.event.triggered = false;
                        }
                    }
                },
                handle: function (event) {
                    var all, handlers, namespaces, namespace, events;
                    event = arguments[0] = jQuery.event.fix(event || window.event);
                    event.currentTarget = this;
                    all = event.type.indexOf(".") < 0 && !event.exclusive;
                    if (!all) {
                        namespaces = event.type.split(".");
                        event.type = namespaces.shift();
                        namespace = new RegExp("(^|\\.)" + namespaces.slice(0).sort().join("\\.(?:.*\\.)?") + "(\\.|$)");
                    }
                    var events = jQuery.data(this, "events"),
                        handlers = events[event.type];
                    if (events && handlers) {
                        handlers = handlers.slice(0);
                        for (var j = 0, l = handlers.length; j < l; j++) {
                            var handleObj = handlers[j];
                            if (all || namespace.test(handleObj.namespace)) {
                                event.handler = handleObj.handler;
                                event.data = handleObj.data;
                                event.handleObj = handleObj;
                                var ret = handleObj.handler.apply(this, arguments);
                                if (ret !== undefined) {
                                    event.result = ret;
                                    if (ret === false) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }
                                }
                                if (event.isImmediatePropagationStopped()) {
                                    break;
                                }
                            }
                        }
                    }
                    return event.result;
                },
                props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),
                fix: function (event) {
                    if (event[expando]) {
                        return event;
                    }
                    var originalEvent = event;
                    event = jQuery.Event(originalEvent);
                    for (var i = this.props.length, prop; i;) {
                        prop = this.props[--i];
                        event[prop] = originalEvent[prop];
                    }
                    if (!event.target) {
                        event.target = event.srcElement || document;
                    }
                    if (event.target.nodeType === 3) {
                        event.target = event.target.parentNode;
                    }
                    if (!event.relatedTarget && event.fromElement) {
                        event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
                    }
                    if (event.pageX == null && event.clientX != null) {
                        var doc = document.documentElement,
                            body = document.body;
                        event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                        event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                    }
                    if (!event.which && ((event.charCode || event.charCode === 0) ? event.charCode : event.keyCode)) {
                        event.which = event.charCode || event.keyCode;
                    }
                    if (!event.metaKey && event.ctrlKey) {
                        event.metaKey = event.ctrlKey;
                    }
                    if (!event.which && event.button !== undefined) {
                        event.which = (event.button & 1 ? 1 : (event.button & 2 ? 3 : (event.button & 4 ? 2 : 0)));
                    }
                    return event;
                },
                guid: 1E8,
                proxy: jQuery.proxy,
                special: {
                    ready: {
                        setup: jQuery.bindReady,
                        teardown: jQuery.noop
                    },
                    live: {
                        add: function (handleObj) {
                            jQuery.event.add(this, handleObj.origType, jQuery.extend({}, handleObj, {
                                handler: liveHandler
                            }));
                        },
                        remove: function (handleObj) {
                            var remove = true,
                                type = handleObj.origType.replace(rnamespaces, "");
                            jQuery.each(jQuery.data(this, "events").live || [], function () {
                                if (type === this.origType.replace(rnamespaces, "")) {
                                    remove = false;
                                    return false;
                                }
                            });
                            if (remove) {
                                jQuery.event.remove(this, handleObj.origType, liveHandler);
                            }
                        }
                    },
                    beforeunload: {
                        setup: function (data, namespaces, eventHandle) {
                            if (this.setInterval) {
                                this.onbeforeunload = eventHandle;
                            }
                            return false;
                        },
                        teardown: function (namespaces, eventHandle) {
                            if (this.onbeforeunload === eventHandle) {
                                this.onbeforeunload = null;
                            }
                        }
                    }
                }
            };
            var removeEvent = document.removeEventListener ? function (elem, type, handle) {
                    elem.removeEventListener(type, handle, false);
                } : function (elem, type, handle) {
                    elem.detachEvent("on" + type, handle);
                };
            jQuery.Event = function (src) {
                if (!this.preventDefault) {
                    return new jQuery.Event(src);
                }
                if (src && src.type) {
                    this.originalEvent = src;
                    this.type = src.type;
                } else {
                    this.type = src;
                }
                this.timeStamp = now();
                this[expando] = true;
            };

            function returnFalse() {
                return false;
            }

            function returnTrue() {
                return true;
            }
            jQuery.Event.prototype = {
                preventDefault: function () {
                    this.isDefaultPrevented = returnTrue;
                    var e = this.originalEvent;
                    if (!e) {
                        return;
                    }
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                    e.returnValue = false;
                },
                stopPropagation: function () {
                    this.isPropagationStopped = returnTrue;
                    var e = this.originalEvent;
                    if (!e) {
                        return;
                    }
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    }
                    e.cancelBubble = true;
                },
                stopImmediatePropagation: function () {
                    this.isImmediatePropagationStopped = returnTrue;
                    this.stopPropagation();
                },
                isDefaultPrevented: returnFalse,
                isPropagationStopped: returnFalse,
                isImmediatePropagationStopped: returnFalse
            };
            var withinElement = function (event) {
                var parent = event.relatedTarget;
                try {
                    while (parent && parent !== this) {
                        parent = parent.parentNode;
                    }
                    if (parent !== this) {
                        event.type = event.data;
                        jQuery.event.handle.apply(this, arguments);
                    }
                } catch (e) {}
            }, delegate = function (event) {
                    event.type = event.data;
                    jQuery.event.handle.apply(this, arguments);
                };
            jQuery.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            }, function (orig, fix) {
                jQuery.event.special[orig] = {
                    setup: function (data) {
                        jQuery.event.add(this, fix, data && data.selector ? delegate : withinElement, orig);
                    },
                    teardown: function (data) {
                        jQuery.event.remove(this, fix, data && data.selector ? delegate : withinElement);
                    }
                };
            });
            if (!jQuery.support.submitBubbles) {
                jQuery.event.special.submit = {
                    setup: function (data, namespaces) {
                        if (this.nodeName.toLowerCase() !== "form") {
                            jQuery.event.add(this, "click.specialSubmit", function (e) {
                                var elem = e.target,
                                    type = elem.type;
                                if ((type === "submit" || type === "image") && jQuery(elem).closest("form").length) {
                                    return trigger("submit", this, arguments);
                                }
                            });
                            jQuery.event.add(this, "keypress.specialSubmit", function (e) {
                                var elem = e.target,
                                    type = elem.type;
                                if ((type === "text" || type === "password") && jQuery(elem).closest("form").length && e.keyCode === 13) {
                                    return trigger("submit", this, arguments);
                                }
                            });
                        } else {
                            return false;
                        }
                    },
                    teardown: function (namespaces) {
                        jQuery.event.remove(this, ".specialSubmit");
                    }
                };
            }
            if (!jQuery.support.changeBubbles) {
                var formElems = /textarea|input|select/i,
                    changeFilters, getVal = function (elem) {
                        var type = elem.type,
                            val = elem.value;
                        if (type === "radio" || type === "checkbox") {
                            val = elem.checked;
                        } else if (type === "select-multiple") {
                            val = elem.selectedIndex > -1 ? jQuery.map(elem.options, function (elem) {
                                return elem.selected;
                            }).join("-") : "";
                        } else if (elem.nodeName.toLowerCase() === "select") {
                            val = elem.selectedIndex;
                        }
                        return val;
                    }, testChange = function testChange(e) {
                        var elem = e.target,
                            data, val;
                        if (!formElems.test(elem.nodeName) || elem.readOnly) {
                            return;
                        }
                        data = jQuery.data(elem, "_change_data");
                        val = getVal(elem);
                        if (e.type !== "focusout" || elem.type !== "radio") {
                            jQuery.data(elem, "_change_data", val);
                        }
                        if (data === undefined || val === data) {
                            return;
                        }
                        if (data != null || val) {
                            e.type = "change";
                            return jQuery.event.trigger(e, arguments[1], elem);
                        }
                    };
                jQuery.event.special.change = {
                    filters: {
                        focusout: testChange,
                        click: function (e) {
                            var elem = e.target,
                                type = elem.type;
                            if (type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select") {
                                return testChange.call(this, e);
                            }
                        },
                        keydown: function (e) {
                            var elem = e.target,
                                type = elem.type;
                            if ((e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") || (e.keyCode === 32 && (type === "checkbox" || type === "radio")) || type === "select-multiple") {
                                return testChange.call(this, e);
                            }
                        },
                        beforeactivate: function (e) {
                            var elem = e.target;
                            jQuery.data(elem, "_change_data", getVal(elem));
                        }
                    },
                    setup: function (data, namespaces) {
                        if (this.type === "file") {
                            return false;
                        }
                        for (var type in changeFilters) {
                            jQuery.event.add(this, type + ".specialChange", changeFilters[type]);
                        }
                        return formElems.test(this.nodeName);
                    },
                    teardown: function (namespaces) {
                        jQuery.event.remove(this, ".specialChange");
                        return formElems.test(this.nodeName);
                    }
                };
                changeFilters = jQuery.event.special.change.filters;
            }

            function trigger(type, elem, args) {
                args[0].type = type;
                return jQuery.event.handle.apply(elem, args);
            }
            if (document.addEventListener) {
                jQuery.each({
                    focus: "focusin",
                    blur: "focusout"
                }, function (orig, fix) {
                    jQuery.event.special[fix] = {
                        setup: function () {
                            this.addEventListener(orig, handler, true);
                        },
                        teardown: function () {
                            this.removeEventListener(orig, handler, true);
                        }
                    };

                    function handler(e) {
                        e = jQuery.event.fix(e);
                        e.type = fix;
                        return jQuery.event.handle.call(this, e);
                    }
                });
            }
            jQuery.each(["bind", "one"], function (i, name) {
                jQuery.fn[name] = function (type, data, fn) {
                    if (typeof type === "object") {
                        for (var key in type) {
                            this[name](key, data, type[key], fn);
                        }
                        return this;
                    }
                    if (jQuery.isFunction(data)) {
                        fn = data;
                        data = undefined;
                    }
                    var handler = name === "one" ? jQuery.proxy(fn, function (event) {
                        jQuery(this).unbind(event, handler);
                        return fn.apply(this, arguments);
                    }) : fn;
                    if (type === "unload" && name !== "one") {
                        this.one(type, data, fn);
                    } else {
                        for (var i = 0, l = this.length; i < l; i++) {
                            jQuery.event.add(this[i], type, handler, data);
                        }
                    }
                    return this;
                };
            });
            jQuery.fn.extend({
                unbind: function (type, fn) {
                    if (typeof type === "object" && !type.preventDefault) {
                        for (var key in type) {
                            this.unbind(key, type[key]);
                        }
                    } else {
                        for (var i = 0, l = this.length; i < l; i++) {
                            jQuery.event.remove(this[i], type, fn);
                        }
                    }
                    return this;
                },
                delegate: function (selector, types, data, fn) {
                    return this.live(types, data, fn, selector);
                },
                undelegate: function (selector, types, fn) {
                    if (arguments.length === 0) {
                        return this.unbind("live");
                    } else {
                        return this.die(types, null, fn, selector);
                    }
                },
                trigger: function (type, data) {
                    return this.each(function () {
                        jQuery.event.trigger(type, data, this);
                    });
                },
                triggerHandler: function (type, data) {
                    if (this[0]) {
                        var event = jQuery.Event(type);
                        event.preventDefault();
                        event.stopPropagation();
                        jQuery.event.trigger(event, data, this[0]);
                        return event.result;
                    }
                },
                toggle: function (fn) {
                    var args = arguments,
                        i = 1;
                    while (i < args.length) {
                        jQuery.proxy(fn, args[i++]);
                    }
                    return this.click(jQuery.proxy(fn, function (event) {
                        var lastToggle = (jQuery.data(this, "lastToggle" + fn.guid) || 0) % i;
                        jQuery.data(this, "lastToggle" + fn.guid, lastToggle + 1);
                        event.preventDefault();
                        return args[lastToggle].apply(this, arguments) || false;
                    }));
                },
                hover: function (fnOver, fnOut) {
                    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
                }
            });
            var liveMap = {
                focus: "focusin",
                blur: "focusout",
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            };
            jQuery.each(["live", "die"], function (i, name) {
                jQuery.fn[name] = function (types, data, fn, origSelector) {
                    var type, i = 0,
                        match, namespaces, preType, selector = origSelector || this.selector,
                        context = origSelector ? this : jQuery(this.context);
                    if (jQuery.isFunction(data)) {
                        fn = data;
                        data = undefined;
                    }
                    types = (types || "").split(" ");
                    while ((type = types[i++]) != null) {
                        match = rnamespaces.exec(type);
                        namespaces = "";
                        if (match) {
                            namespaces = match[0];
                            type = type.replace(rnamespaces, "");
                        }
                        if (type === "hover") {
                            types.push("mouseenter" + namespaces, "mouseleave" + namespaces);
                            continue;
                        }
                        preType = type;
                        if (type === "focus" || type === "blur") {
                            types.push(liveMap[type] + namespaces);
                            type = type + namespaces;
                        } else {
                            type = (liveMap[type] || type) + namespaces;
                        }
                        if (name === "live") {
                            context.each(function () {
                                jQuery.event.add(this, liveConvert(type, selector), {
                                    data: data,
                                    selector: selector,
                                    handler: fn,
                                    origType: type,
                                    origHandler: fn,
                                    preType: preType
                                });
                            });
                        } else {
                            context.unbind(liveConvert(type, selector), fn);
                        }
                    }
                    return this;
                }
            });

            function liveHandler(event) {
                var stop, elems = [],
                    selectors = [],
                    args = arguments,
                    related, match, handleObj, elem, j, i, l, data, events = jQuery.data(this, "events");
                if (event.liveFired === this || !events || !events.live || event.button && event.type === "click") {
                    return;
                }
                event.liveFired = this;
                var live = events.live.slice(0);
                for (j = 0; j < live.length; j++) {
                    handleObj = live[j];
                    if (handleObj.origType.replace(rnamespaces, "") === event.type) {
                        selectors.push(handleObj.selector);
                    } else {
                        live.splice(j--, 1);
                    }
                }
                match = jQuery(event.target).closest(selectors, event.currentTarget);
                for (i = 0, l = match.length; i < l; i++) {
                    for (j = 0; j < live.length; j++) {
                        handleObj = live[j];
                        if (match[i].selector === handleObj.selector) {
                            elem = match[i].elem;
                            related = null;
                            if (handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave") {
                                related = jQuery(event.relatedTarget).closest(handleObj.selector)[0];
                            }
                            if (!related || related !== elem) {
                                elems.push({
                                    elem: elem,
                                    handleObj: handleObj
                                });
                            }
                        }
                    }
                }
                for (i = 0, l = elems.length; i < l; i++) {
                    match = elems[i];
                    event.currentTarget = match.elem;
                    event.data = match.handleObj.data;
                    event.handleObj = match.handleObj;
                    if (match.handleObj.origHandler.apply(match.elem, args) === false) {
                        stop = false;
                        break;
                    }
                }
                return stop;
            }

            function liveConvert(type, selector) {
                return "live." + (type && type !== "*" ? type + "." : "") + selector.replace(/\./g, "`").replace(/ /g, "&");
            }
            jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error").split(" "), function (i, name) {
                jQuery.fn[name] = function (fn) {
                    return fn ? this.bind(name, fn) : this.trigger(name);
                };
                if (jQuery.attrFn) {
                    jQuery.attrFn[name] = true;
                }
            });
            if (window.attachEvent && !window.addEventListener) {
                window.attachEvent("onunload", function () {
                    for (var id in jQuery.cache) {
                        if (jQuery.cache[id].handle) {
                            try {
                                jQuery.event.remove(jQuery.cache[id].handle.elem);
                            } catch (e) {}
                        }
                    }
                });
            }
            (function () {
                var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
                    done = 0,
                    toString = Object.prototype.toString,
                    hasDuplicate = false,
                    baseHasDuplicate = true;
                [0, 0].sort(function () {
                    baseHasDuplicate = false;
                    return 0;
                });
                var Sizzle = function (selector, context, results, seed) {
                    results = results || [];
                    var origContext = context = context || document;
                    if (context.nodeType !== 1 && context.nodeType !== 9) {
                        return [];
                    }
                    if (!selector || typeof selector !== "string") {
                        return results;
                    }
                    var parts = [],
                        m, set, checkSet, extra, prune = true,
                        contextXML = isXML(context),
                        soFar = selector;
                    while ((chunker.exec(""), m = chunker.exec(soFar)) !== null) {
                        soFar = m[3];
                        parts.push(m[1]);
                        if (m[2]) {
                            extra = m[3];
                            break;
                        }
                    }
                    if (parts.length > 1 && origPOS.exec(selector)) {
                        if (parts.length === 2 && Expr.relative[parts[0]]) {
                            set = posProcess(parts[0] + parts[1], context);
                        } else {
                            set = Expr.relative[parts[0]] ? [context] : Sizzle(parts.shift(), context);
                            while (parts.length) {
                                selector = parts.shift();
                                if (Expr.relative[selector]) {
                                    selector += parts.shift();
                                }
                                set = posProcess(selector, set);
                            }
                        }
                    } else {
                        if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1])) {
                            var ret = Sizzle.find(parts.shift(), context, contextXML);
                            context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
                        }
                        if (context) {
                            var ret = seed ? {
                                expr: parts.pop(),
                                set: makeArray(seed)
                            } : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
                            set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                            if (parts.length > 0) {
                                checkSet = makeArray(set);
                            } else {
                                prune = false;
                            }
                            while (parts.length) {
                                var cur = parts.pop(),
                                    pop = cur;
                                if (!Expr.relative[cur]) {
                                    cur = "";
                                } else {
                                    pop = parts.pop();
                                }
                                if (pop == null) {
                                    pop = context;
                                }
                                Expr.relative[cur](checkSet, pop, contextXML);
                            }
                        } else {
                            checkSet = parts = [];
                        }
                    }
                    if (!checkSet) {
                        checkSet = set;
                    }
                    if (!checkSet) {
                        Sizzle.error(cur || selector);
                    }
                    if (toString.call(checkSet) === "[object Array]") {
                        if (!prune) {
                            results.push.apply(results, checkSet);
                        } else if (context && context.nodeType === 1) {
                            for (var i = 0; checkSet[i] != null; i++) {
                                if (checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i]))) {
                                    results.push(set[i]);
                                }
                            }
                        } else {
                            for (var i = 0; checkSet[i] != null; i++) {
                                if (checkSet[i] && checkSet[i].nodeType === 1) {
                                    results.push(set[i]);
                                }
                            }
                        }
                    } else {
                        makeArray(checkSet, results);
                    }
                    if (extra) {
                        Sizzle(extra, origContext, results, seed);
                        Sizzle.uniqueSort(results);
                    }
                    return results;
                };
                Sizzle.uniqueSort = function (results) {
                    if (sortOrder) {
                        hasDuplicate = baseHasDuplicate;
                        results.sort(sortOrder);
                        if (hasDuplicate) {
                            for (var i = 1; i < results.length; i++) {
                                if (results[i] === results[i - 1]) {
                                    results.splice(i--, 1);
                                }
                            }
                        }
                    }
                    return results;
                };
                Sizzle.matches = function (expr, set) {
                    return Sizzle(expr, null, null, set);
                };
                Sizzle.find = function (expr, context, isXML) {
                    var set, match;
                    if (!expr) {
                        return [];
                    }
                    for (var i = 0, l = Expr.order.length; i < l; i++) {
                        var type = Expr.order[i],
                            match;
                        if ((match = Expr.leftMatch[type].exec(expr))) {
                            var left = match[1];
                            match.splice(1, 1);
                            if (left.substr(left.length - 1) !== "\\") {
                                match[1] = (match[1] || "").replace(/\\/g, "");
                                set = Expr.find[type](match, context, isXML);
                                if (set != null) {
                                    expr = expr.replace(Expr.match[type], "");
                                    break;
                                }
                            }
                        }
                    }
                    if (!set) {
                        set = context.getElementsByTagName("*");
                    }
                    return {
                        set: set,
                        expr: expr
                    };
                };
                Sizzle.filter = function (expr, set, inplace, not) {
                    var old = expr,
                        result = [],
                        curLoop = set,
                        match, anyFound, isXMLFilter = set && set[0] && isXML(set[0]);
                    while (expr && set.length) {
                        for (var type in Expr.filter) {
                            if ((match = Expr.leftMatch[type].exec(expr)) != null && match[2]) {
                                var filter = Expr.filter[type],
                                    found, item, left = match[1];
                                anyFound = false;
                                match.splice(1, 1);
                                if (left.substr(left.length - 1) === "\\") {
                                    continue;
                                }
                                if (curLoop === result) {
                                    result = [];
                                }
                                if (Expr.preFilter[type]) {
                                    match = Expr.preFilter[type](match, curLoop, inplace, result, not, isXMLFilter);
                                    if (!match) {
                                        anyFound = found = true;
                                    } else if (match === true) {
                                        continue;
                                    }
                                }
                                if (match) {
                                    for (var i = 0;
                                    (item = curLoop[i]) != null; i++) {
                                        if (item) {
                                            found = filter(item, match, i, curLoop);
                                            var pass = not ^ !! found;
                                            if (inplace && found != null) {
                                                if (pass) {
                                                    anyFound = true;
                                                } else {
                                                    curLoop[i] = false;
                                                }
                                            } else if (pass) {
                                                result.push(item);
                                                anyFound = true;
                                            }
                                        }
                                    }
                                }
                                if (found !== undefined) {
                                    if (!inplace) {
                                        curLoop = result;
                                    }
                                    expr = expr.replace(Expr.match[type], "");
                                    if (!anyFound) {
                                        return [];
                                    }
                                    break;
                                }
                            }
                        }
                        if (expr === old) {
                            if (anyFound == null) {
                                Sizzle.error(expr);
                            } else {
                                break;
                            }
                        }
                        old = expr;
                    }
                    return curLoop;
                };
                Sizzle.error = function (msg) {
                    throw "Syntax error, unrecognized expression: " + msg;
                };
                var Expr = Sizzle.selectors = {
                    order: ["ID", "NAME", "TAG"],
                    match: {
                        ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                        CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
                        NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
                        ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
                        TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
                        CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
                        POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
                        PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
                    },
                    leftMatch: {},
                    attrMap: {
                        "class": "className",
                        "for": "htmlFor"
                    },
                    attrHandle: {
                        href: function (elem) {
                            return elem.getAttribute("href");
                        }
                    },
                    relative: {
                        "+": function (checkSet, part) {
                            var isPartStr = typeof part === "string",
                                isTag = isPartStr && !/\W/.test(part),
                                isPartStrNotTag = isPartStr && !isTag;
                            if (isTag) {
                                part = part.toLowerCase();
                            }
                            for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                                if ((elem = checkSet[i])) {
                                    while ((elem = elem.previousSibling) && elem.nodeType !== 1) {}
                                    checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false : elem === part;
                                }
                            }
                            if (isPartStrNotTag) {
                                Sizzle.filter(part, checkSet, true);
                            }
                        },
                        ">": function (checkSet, part) {
                            var isPartStr = typeof part === "string";
                            if (isPartStr && !/\W/.test(part)) {
                                part = part.toLowerCase();
                                for (var i = 0, l = checkSet.length; i < l; i++) {
                                    var elem = checkSet[i];
                                    if (elem) {
                                        var parent = elem.parentNode;
                                        checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
                                    }
                                }
                            } else {
                                for (var i = 0, l = checkSet.length; i < l; i++) {
                                    var elem = checkSet[i];
                                    if (elem) {
                                        checkSet[i] = isPartStr ? elem.parentNode : elem.parentNode === part;
                                    }
                                }
                                if (isPartStr) {
                                    Sizzle.filter(part, checkSet, true);
                                }
                            }
                        },
                        "": function (checkSet, part, isXML) {
                            var doneName = done++,
                                checkFn = dirCheck;
                            if (typeof part === "string" && !/\W/.test(part)) {
                                var nodeCheck = part = part.toLowerCase();
                                checkFn = dirNodeCheck;
                            }
                            checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
                        },
                        "~": function (checkSet, part, isXML) {
                            var doneName = done++,
                                checkFn = dirCheck;
                            if (typeof part === "string" && !/\W/.test(part)) {
                                var nodeCheck = part = part.toLowerCase();
                                checkFn = dirNodeCheck;
                            }
                            checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
                        }
                    },
                    find: {
                        ID: function (match, context, isXML) {
                            if (typeof context.getElementById !== "undefined" && !isXML) {
                                var m = context.getElementById(match[1]);
                                return m ? [m] : [];
                            }
                        },
                        NAME: function (match, context) {
                            if (typeof context.getElementsByName !== "undefined") {
                                var ret = [],
                                    results = context.getElementsByName(match[1]);
                                for (var i = 0, l = results.length; i < l; i++) {
                                    if (results[i].getAttribute("name") === match[1]) {
                                        ret.push(results[i]);
                                    }
                                }
                                return ret.length === 0 ? null : ret;
                            }
                        },
                        TAG: function (match, context) {
                            return context.getElementsByTagName(match[1]);
                        }
                    },
                    preFilter: {
                        CLASS: function (match, curLoop, inplace, result, not, isXML) {
                            match = " " + match[1].replace(/\\/g, "") + " ";
                            if (isXML) {
                                return match;
                            }
                            for (var i = 0, elem;
                            (elem = curLoop[i]) != null; i++) {
                                if (elem) {
                                    if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0)) {
                                        if (!inplace) {
                                            result.push(elem);
                                        }
                                    } else if (inplace) {
                                        curLoop[i] = false;
                                    }
                                }
                            }
                            return false;
                        },
                        ID: function (match) {
                            return match[1].replace(/\\/g, "");
                        },
                        TAG: function (match, curLoop) {
                            return match[1].toLowerCase();
                        },
                        CHILD: function (match) {
                            if (match[1] === "nth") {
                                var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                                match[2] = (test[1] + (test[2] || 1)) - 0;
                                match[3] = test[3] - 0;
                            }
                            match[0] = done++;
                            return match;
                        },
                        ATTR: function (match, curLoop, inplace, result, not, isXML) {
                            var name = match[1].replace(/\\/g, "");
                            if (!isXML && Expr.attrMap[name]) {
                                match[1] = Expr.attrMap[name];
                            }
                            if (match[2] === "~=") {
                                match[4] = " " + match[4] + " ";
                            }
                            return match;
                        },
                        PSEUDO: function (match, curLoop, inplace, result, not) {
                            if (match[1] === "not") {
                                if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                                    match[3] = Sizzle(match[3], null, null, curLoop);
                                } else {
                                    var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                                    if (!inplace) {
                                        result.push.apply(result, ret);
                                    }
                                    return false;
                                }
                            } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                                return true;
                            }
                            return match;
                        },
                        POS: function (match) {
                            match.unshift(true);
                            return match;
                        }
                    },
                    filters: {
                        enabled: function (elem) {
                            return elem.disabled === false && elem.type !== "hidden";
                        },
                        disabled: function (elem) {
                            return elem.disabled === true;
                        },
                        checked: function (elem) {
                            return elem.checked === true;
                        },
                        selected: function (elem) {
                            elem.parentNode.selectedIndex;
                            return elem.selected === true;
                        },
                        parent: function (elem) {
                            return !!elem.firstChild;
                        },
                        empty: function (elem) {
                            return !elem.firstChild;
                        },
                        has: function (elem, i, match) {
                            return !!Sizzle(match[3], elem).length;
                        },
                        header: function (elem) {
                            return /h\d/i.test(elem.nodeName);
                        },
                        text: function (elem) {
                            return "text" === elem.type;
                        },
                        radio: function (elem) {
                            return "radio" === elem.type;
                        },
                        checkbox: function (elem) {
                            return "checkbox" === elem.type;
                        },
                        file: function (elem) {
                            return "file" === elem.type;
                        },
                        password: function (elem) {
                            return "password" === elem.type;
                        },
                        submit: function (elem) {
                            return "submit" === elem.type;
                        },
                        image: function (elem) {
                            return "image" === elem.type;
                        },
                        reset: function (elem) {
                            return "reset" === elem.type;
                        },
                        button: function (elem) {
                            return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
                        },
                        input: function (elem) {
                            return /input|select|textarea|button/i.test(elem.nodeName);
                        }
                    },
                    setFilters: {
                        first: function (elem, i) {
                            return i === 0;
                        },
                        last: function (elem, i, match, array) {
                            return i === array.length - 1;
                        },
                        even: function (elem, i) {
                            return i % 2 === 0;
                        },
                        odd: function (elem, i) {
                            return i % 2 === 1;
                        },
                        lt: function (elem, i, match) {
                            return i < match[3] - 0;
                        },
                        gt: function (elem, i, match) {
                            return i > match[3] - 0;
                        },
                        nth: function (elem, i, match) {
                            return match[3] - 0 === i;
                        },
                        eq: function (elem, i, match) {
                            return match[3] - 0 === i;
                        }
                    },
                    filter: {
                        PSEUDO: function (elem, match, i, array) {
                            var name = match[1],
                                filter = Expr.filters[name];
                            if (filter) {
                                return filter(elem, i, match, array);
                            } else if (name === "contains") {
                                return (elem.textContent || elem.innerText || getText([elem]) || "").indexOf(match[3]) >= 0;
                            } else if (name === "not") {
                                var not = match[3];
                                for (var i = 0, l = not.length; i < l; i++) {
                                    if (not[i] === elem) {
                                        return false;
                                    }
                                }
                                return true;
                            } else {
                                Sizzle.error("Syntax error, unrecognized expression: " + name);
                            }
                        },
                        CHILD: function (elem, match) {
                            var type = match[1],
                                node = elem;
                            switch (type) {
                            case 'only':
                            case 'first':
                                while ((node = node.previousSibling)) {
                                    if (node.nodeType === 1) {
                                        return false;
                                    }
                                }
                                if (type === "first") {
                                    return true;
                                }
                                node = elem;
                            case 'last':
                                while ((node = node.nextSibling)) {
                                    if (node.nodeType === 1) {
                                        return false;
                                    }
                                }
                                return true;
                            case 'nth':
                                var first = match[2],
                                    last = match[3];
                                if (first === 1 && last === 0) {
                                    return true;
                                }
                                var doneName = match[0],
                                    parent = elem.parentNode;
                                if (parent && (parent.sizcache !== doneName || !elem.nodeIndex)) {
                                    var count = 0;
                                    for (node = parent.firstChild; node; node = node.nextSibling) {
                                        if (node.nodeType === 1) {
                                            node.nodeIndex = ++count;
                                        }
                                    }
                                    parent.sizcache = doneName;
                                }
                                var diff = elem.nodeIndex - last;
                                if (first === 0) {
                                    return diff === 0;
                                } else {
                                    return (diff % first === 0 && diff / first >= 0);
                                }
                            }
                        },
                        ID: function (elem, match) {
                            return elem.nodeType === 1 && elem.getAttribute("id") === match;
                        },
                        TAG: function (elem, match) {
                            return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;
                        },
                        CLASS: function (elem, match) {
                            return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1;
                        },
                        ATTR: function (elem, match) {
                            var name = match[1],
                                result = Expr.attrHandle[name] ? Expr.attrHandle[name](elem) : elem[name] != null ? elem[name] : elem.getAttribute(name),
                                value = result + "",
                                type = match[2],
                                check = match[4];
                            return result == null ? type === "!=" : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false;
                        },
                        POS: function (elem, match, i, array) {
                            var name = match[2],
                                filter = Expr.setFilters[name];
                            if (filter) {
                                return filter(elem, i, match, array);
                            }
                        }
                    }
                };
                var origPOS = Expr.match.POS;
                for (var type in Expr.match) {
                    Expr.match[type] = new RegExp(Expr.match[type].source + /(?![^\[]*\])(?![^\(]*\))/.source);
                    Expr.leftMatch[type] = new RegExp(/(^(?:.|\r|\n)*?)/.source + Expr.match[type].source.replace(/\\(\d+)/g, function (all, num) {
                        return "\\" + (num - 0 + 1);
                    }));
                }
                var makeArray = function (array, results) {
                    array = Array.prototype.slice.call(array, 0);
                    if (results) {
                        results.push.apply(results, array);
                        return results;
                    }
                    return array;
                };
                try {
                    Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;
                } catch (e) {
                    makeArray = function (array, results) {
                        var ret = results || [];
                        if (toString.call(array) === "[object Array]") {
                            Array.prototype.push.apply(ret, array);
                        } else {
                            if (typeof array.length === "number") {
                                for (var i = 0, l = array.length; i < l; i++) {
                                    ret.push(array[i]);
                                }
                            } else {
                                for (var i = 0; array[i]; i++) {
                                    ret.push(array[i]);
                                }
                            }
                        }
                        return ret;
                    };
                }
                var sortOrder;
                if (document.documentElement.compareDocumentPosition) {
                    sortOrder = function (a, b) {
                        if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                            if (a == b) {
                                hasDuplicate = true;
                            }
                            return a.compareDocumentPosition ? -1 : 1;
                        }
                        var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
                        if (ret === 0) {
                            hasDuplicate = true;
                        }
                        return ret;
                    };
                } else if ("sourceIndex" in document.documentElement) {
                    sortOrder = function (a, b) {
                        if (!a.sourceIndex || !b.sourceIndex) {
                            if (a == b) {
                                hasDuplicate = true;
                            }
                            return a.sourceIndex ? -1 : 1;
                        }
                        var ret = a.sourceIndex - b.sourceIndex;
                        if (ret === 0) {
                            hasDuplicate = true;
                        }
                        return ret;
                    };
                } else if (document.createRange) {
                    sortOrder = function (a, b) {
                        if (!a.ownerDocument || !b.ownerDocument) {
                            if (a == b) {
                                hasDuplicate = true;
                            }
                            return a.ownerDocument ? -1 : 1;
                        }
                        var aRange = a.ownerDocument.createRange(),
                            bRange = b.ownerDocument.createRange();
                        aRange.setStart(a, 0);
                        aRange.setEnd(a, 0);
                        bRange.setStart(b, 0);
                        bRange.setEnd(b, 0);
                        var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
                        if (ret === 0) {
                            hasDuplicate = true;
                        }
                        return ret;
                    };
                }

                function getText(elems) {
                    var ret = "",
                        elem;
                    for (var i = 0; elems[i]; i++) {
                        elem = elems[i];
                        if (elem.nodeType === 3 || elem.nodeType === 4) {
                            ret += elem.nodeValue;
                        } else if (elem.nodeType !== 8) {
                            ret += getText(elem.childNodes);
                        }
                    }
                    return ret;
                }
                (function () {
                    var form = document.createElement("div"),
                        id = "script" + (new Date).getTime();
                    form.innerHTML = "<a name='" + id + "'/>";
                    var root = document.documentElement;
                    root.insertBefore(form, root.firstChild);
                    if (document.getElementById(id)) {
                        Expr.find.ID = function (match, context, isXML) {
                            if (typeof context.getElementById !== "undefined" && !isXML) {
                                var m = context.getElementById(match[1]);
                                return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
                            }
                        };
                        Expr.filter.ID = function (elem, match) {
                            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                            return elem.nodeType === 1 && node && node.nodeValue === match;
                        };
                    }
                    root.removeChild(form);
                    root = form = null;
                })();
                (function () {
                    var div = document.createElement("div");
                    div.appendChild(document.createComment(""));
                    if (div.getElementsByTagName("*").length > 0) {
                        Expr.find.TAG = function (match, context) {
                            var results = context.getElementsByTagName(match[1]);
                            if (match[1] === "*") {
                                var tmp = [];
                                for (var i = 0; results[i]; i++) {
                                    if (results[i].nodeType === 1) {
                                        tmp.push(results[i]);
                                    }
                                }
                                results = tmp;
                            }
                            return results;
                        };
                    }
                    div.innerHTML = "<a href='#'></a>";
                    if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
                        Expr.attrHandle.href = function (elem) {
                            return elem.getAttribute("href", 2);
                        };
                    }
                    div = null;
                })();
                if (document.querySelectorAll) {
                    (function () {
                        var oldSizzle = Sizzle,
                            div = document.createElement("div");
                        div.innerHTML = "<p class='TEST'></p>";
                        if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                            return;
                        }
                        Sizzle = function (query, context, extra, seed) {
                            context = context || document;
                            if (!seed && context.nodeType === 9 && !isXML(context)) {
                                try {
                                    return makeArray(context.querySelectorAll(query), extra);
                                } catch (e) {}
                            }
                            return oldSizzle(query, context, extra, seed);
                        };
                        for (var prop in oldSizzle) {
                            Sizzle[prop] = oldSizzle[prop];
                        }
                        div = null;
                    })();
                }
                (function () {
                    var div = document.createElement("div");
                    div.innerHTML = "<div class='test e'></div><div class='test'></div>";
                    if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                        return;
                    }
                    div.lastChild.className = "e";
                    if (div.getElementsByClassName("e").length === 1) {
                        return;
                    }
                    Expr.order.splice(1, 0, "CLASS");
                    Expr.find.CLASS = function (match, context, isXML) {
                        if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                            return context.getElementsByClassName(match[1]);
                        }
                    };
                    div = null;
                })();

                function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
                    for (var i = 0, l = checkSet.length; i < l; i++) {
                        var elem = checkSet[i];
                        if (elem) {
                            elem = elem[dir];
                            var match = false;
                            while (elem) {
                                if (elem.sizcache === doneName) {
                                    match = checkSet[elem.sizset];
                                    break;
                                }
                                if (elem.nodeType === 1 && !isXML) {
                                    elem.sizcache = doneName;
                                    elem.sizset = i;
                                }
                                if (elem.nodeName.toLowerCase() === cur) {
                                    match = elem;
                                    break;
                                }
                                elem = elem[dir];
                            }
                            checkSet[i] = match;
                        }
                    }
                }

                function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
                    for (var i = 0, l = checkSet.length; i < l; i++) {
                        var elem = checkSet[i];
                        if (elem) {
                            elem = elem[dir];
                            var match = false;
                            while (elem) {
                                if (elem.sizcache === doneName) {
                                    match = checkSet[elem.sizset];
                                    break;
                                }
                                if (elem.nodeType === 1) {
                                    if (!isXML) {
                                        elem.sizcache = doneName;
                                        elem.sizset = i;
                                    }
                                    if (typeof cur !== "string") {
                                        if (elem === cur) {
                                            match = true;
                                            break;
                                        }
                                    } else if (Sizzle.filter(cur, [elem]).length > 0) {
                                        match = elem;
                                        break;
                                    }
                                }
                                elem = elem[dir];
                            }
                            checkSet[i] = match;
                        }
                    }
                }
                var contains = document.compareDocumentPosition ? function (a, b) {
                        return !!(a.compareDocumentPosition(b) & 16);
                    } : function (a, b) {
                        return a !== b && (a.contains ? a.contains(b) : true);
                    };
                var isXML = function (elem) {
                    var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false;
                };
                var posProcess = function (selector, context) {
                    var tmpSet = [],
                        later = "",
                        match, root = context.nodeType ? [context] : context;
                    while ((match = Expr.match.PSEUDO.exec(selector))) {
                        later += match[0];
                        selector = selector.replace(Expr.match.PSEUDO, "");
                    }
                    selector = Expr.relative[selector] ? selector + "*" : selector;
                    for (var i = 0, l = root.length; i < l; i++) {
                        Sizzle(selector, root[i], tmpSet);
                    }
                    return Sizzle.filter(later, tmpSet);
                };
                jQuery.find = Sizzle;
                jQuery.expr = Sizzle.selectors;
                jQuery.expr[":"] = jQuery.expr.filters;
                jQuery.unique = Sizzle.uniqueSort;
                jQuery.text = getText;
                jQuery.isXMLDoc = isXML;
                jQuery.contains = contains;
                return;
                window.Sizzle = Sizzle;
            })();
            var runtil = /Until$/,
                rparentsprev = /^(?:parents|prevUntil|prevAll)/,
                rmultiselector = /,/,
                slice = Array.prototype.slice;
            var winnow = function (elements, qualifier, keep) {
                if (jQuery.isFunction(qualifier)) {
                    return jQuery.grep(elements, function (elem, i) {
                        return !!qualifier.call(elem, i, elem) === keep;
                    });
                } else if (qualifier.nodeType) {
                    return jQuery.grep(elements, function (elem, i) {
                        return (elem === qualifier) === keep;
                    });
                } else if (typeof qualifier === "string") {
                    var filtered = jQuery.grep(elements, function (elem) {
                        return elem.nodeType === 1;
                    });
                    if (isSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, filtered, !keep);
                    } else {
                        qualifier = jQuery.filter(qualifier, filtered);
                    }
                }
                return jQuery.grep(elements, function (elem, i) {
                    return (jQuery.inArray(elem, qualifier) >= 0) === keep;
                });
            };
            jQuery.fn.extend({
                find: function (selector) {
                    var ret = this.pushStack("", "find", selector),
                        length = 0;
                    for (var i = 0, l = this.length; i < l; i++) {
                        length = ret.length;
                        jQuery.find(selector, this[i], ret);
                        if (i > 0) {
                            for (var n = length; n < ret.length; n++) {
                                for (var r = 0; r < length; r++) {
                                    if (ret[r] === ret[n]) {
                                        ret.splice(n--, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return ret;
                },
                has: function (target) {
                    var targets = jQuery(target);
                    return this.filter(function () {
                        for (var i = 0, l = targets.length; i < l; i++) {
                            if (jQuery.contains(this, targets[i])) {
                                return true;
                            }
                        }
                    });
                },
                not: function (selector) {
                    return this.pushStack(winnow(this, selector, false), "not", selector);
                },
                filter: function (selector) {
                    return this.pushStack(winnow(this, selector, true), "filter", selector);
                },
                is: function (selector) {
                    return !!selector && jQuery.filter(selector, this).length > 0;
                },
                closest: function (selectors, context) {
                    if (jQuery.isArray(selectors)) {
                        var ret = [],
                            cur = this[0],
                            match, matches = {}, selector;
                        if (cur && selectors.length) {
                            for (var i = 0, l = selectors.length; i < l; i++) {
                                selector = selectors[i];
                                if (!matches[selector]) {
                                    matches[selector] = jQuery.expr.match.POS.test(selector) ? jQuery(selector, context || this.context) : selector;
                                }
                            }
                            while (cur && cur.ownerDocument && cur !== context) {
                                for (selector in matches) {
                                    match = matches[selector];
                                    if (match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match)) {
                                        ret.push({
                                            selector: selector,
                                            elem: cur
                                        });
                                        delete matches[selector];
                                    }
                                }
                                cur = cur.parentNode;
                            }
                        }
                        return ret;
                    }
                    var pos = jQuery.expr.match.POS.test(selectors) ? jQuery(selectors, context || this.context) : null;
                    return this.map(function (i, cur) {
                        while (cur && cur.ownerDocument && cur !== context) {
                            if (pos ? pos.index(cur) > -1 : jQuery(cur).is(selectors)) {
                                return cur;
                            }
                            cur = cur.parentNode;
                        }
                        return null;
                    });
                },
                index: function (elem) {
                    if (!elem || typeof elem === "string") {
                        return jQuery.inArray(this[0], elem ? jQuery(elem) : this.parent().children());
                    }
                    return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
                },
                add: function (selector, context) {
                    var set = typeof selector === "string" ? jQuery(selector, context || this.context) : jQuery.makeArray(selector),
                        all = jQuery.merge(this.get(), set);
                    return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all));
                },
                andSelf: function () {
                    return this.add(this.prevObject);
                }
            });

            function isDisconnected(node) {
                return !node || !node.parentNode || node.parentNode.nodeType === 11;
            }
            jQuery.each({
                parent: function (elem) {
                    var parent = elem.parentNode;
                    return parent && parent.nodeType !== 11 ? parent : null;
                },
                parents: function (elem) {
                    return jQuery.dir(elem, "parentNode");
                },
                parentsUntil: function (elem, i, until) {
                    return jQuery.dir(elem, "parentNode", until);
                },
                next: function (elem) {
                    return jQuery.nth(elem, 2, "nextSibling");
                },
                prev: function (elem) {
                    return jQuery.nth(elem, 2, "previousSibling");
                },
                nextAll: function (elem) {
                    return jQuery.dir(elem, "nextSibling");
                },
                prevAll: function (elem) {
                    return jQuery.dir(elem, "previousSibling");
                },
                nextUntil: function (elem, i, until) {
                    return jQuery.dir(elem, "nextSibling", until);
                },
                prevUntil: function (elem, i, until) {
                    return jQuery.dir(elem, "previousSibling", until);
                },
                siblings: function (elem) {
                    return jQuery.sibling(elem.parentNode.firstChild, elem);
                },
                children: function (elem) {
                    return jQuery.sibling(elem.firstChild);
                },
                contents: function (elem) {
                    return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.makeArray(elem.childNodes);
                }
            }, function (name, fn) {
                jQuery.fn[name] = function (until, selector) {
                    var ret = jQuery.map(this, fn, until);
                    if (!runtil.test(name)) {
                        selector = until;
                    }
                    if (selector && typeof selector === "string") {
                        ret = jQuery.filter(selector, ret);
                    }
                    ret = this.length > 1 ? jQuery.unique(ret) : ret;
                    if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                        ret = ret.reverse();
                    }
                    return this.pushStack(ret, name, slice.call(arguments).join(","));
                };
            });
            jQuery.extend({
                filter: function (expr, elems, not) {
                    if (not) {
                        expr = ":not(" + expr + ")";
                    }
                    return jQuery.find.matches(expr, elems);
                },
                dir: function (elem, dir, until) {
                    var matched = [],
                        cur = elem[dir];
                    while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                        if (cur.nodeType === 1) {
                            matched.push(cur);
                        }
                        cur = cur[dir];
                    }
                    return matched;
                },
                nth: function (cur, result, dir, elem) {
                    result = result || 1;
                    var num = 0;
                    for (; cur; cur = cur[dir]) {
                        if (cur.nodeType === 1 && ++num === result) {
                            break;
                        }
                    }
                    return cur;
                },
                sibling: function (n, elem) {
                    var r = [];
                    for (; n; n = n.nextSibling) {
                        if (n.nodeType === 1 && n !== elem) {
                            r.push(n);
                        }
                    }
                    return r;
                }
            });
            var rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
                rleadingWhitespace = /^\s+/,
                rxhtmlTag = /(<([\w:]+)[^>]*?)\/>/g,
                rselfClosing = /^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,
                rtagName = /<([\w:]+)/,
                rtbody = /<tbody/i,
                rhtml = /<|&#?\w+;/,
                rnocache = /<script|<object|<embed|<option|<style/i,
                rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                fcloseTag = function (all, front, tag) {
                    return rselfClosing.test(tag) ? all : front + "></" + tag + ">";
                }, wrapMap = {
                    option: [1, "<select multiple='multiple'>", "</select>"],
                    legend: [1, "<fieldset>", "</fieldset>"],
                    thead: [1, "<table>", "</table>"],
                    tr: [2, "<table><tbody>", "</tbody></table>"],
                    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                    col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
                    area: [1, "<map>", "</map>"],
                    _default: [0, "", ""]
                };
            wrapMap.optgroup = wrapMap.option;
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
            wrapMap.th = wrapMap.td;
            if (!jQuery.support.htmlSerialize) {
                wrapMap._default = [1, "div<div>", "</div>"];
            }
            jQuery.fn.extend({
                text: function (text) {
                    if (jQuery.isFunction(text)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            self.text(text.call(this, i, self.text()));
                        });
                    }
                    if (typeof text !== "object" && text !== undefined) {
                        return this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(text));
                    }
                    return jQuery.text(this);
                },
                wrapAll: function (html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function (i) {
                            jQuery(this).wrapAll(html.call(this, i));
                        });
                    }
                    if (this[0]) {
                        var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                        if (this[0].parentNode) {
                            wrap.insertBefore(this[0]);
                        }
                        wrap.map(function () {
                            var elem = this;
                            while (elem.firstChild && elem.firstChild.nodeType === 1) {
                                elem = elem.firstChild;
                            }
                            return elem;
                        }).append(this);
                    }
                    return this;
                },
                wrapInner: function (html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function (i) {
                            jQuery(this).wrapInner(html.call(this, i));
                        });
                    }
                    return this.each(function () {
                        var self = jQuery(this),
                            contents = self.contents();
                        if (contents.length) {
                            contents.wrapAll(html);
                        } else {
                            self.append(html);
                        }
                    });
                },
                wrap: function (html) {
                    return this.each(function () {
                        jQuery(this).wrapAll(html);
                    });
                },
                unwrap: function () {
                    return this.parent().each(function () {
                        if (!jQuery.nodeName(this, "body")) {
                            jQuery(this).replaceWith(this.childNodes);
                        }
                    }).end();
                },
                append: function () {
                    return this.domManip(arguments, true, function (elem) {
                        if (this.nodeType === 1) {
                            this.appendChild(elem);
                        }
                    });
                },
                prepend: function () {
                    return this.domManip(arguments, true, function (elem) {
                        if (this.nodeType === 1) {
                            this.insertBefore(elem, this.firstChild);
                        }
                    });
                },
                before: function () {
                    if (this[0] && this[0].parentNode) {
                        return this.domManip(arguments, false, function (elem) {
                            this.parentNode.insertBefore(elem, this);
                        });
                    } else if (arguments.length) {
                        var set = jQuery(arguments[0]);
                        set.push.apply(set, this.toArray());
                        return this.pushStack(set, "before", arguments);
                    }
                },
                after: function () {
                    if (this[0] && this[0].parentNode) {
                        return this.domManip(arguments, false, function (elem) {
                            this.parentNode.insertBefore(elem, this.nextSibling);
                        });
                    } else if (arguments.length) {
                        var set = this.pushStack(this, "after", arguments);
                        set.push.apply(set, jQuery(arguments[0]).toArray());
                        return set;
                    }
                },
                remove: function (selector, keepData) {
                    for (var i = 0, elem;
                    (elem = this[i]) != null; i++) {
                        if (!selector || jQuery.filter(selector, [elem]).length) {
                            if (!keepData && elem.nodeType === 1) {
                                jQuery.cleanData(elem.getElementsByTagName("*"));
                                jQuery.cleanData([elem]);
                            }
                            if (elem.parentNode) {
                                elem.parentNode.removeChild(elem);
                            }
                        }
                    }
                    return this;
                },
                empty: function () {
                    for (var i = 0, elem;
                    (elem = this[i]) != null; i++) {
                        if (elem.nodeType === 1) {
                            jQuery.cleanData(elem.getElementsByTagName("*"));
                        }
                        while (elem.firstChild) {
                            elem.removeChild(elem.firstChild);
                        }
                    }
                    return this;
                },
                clone: function (events) {
                    var ret = this.map(function () {
                        if (!jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this)) {
                            var html = this.outerHTML,
                                ownerDocument = this.ownerDocument;
                            if (!html) {
                                var div = ownerDocument.createElement("div");
                                div.appendChild(this.cloneNode(true));
                                html = div.innerHTML;
                            }
                            return jQuery.clean([html.replace(rinlinejQuery, "").replace(/=([^="'>\s]+\/)>/g, '="$1">').replace(rleadingWhitespace, "")], ownerDocument)[0];
                        } else {
                            return this.cloneNode(true);
                        }
                    });
                    if (events === true) {
                        cloneCopyEvent(this, ret);
                        cloneCopyEvent(this.find("*"), ret.find("*"));
                    }
                    return ret;
                },
                html: function (value) {
                    if (value === undefined) {
                        return this[0] && this[0].nodeType === 1 ? this[0].innerHTML.replace(rinlinejQuery, "") : null;
                    } else if (typeof value === "string" && !rnocache.test(value) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                        value = value.replace(rxhtmlTag, fcloseTag);
                        try {
                            for (var i = 0, l = this.length; i < l; i++) {
                                if (this[i].nodeType === 1) {
                                    jQuery.cleanData(this[i].getElementsByTagName("*"));
                                    this[i].innerHTML = value;
                                }
                            }
                        } catch (e) {
                            this.empty().append(value);
                        }
                    } else if (jQuery.isFunction(value)) {
                        this.each(function (i) {
                            var self = jQuery(this),
                                old = self.html();
                            self.empty().append(function () {
                                return value.call(this, i, old);
                            });
                        });
                    } else {
                        this.empty().append(value);
                    }
                    return this;
                },
                replaceWith: function (value) {
                    if (this[0] && this[0].parentNode) {
                        if (jQuery.isFunction(value)) {
                            return this.each(function (i) {
                                var self = jQuery(this),
                                    old = self.html();
                                self.replaceWith(value.call(this, i, old));
                            });
                        }
                        if (typeof value !== "string") {
                            value = jQuery(value).detach();
                        }
                        return this.each(function () {
                            var next = this.nextSibling,
                                parent = this.parentNode;
                            jQuery(this).remove();
                            if (next) {
                                jQuery(next).before(value);
                            } else {
                                jQuery(parent).append(value);
                            }
                        });
                    } else {
                        return this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value);
                    }
                },
                detach: function (selector) {
                    return this.remove(selector, true);
                },
                domManip: function (args, table, callback) {
                    var results, first, value = args[0],
                        scripts = [],
                        fragment, parent;
                    if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                        return this.each(function () {
                            jQuery(this).domManip(args, table, callback, true);
                        });
                    }
                    if (jQuery.isFunction(value)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            args[0] = value.call(this, i, table ? self.html() : undefined);
                            self.domManip(args, table, callback);
                        });
                    }
                    if (this[0]) {
                        parent = value && value.parentNode;
                        if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                            results = {
                                fragment: parent
                            };
                        } else {
                            results = buildFragment(args, this, scripts);
                        }
                        fragment = results.fragment;
                        if (fragment.childNodes.length === 1) {
                            first = fragment = fragment.firstChild;
                        } else {
                            first = fragment.firstChild;
                        }
                        if (first) {
                            table = table && jQuery.nodeName(first, "tr");
                            for (var i = 0, l = this.length; i < l; i++) {
                                callback.call(table ? root(this[i], first) : this[i], i > 0 || results.cacheable || this.length > 1 ? fragment.cloneNode(true) : fragment);
                            }
                        }
                        if (scripts.length) {
                            jQuery.each(scripts, evalScript);
                        }
                    }
                    return this;

                    function root(elem, cur) {
                        return jQuery.nodeName(elem, "table") ? (elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody"))) : elem;
                    }
                }
            });

            function cloneCopyEvent(orig, ret) {
                var i = 0;
                ret.each(function () {
                    if (this.nodeName !== (orig[i] && orig[i].nodeName)) {
                        return;
                    }
                    var oldData = jQuery.data(orig[i++]),
                        curData = jQuery.data(this, oldData),
                        events = oldData && oldData.events;
                    if (events) {
                        delete curData.handle;
                        curData.events = {};
                        for (var type in events) {
                            for (var handler in events[type]) {
                                jQuery.event.add(this, type, events[type][handler], events[type][handler].data);
                            }
                        }
                    }
                });
            }

            function buildFragment(args, nodes, scripts) {
                var fragment, cacheable, cacheresults, doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);
                if (args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document && !rnocache.test(args[0]) && (jQuery.support.checkClone || !rchecked.test(args[0]))) {
                    cacheable = true;
                    cacheresults = jQuery.fragments[args[0]];
                    if (cacheresults) {
                        if (cacheresults !== 1) {
                            fragment = cacheresults;
                        }
                    }
                }
                if (!fragment) {
                    fragment = doc.createDocumentFragment();
                    jQuery.clean(args, doc, fragment, scripts);
                }
                if (cacheable) {
                    jQuery.fragments[args[0]] = cacheresults ? fragment : 1;
                }
                return {
                    fragment: fragment,
                    cacheable: cacheable
                };
            }
            jQuery.fragments = {};
            jQuery.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function (name, original) {
                jQuery.fn[name] = function (selector) {
                    var ret = [],
                        insert = jQuery(selector),
                        parent = this.length === 1 && this[0].parentNode;
                    if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                        insert[original](this[0]);
                        return this;
                    } else {
                        for (var i = 0, l = insert.length; i < l; i++) {
                            var elems = (i > 0 ? this.clone(true) : this).get();
                            jQuery.fn[original].apply(jQuery(insert[i]), elems);
                            ret = ret.concat(elems);
                        }
                        return this.pushStack(ret, name, insert.selector);
                    }
                };
            });
            jQuery.extend({
                clean: function (elems, context, fragment, scripts) {
                    context = context || document;
                    if (typeof context.createElement === "undefined") {
                        context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
                    }
                    var ret = [];
                    for (var i = 0, elem;
                    (elem = elems[i]) != null; i++) {
                        if (typeof elem === "number") {
                            elem += "";
                        }
                        if (!elem) {
                            continue;
                        }
                        if (typeof elem === "string" && !rhtml.test(elem)) {
                            elem = context.createTextNode(elem);
                        } else if (typeof elem === "string") {
                            elem = elem.replace(rxhtmlTag, fcloseTag);
                            var tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase(),
                                wrap = wrapMap[tag] || wrapMap._default,
                                depth = wrap[0],
                                div = context.createElement("div");
                            div.innerHTML = wrap[1] + elem + wrap[2];
                            while (depth--) {
                                div = div.lastChild;
                            }
                            if (!jQuery.support.tbody) {
                                var hasBody = rtbody.test(elem),
                                    tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
                                for (var j = tbody.length - 1; j >= 0; --j) {
                                    if (jQuery.nodeName(tbody[j], "tbody") && !tbody[j].childNodes.length) {
                                        tbody[j].parentNode.removeChild(tbody[j]);
                                    }
                                }
                            }
                            if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                                div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
                            }
                            elem = div.childNodes;
                        }
                        if (elem.nodeType) {
                            ret.push(elem);
                        } else {
                            ret = jQuery.merge(ret, elem);
                        }
                    }
                    if (fragment) {
                        for (var i = 0; ret[i]; i++) {
                            if (scripts && jQuery.nodeName(ret[i], "script") && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript")) {
                                scripts.push(ret[i].parentNode ? ret[i].parentNode.removeChild(ret[i]) : ret[i]);
                            } else {
                                if (ret[i].nodeType === 1) {
                                    ret.splice.apply(ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))));
                                }
                                fragment.appendChild(ret[i]);
                            }
                        }
                    }
                    return ret;
                },
                cleanData: function (elems) {
                    var data, id, cache = jQuery.cache,
                        special = jQuery.event.special,
                        deleteExpando = jQuery.support.deleteExpando;
                    for (var i = 0, elem;
                    (elem = elems[i]) != null; i++) {
                        id = elem[jQuery.expando];
                        if (id) {
                            data = cache[id];
                            if (data.events) {
                                for (var type in data.events) {
                                    if (special[type]) {
                                        jQuery.event.remove(elem, type);
                                    } else {
                                        removeEvent(elem, type, data.handle);
                                    }
                                }
                            }
                            if (deleteExpando) {
                                delete elem[jQuery.expando];
                            } else if (elem.removeAttribute) {
                                elem.removeAttribute(jQuery.expando);
                            }
                            delete cache[id];
                        }
                    }
                }
            });
            var rexclude = /z-?index|font-?weight|opacity|zoom|line-?height/i,
                ralpha = /alpha\([^)]*\)/,
                ropacity = /opacity=([^)]*)/,
                rfloat = /float/i,
                rdashAlpha = /-([a-z])/ig,
                rupper = /([A-Z])/g,
                rnumpx = /^-?\d+(?:px)?$/i,
                rnum = /^-?\d/,
                cssShow = {
                    position: "absolute",
                    visibility: "hidden",
                    display: "block"
                }, cssWidth = ["Left", "Right"],
                cssHeight = ["Top", "Bottom"],
                getComputedStyle = document.defaultView && document.defaultView.getComputedStyle,
                styleFloat = jQuery.support.cssFloat ? "cssFloat" : "styleFloat",
                fcamelCase = function (all, letter) {
                    return letter.toUpperCase();
                };
            jQuery.fn.css = function (name, value) {
                return access(this, name, value, true, function (elem, name, value) {
                    if (value === undefined) {
                        return jQuery.curCSS(elem, name);
                    }
                    if (typeof value === "number" && !rexclude.test(name)) {
                        value += "px";
                    }
                    jQuery.style(elem, name, value);
                });
            };
            jQuery.extend({
                style: function (elem, name, value) {
                    if (!elem || elem.nodeType === 3 || elem.nodeType === 8) {
                        return undefined;
                    }
                    if ((name === "width" || name === "height") && parseFloat(value) < 0) {
                        value = undefined;
                    }
                    var style = elem.style || elem,
                        set = value !== undefined;
                    if (!jQuery.support.opacity && name === "opacity") {
                        if (set) {
                            style.zoom = 1;
                            var opacity = parseInt(value, 10) + "" === "NaN" ? "" : "alpha(opacity=" + value * 100 + ")";
                            var filter = style.filter || jQuery.curCSS(elem, "filter") || "";
                            style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : opacity;
                        }
                        return style.filter && style.filter.indexOf("opacity=") >= 0 ? (parseFloat(ropacity.exec(style.filter)[1]) / 100) + "" : "";
                    }
                    if (rfloat.test(name)) {
                        name = styleFloat;
                    }
                    name = name.replace(rdashAlpha, fcamelCase);
                    if (set) {
                        style[name] = value;
                    }
                    return style[name];
                },
                css: function (elem, name, force, extra) {
                    if (name === "width" || name === "height") {
                        var val, props = cssShow,
                            which = name === "width" ? cssWidth : cssHeight;

                        function getWH() {
                            val = name === "width" ? elem.offsetWidth : elem.offsetHeight;
                            if (extra === "border") {
                                return;
                            }
                            jQuery.each(which, function () {
                                if (!extra) {
                                    val -= parseFloat(jQuery.curCSS(elem, "padding" + this, true)) || 0;
                                }
                                if (extra === "margin") {
                                    val += parseFloat(jQuery.curCSS(elem, "margin" + this, true)) || 0;
                                } else {
                                    val -= parseFloat(jQuery.curCSS(elem, "border" + this + "Width", true)) || 0;
                                }
                            });
                        }
                        if (elem.offsetWidth !== 0) {
                            getWH();
                        } else {
                            jQuery.swap(elem, props, getWH);
                        }
                        return Math.max(0, Math.round(val));
                    }
                    return jQuery.curCSS(elem, name, force);
                },
                curCSS: function (elem, name, force) {
                    var ret, style = elem.style,
                        filter;
                    if (!jQuery.support.opacity && name === "opacity" && elem.currentStyle) {
                        ret = ropacity.test(elem.currentStyle.filter || "") ? (parseFloat(RegExp.$1) / 100) + "" : "";
                        return ret === "" ? "1" : ret;
                    }
                    if (rfloat.test(name)) {
                        name = styleFloat;
                    }
                    if (!force && style && style[name]) {
                        ret = style[name];
                    } else if (getComputedStyle) {
                        if (rfloat.test(name)) {
                            name = "float";
                        }
                        name = name.replace(rupper, "-$1").toLowerCase();
                        var defaultView = elem.ownerDocument.defaultView;
                        if (!defaultView) {
                            return null;
                        }
                        var computedStyle = defaultView.getComputedStyle(elem, null);
                        if (computedStyle) {
                            ret = computedStyle.getPropertyValue(name);
                        }
                        if (name === "opacity" && ret === "") {
                            ret = "1";
                        }
                    } else if (elem.currentStyle) {
                        var camelCase = name.replace(rdashAlpha, fcamelCase);
                        ret = elem.currentStyle[name] || elem.currentStyle[camelCase];
                        if (!rnumpx.test(ret) && rnum.test(ret)) {
                            var left = style.left,
                                rsLeft = elem.runtimeStyle.left;
                            elem.runtimeStyle.left = elem.currentStyle.left;
                            style.left = camelCase === "fontSize" ? "1em" : (ret || 0);
                            ret = style.pixelLeft + "px";
                            style.left = left;
                            elem.runtimeStyle.left = rsLeft;
                        }
                    }
                    return ret;
                },
                swap: function (elem, options, callback) {
                    var old = {};
                    for (var name in options) {
                        old[name] = elem.style[name];
                        elem.style[name] = options[name];
                    }
                    callback.call(elem);
                    for (var name in options) {
                        elem.style[name] = old[name];
                    }
                }
            });
            if (jQuery.expr && jQuery.expr.filters) {
                jQuery.expr.filters.hidden = function (elem) {
                    var width = elem.offsetWidth,
                        height = elem.offsetHeight,
                        skip = elem.nodeName.toLowerCase() === "tr";
                    return width === 0 && height === 0 && !skip ? true : width > 0 && height > 0 && !skip ? false : jQuery.curCSS(elem, "display") === "none";
                };
                jQuery.expr.filters.visible = function (elem) {
                    return !jQuery.expr.filters.hidden(elem);
                };
            }
            var jsc = now(),
                rscript = /<script(.|\s)*?\/script>/gi,
                rselectTextarea = /select|textarea/i,
                rinput = /color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,
                jsre = /=\?(&|$)/,
                rquery = /\?/,
                rts = /(\?|&)_=.*?(&|$)/,
                rurl = /^(\w+:)?\/\/([^\/?#]+)/,
                r20 = /%20/g,
                _load = jQuery.fn.load;
            jQuery.fn.extend({
                load: function (url, params, callback) {
                    if (typeof url !== "string") {
                        return _load.call(this, url);
                    } else if (!this.length) {
                        return this;
                    }
                    var off = url.indexOf(" ");
                    if (off >= 0) {
                        var selector = url.slice(off, url.length);
                        url = url.slice(0, off);
                    }
                    var type = "GET";
                    if (params) {
                        if (jQuery.isFunction(params)) {
                            callback = params;
                            params = null;
                        } else if (typeof params === "object") {
                            params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                            type = "POST";
                        }
                    }
                    var self = this;
                    jQuery.ajax({
                        url: url,
                        type: type,
                        dataType: "html",
                        data: params,
                        complete: function (res, status) {
                            if (status === "success" || status === "notmodified") {
                                self.html(selector ? jQuery("<div />").append(res.responseText.replace(rscript, "")).find(selector) : res.responseText);
                            }
                            if (callback) {
                                self.each(callback, [res.responseText, status, res]);
                            }
                        }
                    });
                    return this;
                },
                serialize: function () {
                    return jQuery.param(this.serializeArray());
                },
                serializeArray: function () {
                    return this.map(function () {
                        return this.elements ? jQuery.makeArray(this.elements) : this;
                    }).filter(function () {
                        return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));
                    }).map(function (i, elem) {
                        var val = jQuery(this).val();
                        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val, i) {
                            return {
                                name: elem.name,
                                value: val
                            };
                        }) : {
                            name: elem.name,
                            value: val
                        };
                    }).get();
                }
            });
            jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
                jQuery.fn[o] = function (f) {
                    return this.bind(o, f);
                };
            });
            jQuery.extend({
                get: function (url, data, callback, type) {
                    if (jQuery.isFunction(data)) {
                        type = type || callback;
                        callback = data;
                        data = null;
                    }
                    return jQuery.ajax({
                        type: "POST",
                        url: url,
                        data: data,
                        success: callback,
                        dataType: type
                    });
                },
                getScript: function (url, callback) {
                    return jQuery.get(url, null, callback, "script");
                },
                getJSON: function (url, data, callback) {
                    return jQuery.get(url, data, callback, "json");
                },
                post: function (url, data, callback, type) {
                    if (jQuery.isFunction(data)) {
                        type = type || callback;
                        callback = data;
                        data = {};
                    }
                    return jQuery.ajax({
                        type: "GET",
                        url: url,
                        data: data,
                        success: callback,
                        dataType: type
                    });
                },
                ajaxSetup: function (settings) {
                    jQuery.extend(jQuery.ajaxSettings, settings);
                },
                ajaxSettings: {
                    url: location.href,
                    global: true,
                    type: "GET",
                    contentType: "application/x-www-form-urlencoded",
                    processData: true,
                    async: true,
                    xhr: window.XMLHttpRequest && (window.location.protocol !== "file:" || !window.ActiveXObject) ? function () {
                        return new window.XMLHttpRequest();
                    } : function () {
                        try {
                            return new window.ActiveXObject("Microsoft.XMLHTTP");
                        } catch (e) {}
                    },
                    accepts: {
                        xml: "application/xml, text/xml",
                        html: "text/html",
                        script: "text/javascript, application/javascript",
                        json: "application/json, text/javascript",
                        text: "text/plain",
                        _default: "*/*"
                    }
                },
                lastModified: {},
                etag: {},
                ajax: function (origSettings) {
                    var s = jQuery.extend(true, {}, jQuery.ajaxSettings, origSettings);
                    var jsonp, status, data, callbackContext = origSettings && origSettings.context || s,
                        type = s.type.toUpperCase();
                    if (s.data && s.processData && typeof s.data !== "string") {
                        s.data = jQuery.param(s.data, s.traditional);
                    }
                    if (s.dataType === "jsonp") {
                        if (type === "GET") {
                            if (!jsre.test(s.url)) {
                                s.url += (rquery.test(s.url) ? "&" : "?") + (s.jsonp || "callback") + "=?";
                            }
                        } else if (!s.data || !jsre.test(s.data)) {
                            s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";
                        }
                        s.dataType = "json";
                    }
                    if (s.dataType === "json" && (s.data && jsre.test(s.data) || jsre.test(s.url))) {
                        jsonp = s.jsonpCallback || ("jsonp" + jsc++);
                        if (s.data) {
                            s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");
                        }
                        s.url = s.url.replace(jsre, "=" + jsonp + "$1");
                        s.dataType = "script";
                        window[jsonp] = window[jsonp] || function (tmp) {
                            data = tmp;
                            success();
                            complete();
                            window[jsonp] = undefined;
                            try {
                                delete window[jsonp];
                            } catch (e) {}
                            if (head) {
                                head.removeChild(script);
                            }
                        };
                    }
                    if (s.dataType === "script" && s.cache === null) {
                        s.cache = false;
                    }
                    if (s.cache === false && type === "GET") {
                        var ts = now();
                        var ret = s.url.replace(rts, "$1_=" + ts + "$2");
                        s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
                    }
                    if (s.data && type === "GET") {
                        s.url += (rquery.test(s.url) ? "&" : "?") + s.data;
                    }
                    if (s.global && !jQuery.active++) {
                        jQuery.event.trigger("ajaxStart");
                    }
                    var parts = rurl.exec(s.url),
                        remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);
                    if (s.dataType === "script" && type === "GET" && remote) {
                        var head = document.getElementsByTagName("head")[0] || document.documentElement;
                        var script = document.createElement("script");
                        script.src = s.url;
                        if (s.scriptCharset) {
                            script.charset = s.scriptCharset;
                        }
                        if (!jsonp) {
                            var done = false;
                            script.onload = script.onreadystatechange = function () {
                                if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                                    done = true;
                                    success();
                                    complete();
                                    script.onload = script.onreadystatechange = null;
                                    if (head && script.parentNode) {
                                        head.removeChild(script);
                                    }
                                }
                            };
                        }
                        head.insertBefore(script, head.firstChild);
                        return undefined;
                    }
                    var requestDone = false;
                    var xhr = s.xhr();
                    if (!xhr) {
                        return;
                    }
                    if (s.username) {
                        xhr.open(type, s.url, s.async, s.username, s.password);
                    } else {
                        xhr.open(type, s.url, s.async);
                    }
                    try {
                        if (s.data || origSettings && origSettings.contentType) {
                            xhr.setRequestHeader("Content-Type", s.contentType);
                        }
                        if (s.ifModified) {
                            if (jQuery.lastModified[s.url]) {
                                xhr.setRequestHeader("If-Modified-Since", jQuery.lastModified[s.url]);
                            }
                            if (jQuery.etag[s.url]) {
                                xhr.setRequestHeader("If-None-Match", jQuery.etag[s.url]);
                            }
                        }
                        if (!remote) {
                            xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                        }
                        xhr.setRequestHeader("Accept", s.dataType && s.accepts[s.dataType] ? s.accepts[s.dataType] + ", */*" : s.accepts._default);
                    } catch (e) {}
                    if (s.beforeSend && s.beforeSend.call(callbackContext, xhr, s) === false) {
                        if (s.global && !--jQuery.active) {
                            jQuery.event.trigger("ajaxStop");
                        }
                        xhr.abort();
                        return false;
                    }
                    if (s.global) {
                        trigger("ajaxSend", [xhr, s]);
                    }
                    var onreadystatechange = xhr.onreadystatechange = function (isTimeout) {
                        if (!xhr || xhr.readyState === 0 || isTimeout === "abort") {
                            if (!requestDone) {
                                complete();
                            }
                            requestDone = true;
                            if (xhr) {
                                xhr.onreadystatechange = jQuery.noop;
                            }
                        } else if (!requestDone && xhr && (xhr.readyState === 4 || isTimeout === "timeout")) {
                            requestDone = true;
                            xhr.onreadystatechange = jQuery.noop;
                            status = isTimeout === "timeout" ? "timeout" : !jQuery.httpSuccess(xhr) ? "error" : s.ifModified && jQuery.httpNotModified(xhr, s.url) ? "notmodified" : "success";
                            var errMsg;
                            if (status === "success") {
                                try {
                                    data = jQuery.httpData(xhr, s.dataType, s);
                                } catch (err) {
                                    status = "parsererror";
                                    errMsg = err;
                                }
                            }
                            if (status === "success" || status === "notmodified") {
                                if (!jsonp) {
                                    success();
                                }
                            } else {
                                jQuery.handleError(s, xhr, status, errMsg);
                            }
                            complete();
                            if (isTimeout === "timeout") {
                                xhr.abort();
                            }
                            if (s.async) {
                                xhr = null;
                            }
                        }
                    };
                    try {
                        var oldAbort = xhr.abort;
                        xhr.abort = function () {
                            if (xhr) {
                                oldAbort.call(xhr);
                            }
                            onreadystatechange("abort");
                        };
                    } catch (e) {}
                    if (s.async && s.timeout > 0) {
                        setTimeout(function () {
                            if (xhr && !requestDone) {
                                onreadystatechange("timeout");
                            }
                        }, s.timeout);
                    }
                    try {
                    
                        //// console.log('######REQUEST TYPE : ' + type);
                        //// console.log(s.data);
                        xhr.send(type === "POST" || type === "PUT" || type === "DELETE" ? s.data : null);
                    } catch (e) {
                        jQuery.handleError(s, xhr, null, e);
                        complete();
                    }
                    if (!s.async) {
                        onreadystatechange();
                    }

                    function success() {
                        if (s.success) {
                            s.success.call(callbackContext, data, status, xhr);
                        }
                        if (s.global) {
                            trigger("ajaxSuccess", [xhr, s]);
                        }
                    }

                    function complete() {
                        if (s.complete) {
                            s.complete.call(callbackContext, xhr, status);
                        }
                        if (s.global) {
                            trigger("ajaxComplete", [xhr, s]);
                        }
                        if (s.global && !--jQuery.active) {
                            jQuery.event.trigger("ajaxStop");
                        }
                    }

                    function trigger(type, args) {
                        (s.context ? jQuery(s.context) : jQuery.event).trigger(type, args);
                    }
                    return xhr;
                },
                handleError: function (s, xhr, status, e) {
                    if (s.error) {
                        s.error.call(s.context || s, xhr, status, e);
                    }
                    if (s.global) {
                        (s.context ? jQuery(s.context) : jQuery.event).trigger("ajaxError", [xhr, s, e]);
                    }
                },
                active: 0,
                httpSuccess: function (xhr) {
                    try {
                        return !xhr.status && location.protocol === "file:" || (xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || xhr.status === 1223 || xhr.status === 0;
                    } catch (e) {}
                    return false;
                },
                httpNotModified: function (xhr, url) {
                    var lastModified = xhr.getResponseHeader("Last-Modified"),
                        etag = xhr.getResponseHeader("Etag");
                    if (lastModified) {
                        jQuery.lastModified[url] = lastModified;
                    }
                    if (etag) {
                        jQuery.etag[url] = etag;
                    }
                    return xhr.status === 304 || xhr.status === 0;
                },
                httpData: function (xhr, type, s) {
                    var ct = xhr.getResponseHeader("content-type") || "",
                        xml = type === "xml" || !type && ct.indexOf("xml") >= 0,
                        data = xml ? xhr.responseXML : xhr.responseText;
                    if (xml && data.documentElement.nodeName === "parsererror") {
                        jQuery.error("parsererror");
                    }
                    if (s && s.dataFilter) {
                        data = s.dataFilter(data, type);
                    }
                    if (typeof data === "string") {
                        if (type === "json" || !type && ct.indexOf("json") >= 0) {
                            data = jQuery.parseJSON(data);
                        } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
                            jQuery.globalEval(data);
                        }
                    }
                    return data;
                },
                param: function (a, traditional) {
                    var s = [];
                    if (traditional === undefined) {
                        traditional = jQuery.ajaxSettings.traditional;
                    }
                    if (jQuery.isArray(a) || a.jquery) {
                        jQuery.each(a, function () {
                            add(this.name, this.value);
                        });
                    } else {
                        for (var prefix in a) {
                            buildParams(prefix, a[prefix]);
                        }
                    }
                    return s.join("&").replace(r20, "+");

                    function buildParams(prefix, obj) {
                        if (jQuery.isArray(obj)) {
                            jQuery.each(obj, function (i, v) {
                                if (traditional || /\[\]$/.test(prefix)) {
                                    add(prefix, v);
                                } else {
                                    buildParams(prefix + "[" + (typeof v === "object" || jQuery.isArray(v) ? i : "") + "]", v);
                                }
                            });
                        } else if (!traditional && obj != null && typeof obj === "object") {
                            jQuery.each(obj, function (k, v) {
                                buildParams(prefix + "[" + k + "]", v);
                            });
                        } else {
                            add(prefix, obj);
                        }
                    }

                    function add(key, value) {
                        value = jQuery.isFunction(value) ? value() : value;
                        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
                    }
                }
            });
            var elemdisplay = {}, rfxtypes = /toggle|show|hide/,
                rfxnum = /^([+-]=)?([\d+-.]+)(.*)$/,
                timerId, fxAttrs = [
                    ["height", "marginTop", "marginBottom", "paddingTop", "paddingBottom"],
                    ["width", "marginLeft", "marginRight", "paddingLeft", "paddingRight"],
                    ["opacity"]
                ];
            jQuery.fn.extend({
                show: function (speed, callback) {
                    if (speed || speed === 0) {
                        return this.animate(genFx("show", 3), speed, callback);
                    } else {
                        for (var i = 0, l = this.length; i < l; i++) {
                            var old = jQuery.data(this[i], "olddisplay");
                            this[i].style.display = old || "";
                            if (jQuery.css(this[i], "display") === "none") {
                                var nodeName = this[i].nodeName,
                                    display;
                                if (elemdisplay[nodeName]) {
                                    display = elemdisplay[nodeName];
                                } else {
                                    var elem = jQuery("<" + nodeName + " />").appendTo("body");
                                    display = elem.css("display");
                                    if (display === "none") {
                                        display = "block";
                                    }
                                    elem.remove();
                                    elemdisplay[nodeName] = display;
                                }
                                jQuery.data(this[i], "olddisplay", display);
                            }
                        }
                        for (var j = 0, k = this.length; j < k; j++) {
                            this[j].style.display = jQuery.data(this[j], "olddisplay") || "";
                        }
                        return this;
                    }
                },
                hide: function (speed, callback) {
                    if (speed || speed === 0) {
                        return this.animate(genFx("hide", 3), speed, callback);
                    } else {
                        for (var i = 0, l = this.length; i < l; i++) {
                            var old = jQuery.data(this[i], "olddisplay");
                            if (!old && old !== "none") {
                                jQuery.data(this[i], "olddisplay", jQuery.css(this[i], "display"));
                            }
                        }
                        for (var j = 0, k = this.length; j < k; j++) {
                            this[j].style.display = "none";
                        }
                        return this;
                    }
                },
                _toggle: jQuery.fn.toggle,
                toggle: function (fn, fn2) {
                    var bool = typeof fn === "boolean";
                    if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                        this._toggle.apply(this, arguments);
                    } else if (fn == null || bool) {
                        this.each(function () {
                            var state = bool ? fn : jQuery(this).is(":hidden");
                            jQuery(this)[state ? "show" : "hide"]();
                        });
                    } else {
                        this.animate(genFx("toggle", 3), fn, fn2);
                    }
                    return this;
                },
                fadeTo: function (speed, to, callback) {
                    return this.filter(":hidden").css("opacity", 0).show().end().animate({
                        opacity: to
                    }, speed, callback);
                },
                animate: function (prop, speed, easing, callback) {
                    var optall = jQuery.speed(speed, easing, callback);
                    if (jQuery.isEmptyObject(prop)) {
                        return this.each(optall.complete);
                    }
                    return this[optall.queue === false ? "each" : "queue"](function () {
                        var opt = jQuery.extend({}, optall),
                            p, hidden = this.nodeType === 1 && jQuery(this).is(":hidden"),
                            self = this;
                        for (p in prop) {
                            var name = p.replace(rdashAlpha, fcamelCase);
                            if (p !== name) {
                                prop[name] = prop[p];
                                delete prop[p];
                                p = name;
                            }
                            if (prop[p] === "hide" && hidden || prop[p] === "show" && !hidden) {
                                return opt.complete.call(this);
                            }
                            if ((p === "height" || p === "width") && this.style) {
                                opt.display = jQuery.css(this, "display");
                                opt.overflow = this.style.overflow;
                            }
                            if (jQuery.isArray(prop[p])) {
                                (opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];
                                prop[p] = prop[p][0];
                            }
                        }
                        if (opt.overflow != null) {
                            this.style.overflow = "hidden";
                        }
                        opt.curAnim = jQuery.extend({}, prop);
                        jQuery.each(prop, function (name, val) {
                            var e = new jQuery.fx(self, opt, name);
                            if (rfxtypes.test(val)) {
                                e[val === "toggle" ? hidden ? "show" : "hide" : val](prop);
                            } else {
                                var parts = rfxnum.exec(val),
                                    start = e.cur(true) || 0;
                                if (parts) {
                                    var end = parseFloat(parts[2]),
                                        unit = parts[3] || "px";
                                    if (unit !== "px") {
                                        self.style[name] = (end || 1) + unit;
                                        start = ((end || 1) / e.cur(true)) * start;
                                        self.style[name] = start + unit;
                                    }
                                    if (parts[1]) {
                                        end = ((parts[1] === "-=" ? -1 : 1) * end) + start;
                                    }
                                    e.custom(start, end, unit);
                                } else {
                                    e.custom(start, val, "");
                                }
                            }
                        });
                        return true;
                    });
                },
                stop: function (clearQueue, gotoEnd) {
                    var timers = jQuery.timers;
                    if (clearQueue) {
                        this.queue([]);
                    }
                    this.each(function () {
                        for (var i = timers.length - 1; i >= 0; i--) {
                            if (timers[i].elem === this) {
                                if (gotoEnd) {
                                    timers[i](true);
                                }
                                timers.splice(i, 1);
                            }
                        }
                    });
                    if (!gotoEnd) {
                        this.dequeue();
                    }
                    return this;
                }
            });
            jQuery.each({
                slideDown: genFx("show", 1),
                slideUp: genFx("hide", 1),
                slideToggle: genFx("toggle", 1),
                fadeIn: {
                    opacity: "show"
                },
                fadeOut: {
                    opacity: "hide"
                }
            }, function (name, props) {
                jQuery.fn[name] = function (speed, callback) {
                    return this.animate(props, speed, callback);
                };
            });
            jQuery.extend({
                speed: function (speed, easing, fn) {
                    var opt = speed && typeof speed === "object" ? speed : {
                        complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                        duration: speed,
                        easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
                    };
                    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : jQuery.fx.speeds[opt.duration] || jQuery.fx.speeds._default;
                    opt.old = opt.complete;
                    opt.complete = function () {
                        if (opt.queue !== false) {
                            jQuery(this).dequeue();
                        }
                        if (jQuery.isFunction(opt.old)) {
                            opt.old.call(this);
                        }
                    };
                    return opt;
                },
                easing: {
                    linear: function (p, n, firstNum, diff) {
                        return firstNum + diff * p;
                    },
                    swing: function (p, n, firstNum, diff) {
                        return ((-Math.cos(p * Math.PI) / 2) + 0.5) * diff + firstNum;
                    }
                },
                timers: [],
                fx: function (elem, options, prop) {
                    this.options = options;
                    this.elem = elem;
                    this.prop = prop;
                    if (!options.orig) {
                        options.orig = {};
                    }
                }
            });
            jQuery.fx.prototype = {
                update: function () {
                    if (this.options.step) {
                        this.options.step.call(this.elem, this.now, this);
                    }
                    (jQuery.fx.step[this.prop] || jQuery.fx.step._default)(this);
                    if ((this.prop === "height" || this.prop === "width") && this.elem.style) {
                        this.elem.style.display = "block";
                    }
                },
                cur: function (force) {
                    if (this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null)) {
                        return this.elem[this.prop];
                    }
                    var r = parseFloat(jQuery.css(this.elem, this.prop, force));
                    return r && r > -10000 ? r : parseFloat(jQuery.curCSS(this.elem, this.prop)) || 0;
                },
                custom: function (from, to, unit) {
                    this.startTime = now();
                    this.start = from;
                    this.end = to;
                    this.unit = unit || this.unit || "px";
                    this.now = this.start;
                    this.pos = this.state = 0;
                    var self = this;

                    function t(gotoEnd) {
                        return self.step(gotoEnd);
                    }
                    t.elem = this.elem;
                    if (t() && jQuery.timers.push(t) && !timerId) {
                        timerId = setInterval(jQuery.fx.tick, 13);
                    }
                },
                show: function () {
                    this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
                    this.options.show = true;
                    this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
                    jQuery(this.elem).show();
                },
                hide: function () {
                    this.options.orig[this.prop] = jQuery.style(this.elem, this.prop);
                    this.options.hide = true;
                    this.custom(this.cur(), 0);
                },
                step: function (gotoEnd) {
                    var t = now(),
                        done = true;
                    if (gotoEnd || t >= this.options.duration + this.startTime) {
                        this.now = this.end;
                        this.pos = this.state = 1;
                        this.update();
                        this.options.curAnim[this.prop] = true;
                        for (var i in this.options.curAnim) {
                            if (this.options.curAnim[i] !== true) {
                                done = false;
                            }
                        }
                        if (done) {
                            if (this.options.display != null) {
                                this.elem.style.overflow = this.options.overflow;
                                var old = jQuery.data(this.elem, "olddisplay");
                                this.elem.style.display = old ? old : this.options.display;
                                if (jQuery.css(this.elem, "display") === "none") {
                                    this.elem.style.display = "block";
                                }
                            }
                            if (this.options.hide) {
                                jQuery(this.elem).hide();
                            }
                            if (this.options.hide || this.options.show) {
                                for (var p in this.options.curAnim) {
                                    jQuery.style(this.elem, p, this.options.orig[p]);
                                }
                            }
                            this.options.complete.call(this.elem);
                        }
                        return false;
                    } else {
                        var n = t - this.startTime;
                        this.state = n / this.options.duration;
                        var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];
                        var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");
                        this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);
                        this.now = this.start + ((this.end - this.start) * this.pos);
                        this.update();
                    }
                    return true;
                }
            };
            jQuery.extend(jQuery.fx, {
                tick: function () {
                    var timers = jQuery.timers;
                    for (var i = 0; i < timers.length; i++) {
                        if (!timers[i]()) {
                            timers.splice(i--, 1);
                        }
                    }
                    if (!timers.length) {
                        jQuery.fx.stop();
                    }
                },
                stop: function () {
                    clearInterval(timerId);
                    timerId = null;
                },
                speeds: {
                    slow: 600,
                    fast: 200,
                    _default: 400
                },
                step: {
                    opacity: function (fx) {
                        jQuery.style(fx.elem, "opacity", fx.now);
                    },
                    _default: function (fx) {
                        if (fx.elem.style && fx.elem.style[fx.prop] != null) {
                            fx.elem.style[fx.prop] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;
                        } else {
                            fx.elem[fx.prop] = fx.now;
                        }
                    }
                }
            });
            if (jQuery.expr && jQuery.expr.filters) {
                jQuery.expr.filters.animated = function (elem) {
                    return jQuery.grep(jQuery.timers, function (fn) {
                        return elem === fn.elem;
                    }).length;
                };
            }

            function genFx(type, num) {
                var obj = {};
                jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function () {
                    obj[this] = type;
                });
                return obj;
            }
            if ("getBoundingClientRect" in document.documentElement) {
                jQuery.fn.offset = function (options) {
                    var elem = this[0];
                    if (options) {
                        return this.each(function (i) {
                            jQuery.offset.setOffset(this, options, i);
                        });
                    }
                    if (!elem || !elem.ownerDocument) {
                        return null;
                    }
                    if (elem === elem.ownerDocument.body) {
                        return jQuery.offset.bodyOffset(elem);
                    }
                    var box = elem.getBoundingClientRect(),
                        doc = elem.ownerDocument,
                        body = doc.body,
                        docElem = doc.documentElement,
                        clientTop = docElem.clientTop || body.clientTop || 0,
                        clientLeft = docElem.clientLeft || body.clientLeft || 0,
                        top = box.top + (self.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop) - clientTop,
                        left = box.left + (self.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft) - clientLeft;
                    return {
                        top: top,
                        left: left
                    };
                };
            } else {
                jQuery.fn.offset = function (options) {
                    var elem = this[0];
                    if (options) {
                        return this.each(function (i) {
                            jQuery.offset.setOffset(this, options, i);
                        });
                    }
                    if (!elem || !elem.ownerDocument) {
                        return null;
                    }
                    if (elem === elem.ownerDocument.body) {
                        return jQuery.offset.bodyOffset(elem);
                    }
                    jQuery.offset.initialize();
                    var offsetParent = elem.offsetParent,
                        prevOffsetParent = elem,
                        doc = elem.ownerDocument,
                        computedStyle, docElem = doc.documentElement,
                        body = doc.body,
                        defaultView = doc.defaultView,
                        prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle,
                        top = elem.offsetTop,
                        left = elem.offsetLeft;
                    while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                        if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                            break;
                        }
                        computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                        top -= elem.scrollTop;
                        left -= elem.scrollLeft;
                        if (elem === offsetParent) {
                            top += elem.offsetTop;
                            left += elem.offsetLeft;
                            if (jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && /^t(able|d|h)$/i.test(elem.nodeName))) {
                                top += parseFloat(computedStyle.borderTopWidth) || 0;
                                left += parseFloat(computedStyle.borderLeftWidth) || 0;
                            }
                            prevOffsetParent = offsetParent, offsetParent = elem.offsetParent;
                        }
                        if (jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                            top += parseFloat(computedStyle.borderTopWidth) || 0;
                            left += parseFloat(computedStyle.borderLeftWidth) || 0;
                        }
                        prevComputedStyle = computedStyle;
                    }
                    if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                        top += body.offsetTop;
                        left += body.offsetLeft;
                    }
                    if (jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed") {
                        top += Math.max(docElem.scrollTop, body.scrollTop);
                        left += Math.max(docElem.scrollLeft, body.scrollLeft);
                    }
                    return {
                        top: top,
                        left: left
                    };
                };
            }
            jQuery.offset = {
                initialize: function () {
                    var body = document.body,
                        container = document.createElement("div"),
                        innerDiv, checkDiv, table, td, bodyMarginTop = parseFloat(jQuery.curCSS(body, "marginTop", true)) || 0,
                        html = "<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";
                    jQuery.extend(container.style, {
                        position: "absolute",
                        top: 0,
                        left: 0,
                        margin: 0,
                        border: 0,
                        width: "1px",
                        height: "1px",
                        visibility: "hidden"
                    });
                    container.innerHTML = html;
                    body.insertBefore(container, body.firstChild);
                    innerDiv = container.firstChild;
                    checkDiv = innerDiv.firstChild;
                    td = innerDiv.nextSibling.firstChild.firstChild;
                    this.doesNotAddBorder = (checkDiv.offsetTop !== 5);
                    this.doesAddBorderForTableAndCells = (td.offsetTop === 5);
                    checkDiv.style.position = "fixed", checkDiv.style.top = "20px";
                    this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);
                    checkDiv.style.position = checkDiv.style.top = "";
                    innerDiv.style.overflow = "hidden", innerDiv.style.position = "relative";
                    this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);
                    this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);
                    body.removeChild(container);
                    body = container = innerDiv = checkDiv = table = td = null;
                    jQuery.offset.initialize = jQuery.noop;
                },
                bodyOffset: function (body) {
                    var top = body.offsetTop,
                        left = body.offsetLeft;
                    jQuery.offset.initialize();
                    if (jQuery.offset.doesNotIncludeMarginInBodyOffset) {
                        top += parseFloat(jQuery.curCSS(body, "marginTop", true)) || 0;
                        left += parseFloat(jQuery.curCSS(body, "marginLeft", true)) || 0;
                    }
                    return {
                        top: top,
                        left: left
                    };
                },
                setOffset: function (elem, options, i) {
                    if (/static/.test(jQuery.curCSS(elem, "position"))) {
                        elem.style.position = "relative";
                    }
                    var curElem = jQuery(elem),
                        curOffset = curElem.offset(),
                        curTop = parseInt(jQuery.curCSS(elem, "top", true), 10) || 0,
                        curLeft = parseInt(jQuery.curCSS(elem, "left", true), 10) || 0;
                    if (jQuery.isFunction(options)) {
                        options = options.call(elem, i, curOffset);
                    }
                    var props = {
                        top: (options.top - curOffset.top) + curTop,
                        left: (options.left - curOffset.left) + curLeft
                    };
                    if ("using" in options) {
                        options.using.call(elem, props);
                    } else {
                        curElem.css(props);
                    }
                }
            };
            jQuery.fn.extend({
                position: function () {
                    if (!this[0]) {
                        return null;
                    }
                    var elem = this[0],
                        offsetParent = this.offsetParent(),
                        offset = this.offset(),
                        parentOffset = /^body|html$/i.test(offsetParent[0].nodeName) ? {
                            top: 0,
                            left: 0
                        } : offsetParent.offset();
                    offset.top -= parseFloat(jQuery.curCSS(elem, "marginTop", true)) || 0;
                    offset.left -= parseFloat(jQuery.curCSS(elem, "marginLeft", true)) || 0;
                    parentOffset.top += parseFloat(jQuery.curCSS(offsetParent[0], "borderTopWidth", true)) || 0;
                    parentOffset.left += parseFloat(jQuery.curCSS(offsetParent[0], "borderLeftWidth", true)) || 0;
                    return {
                        top: offset.top - parentOffset.top,
                        left: offset.left - parentOffset.left
                    };
                },
                offsetParent: function () {
                    return this.map(function () {
                        var offsetParent = this.offsetParent || document.body;
                        while (offsetParent && (!/^body|html$/i.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                            offsetParent = offsetParent.offsetParent;
                        }
                        return offsetParent;
                    });
                }
            });
            jQuery.each(["Left", "Top"], function (i, name) {
                var method = "scroll" + name;
                jQuery.fn[method] = function (val) {
                    var elem = this[0],
                        win;
                    if (!elem) {
                        return null;
                    }
                    if (val !== undefined) {
                        return this.each(function () {
                            win = getWindow(this);
                            if (win) {
                                win.scrollTo(!i ? val : jQuery(win).scrollLeft(), i ? val : jQuery(win).scrollTop());
                            } else {
                                this[method] = val;
                            }
                        });
                    } else {
                        win = getWindow(elem);
                        return win ? ("pageXOffset" in win) ? win[i ? "pageYOffset" : "pageXOffset"] : jQuery.support.boxModel && win.document.documentElement[method] || win.document.body[method] : elem[method];
                    }
                };
            });

            function getWindow(elem) {
                return ("scrollTo" in elem && elem.document) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
            }
            jQuery.each(["Height", "Width"], function (i, name) {
                var type = name.toLowerCase();
                jQuery.fn["inner" + name] = function () {
                    return this[0] ? jQuery.css(this[0], type, false, "padding") : null;
                };
                jQuery.fn["outer" + name] = function (margin) {
                    return this[0] ? jQuery.css(this[0], type, false, margin ? "margin" : "border") : null;
                };
                jQuery.fn[type] = function (size) {
                    var elem = this[0];
                    if (!elem) {
                        return size == null ? null : this;
                    }
                    if (jQuery.isFunction(size)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            self[type](size.call(this, i, self[type]()));
                        });
                    }
                    return ("scrollTo" in elem && elem.document) ? elem.document.compatMode === "CSS1Compat" && elem.document.documentElement["client" + name] || elem.document.body["client" + name] : (elem.nodeType === 9) ? Math.max(elem.documentElement["client" + name], elem.body["scroll" + name], elem.documentElement["scroll" + name], elem.body["offset" + name], elem.documentElement["offset" + name]) : size === undefined ? jQuery.css(elem, type) : this.css(type, typeof size === "string" ? size : size + "px");
                };
            });
            window.jQuery = window.$ = jQuery;
        })(window);
        //End of Jquery 1.4.2
        var jQuery = window.jQuery.noConflict(true),
        $ = jQuery;


//Calendar Starts Here

/*
 * Date prototype extensions. Doesn't depend on any
 * other code. Doens't overwrite existing methods.
 *
 * Adds dayNames, abbrDayNames, monthNames and abbrMonthNames static properties and isLeapYear,
 * isWeekend, isWeekDay, getDaysInMonth, getDayName, getMonthName, getDayOfYear, getWeekOfYear,
 * setDayOfYear, addYears, addMonths, addDays, addHours, addMinutes, addSeconds methods
 *
 * Copyright (c) 2006 JÃ¶rn Zaefferer and Brandon Aaron (brandon.aaron@gmail.com || http://brandonaaron.net)
 *
 * Additional methods and properties added by Kelvin Luck: firstDayOfWeek, dateFormat, zeroTime, asString, fromString -
 * I've added my name to these methods so you know who to blame if they are broken!
 * 
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 */

/**
 * An Array of day names starting with Sunday.
 * 
 * @example dayNames[0]
 * @result 'Sunday'
 *
 * @name dayNames
 * @type Array
 * @cat Plugins/Methods/Date
 */
Date.dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

/**
 * An Array of abbreviated day names starting with Sun.
 * 
 * @example abbrDayNames[0]
 * @result 'Sun'
 *
 * @name abbrDayNames
 * @type Array
 * @cat Plugins/Methods/Date
 */
Date.abbrDayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

/**
 * An Array of month names starting with Janurary.
 * 
 * @example monthNames[0]
 * @result 'January'
 *
 * @name monthNames
 * @type Array
 * @cat Plugins/Methods/Date
 */
Date.monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

/**
 * An Array of abbreviated month names starting with Jan.
 * 
 * @example abbrMonthNames[0]
 * @result 'Jan'
 *
 * @name monthNames
 * @type Array
 * @cat Plugins/Methods/Date
 */
Date.abbrMonthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

/**
 * The first day of the week for this locale.
 *
 * @name firstDayOfWeek
 * @type Number
 * @cat Plugins/Methods/Date
 * @author Kelvin Luck
 */
Date.firstDayOfWeek = 1;

/**
 * The format that string dates should be represented as (e.g. 'dd/mm/yyyy' for UK, 'mm/dd/yyyy' for US, 'yyyy-mm-dd' for Unicode etc).
 *
 * @name format
 * @type String
 * @cat Plugins/Methods/Date
 * @author Kelvin Luck
 */
//Date.format = 'dd/mm/yyyy';
Date.format = 'mm/dd/yyyy';
//Date.format = 'yyyy-mm-dd';
//Date.format = 'dd mmm yy';

/**
 * The first two numbers in the century to be used when decoding a two digit year. Since a two digit year is ambiguous (and date.setYear
 * only works with numbers < 99 and so doesn't allow you to set years after 2000) we need to use this to disambiguate the two digit year codes.
 *
 * @name format
 * @type String
 * @cat Plugins/Methods/Date
 * @author Kelvin Luck
 */
Date.fullYearStart = '20';

(function() {

    /**
     * Adds a given method under the given name 
     * to the Date prototype if it doesn't
     * currently exist.
     *
     * @private
     */
    function add(name, method) {
        if( !Date.prototype[name] ) {
            Date.prototype[name] = method;
        }
    };
    
    /**
     * Checks if the year is a leap year.
     *
     * @example var dtm = new Date("01/12/2008");
     * dtm.isLeapYear();
     * @result true
     *
     * @name isLeapYear
     * @type Boolean
     * @cat Plugins/Methods/Date
     */
    add("isLeapYear", function() {
        var y = this.getFullYear();
        return (y%4==0 && y%100!=0) || y%400==0;
    });
    
    /**
     * Checks if the day is a weekend day (Sat or Sun).
     *
     * @example var dtm = new Date("01/12/2008");
     * dtm.isWeekend();
     * @result false
     *
     * @name isWeekend
     * @type Boolean
     * @cat Plugins/Methods/Date
     */
    add("isWeekend", function() {
        return this.getDay()==0 || this.getDay()==6;
    });
    
    /**
     * Check if the day is a day of the week (Mon-Fri)
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.isWeekDay();
     * @result false
     * 
     * @name isWeekDay
     * @type Boolean
     * @cat Plugins/Methods/Date
     */
    add("isWeekDay", function() {
        return !this.isWeekend();
    });
    
    /**
     * Gets the number of days in the month.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.getDaysInMonth();
     * @result 31
     * 
     * @name getDaysInMonth
     * @type Number
     * @cat Plugins/Methods/Date
     */
    add("getDaysInMonth", function() {
        return [31,(this.isLeapYear() ? 29:28),31,30,31,30,31,31,30,31,30,31][this.getMonth()];
    });
    
    /**
     * Gets the name of the day.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.getDayName();
     * @result 'Saturday'
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.getDayName(true);
     * @result 'Sat'
     * 
     * @param abbreviated Boolean When set to true the name will be abbreviated.
     * @name getDayName
     * @type String
     * @cat Plugins/Methods/Date
     */
    add("getDayName", function(abbreviated) {
        return abbreviated ? Date.abbrDayNames[this.getDay()] : Date.dayNames[this.getDay()];
    });

    /**
     * Gets the name of the month.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.getMonthName();
     * @result 'Janurary'
     *
     * @example var dtm = new Date("01/12/2008");
     * dtm.getMonthName(true);
     * @result 'Jan'
     * 
     * @param abbreviated Boolean When set to true the name will be abbreviated.
     * @name getDayName
     * @type String
     * @cat Plugins/Methods/Date
     */
    add("getMonthName", function(abbreviated) {
        return abbreviated ? Date.abbrMonthNames[this.getMonth()] : Date.monthNames[this.getMonth()];
    });

    /**
     * Get the number of the day of the year.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.getDayOfYear();
     * @result 11
     * 
     * @name getDayOfYear
     * @type Number
     * @cat Plugins/Methods/Date
     */
    add("getDayOfYear", function() {
        var tmpdtm = new Date("1/1/" + this.getFullYear());
        return Math.floor((this.getTime() - tmpdtm.getTime()) / 86400000);
    });
    
    /**
     * Get the number of the week of the year.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.getWeekOfYear();
     * @result 2
     * 
     * @name getWeekOfYear
     * @type Number
     * @cat Plugins/Methods/Date
     */
    add("getWeekOfYear", function() {
        return Math.ceil(this.getDayOfYear() / 7);
    });

    /**
     * Set the day of the year.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.setDayOfYear(1);
     * dtm.toString();
     * @result 'Tue Jan 01 2008 00:00:00'
     * 
     * @name setDayOfYear
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("setDayOfYear", function(day) {
        this.setMonth(0);
        this.setDate(day);
        return this;
    });
    
    /**
     * Add a number of years to the date object.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.addYears(1);
     * dtm.toString();
     * @result 'Mon Jan 12 2009 00:00:00'
     * 
     * @name addYears
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("addYears", function(num) {
        this.setFullYear(this.getFullYear() + num);
        return this;
    });
    
    /**
     * Add a number of months to the date object.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.addMonths(1);
     * dtm.toString();
     * @result 'Tue Feb 12 2008 00:00:00'
     * 
     * @name addMonths
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("addMonths", function(num) {
        var tmpdtm = this.getDate();
        
        this.setMonth(this.getMonth() + num);
        
        if (tmpdtm > this.getDate())
            this.addDays(-this.getDate());
        
        return this;
    });
    
    /**
     * Add a number of days to the date object.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.addDays(1);
     * dtm.toString();
     * @result 'Sun Jan 13 2008 00:00:00'
     * 
     * @name addDays
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("addDays", function(num) {
        //this.setDate(this.getDate() + num);
        this.setTime(this.getTime() + (num*86400000) );
        return this;
    });
    
    /**
     * Add a number of hours to the date object.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.addHours(24);
     * dtm.toString();
     * @result 'Sun Jan 13 2008 00:00:00'
     * 
     * @name addHours
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("addHours", function(num) {
        this.setHours(this.getHours() + num);
        return this;
    });

    /**
     * Add a number of minutes to the date object.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.addMinutes(60);
     * dtm.toString();
     * @result 'Sat Jan 12 2008 01:00:00'
     * 
     * @name addMinutes
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("addMinutes", function(num) {
        this.setMinutes(this.getMinutes() + num);
        return this;
    });
    
    /**
     * Add a number of seconds to the date object.
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.addSeconds(60);
     * dtm.toString();
     * @result 'Sat Jan 12 2008 00:01:00'
     * 
     * @name addSeconds
     * @type Date
     * @cat Plugins/Methods/Date
     */
    add("addSeconds", function(num) {
        this.setSeconds(this.getSeconds() + num);
        return this;
    });
    
    /**
     * Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
     * 
     * @example var dtm = new Date();
     * dtm.zeroTime();
     * dtm.toString();
     * @result 'Sat Jan 12 2008 00:01:00'
     * 
     * @name zeroTime
     * @type Date
     * @cat Plugins/Methods/Date
     * @author Kelvin Luck
     */
    add("zeroTime", function() {
        this.setMilliseconds(0);
        this.setSeconds(0);
        this.setMinutes(0);
        this.setHours(0);
        return this;
    });
    
    /**
     * Returns a string representation of the date object according to Date.format.
     * (Date.toString may be used in other places so I purposefully didn't overwrite it)
     * 
     * @example var dtm = new Date("01/12/2008");
     * dtm.asString();
     * @result '12/01/2008' // (where Date.format == 'dd/mm/yyyy'
     * 
     * @name asString
     * @type Date
     * @cat Plugins/Methods/Date
     * @author Kelvin Luck
     */
    add("asString", function(format) {
        var r = format || Date.format;
        if (r.split('mm').length>1) { // ugly workaround to make sure we don't replace the m's in e.g. noveMber
            r = r.split('mmmm').join(this.getMonthName(false))
                .split('mmm').join(this.getMonthName(true))
                .split('mm').join(_zeroPad(this.getMonth()+1))
        } else {
            r = r.split('m').join(this.getMonth()+1);
        }
        r = r.split('yyyy').join(this.getFullYear())
            .split('yy').join((this.getFullYear() + '').substring(2))
            .split('dd').join(_zeroPad(this.getDate()))
            .split('d').join(this.getDate());
        return r;
    });
    
    /**
     * Returns a new date object created from the passed String according to Date.format or false if the attempt to do this results in an invalid date object
     * (We can't simple use Date.parse as it's not aware of locale and I chose not to overwrite it incase it's functionality is being relied on elsewhere)
     *
     * @example var dtm = Date.fromString("12/01/2008");
     * dtm.toString();
     * @result 'Sat Jan 12 2008 00:00:00' // (where Date.format == 'dd/mm/yyyy'
     * 
     * @name fromString
     * @type Date
     * @cat Plugins/Methods/Date
     * @author Kelvin Luck
     */
    Date.fromString = function(s)
    {
        var f = Date.format;
        
        var d = new Date('01/01/1900');
        
        if (s == '') return d;

        s = s.toLowerCase();
        var matcher = '';
        var order = [];
        var r = /(dd?d?|mm?m?|yy?yy?)+([^(m|d|y)])?/g;
        var results;
        while ((results = r.exec(f)) != null)
        {
            switch (results[1]) {
                case 'd':
                case 'dd':
                case 'm':
                case 'mm':
                case 'yy':
                case 'yyyy':
                    matcher += '(\\d+\\d?\\d?\\d?)+';
                    order.push(results[1].substr(0, 1));
                    break;
                case 'mmm':
                    matcher += '([a-z]{3})';
                    order.push('M');
                    break;
            }
            if (results[2]) {
                matcher += results[2];
            }
            
        }
        var dm = new RegExp(matcher);
        var result = s.match(dm);
        if(result !== null && result.length > 0)
        {
            for (var i=0; i<order.length; i++) {
                var res = result[i+1];
                switch(order[i]) {
                    case 'd':
                        d.setDate(res);
                        break;
                    case 'm':
                        d.setMonth(Number(res)-1);
                        break;
                    case 'M':
                        for (var j=0; j<Date.abbrMonthNames.length; j++) {
                            if (Date.abbrMonthNames[j].toLowerCase() == res) break;
                        }
                        d.setMonth(j);
                        break;
                    case 'y':
                        d.setYear(res);
                        break;
                }
            }
        }

        return d;
    };
    
    // utility method
    var _zeroPad = function(num) {
        var s = '0'+num;
        return s.substring(s.length-2)
        //return ('0'+num).substring(-2); // doesn't work on IE :(
    };
    
})();

(function($){
    
    $.fn.extend({
        renderCalendar  :   function(s)
        {
            var dc = function(a)
            {
                return document.createElement(a);
            };

            s = $.extend({}, $.fn.datePicker.defaults, s);
            
            if (s.showHeader != $.dpConst.SHOW_HEADER_NONE) {
                var headRow = $(dc('tr'));
                for (var i=Date.firstDayOfWeek; i<Date.firstDayOfWeek+7; i++) {
                    var weekday = i%7;
                    var day = Date.dayNames[weekday];
                    headRow.append(
                        jQuery(dc('th')).attr({'scope':'col', 'abbr':day, 'title':day, 'class':(weekday == 0 || weekday == 6 ? 'weekend' : 'weekday')}).html(s.showHeader == $.dpConst.SHOW_HEADER_SHORT ? day.substr(0, 1) : day)
                    );
                }
            };
            
            var calendarTable = $(dc('table'))
                                    .attr(
                                        {
                                            'cellspacing':2
                                        }
                                    )
                                    .addClass('jCalendar')
                                    .append(
                                        (s.showHeader != $.dpConst.SHOW_HEADER_NONE ? 
                                            $(dc('thead'))
                                                .append(headRow)
                                            :
                                            dc('thead')
                                        )
                                    );
            var tbody = $(dc('tbody'));
            
            var today = (new Date()).zeroTime();
            today.setHours(12);
            
            var month = s.month == undefined ? today.getMonth() : s.month;
            var year = s.year || today.getFullYear();
            
            var currentDate = (new Date(year, month, 1, 12, 0, 0));
            
            
            var firstDayOffset = Date.firstDayOfWeek - currentDate.getDay() + 1;
            if (firstDayOffset > 1) firstDayOffset -= 7;
            var weeksToDraw = Math.ceil(( (-1*firstDayOffset+1) + currentDate.getDaysInMonth() ) /7);
            currentDate.addDays(firstDayOffset-1);
            
            var doHover = function(firstDayInBounds)
            {
                return function()
                {
                    if (s.hoverClass) {
                        var $this = $(this);
                        if (!s.selectWeek) {
                            $this.addClass(s.hoverClass);
                        } else if (firstDayInBounds && !$this.is('.disabled')) {
                            $this.parent().addClass('activeWeekHover');
                        }
                    }
                }
            };
            var unHover = function()
            {
                if (s.hoverClass) {
                    var $this = $(this);
                    $this.removeClass(s.hoverClass);
                    $this.parent().removeClass('activeWeekHover');
                }
            };

            var w = 0;
            while (w++<weeksToDraw) {
                var r = jQuery(dc('tr'));
                var firstDayInBounds = s.dpController ? currentDate > s.dpController.startDate : false;
                for (var i=0; i<7; i++) {
                    var thisMonth = currentDate.getMonth() == month;
                    var d = $(dc('td'))
                                .text(currentDate.getDate() + '')
                                .addClass((thisMonth ? 'current-month ' : 'other-month ') +
                                                    (currentDate.isWeekend() ? 'weekend ' : 'weekday ') +
                                                    (thisMonth && currentDate.getTime() == today.getTime() ? 'today ' : '')
                                )
                                .data('datePickerDate', currentDate.asString())
                                .hover(doHover(firstDayInBounds), unHover)
                            ;
                    r.append(d);
                    if (s.renderCallback) {
                        s.renderCallback(d, currentDate, month, year);
                    }
                    // addDays(1) fails in some locales due to daylight savings. See issue 39.
                    //currentDate.addDays(1);
                    // set the time to midday to avoid any weird timezone issues??
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()+1, 12, 0, 0);
                }
                tbody.append(r);
            }
            calendarTable.append(tbody);
            
            return this.each(
                function()
                {
                    $(this).empty().append(calendarTable);
                }
            );
        },
        datePicker : function(s)
        {           
            if (!$.event._dpCache) $.event._dpCache = [];
            
            // initialise the date picker controller with the relevant settings...
            s = $.extend({}, $.fn.datePicker.defaults, s);
            
            return this.each(
                function()
                {
                    var $this = $(this);
                    var alreadyExists = true;
                    
                    if (!this._dpId) {
                        this._dpId = $.guid++;
                        $.event._dpCache[this._dpId] = new DatePicker(this);
                        alreadyExists = false;
                    }
                    
                    if (s.inline) {
                        s.createButton = false;
                        s.displayClose = false;
                        s.closeOnSelect = false;
                        $this.empty();
                    }
                    
                    var controller = $.event._dpCache[this._dpId];
                    
                    controller.init(s);
                    
                    if (!alreadyExists && s.createButton) {
                        // create it!
                        controller.button = $('<a href="#" class="dp-choose-date" title="' + $.dpText.TEXT_CHOOSE_DATE + '" alt="' + $.dpText.TEXT_CHOOSE_DATE + '">&nbsp;</a>')
                                .bind(
                                    'click',
                                    function()
                                    {
                                        $this.dpDisplay(this);
                                        this.blur();
                                        return false;
                                    }
                                );
                        $this.after(controller.button);
                    }
                    
                    if (!alreadyExists && $this.is(':text')) {
                        $this
                            .bind(
                                'dateSelected',
                                function(e, selectedDate, $td)
                                {
                                    this.value = selectedDate.asString();
                                }
                            ).bind(
                                'change',
                                function()
                                {
                                    if (this.value == '') {
                                        controller.clearSelected();
                                    } else {
                                        var d = Date.fromString(this.value);
                                        if (d) {
                                            controller.setSelected(d, true, true);
                                        }
                                    }
                                }
                            );
                        if (s.clickInput) {
                            $this.bind(
                                'click',
                                function()
                                {
                                    // The change event doesn't happen until the input loses focus so we need to manually trigger it...
                                    $this.trigger('change');
                                    $this.dpDisplay();
                                }
                            );
                        }
                        var d = Date.fromString(this.value);
                        if (this.value != '' && d) {
                            controller.setSelected(d, true, true);
                        }
                    }
                    
                    $this.addClass('dp-applied');
                    
                }
            )
        },
        dpSetDisabled : function(s)
        {
            return _w.call(this, 'setDisabled', s);
        },
        dpSetStartDate : function(d)
        {
            return _w.call(this, 'setStartDate', d);
        },

        dpSetEndDate : function(d)
        {
            return _w.call(this, 'setEndDate', d);
        },
        dpGetSelected : function()
        {
            var c = _getController(this[0]);
            if (c) {
                return c.getSelected();
            }
            return null;
        },
        dpSetSelected : function(d, v, m, e)
        {
            if (v == undefined) v=true;
            if (m == undefined) m=true;
            if (e == undefined) e=true;
            return _w.call(this, 'setSelected', Date.fromString(d), v, m, e);
        },
        dpSetDisplayedMonth : function(m, y)
        {
            return _w.call(this, 'setDisplayedMonth', Number(m), Number(y), true);
        },
/**
 * Displays the date picker associated with the matched elements. Since only one date picker can be displayed at once then the date picker associated with the last matched element will be the one that is displayed.
 *
 * @param HTMLElement e An element that you want the date picker to pop up relative in position to. Optional - default behaviour is to pop up next to the element associated with this date picker.
 * @type jQuery
 * @name dpDisplay
 * @cat plugins/datePicker
 * @author Kelvin Luck (http://www.kelvinluck.com/)
 *
 * @example $('#date-picker').datePicker();
 * $('#date-picker').dpDisplay();
 * @desc Creates a date picker associated with the element with an id of date-picker and then causes it to pop up.
 **/
        dpDisplay : function(e)
        {
            return _w.call(this, 'display', e);
        },
/**
 * Sets a function or array of functions that is called when each TD of the date picker popup is rendered to the page
 *
 * @param (Function|Array) a A function or an array of functions that are called when each td is rendered. Each function will receive four arguments; a jquery object wrapping the created TD, a Date object containing the date this TD represents, a number giving the currently rendered month and a number giving the currently rendered year.
 * @type jQuery
 * @name dpSetRenderCallback
 * @cat plugins/datePicker
 * @author Kelvin Luck (http://www.kelvinluck.com/)
 *
 * @example $('#date-picker').datePicker();
 * $('#date-picker').dpSetRenderCallback(function($td, thisDate, month, year)
 * {
 *  // do stuff as each td is rendered dependant on the date in the td and the displayed month and year
 * });
 * @desc Creates a date picker associated with the element with an id of date-picker and then creates a function which is called as each td is rendered when this date picker is displayed.
 **/
        dpSetRenderCallback : function(a)
        {
            return _w.call(this, 'setRenderCallback', a);
        },
/**
 * Sets the position that the datePicker will pop up (relative to it's associated element)
 *
 * @param Number v The vertical alignment of the created date picker to it's associated element. Possible values are $.dpConst.POS_TOP and $.dpConst.POS_BOTTOM
 * @param Number h The horizontal alignment of the created date picker to it's associated element. Possible values are $.dpConst.POS_LEFT and $.dpConst.POS_RIGHT
 * @type jQuery
 * @name dpSetPosition
 * @cat plugins/datePicker
 * @author Kelvin Luck (http://www.kelvinluck.com/)
 *
 * @example $('#date-picker').datePicker();
 * $('#date-picker').dpSetPosition($.dpConst.POS_BOTTOM, $.dpConst.POS_RIGHT);
 * @desc Creates a date picker associated with the element with an id of date-picker and makes it so that when this date picker pops up it will be bottom and right aligned to the #date-picker element.
 **/
        dpSetPosition : function(v, h)
        {
            return _w.call(this, 'setPosition', v, h);
        },
/**
 * Sets the offset that the popped up date picker will have from it's default position relative to it's associated element (as set by dpSetPosition)
 *
 * @param Number v The vertical offset of the created date picker.
 * @param Number h The horizontal offset of the created date picker.
 * @type jQuery
 * @name dpSetOffset
 * @cat plugins/datePicker
 * @author Kelvin Luck (http://www.kelvinluck.com/)
 *
 * @example $('#date-picker').datePicker();
 * $('#date-picker').dpSetOffset(-20, 200);
 * @desc Creates a date picker associated with the element with an id of date-picker and makes it so that when this date picker pops up it will be 20 pixels above and 200 pixels to the right of it's default position.
 **/
        dpSetOffset : function(v, h)
        {
            return _w.call(this, 'setOffset', v, h);
        },
/**
 * Closes the open date picker associated with this element.
 *
 * @type jQuery
 * @name dpClose
 * @cat plugins/datePicker
 * @author Kelvin Luck (http://www.kelvinluck.com/)
 *
 * @example $('.date-pick')
 *      .datePicker()
 *      .bind(
 *          'focus',
 *          function()
 *          {
 *              $(this).dpDisplay();
 *          }
 *      ).bind(
 *          'blur',
 *          function()
 *          {
 *              $(this).dpClose();
 *          }
 *      );
 **/
        dpClose : function()
        {
            return _w.call(this, '_closeCalendar', false, this[0]);
        },
/**
 * Rerenders the date picker's current month (for use with inline calendars and renderCallbacks).
 *
 * @type jQuery
 * @name dpRerenderCalendar
 * @cat plugins/datePicker
 * @author Kelvin Luck (http://www.kelvinluck.com/)
 *
 **/
        dpRerenderCalendar : function()
        {
            return _w.call(this, '_rerenderCalendar');
        },
        // private function called on unload to clean up any expandos etc and prevent memory links...
        _dpDestroy : function()
        {
            // TODO - implement this?
        }
    });
    
    // private internal function to cut down on the amount of code needed where we forward
    // dp* methods on the jQuery object on to the relevant DatePicker controllers...
    var _w = function(f, a1, a2, a3, a4)
    {
        return this.each(
            function()
            {
                var c = _getController(this);
                if (c) {
                    c[f](a1, a2, a3, a4);
                }
            }
        );
    };
    
    function DatePicker(ele)
    {
        this.ele = ele;
        
        // initial values...
        this.displayedMonth     =   null;
        this.displayedYear      =   null;
        this.startDate          =   null;
        this.endDate            =   null;
        this.showYearNavigation =   null;
        this.closeOnSelect      =   null;
        this.displayClose       =   null;
        this.rememberViewedMonth=   null;
        this.selectMultiple     =   null;
        this.numSelectable      =   null;
        this.numSelected        =   null;
        this.verticalPosition   =   null;
        this.horizontalPosition =   null;
        this.verticalOffset     =   null;
        this.horizontalOffset   =   null;
        this.button             =   null;
        this.renderCallback     =   [];
        this.selectedDates      =   {};
        this.inline             =   null;
        this.context            =   '#dp-popup';
        this.settings           =   {};
    };
    $.extend(
        DatePicker.prototype,
        {   
            init : function(s)
            {
                this.setStartDate(s.startDate);
                this.setEndDate(s.endDate);
                this.setDisplayedMonth(Number(s.month), Number(s.year));
                this.setRenderCallback(s.renderCallback);
                this.showYearNavigation = s.showYearNavigation;
                this.closeOnSelect = s.closeOnSelect;
                this.displayClose = s.displayClose;
                this.rememberViewedMonth =  s.rememberViewedMonth;
                this.selectMultiple = s.selectMultiple;
                this.numSelectable = s.selectMultiple ? s.numSelectable : 1;
                this.numSelected = 0;
                this.verticalPosition = s.verticalPosition;
                this.horizontalPosition = s.horizontalPosition;
                this.hoverClass = s.hoverClass;
                this.setOffset(s.verticalOffset, s.horizontalOffset);
                this.inline = s.inline;
                this.settings = s;
                if (this.inline) {
                    this.context = this.ele;
                    this.display();
                }
            },
            setStartDate : function(d)
            {
                if (d) {
                    if (d instanceof Date) {
                        this.startDate = d;
                    } else {
                        this.startDate = Date.fromString(d);
                    }
                }
                if (!this.startDate) {
                    this.startDate = (new Date()).zeroTime();
                }
                this.setDisplayedMonth(this.displayedMonth, this.displayedYear);
            },
            setEndDate : function(d)
            {
                if (d) {
                    if (d instanceof Date) {
                        this.endDate = d;
                    } else {
                        this.endDate = Date.fromString(d);
                    }
                }
                if (!this.endDate) {
                    this.endDate = (new Date('12/31/2999')); // using the JS Date.parse function which expects mm/dd/yyyy
                }
                if (this.endDate.getTime() < this.startDate.getTime()) {
                    this.endDate = this.startDate;
                }
                this.setDisplayedMonth(this.displayedMonth, this.displayedYear);
            },
            setPosition : function(v, h)
            {
                this.verticalPosition = v;
                this.horizontalPosition = h;
            },
            setOffset : function(v, h)
            {
                this.verticalOffset = parseInt(v) || 0;
                this.horizontalOffset = parseInt(h) || 0;
            },
            setDisabled : function(s)
            {
                $e = $(this.ele);
                $e[s ? 'addClass' : 'removeClass']('dp-disabled');
                if (this.button) {
                    $but = $(this.button);
                    $but[s ? 'addClass' : 'removeClass']('dp-disabled');
                    $but.attr('title', s ? '' : $.dpText.TEXT_CHOOSE_DATE);
                }
                if ($e.is(':text')) {
                    $e.attr('disabled', s ? 'disabled' : '');
                }
            },
            setDisplayedMonth : function(m, y, rerender)
            {
                if (this.startDate == undefined || this.endDate == undefined) {
                    return;
                }
                var s = new Date(this.startDate.getTime());
                s.setDate(1);
                var e = new Date(this.endDate.getTime());
                e.setDate(1);
                
                var t;
                if ((!m && !y) || (isNaN(m) && isNaN(y))) {
                    // no month or year passed - default to current month
                    t = new Date().zeroTime();
                    t.setDate(1);
                } else if (isNaN(m)) {
                    // just year passed in - presume we want the displayedMonth
                    t = new Date(y, this.displayedMonth, 1);
                } else if (isNaN(y)) {
                    // just month passed in - presume we want the displayedYear
                    t = new Date(this.displayedYear, m, 1);
                } else {
                    // year and month passed in - that's the date we want!
                    t = new Date(y, m, 1)
                }
                // check if the desired date is within the range of our defined startDate and endDate
                if (t.getTime() < s.getTime()) {
                    t = s;
                } else if (t.getTime() > e.getTime()) {
                    t = e;
                }
                var oldMonth = this.displayedMonth;
                var oldYear = this.displayedYear;
                this.displayedMonth = t.getMonth();
                this.displayedYear = t.getFullYear();

                if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear))
                {
                    this._rerenderCalendar();
                    $(this.ele).trigger('dpMonthChanged', [this.displayedMonth, this.displayedYear]);
                }
            },
            setSelected : function(d, v, moveToMonth, dispatchEvents)
            {
                if (d < this.startDate || d.zeroTime() > this.endDate.zeroTime()) {
                    // Don't allow people to select dates outside range...
                    return;
                }
                var s = this.settings;
                if (s.selectWeek)
                {
                    d = d.addDays(- (d.getDay() - Date.firstDayOfWeek + 7) % 7);
                    if (d < this.startDate) // The first day of this week is before the start date so is unselectable...
                    {
                        return;
                    }
                }
                if (v == this.isSelected(d)) // this date is already un/selected
                {
                    return;
                }
                if (this.selectMultiple == false) {
                    this.clearSelected();
                } else if (v && this.numSelected == this.numSelectable) {
                    // can't select any more dates...
                    return;
                }
                if (moveToMonth && (this.displayedMonth != d.getMonth() || this.displayedYear != d.getFullYear())) {
                    this.setDisplayedMonth(d.getMonth(), d.getFullYear(), true);
                }
                this.selectedDates[d.asString()] = v;
                this.numSelected += v ? 1 : -1;
                var selectorString = 'td.' + (d.getMonth() == this.displayedMonth ? 'current-month' : 'other-month');
                var $td;
                $(selectorString, this.context).each(
                    function()
                    {
                        if ($(this).data('datePickerDate') == d.asString()) {
                            $td = $(this);
                            if (s.selectWeek)
                            {
                                $td.parent()[v ? 'addClass' : 'removeClass']('selectedWeek');
                            }
                            $td[v ? 'addClass' : 'removeClass']('selected'); 
                        }
                    }
                );
                $('td', this.context).not('.selected')[this.selectMultiple &&  this.numSelected == this.numSelectable ? 'addClass' : 'removeClass']('unselectable');
                
                if (dispatchEvents)
                {
                    var s = this.isSelected(d);
                    $e = $(this.ele);
                    var dClone = Date.fromString(d.asString());
                    $e.trigger('dateSelected', [dClone, $td, s]);
                    $e.trigger('change');
                }
            },
            isSelected : function(d)
            {
                return this.selectedDates[d.asString()];
            },
            getSelected : function()
            {
                var r = [];
                for(var s in this.selectedDates) {
                    if (this.selectedDates[s] == true) {
                        r.push(Date.fromString(s));
                    }
                }
                return r;
            },
            clearSelected : function()
            {
                this.selectedDates = {};
                this.numSelected = 0;
                $('td.selected', this.context).removeClass('selected').parent().removeClass('selectedWeek');
            },
            display : function(eleAlignTo)
            {
                if ($(this.ele).is('.dp-disabled')) return;
                
                eleAlignTo = eleAlignTo || this.ele;
                var c = this;
                var $ele = $(eleAlignTo);
                var eleOffset = $ele.offset();
                
                var $createIn;
                var attrs;
                var attrsCalendarHolder;
                var cssRules;
                
                if (c.inline) {
                    $createIn = $(this.ele);
                    attrs = {
                        'id'        :   'calendar-' + this.ele._dpId,
                        'class' :   'dp-popup dp-popup-inline'
                    };

                    $('.dp-popup', $createIn).remove();
                    cssRules = {
                    };
                } else {
                    $createIn = $('body');
                    attrs = {
                        'id'        :   'dp-popup',
                        'class' :   'dp-popup'
                    };
                    cssRules = {
                        'top'   :   eleOffset.top + c.verticalOffset,
                        'left'  :   eleOffset.left + c.horizontalOffset
                    };
                    
                    var _checkMouse = function(e)
                    {
                        var el = e.target;
                        var cal = $('#dp-popup')[0];
                        
                        while (true){
                            if (el == cal) {
                                return true;
                            } else if (el == document) {
                                c._closeCalendar();
                                return false;
                            } else {
                                el = $(el).parent()[0];
                            }
                        }
                    };
                    this._checkMouse = _checkMouse;
                    
                    c._closeCalendar(true);
                    $(document).bind(
                        'keydown.datepicker', 
                        function(event)
                        {
                            if (event.keyCode == 27) {
                                c._closeCalendar();
                            }
                        }
                    );
                }
                
                if (!c.rememberViewedMonth)
                {
                    var selectedDate = this.getSelected()[0];
                    if (selectedDate) {
                        selectedDate = new Date(selectedDate);
                        this.setDisplayedMonth(selectedDate.getMonth(), selectedDate.getFullYear(), false);
                    }
                }
                
                $createIn
                    .append(
                        $('<div></div>')
                            .attr(attrs)
                            .css(cssRules)
                            .append(
                                //$('<a href="#" class="selecteee">aaa</a>'),
                                $('<h2></h2>'),
                                $('<div class="dp-nav-prev"></div>')
                                    .append(
                                        $('<a class="dp-nav-prev-year" href="#" title="' + $.dpText.TEXT_PREV_YEAR + '">&lt;&lt;</a>')
                                            .bind(
                                                'click',
                                                function()
                                                {
                                                    return c._displayNewMonth.call(c, this, 0, -1);
                                                }
                                            ),
                                        $('<a class="dp-nav-prev-month" href="#" title="' + $.dpText.TEXT_PREV_MONTH + '">&lt;</a>')
                                            .bind(
                                                'click',
                                                function()
                                                {
                                                    return c._displayNewMonth.call(c, this, -1, 0);
                                                }
                                            )
                                    ),
                                $('<div class="dp-nav-next"></div>')
                                    .append(
                                        $('<a class="dp-nav-next-year" href="#" title="' + $.dpText.TEXT_NEXT_YEAR + '">&gt;&gt;</a>')
                                            .bind(
                                                'click',
                                                function()
                                                {
                                                    return c._displayNewMonth.call(c, this, 0, 1);
                                                }
                                            ),
                                        $('<a class="dp-nav-next-month" href="#" title="' + $.dpText.TEXT_NEXT_MONTH + '">&gt;</a>')
                                            .bind(
                                                'click',
                                                function()
                                                {
                                                    return c._displayNewMonth.call(c, this, 1, 0);
                                                }
                                            )
                                    ),
                                $('<div class="dp-calendar"></div>')
                            )
                            .bgIframe()
                        );
                    
                var $pop = this.inline ? $('.dp-popup', this.context) : $('#dp-popup');
                
                if (this.showYearNavigation == false) {
                    $('.dp-nav-prev-year, .dp-nav-next-year', c.context).css('display', 'none');
                }
                if (this.displayClose) {
                    $pop.append(
                        $('<a href="#" id="dp-close">' + $.dpText.TEXT_CLOSE + '</a>')
                            .bind(
                                'click',
                                function()
                                {
                                    c._closeCalendar();
                                    return false;
                                }
                            )
                    );
                }
                c._renderCalendar();

                $(this.ele).trigger('dpDisplayed', $pop);
                
                if (!c.inline) {
                    if (this.verticalPosition == $.dpConst.POS_BOTTOM) {
                        $pop.css('top', eleOffset.top + $ele.height() - $pop.height() + c.verticalOffset);
                    }
                    if (this.horizontalPosition == $.dpConst.POS_RIGHT) {
                        $pop.css('left', eleOffset.left + $ele.width() - $pop.width() + c.horizontalOffset);
                    }
                    //$('.selectee', this.context).focus();
                    $(document).bind('mousedown.datepicker', this._checkMouse);
                }
                
            },
            setRenderCallback : function(a)
            {
                if (a == null) return;
                if (a && typeof(a) == 'function') {
                    a = [a];
                }
                this.renderCallback = this.renderCallback.concat(a);
            },
            cellRender : function ($td, thisDate, month, year) {
                var c = this.dpController;
                var d = new Date(thisDate.getTime());
                
                // add our click handlers to deal with it when the days are clicked...
                
                $td.bind(
                    'click',
                    function()
                    {
                        var $this = $(this);
                        if (!$this.is('.disabled')) {
                            c.setSelected(d, !$this.is('.selected') || !c.selectMultiple, false, true);
                            if (c.closeOnSelect) {
                                // Focus the next input in the formâ€¦
                                if (c.settings.autoFocusNextInput) {
                                    var ele = c.ele;
                                    var found = false;
                                    $(':input', ele.form).each(
                                        function()
                                        {
                                            if (found) {
                                                $(this).focus();
                                                return false;
                                            }
                                            if (this == ele) {
                                                found = true;
                                            }
                                        }
                                    );
                                } else {
                                    try {
                                        c.ele.focus();
                                    } catch (e) {}
                                }
                                c._closeCalendar();
                            }
                        }
                    }
                );
                if (c.isSelected(d)) {
                    $td.addClass('selected');
                    if (c.settings.selectWeek)
                    {
                        $td.parent().addClass('selectedWeek');
                    }
                } else  if (c.selectMultiple && c.numSelected == c.numSelectable) {
                    $td.addClass('unselectable');
                }
                
            },
            _applyRenderCallbacks : function()
            {
                var c = this;
                $('td', this.context).each(
                    function()
                    {
                        for (var i=0; i<c.renderCallback.length; i++) {
                            $td = $(this);
                            c.renderCallback[i].apply(this, [$td, Date.fromString($td.data('datePickerDate')), c.displayedMonth, c.displayedYear]);
                        }
                    }
                );
                return;
            },
            // ele is the clicked button - only proceed if it doesn't have the class disabled...
            // m and y are -1, 0 or 1 depending which direction we want to go in...
            _displayNewMonth : function(ele, m, y) 
            {
                if (!$(ele).is('.disabled')) {
                    this.setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
                }
                ele.blur();
                return false;
            },
            _rerenderCalendar : function()
            {
                this._clearCalendar();
                this._renderCalendar();
            },
            _renderCalendar : function()
            {
                // set the title...
                $('h2', this.context).html((new Date(this.displayedYear, this.displayedMonth, 1)).asString($.dpText.HEADER_FORMAT));
                
                // render the calendar...
                $('.dp-calendar', this.context).renderCalendar(
                    $.extend(
                        {},
                        this.settings, 
                        {
                            month           : this.displayedMonth,
                            year            : this.displayedYear,
                            renderCallback  : this.cellRender,
                            dpController    : this,
                            hoverClass      : this.hoverClass
                        })
                );
                
                // update the status of the control buttons and disable dates before startDate or after endDate...
                // TODO: When should the year buttons be disabled? When you can't go forward a whole year from where you are or is that annoying?
                if (this.displayedYear == this.startDate.getFullYear() && this.displayedMonth == this.startDate.getMonth()) {
                    $('.dp-nav-prev-year', this.context).addClass('disabled');
                    $('.dp-nav-prev-month', this.context).addClass('disabled');
                    $('.dp-calendar td.other-month', this.context).each(
                        function()
                        {
                            var $this = $(this);
                            if (Number($this.text()) > 20) {
                                $this.addClass('disabled');
                            }
                        }
                    );
                    var d = this.startDate.getDate();
                    $('.dp-calendar td.current-month', this.context).each(
                        function()
                        {
                            var $this = $(this);
                            if (Number($this.text()) < d) {
                                $this.addClass('disabled');
                            }
                        }
                    );
                } else {
                    $('.dp-nav-prev-year', this.context).removeClass('disabled');
                    $('.dp-nav-prev-month', this.context).removeClass('disabled');
                    var d = this.startDate.getDate();
                    if (d > 20) {
                        // check if the startDate is last month as we might need to add some disabled classes...
                        var st = this.startDate.getTime();
                        var sd = new Date(st);
                        sd.addMonths(1);
                        if (this.displayedYear == sd.getFullYear() && this.displayedMonth == sd.getMonth()) {
                            $('.dp-calendar td.other-month', this.context).each(
                                function()
                                {
                                    var $this = $(this);
                                    if (Date.fromString($this.data('datePickerDate')).getTime() < st) {
                                        $this.addClass('disabled');
                                    }
                                }
                            );
                        }
                    }
                }
                if (this.displayedYear == this.endDate.getFullYear() && this.displayedMonth == this.endDate.getMonth()) {
                    $('.dp-nav-next-year', this.context).addClass('disabled');
                    $('.dp-nav-next-month', this.context).addClass('disabled');
                    $('.dp-calendar td.other-month', this.context).each(
                        function()
                        {
                            var $this = $(this);
                            if (Number($this.text()) < 14) {
                                $this.addClass('disabled');
                            }
                        }
                    );
                    var d = this.endDate.getDate();
                    $('.dp-calendar td.current-month', this.context).each(
                        function()
                        {
                            var $this = $(this);
                            if (Number($this.text()) > d) {
                                $this.addClass('disabled');
                            }
                        }
                    );
                } else {
                    $('.dp-nav-next-year', this.context).removeClass('disabled');
                    $('.dp-nav-next-month', this.context).removeClass('disabled');
                    var d = this.endDate.getDate();
                    if (d < 13) {
                        // check if the endDate is next month as we might need to add some disabled classes...
                        var ed = new Date(this.endDate.getTime());
                        ed.addMonths(-1);
                        if (this.displayedYear == ed.getFullYear() && this.displayedMonth == ed.getMonth()) {
                            $('.dp-calendar td.other-month', this.context).each(
                                function()
                                {
                                    var $this = $(this);
                                    var cellDay = Number($this.text());
                                    if (cellDay < 13 && cellDay > d) {
                                        $this.addClass('disabled');
                                    }
                                }
                            );
                        }
                    }
                }
                this._applyRenderCallbacks();
            },
            _closeCalendar : function(programatic, ele)
            {
                if (!ele || ele == this.ele)
                {
                    $(document).unbind('mousedown.datepicker');
                    $(document).unbind('keydown.datepicker');
                    this._clearCalendar();
                    $('#dp-popup a').unbind();
                    $('#dp-popup').empty().remove();
                    if (!programatic) {
                        $(this.ele).trigger('dpClosed', [this.getSelected()]);
                    }
                }
            },
            // empties the current dp-calendar div and makes sure that all events are unbound
            // and expandos removed to avoid memory leaks...
            _clearCalendar : function()
            {
                // TODO.
                $('.dp-calendar td', this.context).unbind();
                $('.dp-calendar', this.context).empty();
            }
        }
    );
    
    // static constants
    $.dpConst = {
        SHOW_HEADER_NONE    :   0,
        SHOW_HEADER_SHORT   :   1,
        SHOW_HEADER_LONG    :   2,
        POS_TOP             :   0,
        POS_BOTTOM          :   1,
        POS_LEFT            :   0,
        POS_RIGHT           :   1,
        DP_INTERNAL_FOCUS   :   'dpInternalFocusTrigger'
    };
    // localisable text
    $.dpText = {
        TEXT_PREV_YEAR      :   'Previous year',
        TEXT_PREV_MONTH     :   'Previous month',
        TEXT_NEXT_YEAR      :   'Next year',
        TEXT_NEXT_MONTH     :   'Next month',
        TEXT_CLOSE          :   'Close',
        TEXT_CHOOSE_DATE    :   'Choose date',
        HEADER_FORMAT       :   'mmmm yyyy'
    };
    // version
    $.dpVersion = '$Id$';

    $.fn.datePicker.defaults = {
        month               : undefined,
        year                : undefined,
        showHeader          : $.dpConst.SHOW_HEADER_SHORT,
        startDate           : undefined,
        endDate             : undefined,
        inline              : false,
        renderCallback      : null,
        createButton        : true,
        showYearNavigation  : true,
        closeOnSelect       : true,
        displayClose        : false,
        selectMultiple      : false,
        numSelectable       : Number.MAX_VALUE,
        clickInput          : false,
        rememberViewedMonth : true,
        selectWeek          : false,
        verticalPosition    : $.dpConst.POS_TOP,
        horizontalPosition  : $.dpConst.POS_LEFT,
        verticalOffset      : 0,
        horizontalOffset    : 0,
        hoverClass          : 'dp-hover',
        autoFocusNextInput  : false
    };

    function _getController(ele)
    {
        if (ele._dpId) return $.event._dpCache[ele._dpId];
        return false;
    };
    
    // make it so that no error is thrown if bgIframe plugin isn't included (allows you to use conditional
    // comments to only include bgIframe where it is needed in IE without breaking this plugin).
    if ($.fn.bgIframe == undefined) {
        $.fn.bgIframe = function() {return this; };
    };


    // clean-up
    $(window)
        .bind('unload', function() {
            var els = $.event._dpCache || [];
            for (var i in els) {
                $(els[i].ele)._dpDestroy();
            }
        });
        
    
})(jQuery);

//Calendar ends here        

//TableSorter starts here       

(function() {

$.extend({
        tablesorter: new
        function () {

            var parsers = [],
                widgets = [];

            this.defaults = {
                cssHeader: "header",
                cssAsc: "headerSortUp",
                cssDesc: "headerSortDown",
                cssChildRow: "expand-child",
                sortInitialOrder: "asc",
                sortMultiSortKey: "shiftKey",
                sortForce: null,
                sortAppend: null,
                sortLocaleCompare: true,
                textExtraction: "simple",
                parsers: {}, widgets: [],
                widgetZebra: {
                    css: ["even", "odd"]
                }, headers: {}, widthFixed: false,
                cancelSelection: true,
                sortList: [],
                headerList: [],
                dateFormat: "us",
                decimal: '/\.|\,/g',
                onRenderHeader: null,
                selectorHeaders: 'thead th',
                debug: false
            };

            /* debuging utils */

            function benchmark(s, d) {
                log(s + "," + (new Date().getTime() - d.getTime()) + "ms");
            }

            this.benchmark = benchmark;

            function log(s) {
                if (typeof console != "undefined" && typeof console.debug != "undefined") {
                    // console.log(s);
                } else {
                    // alert(s);
                    $.giniAlert(s);
                }
            }

            /* parsers utils */

            function buildParserCache(table, $headers) {

                if (table.config.debug) {
                    var parsersDebug = "";
                }

                if (table.tBodies.length == 0) return; // In the case of empty tables
                var rows = table.tBodies[0].rows;

                if (rows[0]) {

                    var list = [],
                        cells = rows[0].cells,
                        l = cells.length;

                    for (var i = 0; i < l; i++) {

                        var p = false;

                        if ($.metadata && ($($headers[i]).metadata() && $($headers[i]).metadata().sorter)) {

                            p = getParserById($($headers[i]).metadata().sorter);

                        } else if ((table.config.headers[i] && table.config.headers[i].sorter)) {

                            p = getParserById(table.config.headers[i].sorter);
                        }
                        if (!p) {

                            p = detectParserForColumn(table, rows, -1, i);
                        }

                        if (table.config.debug) {
                            parsersDebug += "column:" + i + " parser:" + p.id + "\n";
                        }

                        list.push(p);
                    }
                }

                if (table.config.debug) {
                    log(parsersDebug);
                }

                return list;
            };

            function detectParserForColumn(table, rows, rowIndex, cellIndex) {
                var l = parsers.length,
                    node = false,
                    nodeValue = false,
                    keepLooking = true;
                while (nodeValue == '' && keepLooking) {
                    rowIndex++;
                    if (rows[rowIndex]) {
                        node = getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex);
                        nodeValue = trimAndGetNodeText(table.config, node);
                        if (table.config.debug) {
                            log('Checking if value was empty on row:' + rowIndex);
                        }
                    } else {
                        keepLooking = false;
                    }
                }
                for (var i = 1; i < l; i++) {
                    if (parsers[i].is(nodeValue, table, node)) {
                        return parsers[i];
                    }
                }
                // 0 is always the generic parser (text)
                return parsers[0];
            }

            function getNodeFromRowAndCellIndex(rows, rowIndex, cellIndex) {
                return rows[rowIndex].cells[cellIndex];
            }

            function trimAndGetNodeText(config, node) {
                return $.trim(getElementText(config, node));
            }

            function getParserById(name) {
                var l = parsers.length;
                for (var i = 0; i < l; i++) {
                    if (parsers[i].id.toLowerCase() == name.toLowerCase()) {
                        return parsers[i];
                    }
                }
                return false;
            }

            /* utils */

            function buildCache(table) {

                if (table.config.debug) {
                    var cacheTime = new Date();
                }

                var totalRows = (table.tBodies[0] && table.tBodies[0].rows.length) || 0,
                    totalCells = (table.tBodies[0].rows[0] && table.tBodies[0].rows[0].cells.length) || 0,
                    parsers = table.config.parsers,
                    cache = {
                        row: [],
                        normalized: []
                    };

                for (var i = 0; i < totalRows; ++i) {

                    /** Add the table data to main data array */
                    var c = $(table.tBodies[0].rows[i]),
                        cols = [];

                    // if this is a child row, add it to the last row's children and
                    // continue to the next row
                    if (c.hasClass(table.config.cssChildRow)) {
                        cache.row[cache.row.length - 1] = cache.row[cache.row.length - 1].add(c);
                        // go to the next for loop
                        continue;
                    }

                    cache.row.push(c);

                    for (var j = 0; j < totalCells; ++j) {
                        cols.push(parsers[j].format(getElementText(table.config, c[0].cells[j]), table, c[0].cells[j]));
                    }

                    cols.push(cache.normalized.length); // add position for rowCache
                    cache.normalized.push(cols);
                    cols = null;
                };

                if (table.config.debug) {
                    benchmark("Building cache for " + totalRows + " rows:", cacheTime);
                }

                return cache;
            };

            function getElementText(config, node) {

                var text = "";

                if (!node) return "";

                if (!config.supportsTextContent) config.supportsTextContent = node.textContent || false;

                if (config.textExtraction == "simple") {
                    if (config.supportsTextContent) {
                        text = node.textContent;
                    } else {
                        if (node.childNodes[0] && node.childNodes[0].hasChildNodes()) {
                            text = node.childNodes[0].innerHTML;
                        } else {
                            text = node.innerHTML;
                        }
                    }
                } else {
                    if (typeof(config.textExtraction) == "function") {
                        text = config.textExtraction(node);
                    } else {
                        text = $(node).text();
                    }
                }
                return text;
            }

            function appendToTable(table, cache) {

                if (table.config.debug) {
                    var appendTime = new Date()
                }

                var c = cache,
                    r = c.row,
                    n = c.normalized,
                    totalRows = n.length,
                    checkCell = (n[0].length - 1),
                    tableBody = $(table.tBodies[0]),
                    rows = [];


                for (var i = 0; i < totalRows; i++) {
                    var pos = n[i][checkCell];

                    rows.push(r[pos]);

                    if (!table.config.appender) {

                        //var o = ;
                        var l = r[pos].length;
                        for (var j = 0; j < l; j++) {
                            tableBody[0].appendChild(r[pos][j]);
                        }

                        // 
                    }
                }



                if (table.config.appender) {

                    table.config.appender(table, rows);
                }

                rows = null;

                if (table.config.debug) {
                    benchmark("Rebuilt table:", appendTime);
                }

                // apply table widgets
                applyWidget(table);

                // trigger sortend
                setTimeout(function () {
                    $(table).trigger("sortEnd");
                }, 0);

            };

            function buildHeaders(table) {

                if (table.config.debug) {
                    var time = new Date();
                }

                var meta = ($.metadata) ? true : false;
                
                var header_index = computeTableHeaderCellIndexes(table);

                $tableHeaders = $(table.config.selectorHeaders, table).each(function (index) {

                    this.column = header_index[this.parentNode.rowIndex + "-" + this.cellIndex];
                    // this.column = index;
                    this.order = formatSortingOrder(table.config.sortInitialOrder);
                    
                    
                    this.count = this.order;

                    if (checkHeaderMetadata(this) || checkHeaderOptions(table, index)) this.sortDisabled = true;
                    if (checkHeaderOptionsSortingLocked(table, index)) this.order = this.lockedOrder = checkHeaderOptionsSortingLocked(table, index);

                    if (!this.sortDisabled) {
                        var $th = $(this).addClass(table.config.cssHeader);
                        if (table.config.onRenderHeader) table.config.onRenderHeader.apply($th);
                    }

                    // add cell to headerList
                    table.config.headerList[index] = this;
                });

                if (table.config.debug) {
                    benchmark("Built headers:", time);
                    log($tableHeaders);
                }

                return $tableHeaders;

            };

            // from:
            // http://www.javascripttoolbox.com/lib/table/examples.php
            // http://www.javascripttoolbox.com/temp/table_cellindex.html


            function computeTableHeaderCellIndexes(t) {
                var matrix = [];
                var lookup = {};
                var thead = t.getElementsByTagName('THEAD')[0];
                var trs = thead.getElementsByTagName('TR');

                for (var i = 0; i < trs.length; i++) {
                    var cells = trs[i].cells;
                    for (var j = 0; j < cells.length; j++) {
                        var c = cells[j];

                        var rowIndex = c.parentNode.rowIndex;
                        var cellId = rowIndex + "-" + c.cellIndex;
                        var rowSpan = c.rowSpan || 1;
                        var colSpan = c.colSpan || 1
                        var firstAvailCol;
                        if (typeof(matrix[rowIndex]) == "undefined") {
                            matrix[rowIndex] = [];
                        }
                        // Find first available column in the first row
                        for (var k = 0; k < matrix[rowIndex].length + 1; k++) {
                            if (typeof(matrix[rowIndex][k]) == "undefined") {
                                firstAvailCol = k;
                                break;
                            }
                        }
                        lookup[cellId] = firstAvailCol;
                        for (var k = rowIndex; k < rowIndex + rowSpan; k++) {
                            if (typeof(matrix[k]) == "undefined") {
                                matrix[k] = [];
                            }
                            var matrixrow = matrix[k];
                            for (var l = firstAvailCol; l < firstAvailCol + colSpan; l++) {
                                matrixrow[l] = "x";
                            }
                        }
                    }
                }
                return lookup;
            }

            function checkCellColSpan(table, rows, row) {
                var arr = [],
                    r = table.tHead.rows,
                    c = r[row].cells;

                for (var i = 0; i < c.length; i++) {
                    var cell = c[i];

                    if (cell.colSpan > 1) {
                        arr = arr.concat(checkCellColSpan(table, headerArr, row++));
                    } else {
                        if (table.tHead.length == 1 || (cell.rowSpan > 1 || !r[row + 1])) {
                            arr.push(cell);
                        }
                        // headerArr[row] = (i+row);
                    }
                }
                return arr;
            };

            function checkHeaderMetadata(cell) {
                if (($.metadata) && ($(cell).metadata().sorter === false)) {
                    return true;
                };
                return false;
            }

            function checkHeaderOptions(table, i) {
                if ((table.config.headers[i]) && (table.config.headers[i].sorter === false)) {
                    return true;
                };
                return false;
            }
            
             function checkHeaderOptionsSortingLocked(table, i) {
                if ((table.config.headers[i]) && (table.config.headers[i].lockedOrder)) return table.config.headers[i].lockedOrder;
                return false;
            }
            
            function applyWidget(table) {
                var c = table.config.widgets;
                var l = c.length;
                for (var i = 0; i < l; i++) {

                    getWidgetById(c[i]).format(table);
                }

            }

            function getWidgetById(name) {
                var l = widgets.length;
                for (var i = 0; i < l; i++) {
                    if (widgets[i].id.toLowerCase() == name.toLowerCase()) {
                        return widgets[i];
                    }
                }
            };

            function formatSortingOrder(v) {
                if (typeof(v) != "Number") {
                    return (v.toLowerCase() == "desc") ? 1 : 0;
                } else {
                    return (v == 1) ? 1 : 0;
                }
            }

            function isValueInArray(v, a) {
                var l = a.length;
                for (var i = 0; i < l; i++) {
                    if (a[i][0] == v) {
                        return true;
                    }
                }
                return false;
            }

            function setHeadersCss(table, $headers, list, css) {
                // remove all header information
                $headers.removeClass(css[0]).removeClass(css[1]);

                var h = [];
                $headers.each(function (offset) {
                    if (!this.sortDisabled) {
                        h[this.column] = $(this);
                    }
                });

                var l = list.length;
                for (var i = 0; i < l; i++) {
                    h[list[i][0]].addClass(css[list[i][1]]);
                }
            }

            function fixColumnWidth(table, $headers) {
                var c = table.config;
                if (c.widthFixed) {
                    var colgroup = $('<colgroup>');
                    $("tr:first td", table.tBodies[0]).each(function () {
                        colgroup.append($('<col>').css('width', $(this).width()));
                    });
                    $(table).prepend(colgroup);
                };
            }

            function updateHeaderSortCount(table, sortList) {
                var c = table.config,
                    l = sortList.length;
                for (var i = 0; i < l; i++) {
                    var s = sortList[i],
                        o = c.headerList[s[0]];
                    o.count = s[1];
                    o.count++;
                }
            }

            /* sorting methods */

            function multisort(table, sortList, cache) {

                if (table.config.debug) {
                    var sortTime = new Date();
                }

                var dynamicExp = "var sortWrapper = function(a,b) {",
                    l = sortList.length;

                // TODO: inline functions.
                for (var i = 0; i < l; i++) {

                    var c = sortList[i][0];
                    var order = sortList[i][1];
                    // var s = (getCachedSortType(table.config.parsers,c) == "text") ?
                    // ((order == 0) ? "sortText" : "sortTextDesc") : ((order == 0) ?
                    // "sortNumeric" : "sortNumericDesc");
                    // var s = (table.config.parsers[c].type == "text") ? ((order == 0)
                    // ? makeSortText(c) : makeSortTextDesc(c)) : ((order == 0) ?
                    // makeSortNumeric(c) : makeSortNumericDesc(c));
                    var s = (table.config.parsers[c].type == "text") ? ((order == 0) ? makeSortFunction("text", "asc", c) : makeSortFunction("text", "desc", c)) : ((order == 0) ? makeSortFunction("numeric", "asc", c) : makeSortFunction("numeric", "desc", c));
                    var e = "e" + i;

                    dynamicExp += "var " + e + " = " + s; // + "(a[" + c + "],b[" + c
                    // + "]); ";
                    dynamicExp += "if(" + e + ") { return " + e + "; } ";
                    dynamicExp += "else { ";

                }

                // if value is the same keep orignal order
                var orgOrderCol = cache.normalized[0].length - 1;
                dynamicExp += "return a[" + orgOrderCol + "]-b[" + orgOrderCol + "];";

                for (var i = 0; i < l; i++) {
                    dynamicExp += "}; ";
                }

                dynamicExp += "return 0; ";
                dynamicExp += "}; ";

                if (table.config.debug) {
                    benchmark("Evaling expression:" + dynamicExp, new Date());
                }

                eval(dynamicExp);

                cache.normalized.sort(sortWrapper);

                if (table.config.debug) {
                    benchmark("Sorting on " + sortList.toString() + " and dir " + order + " time:", sortTime);
                }

                return cache;
            };

            function makeSortFunction(type, direction, index) {
                var a = "a[" + index + "]",
                    b = "b[" + index + "]";
                if (type == 'text' && direction == 'asc') {
                    return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + a + " < " + b + ") ? -1 : 1 )));";
                } else if (type == 'text' && direction == 'desc') {
                    return "(" + a + " == " + b + " ? 0 : (" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : (" + b + " < " + a + ") ? -1 : 1 )));";
                } else if (type == 'numeric' && direction == 'asc') {
                    return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + a + " - " + b + "));";
                } else if (type == 'numeric' && direction == 'desc') {
                    return "(" + a + " === null && " + b + " === null) ? 0 :(" + a + " === null ? Number.POSITIVE_INFINITY : (" + b + " === null ? Number.NEGATIVE_INFINITY : " + b + " - " + a + "));";
                }
            };

            function makeSortText(i) {
                return "((a[" + i + "] < b[" + i + "]) ? -1 : ((a[" + i + "] > b[" + i + "]) ? 1 : 0));";
            };

            function makeSortTextDesc(i) {
                return "((b[" + i + "] < a[" + i + "]) ? -1 : ((b[" + i + "] > a[" + i + "]) ? 1 : 0));";
            };

            function makeSortNumeric(i) {
                return "a[" + i + "]-b[" + i + "];";
            };

            function makeSortNumericDesc(i) {
                return "b[" + i + "]-a[" + i + "];";
            };

            function sortText(a, b) {
                if (table.config.sortLocaleCompare) return a.localeCompare(b);
                return ((a < b) ? -1 : ((a > b) ? 1 : 0));
            };

            function sortTextDesc(a, b) {
                if (table.config.sortLocaleCompare) return b.localeCompare(a);
                return ((b < a) ? -1 : ((b > a) ? 1 : 0));
            };

            function sortNumeric(a, b) {
                return a - b;
            };

            function sortNumericDesc(a, b) {
                return b - a;
            };

            function getCachedSortType(parsers, i) {
                return parsers[i].type;
            }; /* public methods */
            this.construct = function (settings) {
                return this.each(function () {
                    // if no thead or tbody quit.
                    if (!this.tHead || !this.tBodies) return;
                    // declare
                    var $this, $document, $headers, cache, config, shiftDown = 0,
                        sortOrder;
                    // new blank config object
                    this.config = {};
                    // merge and extend.
                    config = $.extend(this.config, $.tablesorter.defaults, settings);
                    // store common expression for speed
                    $this = $(this);
                    // save the settings where they read
                    $.data(this, "tablesorter", config);
                    // build headers
                    $headers = buildHeaders(this);
                    // try to auto detect column type, and store in tables config
                    this.config.parsers = buildParserCache(this, $headers);
                    // build the cache for the tbody cells
                    cache = buildCache(this);
                    // get the css class names, could be done else where.
                    var sortCSS = [config.cssDesc, config.cssAsc];
                    // fixate columns if the users supplies the fixedWidth option
                    fixColumnWidth(this);
                    // apply event handling to headers
                    // this is to big, perhaps break it out?
                    $headers.click(

                    function (e) {
                        var totalRows = ($this[0].tBodies[0] && $this[0].tBodies[0].rows.length) || 0;
                        if (!this.sortDisabled && totalRows > 0) {
                            // Only call sortStart if sorting is
                            // enabled.
                            $this.trigger("sortStart");
                            // store exp, for speed
                            var $cell = $(this);
                            // get current column index
                            var i = this.column;
                            // get current column sort order
                            this.order = this.count++ % 2;
                            // always sort on the locked order.
                            if(this.lockedOrder) this.order = this.lockedOrder;
                            
                            // user only whants to sort on one
                            // column
                            if (!e[config.sortMultiSortKey]) {
                                // flush the sort list
                                config.sortList = [];
                                if (config.sortForce != null) {
                                    var a = config.sortForce;
                                    for (var j = 0; j < a.length; j++) {
                                        if (a[j][0] != i) {
                                            config.sortList.push(a[j]);
                                        }
                                    }
                                }
                                // add column to sort list
                                config.sortList.push([i, this.order]);
                                // multi column sorting
                            } else {
                                // the user has clicked on an all
                                // ready sortet column.
                                if (isValueInArray(i, config.sortList)) {
                                    // revers the sorting direction
                                    // for all tables.
                                    for (var j = 0; j < config.sortList.length; j++) {
                                        var s = config.sortList[j],
                                            o = config.headerList[s[0]];
                                        if (s[0] == i) {
                                            o.count = s[1];
                                            o.count++;
                                            s[1] = o.count % 2;
                                        }
                                    }
                                } else {
                                    // add column to sort list array
                                    config.sortList.push([i, this.order]);
                                }
                            };
                            setTimeout(function () {
                                // set css for headers
                                setHeadersCss($this[0], $headers, config.sortList, sortCSS);
                                appendToTable(
                                    $this[0], multisort(
                                    $this[0], config.sortList, cache)
                                );
                            }, 1);
                            // stop normal event by returning false
                            return false;
                        }
                        // cancel selection
                    }).mousedown(function () {
                        if (config.cancelSelection) {
                            this.onselectstart = function () {
                                return false
                            };
                            return false;
                        }
                    });
                    // apply easy methods that trigger binded events
                    $this.bind("update", function () {
                        var me = this;
                        setTimeout(function () {
                            // rebuild parsers.
                            me.config.parsers = buildParserCache(
                            me, $headers);
                            // rebuild the cache map
                            cache = buildCache(me);
                        }, 1);
                    }).bind("updateCell", function (e, cell) {
                        var config = this.config;
                        // get position from the dom.
                        var pos = [(cell.parentNode.rowIndex - 1), cell.cellIndex];
                        // update cache
                        cache.normalized[pos[0]][pos[1]] = config.parsers[pos[1]].format(
                        getElementText(config, cell), cell);
                    }).bind("sorton", function (e, list) {
                        $(this).trigger("sortStart");
                        config.sortList = list;
                        // update and store the sortlist
                        var sortList = config.sortList;
                        // update header count index
                        updateHeaderSortCount(this, sortList);
                        // set css for headers
                        setHeadersCss(this, $headers, sortList, sortCSS);
                        // sort the table and append it to the dom
                        appendToTable(this, multisort(this, sortList, cache));
                    }).bind("appendCache", function () {
                        appendToTable(this, cache);
                    }).bind("applyWidgetId", function (e, id) {
                        getWidgetById(id).format(this);
                    }).bind("applyWidgets", function () {
                        // apply widgets
                        applyWidget(this);
                    });
                    if ($.metadata && ($(this).metadata() && $(this).metadata().sortlist)) {
                        config.sortList = $(this).metadata().sortlist;
                    }
                    // if user has supplied a sort list to constructor.
                    if (config.sortList.length > 0) {
                        $this.trigger("sorton", [config.sortList]);
                    }
                    // apply widgets
                    applyWidget(this);
                });
            };
            this.addParser = function (parser) {
                var l = parsers.length,
                    a = true;
                for (var i = 0; i < l; i++) {
                    if (parsers[i].id.toLowerCase() == parser.id.toLowerCase()) {
                        a = false;
                    }
                }
                if (a) {
                    parsers.push(parser);
                };
            };
            this.addWidget = function (widget) {
                widgets.push(widget);
            };
            this.formatFloat = function (s) {
                var i = parseFloat(s);
                return (isNaN(i)) ? 0 : i;
            };
            this.formatInt = function (s) {
                var i = parseInt(s);
                return (isNaN(i)) ? 0 : i;
            };
            this.isDigit = function (s, config) {
                // replace all an wanted chars and match.
                return /^[-+]?\d*$/.test($.trim(s.replace(/[,.']/g, '')));
            };
            this.clearTableBody = function (table) {
                if ($.browser.msie) {
                    function empty() {
                        while (this.firstChild)
                        this.removeChild(this.firstChild);
                    }
                    empty.apply(table.tBodies[0]);
                } else {
                    table.tBodies[0].innerHTML = "";
                }
            };
        }
    });

    // extend plugin scope
    $.fn.extend({
        tablesorter: $.tablesorter.construct
    });

    // make shortcut
    var ts = $.tablesorter;

    // add default parsers
    ts.addParser({
        id: "text",
        is: function (s) {
            return true;
        }, format: function (s) {
            return $.trim(s.toLocaleLowerCase());
        }, type: "text"
    });

    ts.addParser({
        id: "digit",
        is: function (s, table) {
            var c = table.config;
            return $.tablesorter.isDigit(s, c);
        }, format: function (s) {
            return $.tablesorter.formatFloat(s);
        }, type: "numeric"
    });

    ts.addParser({
        id: "currency",
        is: function (s) {
            return /^[£$€?.]/.test(s);
        }, format: function (s) {
            return $.tablesorter.formatFloat(s.replace(new RegExp(/[£$€]/g), ""));
        }, type: "numeric"
    });

    ts.addParser({
        id: "ipAddress",
        is: function (s) {
            return /^\d{2,3}[\.]\d{2,3}[\.]\d{2,3}[\.]\d{2,3}$/.test(s);
        }, format: function (s) {
            var a = s.split("."),
                r = "",
                l = a.length;
            for (var i = 0; i < l; i++) {
                var item = a[i];
                if (item.length == 2) {
                    r += "0" + item;
                } else {
                    r += item;
                }
            }
            return $.tablesorter.formatFloat(r);
        }, type: "numeric"
    });

    ts.addParser({
        id: "url",
        is: function (s) {
            return /^(https?|ftp|file):\/\/$/.test(s);
        }, format: function (s) {
            return jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\/\//), ''));
        }, type: "text"
    });

    ts.addParser({
        id: "isoDate",
        is: function (s) {
            return /^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(s);
        }, format: function (s) {
            return $.tablesorter.formatFloat((s != "") ? new Date(s.replace(
            new RegExp(/-/g), "/")).getTime() : "0");
        }, type: "numeric"
    });

    ts.addParser({
        id: "percent",
        is: function (s) {
            return /\%$/.test($.trim(s));
        }, format: function (s) {
            return $.tablesorter.formatFloat(s.replace(new RegExp(/%/g), ""));
        }, type: "numeric"
    });

    ts.addParser({
        id: "usLongDate",
        is: function (s) {
            return s.match(new RegExp(/^[A-Za-z]{3,10}\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(AM|PM)))$/));
        }, format: function (s) {
            return $.tablesorter.formatFloat(new Date(s).getTime());
        }, type: "numeric"
    });

    ts.addParser({
        id: "shortDate",
        is: function (s) {
            return /\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(s);
        }, format: function (s, table) {
            var c = table.config;
            s = s.replace(/\-/g, "/");
            if (c.dateFormat == "us") {
                // reformat the string in ISO format
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$1/$2");
            } else if (c.dateFormat == "uk") {
                // reformat the string in ISO format
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/, "$3/$2/$1");
            } else if (c.dateFormat == "dd/mm/yy" || c.dateFormat == "dd-mm-yy") {
                s = s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})/, "$1/$2/$3");
            }
            return $.tablesorter.formatFloat(new Date(s).getTime());
        }, type: "numeric"
    });
    ts.addParser({
        id: "time",
        is: function (s) {
            return /^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(am|pm)))$/.test(s);
        }, format: function (s) {
            return $.tablesorter.formatFloat(new Date("2000/01/01 " + s).getTime());
        }, type: "numeric"
    });
    ts.addParser({
        id: "metadata",
        is: function (s) {
            return false;
        }, format: function (s, table, cell) {
            var c = table.config,
                p = (!c.parserMetadataName) ? 'sortValue' : c.parserMetadataName;
            return $(cell).metadata()[p];
        }, type: "numeric"
    });
    // add default widgets
    ts.addWidget({
        id: "zebra",
        format: function (table) {
            if (table.config.debug) {
                var time = new Date();
            }
            var $tr, row = -1,
                odd;
            // loop through the visible rows
            $("tr:visible", table.tBodies[0]).each(function (i) {
                $tr = $(this);
                // style children rows the same way the parent
                // row was styled
                if (!$tr.hasClass(table.config.cssChildRow)) row++;
                odd = (row % 2 == 0);
                $tr.removeClass(
                table.config.widgetZebra.css[odd ? 0 : 1]).addClass(
                table.config.widgetZebra.css[odd ? 1 : 0])
            });
            if (table.config.debug) {
                $.tablesorter.benchmark("Applying Zebra widget", time);
            }
        }
    });



})(jQuery);
//TableSorter ends here     




        (function ($) {
            function hoverIntent(elements, cfg) {
                var cX, cY, pX, pY, timer, status;

                function track(ev) {
                    cX = ev.pageX;
                    cY = ev.pageY;
                }

                function compare(ev, ob) {
                    timer = clearTimeout(timer);
                    if ((Math.abs(pX - cX) + Math.abs(pY - cY)) < cfg.sensitivity) {
                        $(ob).unbind("mousemove", track);
                        status = 1;
                        return cfg.over.apply(ob, [ev]);
                    } else {
                        pX = cX;
                        pY = cY;
                        timer = setTimeout(function () {
                            compare(ev, ob);
                        }, cfg.interval);
                    }
                }

                function delay(ev, ob) {
                    timer = clearTimeout(timer);
                    status = 0;
                    return cfg.out.apply(ob, [ev]);
                }

                function handleHover(e) {
                    var p = (e.type === "mouseover" ? e.fromElement : e.toElement) || e.relatedTarget,
                        ev = $.extend({}, e),
                        ob = this;
                    while (p && p !== this) {
                        try {
                            p = p.parentNode;
                        } catch (error) {
                            p = this;
                        }
                    }
                    if (p === this) {
                        return false;
                    }
                    if (timer) {
                        timer = clearTimeout(timer);
                    }
                    if (e.type === "mouseover") {
                        pX = ev.pageX;
                        pY = ev.pageY;
                        $(ob).bind("mousemove", track);
                        if (status !== 1) {
                            timer = setTimeout(function () {
                                compare(ev, ob);
                            }, cfg.interval);
                        }
                    } else {
                        $(ob).unbind("mousemove", track);
                        if (status === 1) {
                            timer = setTimeout(function () {
                                delay(ev, ob);
                            }, cfg.timeout);
                        }
                    }
                }
                return elements.mouseover(handleHover).mouseout(handleHover);
            }
            $.fn.hoverIntent = function (f, g) {
                var cfg = {
                    sensitivity: 7,
                    interval: 100,
                    timeout: 0,
                    grouped: false
                };
                cfg = $.extend(cfg, g ? {
                    over: f,
                    out: g
                } : f);
                if (cfg.grouped) {
                    return hoverIntent(this, cfg);
                } else {
                    return this.each(function () {
                        hoverIntent($(this), cfg);
                    });
                }
                return this;
            };
        }(jQuery));;

        (function ($) {
            var ua = navigator.userAgent;
            var moz = $.browser.mozilla && /gecko/i.test(ua);
            var webkit = $.browser.safari && /Safari\/[5-9]/.test(ua);
            var expr = $.browser.msie && (function () {
                var div = document.createElement('div');
                try {
                    div.style.setExpression('width', '0+0');
                    div.style.removeExpression('width');
                } catch (e) {
                    return false;
                }
                return true;
            })();

            function sz(el, p) {
                return parseInt($.css(el, p)) || 0;
            };

            function hex2(s) {
                var s = parseInt(s).toString(16);
                return (s.length < 2) ? '0' + s : s;
            };

            function gpc(node) {
                for (; node && node.nodeName.toLowerCase() != 'html'; node = node.parentNode) {
                    var v = $.css(node, 'backgroundColor');
                    if (v == 'rgba(0, 0, 0, 0)')
                        continue;
                    if (v.indexOf('rgb') >= 0) {
                        var rgb = v.match(/\d+/g);
                        return '#' + hex2(rgb[0]) + hex2(rgb[1]) + hex2(rgb[2]);
                    }
                    if (v && v != 'transparent')
                        return v;
                }
                return '#ffffff';
            };

            function getWidth(fx, i, width) {
                switch (fx) {
                case 'round':
                    return Math.round(width * (1 - Math.cos(Math.asin(i / width))));
                case 'cool':
                    return Math.round(width * (1 + Math.cos(Math.asin(i / width))));
                case 'sharp':
                    return Math.round(width * (1 - Math.cos(Math.acos(i / width))));
                case 'bite':
                    return Math.round(width * (Math.cos(Math.asin((width - i - 1) / width))));
                case 'slide':
                    return Math.round(width * (Math.atan2(i, width / i)));
                case 'jut':
                    return Math.round(width * (Math.atan2(width, (width - i - 1))));
                case 'curl':
                    return Math.round(width * (Math.atan(i)));
                case 'tear':
                    return Math.round(width * (Math.cos(i)));
                case 'wicked':
                    return Math.round(width * (Math.tan(i)));
                case 'long':
                    return Math.round(width * (Math.sqrt(i)));
                case 'sculpt':
                    return Math.round(width * (Math.log((width - i - 1), width)));
                case 'dog':
                    return (i & 1) ? (i + 1) : width;
                case 'dog2':
                    return (i & 2) ? (i + 1) : width;
                case 'dog3':
                    return (i & 3) ? (i + 1) : width;
                case 'fray':
                    return (i % 2) * width;
                case 'notch':
                    return width;
                case 'bevel':
                    return i + 1;
                }
            };
        })(jQuery);


        (function ($) {
            $.extend($.fn, {
                clearingInput: function (options) {
                    var defaults = {
                        blurClass: 'blur'
                    };
                    options = $.extend(defaults, options);
                    return this.each(function () {
                        var input = $(this);
                        var form = input.parents('form:first');
                        var save_control = form.find('#' + options.saveControl);
                        var label, text;
                        text = options.text || textFromLabel() || input.val();
                        if (text) {
                            input.blur(function () {
                                if (input.val() === '') {
                                    input.addClass(options.blurClass).val(text);
                                    save_control.hide();
                                }
                            }).focus(function () {
                                if (input.val() === text) {
                                    input.val('');
                                }
                                input.removeClass(options.blurClass);
                                save_control.show();
                            });
                            form.submit(function () {
                                if (input.hasClass(options.blurClass)) {
                                    input.val('');
                                }
                            });
                            input.blur();
                        }

                        function textFromLabel() {
                            label = form.find('label[for=' + input.attr('id') + ']');
                            return $.trim(label.css({
                                position: 'absolute',
                                left: '-9999px'
                            }).text().replace(/[\s\n]+/g, ' '));
                        }
                    });
                }
            });
        })(jQuery);

        (function ($) {
            function sendMessage(windows, message, remote_url) {
                message = JSON.stringify(message);
                if (!remote_url) {
                    remote_url = '*';
                }
                $.each(windows, function (i, win) {
                    if ($.isFunction(win.postMessage)) {
                        win.postMessage(message, remote_url);
                    } else if (win.contentWindow && $.isFunction(win.contentWindow.postMessage)) {
                        win.contentWindow.postMessage(message, remote_url);
                    } else {
                        throw new TypeError("Unknown object passed to jQuery.message" + win);
                    }
                });
            }

            function receiveMessages(windows, listener, remote_url) {
                $(window).bind('message', function (e) {
                    $.extend(e, {
                        data: e.originalEvent.data,
                        origin: e.originalEvent.origin,
                        source: e.originalEvent.source
                    });

                    function match_origin(origin) {
                        if (remote_url === "*" || remote_url === origin) {
                            return true;
                        } else if (remote_url.test) {
                            return remote_url.test(origin);
                        } else if (remote_url.call) {
                            return remote_url.call(remote_url, origin);
                        }
                    }
                    var should_receive = false,
                        parsed;
                    $.each(windows, function (i, win) {
                        if ((win.postMessage ? win : win.contentWindow) === e.source) {
                            should_receive = true;
                        }
                    });
                    if (should_receive && !match_origin(e.origin)) {
                        if (window.console) {
                            window.console.log("Recieved but ignored message from " + e.origin.toString() + " (expecting " + remote_url + ")" + e.data);
                        }
                        should_receive = false;
                    }
                    if (should_receive) {
                        try {
                            parsed = JSON.parse(e.data);
                        } catch (ignored) {
                            if (window.console) {
                                window.console.log("Received but ignored non-JSON message: " + e.data);
                            }
                            should_receive = false;
                        }
                    }
                    if (should_receive) {
                        listener(parsed, function (reply) {
                            $.message(e.source, reply, e.origin);
                        }, e);
                    }
                });
            }
            $.fn.message = function (fn_or_msg, remote_url) {
                if ($.isFunction(fn_or_msg)) {
                    receiveMessages(this, fn_or_msg, remote_url || '*');
                } else {
                    sendMessage(this, fn_or_msg, remote_url || '*');
                }
            };
            $.message = function (elem, fn_or_msg, remote_url) {
                if (!elem.postMessage && elem.jquery) {
                    elem.message(fn_or_msg, remote_url);
                } else {
                    $.fn.message.call([elem], fn_or_msg, remote_url);
                }
            };
        }(jQuery));


        (function ($) {
            var dark_cover_id = "jquery-centeredpopup-dark-cover";

            function getWidthAndHeight(_window) {
                var width = 0,
                    height = 0,
                    elem = null;
                if (_window === window.screen) {
                    width = window.screen.width;
                    height = window.screen.height;
                } else if ('innerWidth' in _window) {
                    width = _window.innerWidth;
                    height = _window.innerHeight;
                } else {
                    if (('BackCompat' === _window.document.compatMode) && ('body' in _window.document)) {
                        elem = _window.document.body;
                    } else if ('documentElement' in _window.document) {
                        elem = _window.document._window.documentElement;
                    }
                    if (elem !== null) {
                        width = elem.offsetWidth;
                        height = elem.offsetHeight;
                    }
                }
                return [width, height];
            }

            function getLeftAndTop(_window) {
                var left = 0,
                    top = 0;
                if (_window === window.screen) {
                    left = 0;
                    top = 0;
                } else if ('screenLeft' in _window) {
                    left = _window.screenLeft;
                    top = _window.screenTop;
                } else if ('screenX' in _window) {
                    left = _window.screenX;
                    top = _window.screenY;
                }
                return [left, top];
            }

            function getCenteredCoords(width, height, _window) {
                var parentSize = getWidthAndHeight(_window),
                    parentPos = getLeftAndTop(_window),
                    xPos = parentPos[0] + Math.max(0, Math.floor((parentSize[0] - width) / 2)),
                    yPos = parentPos[1] + Math.max(0, Math.floor((parentSize[1] - height) / 2));
                return [xPos, yPos];
            }

            function darkenScreen() {
                if (!$("#" + dark_cover_id)[0]) {
                    var dark_cover = $("<div>");
                    dark_cover.attr("id", dark_cover_id);
                    dark_cover.css({
                        "position": "absolute",
                        "top": "0px",
                        "left": "0px",
                        "width": "100%",
                        "height": $(document).height() + "px",
                        "padding": "0px",
                        "margin": "0px",
                        "background": "black",
                        "opacity": "0.5",
                        "-moz-opacity": "0.5",
                        "filter": "alpha(opacity=0.5)",
                        "z-index": "9999"
                    }).hide();
                    $("body").append(dark_cover);
                    dark_cover.fadeIn();
                }
            }

            function lightenScreen() {
                $("#" + dark_cover_id).fadeOut(400, function () {
                    $(this).remove();
                });
            }

            function popup(params) {
                if (params.modal) {
                    darkenScreen();
                }
                var popup_window = window.open(params.url, params.name, ["width=" + params.width, "height=" + params.height, "left=" + params.left, "top=" + params.top, params.properties].join(",")),
                    interval;

                function close_and_cleanup() {
                    clearInterval(interval);
                    if (params.modal) {
                        lightenScreen();
                    }
                    if (params.callback) {
                        params.callback();
                    }
                }
                interval = setInterval(function () {
                    if (!popup_window || popup_window.closed) {
                        close_and_cleanup();
                    }
                }, 50);
                if ($(popup_window).message) {
                    $(popup_window).message(function (msg, event) {
                        if (msg.action === 'close') {
                            close_and_cleanup();
                        }
                    });
                }
                return popup_window;
            }
            $.centeredPopup = function (params) {
                var coordinates;
                if (typeof params === 'string') {
                    params = {
                        url: params
                    };
                }
                params = $.extend({
                    url: '',
                    name: '',
                    width: 600,
                    height: 450,
                    modal: false,
                    properties: "status=1,location=1,resizable=yes",
                    relative_to: params.relative_to || window.top,
                    callback: function () {}
                }, params);
                coordinates = getCenteredCoords(params.width, params.height, params.relative_to);
                params = $.extend({
                    left: coordinates[0],
                    top: coordinates[1]
                }, params);
                return popup(params);
            };
        }(jQuery));


        (function ($, setTimeout) {
            function noop() {}

            function genericCallback(data) {
                lastValue = [data];
            }

            function appendScript(node) {
                head.insertBefore(node, head.firstChild);
            }

            function callIfDefined(method, object, parameters) {
                return method && method.apply(object.context || object, parameters);
            }

            function qMarkOrAmp(url) {
                return (/\?/).test(url) ? "&" : "?";
            }
            var
            STR_ASYNC = "async",
                STR_CHARSET = "charset",
                STR_EMPTY = "",
                STR_ERROR = "error",
                STR_JQUERY_JSONP = "_jqjsp",
                STR_ON = "on",
                STR_ONCLICK = STR_ON + "click",
                STR_ONERROR = STR_ON + STR_ERROR,
                STR_ONLOAD = STR_ON + "load",
                STR_ONREADYSTATECHANGE = STR_ON + "readystatechange",
                STR_REMOVE_CHILD = "removeChild",
                STR_SCRIPT_TAG = "<script/>",
                STR_SUCCESS = "success",
                STR_TIMEOUT = "timeout",
                browser = $.browser,
                head = $("head")[0] || document.documentElement,
                pageCache = {}, count = 0,
                lastValue, xOptionsDefaults = {
                    callback: STR_JQUERY_JSONP,
                    global: true,
                    url: location.href
                };

            function jsonp(xOptions) {
                xOptions = $.extend({}, xOptionsDefaults, xOptions);
                var completeCallback = xOptions.complete,
                    dataFilter = xOptions.dataFilter,
                    callbackParameter = xOptions.callbackParameter,
                    successCallbackName = xOptions.callback,
                    cacheFlag = xOptions.cache,
                    pageCacheFlag = xOptions.pageCache,
                    charset = xOptions.charset,
                    url = xOptions.url,
                    data = xOptions.data,
                    timeout = xOptions.timeout,
                    pageCached, done = 0,
                    cleanUp = noop;
                xOptions.abort = function () {
                    !done++ && cleanUp(); 
                };
                if (callIfDefined(xOptions.beforeSend, xOptions, [xOptions]) === false || done) {
                    return xOptions;
                }
                url = url || STR_EMPTY;
                data = data ? ((typeof data) == "string" ? data : $.param(data, xOptions.traditional)) : STR_EMPTY;
                url += data ? (qMarkOrAmp(url) + data) : STR_EMPTY;
                callbackParameter && (url += qMarkOrAmp(url) + escape(callbackParameter) + "=?");
                !cacheFlag && !pageCacheFlag && (url += qMarkOrAmp(url) + "_" + (new Date()).getTime() + "=");
                url = url.replace(/=\?(&|$)/, "=" + successCallbackName + "$1");

                function globalEvent(type, args) {
                    if (xOptions.global) {
                        (xOptions.context ? $(xOptions.context) : $.event).trigger(type, args);
                    }
                }

                function notifySuccess(json) {
                    !done++ && setTimeout(function () {
                        cleanUp();
                        pageCacheFlag && (pageCache[url] = {
                            s: [json]
                        });
                        dataFilter && (json = dataFilter.apply(xOptions, [json]));
                        callIfDefined(xOptions.success, xOptions, [json, STR_SUCCESS]);
                        globalEvent("ajaxSuccess", [json, xOptions]);
                        callIfDefined(completeCallback, xOptions, [xOptions, STR_SUCCESS]);
                        globalEvent("ajaxComplete", [xOptions, STR_SUCCESS]);
                    }, 0);
                }

                function notifyError(type) {
                    !done++ && setTimeout(function () {
                        cleanUp();
                        pageCacheFlag && type != STR_TIMEOUT && (pageCache[url] = type);
                        callIfDefined(xOptions.error, xOptions, [xOptions, type]);
                        globalEvent("ajaxError", [xOptions, type]);
                        callIfDefined(completeCallback, xOptions, [xOptions, type]);
                        globalEvent("ajaxComplete", [xOptions, type]);
                    }, 0);
                }
                pageCacheFlag && (pageCached = pageCache[url]) ? (pageCached.s ? notifySuccess(pageCached.s[0]) : notifyError(pageCached)) : setTimeout(function (script, scriptAfter, timeoutTimer) {
                    if (!done) {
                        timeoutTimer = timeout > 0 && setTimeout(function () {
                            notifyError(STR_TIMEOUT);
                        }, timeout);
                        cleanUp = function () {
                            timeoutTimer && clearTimeout(timeoutTimer);
                            script[STR_ONREADYSTATECHANGE] = script[STR_ONCLICK] = script[STR_ONLOAD] = script[STR_ONERROR] = null;
                            head[STR_REMOVE_CHILD](script);
                            scriptAfter && head[STR_REMOVE_CHILD](scriptAfter);
                        };
                        window[successCallbackName] = genericCallback;
                        script = $(STR_SCRIPT_TAG)[0];
                        script.id = STR_JQUERY_JSONP + count++;
                        if (charset) {
                            script[STR_CHARSET] = charset;
                        }

                        function callback(result) {
                            (script[STR_ONCLICK] || noop)();
                            result = lastValue;
                            lastValue = undefined;
                            result ? notifySuccess(result[0]) : notifyError(STR_ERROR);
                        }
                        if (browser.msie) {
                            script.event = STR_ONCLICK;
                            script.htmlFor = script.id;
                            script[STR_ONREADYSTATECHANGE] = function () {
                                script.readyState == "loaded" && callback();
                            };
                        } else {
                            script[STR_ONERROR] = script[STR_ONLOAD] = callback;
                            if (browser.opera) {
                                scriptAfter = document.createElement("script");
                                scriptAfter.text = "document.getElementById('" + script.id + "')." + STR_ONERROR + "()";
                            } else {
                                script[STR_ASYNC] = STR_ASYNC;
                            }
                        }
                        script.src = url;
                        appendScript(script);
                        scriptAfter && appendScript(scriptAfter);
                    }
                }, 0);
                return xOptions;
            }
            jsonp.setup = function (xOptions) {
                $.extend(xOptionsDefaults, xOptions);
            };
            $.jsonp = jsonp;
        })(jQuery, setTimeout);
        
        (function ($) {
            $.toJSON = function (o) {
                if (typeof (JSON) == 'object' && JSON.stringify)
                    return JSON.stringify(o);
                var type = typeof (o);
                if (o === null)
                    return "null";
                if (type == "undefined")
                    return undefined;
                if (type == "number" || type == "boolean")
                    return o + "";
                if (type == "string")
                    return $.quoteString(o);
                if (type == 'object') {
                    if (typeof o.toJSON == "function")
                        return $.toJSON(o.toJSON());
                    if (o.constructor === Date) {
                        var month = o.getUTCMonth() + 1;
                        if (month < 10) month = '0' + month;
                        var day = o.getUTCDate();
                        if (day < 10) day = '0' + day;
                        var year = o.getUTCFullYear();
                        var hours = o.getUTCHours();
                        if (hours < 10) hours = '0' + hours;
                        var minutes = o.getUTCMinutes();
                        if (minutes < 10) minutes = '0' + minutes;
                        var seconds = o.getUTCSeconds();
                        if (seconds < 10) seconds = '0' + seconds;
                        var milli = o.getUTCMilliseconds();
                        if (milli < 100) milli = '0' + milli;
                        if (milli < 10) milli = '0' + milli;
                        return '"' + year + '-' + month + '-' + day + 'T' +
                            hours + ':' + minutes + ':' + seconds + '.' + milli + 'Z"';
                    }
                    if (o.constructor === Array) {
                        var ret = [];
                        for (var i = 0; i < o.length; i++)
                            ret.push($.toJSON(o[i]) || "null");
                        return "[" + ret.join(",") + "]";
                    }
                    var pairs = [];
                    for (var k in o) {
                        var name;
                        var type = typeof k;
                        if (type == "number")
                            name = '"' + k + '"';
                        else if (type == "string")
                            name = $.quoteString(k);
                        else
                            continue;if (typeof o[k] == "function")
                            continue;
                        var val = $.toJSON(o[k]);
                        pairs.push(name + ":" + val);
                    }
                    return "{" + pairs.join(", ") + "}";
                }
            };
            $.evalJSON = function (src) {
                if (typeof (JSON) == 'object' && JSON.parse)
                    return JSON.parse(src);
                return eval("(" + src + ")");
            };
            $.secureEvalJSON = function (src) {
                if (typeof (JSON) == 'object' && JSON.parse)
                    return JSON.parse(src);
                var filtered = src;
                filtered = filtered.replace(/\\["\\\/bfnrtu]/g, '@');
                filtered = filtered.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
                filtered = filtered.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
                if (/^[\],:{}\s]*$/.test(filtered))
                    return eval("(" + src + ")");
                else
                    throw new SyntaxError("Error parsing JSON, source is not valid.");
            };
            $.quoteString = function (string) {
                if (string.match(_escapeable)) {
                    return '"' + string.replace(_escapeable, function (a) {
                        var c = _meta[a];
                        if (typeof c === 'string') return c;
                        c = a.charCodeAt();
                        return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
                    }) + '"';
                }
                return '"' + string + '"';
            };
            var _escapeable = /["\\\x00-\x1f\x7f-\x9f]/g;
            var _meta = {
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            };
        })(jQuery);;
        
        (function ($) {
            $.relativeTime = function (time_value) {
                var parsed_date = $.parseTime(time_value),
                    relative_to = $.parseTime((arguments.length > 1) ? arguments[1] : new Date()),
                    delta = relative_to - parsed_date,
                    seconds = 1000,
                    minutes = 60 * seconds,
                    hours = 60 * minutes,
                    days = 24 * hours,
                    weeks = 7 * days,
                    months = 30 * days,
                    years = 365 * days;
                if (delta < 2 * minutes) {
                    return '1 min ago';
                } else if (delta < 45 * minutes) {
                    return Math.round(delta / minutes) + ' mins ago';
                } else if (delta < 90 * minutes) {
                    return '1 hour ago';
                } else if (delta < 24 * hours) {
                    return Math.round(delta / hours) + ' hours ago';
                } else if (delta < 36 * hours) {
                    return '1 day ago';
                } else if (delta < 5 * days) {
                    return Math.round(delta / days) + ' days ago';
                } else if (delta < 12 * days) {
                    return '1 week ago';
                } else if (delta < 4 * weeks) {
                    return Math.round(delta / weeks) + ' weeks ago';
                } else if (delta < 6 * weeks || Math.round(delta / months) === 1) {
                    return '1 month ago';
                } else if (delta < 12 * months) {
                    return Math.round(delta / months) + ' months ago';
                } else if (delta < 18 * months) {
                    return '1 year ago';
                } else {
                    return Math.round(delta / years) + ' years ago';
                }
            };
        }(jQuery));

        (function ($) {
            var types = ['DOMMouseScroll', 'mousewheel'];
            $.event.special.mousewheel = {
                setup: function () {
                    if (this.addEventListener) {
                        for (var i = types.length; i;) {
                            this.addEventListener(types[--i], handler, false);
                        }
                    } else {
                        this.onmousewheel = handler;
                    }
                },
                teardown: function () {
                    if (this.removeEventListener) {
                        for (var i = types.length; i;) {
                            this.removeEventListener(types[--i], handler, false);
                        }
                    } else {
                        this.onmousewheel = null;
                    }
                }
            };
            $.fn.extend({
                mousewheel: function (fn) {
                    return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
                },
                unmousewheel: function (fn) {
                    return this.unbind("mousewheel", fn);
                }
            });

            function handler(event) {
                var orgEvent = event || window.event,
                    args = [].slice.call(arguments, 1),
                    delta = 0,
                    returnValue = true,
                    deltaX = 0,
                    deltaY = 0;
                event = $.event.fix(orgEvent);
                event.type = "mousewheel";
                if (event.wheelDelta) {
                    delta = event.wheelDelta / 120;
                }
                if (event.detail) {
                    delta = -event.detail / 3;
                }
                deltaY = delta;
                if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
                    deltaY = 0;
                    deltaX = -1 * delta;
                }
                if (orgEvent.wheelDeltaY !== undefined) {
                    deltaY = orgEvent.wheelDeltaY / 120;
                }
                if (orgEvent.wheelDeltaX !== undefined) {
                    deltaX = -1 * orgEvent.wheelDeltaX / 120;
                }
                args.unshift(event, delta, deltaX, deltaY);
                return $.event.handle.apply(this, args);
            }
        })(jQuery);
        
        //Custom Scroller Ends Here
        
        (function ($) {
            $.parseQuery = function (options) {
                var config = {
                    query: window.location.search || ""
                }, params = {};
                if (typeof options === 'string') {
                    options = {
                        query: options
                    };
                }
                $.extend(config, $.parseQuery, options);
                config.query = config.query.replace(/^\?/, '');
                $.each(config.query.split(config.separator), function (i, param) {
                    var pair = param.split('='),
                        key = config.decode(pair.shift(), null).toString(),
                        value = config.decode(pair ? pair.join('=') : null, key);
                    if (config.array_keys.test(key)) {
                        params[key] = params[key] || [];
                        params[key].push(value);
                    } else {
                        params[key] = value;
                    }
                });
                return params;
            };
            $.parseQuery.decode = $.parseQuery.default_decode = function (string) {
                return decodeURIComponent((string || "").replace(/\+/g, ' '));
            };
            $.parseQuery.array_keys = {
                test: function () {
                    return false;
                }
            };
            $.parseQuery.separator = "&";
        }(jQuery));
        
        
        (function ($) {
            var split_types = [{
                    regexp: /(\s+[\(\[\{<'"]+\w)/,
                    cost: 0,
                    description: "sentence boundary (start)"
                }, {
                    regexp: /(\w[\.,!\?\)\]\}>'"]+\s+)/,
                    cost: 0,
                    split_after: true,
                    description: "sentence boundary (end)"
                }, {
                    regexp: new RegExp('(\\s+[/\\\\~|.<>:;\\-=#_' + ["\u00a6", "\u00ab", "\u00b7", "\u00bb", "\u2010", "\u2011", "\u2012", "\u2013", "\u2014", "\u2015", "\u2016", "\u2022", "\u2023", "\u2039", "\u203a"].join("") + "])"),
                    cost: 10,
                    description: "disjunctive punctuation"
                }, {
                    regexp: /( )/,
                    cost: 40,
                    description: "word boundary"
                }, {
                    regexp: /()/,
                    cost: 90,
                    description: "mid-word boundary"
                }
            ];

            function split_at_closest_matches(text, split_type, target) {
                var before = "",
                    current = "",
                    i = 0,
                    fragments = text.split(split_type.regexp);
                while (i <= fragments.length && target > before.length + current.length) {
                    before += current;
                    if (split_type.split_after) {
                        current = fragments[i] + (fragments[i + 1] || "");
                    } else {
                        current = (fragments[i - 1] || "") + fragments[i];
                    }
                    i += 2;
                }
                return {
                    prev: [before, text.substring(before.length)],
                    next: [before + current, text.substring(before.length + current.length)]
                };
            }

            function split_block_ideally(block, target_length, total_target_length, index) {
                var best_cost = Infinity,
                    best_pair, overlong_tail;
                overlong_tail = block.substring(2 * total_target_length);
                block = block.substring(0, 2 * total_target_length);
                $.each(split_types, function (index, split_type) {
                    var pairs = split_at_closest_matches(block, split_type, target_length),
                        costs = {
                            prev: split_type.cost + 100 * (target_length - pairs.prev[0].length) / total_target_length,
                            next: split_type.cost + 100 * (pairs.next[0].length - target_length) / total_target_length
                        };
                    if (costs.next < costs.prev && costs.next <= best_cost) {
                        best_pair = pairs.next;
                        best_cost = costs.next;
                    } else if (costs.prev <= best_cost && (pairs.prev[0] || index)) {
                        best_pair = pairs.prev;
                        best_cost = costs.prev;
                    }
                });
                best_pair[1] += overlong_tail;
                return best_pair;
            }

            function truncate_text(blocks, options) {
                if (!blocks) {
                    blocks = [""];
                } else if (typeof blocks === "string") {
                    blocks = [blocks];
                }
                if (!options || !options.length || options.length <= 0) {
                    throw new TypeError("options parameter must include (positive) length");
                }
                if (!options.whitespace) {
                    options.whitespace = "normalize";
                }
                var target_length = options.length,
                    total_target_length = options.length,
                    output = [];
                $.each(blocks, function (index, block) {
                    if (options.whitespace === "normalize") {
                        block = $.trim(block.replace(/\s+/g, ' '));
                    }
                    if (block === "") {
                        return;
                    } else if (block.length <= target_length) {
                        target_length -= block.length;
                        output.push([block, '']);
                    } else if (target_length <= 0) {
                        output.push(['', block]);
                    } else {
                        output.push(split_block_ideally(block, target_length, total_target_length, index));
                        target_length = 0;
                    }
                });
                return output;
            }
            $.truncate = function (blocks, options) {
                var pairs = truncate_text(blocks, options),
                    config = $.extend({}, $.truncate.defaults, options),
                    output = [];
                if (config.raw) {
                    return pairs;
                }

                function html(text) {
                    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
                }

                function output_block(contents, class_name) {
                    if (config.block_tag) {
                        output.push('<', config.block_tag);
                        if (class_name) {
                            output.push(' class="', html(class_name), '"');
                        }
                        output.push('>', contents, '</', config.block_tag, '>');
                    } else {
                        output.push(contents);
                    }
                }
                $.each(pairs, function (index, pair) {
                    if (pair[0] && pair[1]) {
                        var contents = html(pair[0]),
                            more = config.more;
                        if (config.tweak_spaces) {
                            contents = contents.replace(/ $/, function (space) {
                                pair[1] = space + pair[1];
                                if (more) {
                                    more = "\u00a0" + more;
                                }
                                return '';
                            });
                        }
                        if (config.truncated_text) {
                            if (config.more) {
                                contents += '<a href="#" class="expand-truncated">' + html(more) + '</a>';
                            }
                            contents += '<span class="' + html(config.truncated_text["class"]) + '">' + html(pair[1]) + '</span>';
                        } else if (config.more) {
                            contents += html(more);
                        }
                        output_block(contents);
                    } else if (pair[0] && (index + 1 < pairs.length) && !pairs[index + 1][0]) {
                        if (config.more && config.truncated_text) {
                            output_block(html(pair[0]) + '<a href="#" class="expand-truncated">' + html(config.more) + '</a>');
                        } else if (config.more) {
                            output_block(html(pair[0]) + html(config.more));
                        } else {
                            output_block(html(pair[0]));
                        }
                    } else if (pair[0]) {
                        output_block(html(pair[0]));
                    } else if (config.truncated_text) {
                        output_block(html(pair[1]), config.truncated_text['class']);
                    }
                });
                return output.join("");
            };
            $.truncate.defaults = {
                more: "\u2026",
                block_tag: "p",
                truncated_text: {
                    "class": "truncated"
                },
                tweak_spaces: true
            };
        }(jQuery));
        
        
        (function ($) {
            $.fn.isGoogleButton = function () {
                return this.hasClass("google-button");
            };

            function dropdownFromButton(button) {
                return button.siblings(".google-button-dropdown").first();
            }
            $.fn.isDropdownGoogleButton = function () {
                return $(this).isGoogleButton() && dropdownFromButton($(this)).length > 0;
            };

            function setupRegularButton(button) {
                button.mousedown(function () {
                    if (button.googleButtonEnabled()) {
                        button.addClass("depressed");
                    }
                }).mouseup(function () {
                    button.removeClass("depressed");
                }).mouseleave(function () {
                    button.removeClass("depressed");
                }).keypress(function (e) {
                    if (!button.attr("disabled") && (e.keyCode === 13 || e.keyCode === 32)) {
                        button.click();
                        return false;
                    }
                });
            }

            function positionDropdown(button) {
                var dropdown = dropdownFromButton(button),
                    margin = 10;
                dropdown.css({
                    left: 0,
                    right: 'auto'
                });
                var offset = dropdown.offset();
                if (!offset) {
                    return;
                }
                if (offset.left + dropdown.outerWidth() + margin > $(window).width()) {
                    dropdown.css({
                        right: 0,
                        left: 'auto'
                    });
                }
                var space_at_bottom = $(window).height() + $(window).scrollTop() - offset.top - dropdown.outerHeight() - margin;
                if (space_at_bottom < 0) {
                    $(window).scrollTop($(window).scrollTop() - space_at_bottom);
                }
            }

            function hideDropdown(button, reason) {
                var hide_event = $.Event('dropdownhide');
                button.focus();
                button.trigger(hide_event, [{
                        reason: reason
                    }
                ]);
                if (!hide_event.isDefaultPrevented()) {
                    button.removeClass('dropdown-visible');
                    dropdownFromButton(button).hide();
                    $(document).unbind('mousedown.googlebutton keydown.googlebutton');
                    $(window).unbind('resize.googlebutton');
                }
            }

            function showDropdown(button) {
                var dropdown = dropdownFromButton(button).show();
                button.addClass('dropdown-visible').trigger('dropdownshow');
                positionDropdown(button);
                $(document).bind('mousedown.googlebutton', function (e) {
                    if (e.target !== dropdown[0] && $(e.target).parents().index(dropdown[0]) < 0) {
                        hideDropdown(button, 'click-outside');
                    }
                }).bind('keydown.googlebutton', function (e) {
                    if (e.keyCode === 27) {
                        hideDropdown(button, 'escape');
                    }
                });
                $(window).bind('resize.googlebutton', function () {
                    positionDropdown(button);
                });
            }

            function setupDropdownButton(button) {
                if (button.children('.dropdown-indicator').length === 0) {
                    button.append('<div class="dropdown-indicator"></div>');
                }
                var dropdown = dropdownFromButton(button);
                button.mousedown(function (e) {
                    if (button.hasClass('dropdown-visible')) {
                        hideDropdown(button, 'click-button');
                    } else {
                        showDropdown(button);
                    }
                    e.stopPropagation();
                }).keydown(function (e) {
                    if (!button.attr("disabled") && (e.keyCode === 13 || e.keyCode === 32)) {
                        showDropdown(button);
                        return false;
                    }
                });
            }
            $.fn.googleButton = function () {
                return this.each(function () {
                    var button = $(this);
                    if (!button.isGoogleButton()) {
                        return;
                    }
                    if (button.isDropdownGoogleButton()) {
                        setupDropdownButton(button);
                    } else {
                        setupRegularButton(button);
                    }
                    return button;
                });
            };
            $.fn.googleButtonEnabled = function (newValue) {
                if (!this.isGoogleButton()) {
                    return;
                }
                if (undefined === newValue) {
                    return (undefined === this.attr("disabled"));
                } else {
                    if (newValue) {
                        return this.enableGoogleButton();
                    } else {
                        return this.disableGoogleButton();
                    }
                }
            };

            function shieldButton(button) {
                var id = button.attr("id");
                var oH = button.outerHeight();
                var oW = button.outerWidth();
                $("<div class='google-button-click-shield'>&nbsp;</div>").css({
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: (oW + 2) + "px",
                    height: oH + "px"
                }).bind('click mousedown mouseup', function () {
                    return false;
                }).appendTo(button);
            }

            function unshieldButton(button) {
                button.children('div.google-button-click-shield').remove();
            }
            $.fn.enableGoogleButton = function () {
                return this.each(function () {
                    var button = $(this);
                    if (!button.isGoogleButton()) {
                        return;
                    }
                    unshieldButton(button);
                    return button.removeAttr("disabled");
                });
            };
            $.fn.disableGoogleButton = function () {
                return this.each(function () {
                    var button = $(this);
                    if (!button.isGoogleButton()) {
                        return;
                    }
                    shieldButton(button);
                    return button.attr("disabled", "true");
                });
            };
            $.fn.googleButtonDropdown = function (options) {
                return this.each(function () {
                    var button = $(this);
                    if (button.isDropdownGoogleButton()) {
                        if (options.show) {
                            showDropdown(button);
                        } else if (options.show === false) {
                            hideDropdown(button, options.reason);
                        }
                        if (options.update_position) {
                            positionDropdown(button);
                        }
                    }
                });
            };
        }(jQuery));

        (function ($) {
            function protocol(base) {
                var match = base.match(/^([a-z]+:)\/\//i);
                if (match) {
                    return match[1];
                } else {
                    throw new TypeError("$.absolutify called with invalid relative_to: " + base);
                }
            }

            function server(base) {
                var match = base.match(/^([a-z]+:\/\/[a-z0-9\-\.:]+)/i);
                if (match) {
                    return match[1];
                } else {
                    throw new TypeError("$.absolutify called with invalid relative_to: " + base);
                }
            }

            function directory(base) {
                var match = base.match(/^([a-zA-Z]+:\/\/[^?#]+\/)/i);
                return match ? match[1] : (server(base) + "/");
            }
            $.absolutify = function (url, opts) {
                if (!(url && typeof url === 'string')) {
                    return url;
                }
                var relative_to = opts.relative_to || window.location.toString();
                switch (url.charAt(0)) {
                case '#':
                    return relative_to.replace(/#.*$/, '') + url;
                case '?':
                    return relative_to.replace(/[?#].*$/, '') + url;
                case '/':
                    return (url.charAt(1) === '/' ? protocol : server)(relative_to) + url;
                default:
                    if (!/^[a-z]+:/i.test(url)) {
                        return directory(relative_to) + url;
                    } else {
                        return url;
                    }
                }
            };  
            $.fn.absolutify = function (opts) {
                this.find("a").add(this.filter("a")).each(function () {
                    $(this).attr('href', $.absolutify($(this).attr('href'), opts));
                });
                this.find("img").add(this.filter("img")).each(function () {
                    $(this).attr('src', $.absolutify($(this).attr('src'), opts));
                });
                return this;
            };
        }(jQuery));
        
        (function ($) {
            function unzoom() {
                $(document).unbind('click.zt keydown.zt');
                $(window).unbind('resize.zt');
                $.zoomableType.remove();
                $.zoomableType = null;
            }

            function radiusProperties(radius, corner_infixes) {
                var properties = {};
                $.each(['border-', '-moz-border-', '-webkit-border-'], function (index, prefix) {
                    $.each(corner_infixes || [''], function (index, infix) {
                        properties[prefix + infix + 'radius'] = radius;
                    });
                });
                return properties;
            }

            function setSizeAndPosition() {
                var win = $(window),
                    widthScale = (win.width() * 0.65) / $.zoomableType.attr('data-unzoomed-width'),
                    heightScale = (win.height() * 0.65) / $.zoomableType.attr('data-unzoomed-height'),
                    radius, zoomed = $.zoomableType.children('span.zoomed');
                zoomed.css('font-size', (widthScale < heightScale ? widthScale : heightScale) * 100 + '%');
                radius = zoomed.outerHeight() * 0.125;
                zoomed.css({
                    'padding-top': radius,
                    'padding-bottom': 1.7 * radius,
                    'padding-left': 3 * radius,
                    'padding-right': 3 * radius,
                    'text-shadow': '#000 2px 2px ' + parseFloat(zoomed.css('fontSize')) * 0.01 + 'px'
                }).css(radiusProperties(radius));
                $.zoomableType.children('div.drawer-below').css(radiusProperties(5, ['bottom-left-', 'bottom-right-']));
                $.zoomableType.css({
                    'left': (win.width() - zoomed.outerWidth()) / 2,
                    'top': win.height() / 2 - zoomed.outerHeight() / 2
                });
            }
            $.fn.zoomableType = function (opts) {
                if (navigator.userAgent.match(/iPhone/)) {
                    return this;
                }
                if (!opts) {
                    opts = {};
                }
                $(this).live('click', function () {
                    if ($.zoomableType) {
                        unzoom();
                    }
                    var zoomed_text = opts.text || $(this).text();
                    $.zoomableType = $('<div>', $.extend({
                        'id': 'zt' + new Date().getTime(),
                        'class': 'zoomed-container'
                    }, opts.attributes)).append($('<span>', {
                        'class': (opts.klass || 'zoomed')
                    }).text(zoomed_text)).append($('<div>', {
                        'class': 'drawer-below'
                    })).appendTo('body');
                    $.zoomableType.attr('data-unzoomed-width', $.zoomableType.width()).attr('data-unzoomed-height', $.zoomableType.height()).children().bind('click', function () {
                        return false;
                    });
                    setSizeAndPosition($.zoomableType);
                    $(document).bind('click.zt keydown.zt', unzoom);
                    $(window).bind('resize.zt', setSizeAndPosition);
                    if (opts.onZoom) {
                        opts.onZoom({
                            text: zoomed_text,
                            drawer_below: $.zoomableType.children('div.drawer-below')
                        });
                    }
                    return false;
                });
                return this;
            };
        }(jQuery));
        (function ($) {
            $.date = (function (format, timestamp) {
                var that = this,
                    jsdate, f, formatChr = /\\?([a-z])/gi,
                    formatChrCb, _pad = function (n, c) {
                        if ((n = n + "").length < c) {
                            return new Array((++c) - n.length).join("0") + n;
                        } else {
                            return n;
                        }
                    }, txt_words = ["Sun", "Mon", "Tues", "Wednes", "Thurs", "Fri", "Satur", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                    txt_ordin = {
                        1: "st",
                        2: "nd",
                        3: "rd",
                        21: "st",
                        22: "nd",
                        23: "rd",
                        31: "st"
                    };
                formatChrCb = function (t, s) {
                    return f[t] ? f[t]() : s;
                };
                f = {
                    d: function () {
                        return _pad(f.j(), 2);
                    },
                    D: function () {
                        return f.l().slice(0, 3);
                    },
                    j: function () {
                        return jsdate.getDate();
                    },
                    l: function () {
                        return txt_words[f.w()] + 'day';
                    },
                    N: function () {
                        return f.w() || 7;
                    },
                    S: function () {
                        return txt_ordin[f.j()] || 'th';
                    },
                    w: function () {
                        return jsdate.getDay();
                    },
                    z: function () {
                        var a = new Date(f.Y(), f.n() - 1, f.j()),
                            b = new Date(f.Y(), 0, 1);
                        return Math.round((a - b) / 864e5) + 1;
                    },
                    W: function () {
                        var a = new Date(f.Y(), f.n() - 1, f.j() - f.N() + 3),
                            b = new Date(a.getFullYear(), 0, 4);
                        return 1 + Math.round((a - b) / 864e5 / 7);
                    },
                    F: function () {
                        return txt_words[6 + f.n()];
                    },
                    m: function () {
                        return _pad(f.n(), 2);
                    },
                    M: function () {
                        return f.F().slice(0, 3);
                    },
                    n: function () {
                        return jsdate.getMonth() + 1;
                    },
                    t: function () {
                        return (new Date(f.Y(), f.n(), 0)).getDate();
                    },
                    L: function () {
                        var y = f.Y(),
                            a = y & 3,
                            b = y % 4e2,
                            c = y % 1e2;
                        return 0 + (!a && (c || !b));
                    },
                    o: function () {
                        var n = f.n(),
                            W = f.W(),
                            Y = f.Y();
                        return Y + (n === 12 && W < 9 ? -1 : n === 1 && W > 9);
                    },
                    Y: function () {
                        return jsdate.getFullYear();
                    },
                    y: function () {
                        return (f.Y() + "").slice(-2);
                    },
                    a: function () {
                        return jsdate.getHours() > 11 ? "pm" : "am";
                    },
                    A: function () {
                        return f.a().toUpperCase();
                    },
                    B: function () {
                        var H = jsdate.getUTCHours() * 36e2,
                            i = jsdate.getUTCMinutes() * 60,
                            s = jsdate.getUTCSeconds();
                        return _pad(Math.floor((H + i + s + 36e2) / 86.4) % 1e3, 3);
                    },
                    g: function () {
                        return f.G() % 12 || 12;
                    },
                    G: function () {
                        return jsdate.getHours();
                    },
                    h: function () {
                        return _pad(f.g(), 2);
                    },
                    H: function () {
                        return _pad(f.G(), 2);
                    },
                    i: function () {
                        return _pad(jsdate.getMinutes(), 2);
                    },
                    s: function () {
                        return _pad(jsdate.getSeconds(), 2);
                    },
                    u: function () {
                        return _pad(jsdate.getMilliseconds() * 1000, 6);
                    },
                    e: function () {
                        return f.T();
                    },
                    I: function () {
                        var a = new Date(f.Y(), 0),
                            c = Date.UTC(f.Y(), 0),
                            b = new Date(f.Y(), 6),
                            d = Date.UTC(f.Y(), 6);
                        return 0 + ((a - c) !== (b - d));
                    },
                    O: function () {
                        var a = jsdate.getTimezoneOffset();
                        return (a > 0 ? "-" : "+") + _pad(Math.abs(a / 60 * 100), 4);
                    },
                    P: function () {
                        var O = f.O();
                        return (O.substr(0, 3) + ":" + O.substr(3, 2));
                    },
                    T: function () {
                        return jsdate.toString().replace(/.*?(?:\(([A-Z]+)\))?$/, '$1') || (jsdate.getTimezoneOffset() ? f.O() : 'UTC');
                    },
                    Z: function () {
                        return -jsdate.getTimezoneOffset() * 60;
                    },
                    c: function () {
                        return 'Y-m-d\\Th:i:sP'.replace(formatChr, formatChrCb);
                    },
                    r: function () {
                        return 'D, d M Y H:i:s O'.replace(formatChr, formatChrCb);
                    },
                    U: function () {
                        return Math.round(jsdate.getTime() / 1000);
                    }
                };
                return function (format, timestamp) {
                    that = this;
                    jsdate = timestamp ? new Date(timestamp) : new Date();
                    return format.replace(formatChr, formatChrCb);
                };
            }());
            $.fn.date = function (format, timestamp) {
                return this.text($.date(format, timestamp));
            };
            $.date.feelsYearsAway = function (date, today) {
                today = today || new Date();
                switch (date.getFullYear() - today.getFullYear()) {
                case 0:
                    return false;
                case 1:
                    return today.getMonth() < 9 || date.getMonth() > 2;
                case -1:
                    return today.getMonth() > 2 || date.getMonth() < 9;
                default:
                    return true;
                }
            };

            function toGranularity(granularity, date) {
                switch (granularity) {
                case 'week':
                    date = toGranularity('day', date);
                    date.setDate(date.getDate() - ((date.getDay() || 7) - 1));
                    return date;
                case 'day':
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
                case 'hour':
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), 0, 0, 0);
                case 'minute':
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), 0, 0);
                case 'second':
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0);
                case 'millisecond':
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
                default:
                    throw "Unknown granularity " + granularity;
                }
            }
            $.date.granularEquals = function (granularity, d1, d2) {
                return toGranularity(granularity, d1).getTime() === toGranularity(granularity, d2).getTime();
            };
            $.date.isToday = function (check) {
                return $.date.granularEquals('day', check, new Date());
            };
            $.date.isYesterday = function (check) {
                var yesterday = new Date();
                yesterday.setDate(new Date().getDate() - 1);
                return $.date.granularEquals('day', check, yesterday);
            };
        }(jQuery));
        (function ($) {
            $.normalizeTime = function (date, options) {
                var format = (options && options.locale === 'en-US' ? "M d" : "d M");
                if (date.getTime() < (new Date()).getTime() || $.date.feelsYearsAway(date)) {
                    format += " Y";
                }
                if (date.getHours() !== $.timeSuggest.options.default_time.hours || date.getMinutes() !== $.timeSuggest.options.default_time.minutes) {
                    format += " H:i";
                }
                return $.date(format, date);
            };
            $.fn.timeComplete = function (options) {
                var element = this;
                if (!element || element.length === 0) {
                    throw "Cannot turn 'null' into a timeComplete object: check jQuery selector that timeComplete is being called on.";
                }
                options = $.extend({
                    show: 'eagerly',
                    locale: 'en-US'
                }, options);
                if (options && options.change) {
                    element.bind("timecompletechange", options.change);
                }
                if (!options.priority_source) {
                    options.priority_source = function (contents, callback) {
                        callback([]);
                    };
                }
                var updateClearButton;
                var clear_button_previously_focussed = null;
                var clear_button = $('<div class="ui-autocomplete-clear">').appendTo(element.wrap('<div class="ui-autocomplete-wrap">').parent()).mousedown(function () {
                    clear_button_previously_focussed = document.activeElement;
                }).click(function () {
                    element.val('');
                    updateClearButton();
                    element.trigger("timecompletechange");
                    if (clear_button_previously_focussed) {
                        clear_button_previously_focussed.focus();
                    }
                });
                var width_property = $.curCSS(element[0], 'width'),
                    width_match = width_property && width_property.match(/(\d+)+px/),
                    width_value = width_match && parseInt(width_match[1], 10);
                updateClearButton = function () {
                    var show_clear_button = (element.val() !== ''),
                        button_padding = (show_clear_button ? 19 : 0);
                    clear_button.toggle(show_clear_button);
                    if ($.curCSS(element[0], 'box-sizing') === 'border-box') {
                        element.css({
                            'padding-right': button_padding
                        });
                    } else {
                        element.css({
                            'padding-right': button_padding,
                            'width': width_value ? (width_value - button_padding) : null
                        });
                    }
                };
                updateClearButton();
                var autocomplete_options = $.extend({
                    autoFocus: true,
                    minLength: 0,
                    delay: 0,
                    appendTo: options.container_element,
                    alwaysShow: options.show === 'always',
                    className: 'ginipkg-time-complete ' + (options.class_name || ''),
                    noSuggestions: 'Please enter a date, e.g. \u201cin 3 days\u201d, or \u201con Jan 15\u201d.',
                    pastError: 'Please enter a date in the future, e.g. \u201Cnext Thursday\u201D.'
                }, options);

                function timeCompleteSuggest(contents, callback) {
                    options.priority_source(contents, function (priority_suggestions) {
                        if (priority_suggestions.length) {
                            return callback(priority_suggestions);
                        }
                        var time_suggestions = $.timeSuggest(contents.term, $.extend({
                            allow_explicitly_past_dates: true
                        }, options)),
                            error_message = autocomplete_options.noSuggestions;
                        time_suggestions = _(time_suggestions).chain().map(function (suggestion) {
                            if (options.allow_explicitly_past_dates || suggestion.in_future) {
                                return $.extend({
                                    value: suggestion.formatted,
                                    date: suggestion.date
                                }, suggestion);
                            } else {
                                error_message = autocomplete_options.pastError;
                            }
                        }).compact().uniqBy(_.plucker('value')).value();
                        element.timeError(error_message);
                        callback(time_suggestions);
                    });
                }
                element.data("timeComplete.options", autocomplete_options);
                autocomplete_options.source = timeCompleteSuggest;
                autocomplete_options.destroy = function () {
                    if (element.data("autocomplete") && element.data("autocomplete").destroy) {
                        element.data("autocomplete").destroy();
                    }
                };
                element.autocomplete(autocomplete_options).bind("click cut paste", function () {
                    var $this = $(this);
                    setTimeout(function () {
                        updateClearButton();
                        $this.autocomplete('search', $this.val());
                    }, 1);
                }).bind("autocompletechange autocompleteclose", function () {
                    var raw = element.val(),
                        suggestion = element.firstTimeSuggestion();
                    if (suggestion) {
                        element.val(suggestion.value || suggestion);
                    } else if (raw) {
                        element.addClass('error');
                    }
                    updateClearButton();
                    element.trigger("timecompletechange");
                }).bind("focus", function () {
                    updateClearButton();
                    window.setTimeout(function () {
                        element.select();
                    }, 1);
                }).bind("autocompletesearch", function () {
                    element.removeClass("error");
                }).bind('autocompleterender', function () {
                    updateClearButton();
                }).data("autocomplete")._renderItem = options.render || function (ul, item) {
                    var class_name = options.suggestion_class || 'ginipkg-custom-menu-item',
                        extra = item.date ? $('<span class="normalized">').text($.normalizeTime(item.date, autocomplete_options)) : '';
                    return $('<li class="' + class_name + '" style="clear:both">').data("item.autocomplete", item).prepend($('<a class="formatted">').text(item.value).append(extra)).appendTo(ul);
                };
                return this;
            };
            $.fn.firstTimeSuggestion = function () {
                var suggestion, term = $(this).val(),
                    suggestor = $(this).data("timeComplete.options").source;
                if (term) {
                    suggestor({
                        term: term
                    }, function (suggestions) {
                        suggestion = suggestions[0];
                    });
                }
                return suggestion;
            };
            $.fn.timeVal = function (new_value) {
                if (typeof new_value !== 'undefined') {
                    var options = $.extend({
                        include_year: true,
                        locale: $(this).data("timeComplete.options").locale
                    });
                    $(this).val($.normalizeTime(new_value, options));
                    $(this).trigger('autocompletechange');
                }
                return _($(this).firstTimeSuggestion()).andand().date;
            };
            $.fn.timeError = function (new_value) {
                if (typeof new_value !== 'undefined') {
                    $(this).data("autocomplete").options.noSuggestions = new_value;
                }
                return $(this).data("autocomplete").options.noSuggestions;
            };
            $.fn.iso8601Val = function (new_value) {
                if (typeof new_value !== 'undefined') {
                    if (_.isString(new_value) && new_value.toUpperCase().indexOf('P') === 0) {
                        var output = $.iso8601RelativeToHuman(new_value);
                        if (output) {
                            $(this).val(output);
                            $(this).trigger('autocompletechange');
                        }
                    } else {
                        $(this).timeVal(new Date($.parseTime(new_value)));
                    }
                }
                return _($(this).firstTimeSuggestion()).andand().iso8601;
            };
            $.fn.timeParseError = function () {
                return $(this).val() && !$(this).firstTimeSuggestion();
            };
        }(jQuery));
        (function ($) {
            var $t = $.timeSuggest = function (input, opts) {
                $t.opts = opts = $.extend({}, $t.options, opts);
                $t.now = new Date();
                if (opts.relative_to) {
                    $t.now.setTime(opts.relative_to);
                }
                if (opts.locale) {
                    $t.opts.month_before_day = opts.locale.match(/en-US/i);
                }
                if (!$.trim(input) && opts.defaultSuggestions) {
                    return _(opts.defaultSuggestions).map(function (suggestion) {
                        return $.timeSuggest(suggestion, $.extend(opts, {
                            default_suggestions: undefined
                        }))[0];
                    });
                }
                if ((input || '').match(/^[a12]? *$/)) {
                    input = "in " + input;
                }
                var tokens = $t.tokenize(input),
                    grammar = $t.grammar(opts.month_before_day),
                    parses = $t.parse(tokens, grammar);
                return $t.output(parses, grammar).slice(0, 3);
            };
            $t.options = {
                relative_to: null,
                month_before_day: false,
                hide_suffixes: false,
                default_time: {
                    hours: 7,
                    minutes: 0
                },
                minute_resolution: 1,
                allow_explicitly_past_dates: false,
                future_offset: 5 * 60 * 1000,
                default_suggestions: undefined
            };
            $t.opts = _.clone($t.options);
            $t.now = new Date();
            $t.grammar = function (month_before_day) {
                var grammar = {
                    'in? quantity unit and? quantity?> unit? time?': ['relative', 0.9],
                    'in? quantity unit and?> a> unit': ['relative', 0.9],
                    'in? a? unit and? quantity unit': ['relative', 0.9],
                    'in? a? unit and?> a?> unit?': ['relative', 0.9],
                    'on? next? dayname': ['subsequent', 0.9],
                    'tomorrow': ['subsequent', 1.0],
                    'today>': ['subsequent', 1.0],
                    'at?> hour> am?> today': ['subsequent', 1.0, false],
                    'next monthname': ['subsequent', 0.4, false],
                    'next timespan': ['subsequent', 0.9, false],
                    'in? monthname? year': ['subsequent', 0.1, false],
                    'on? dayname? the? day th? slash? of? month slash?> year?': ['absolute', month_before_day ? 0.05 : 0.5],
                    'on? dayname? month slash? day th? slash?> year?': ['absolute', month_before_day ? 0.5 : 0.05],
                    'on? year slash? month slash? day th?': ['absolute', 0.01]
                };
                grammar = _.reduce(grammar, function (upgraded, info, rule) {
                    if (info[2] === false) {
                        upgraded[rule] = info;
                    } else {
                        upgraded['at?> hour colon?> minute? am? ' + rule] = info;
                        upgraded[rule + ' at?> hour? colon?> minute? am?'] = info;
                    }
                    return upgraded;
                }, {});
                return grammar;
            };
            $t.suggestors = {
                quantity: function (token, number) {
                    if (isNaN(number) && token) {
                        var labels = ('one two three four five six seven eight nine ' + 'ten eleven twelve thirteen fourteen fifteen sixteen ' + 'seventeen eighteen nineteen twenty').split(' '),
                            exact_match = _(labels).indexOf(token) > -1;
                        return _($t.prefix_filter(token, labels)).map(function (label) {
                            return {
                                value: label,
                                parsed: _(labels).indexOf(label) + 1,
                                type: 'quantity',
                                confidence: (exact_match && token !== label) ? 0.0005 : 0.05
                            };
                        });
                    } else if (!isNaN(number) && number < 1000 && token.length < 4 && token.charAt(0) !== '0') {
                        return [{
                            value: token,
                            parsed: number,
                            type: 'quantity'
                        }];
                    } else {
                        return [];
                    }
                },
                hour: function (token, number) {
                    function intToken(value) {
                        return {
                            value: value,
                            parsed: parseInt(value, 10),
                            type: 'hour'
                        };
                    }
                    if (isNaN(number) && token) {
                        var named_hours = {
                            dawn: '0700',
                            morning: '0900',
                            midday: '1200',
                            noon: '1200',
                            afternoon: '1400',
                            dusk: '1900',
                            midnight: '2400'
                        };
                        return _($t.prefix_filter(token, _(named_hours).keys())).map(function (name) {
                            return intToken(named_hours[name]);
                        });
                    } else {
                        if (token.length >= 4) {
                            if (number <= 2400 && number % 100 < 60) {
                                return [intToken(token)];
                            } else {
                                return [];
                            }
                        } else if (token.length === 3) {
                            if (number > 240) {
                                return [];
                            }
                            if ($t.opts.minute_resolution >= 10 || number === 240) {
                                return [intToken(token + '0')];
                            } else {
                                return [intToken(token + '0'), intToken(token + '5')];
                            }
                        } else if (token === '1' || token === '2') {
                            return [intToken(number), intToken(number + 12)];
                        }
                        return _($t.prefix_filter(token, ('1 2 3 4 5 6 7 8 9 00 ' + '01 02 03 04 05 06 07 08 09 10 ' + '11 12 13 14 15 16 17 18 19 20 ' + '21 22 23 24').split(' ')).concat([(number + 12 % 24).toString()])).map(intToken);
                    }
                },
                day: function (token, number) {
                    if (isNaN(number) && token) {
                        var labels = ('first second third fourth fifth sixth seventh eighth ninth ' + 'tenth eleventh twelfth thirteenth fourteenth fifteenth sixteenth ' + 'seventeenth eighteenth nineteenth twentieth').split(' ');
                        return _($t.prefix_filter(token, labels)).map(function (label) {
                            return {
                                value: label,
                                parsed: _(labels).indexOf(label) + 1,
                                type: 'day',
                                confidence: 0.05
                            };
                        });
                    } else if (!isNaN(number)) {
                        return _($t.prefix_filter(token, ('1 2 3 4 5 6 7 8 9 ' + '01 02 03 04 05 06 07 08 09 10 ' + '11 12 13 14 15 16 17 18 19 20 ' + '21 22 23 24 25 26 27 28 29 30 31').split(' '))).map(function (value) {
                            return {
                                value: value,
                                parsed: parseInt(value, 10),
                                type: 'day'
                            };
                        });
                    } else {
                        return [];
                    }
                },
                month: function (token, number) {
                    if (isNaN(number) || !token) {
                        return _($t.suggestors.monthname(token, number)).map(function (token) {
                            return {
                                value: token.value,
                                parsed: token.parsed,
                                type: 'month'
                            };
                        });
                    } else {
                        return _($t.prefix_filter(token, '1 2 3 4 5 6 7 8 9 10 11 12 01 02 03 04 05 06 07 08 09'.split(' '))).map(function (value) {
                            return {
                                value: value,
                                parsed: parseInt(value, 10) - 1,
                                type: 'month'
                            };
                        });
                    }
                }
            };
            _({
                'minute': function (token, number) {
                    if (token.length > 2 || number >= 60) {
                        return [];
                    } else if (token.length === 2) {
                        return [token];
                    } else if (token.length === 0) {
                        return ['00', '30'];
                    } else if (number < 6) {
                        if ($t.opts.minute_resolution >= 10) {
                            return [token + '0'];
                        } else {
                            return [token + '0', token + '5'];
                        }
                    } else {
                        return ['0' + token];
                    }
                },
                'year': function (token, number) {
                    var this_full_year = $t.now.getFullYear(),
                        this_year = this_full_year % 100,
                        next_years = [this_year, this_year + 1, this_year + 2, this_full_year, this_full_year + 1, this_full_year + 2];
                    if (token.length === 4 && (number >= this_full_year && number - this_full_year < 10 || number <= this_full_year && this_full_year - number < 10)) {
                        return [token];
                    }
                    return $t.prefix_filter(token, _(next_years).invoke('toString'));
                }
            }).each(function (suggestor, type) {
                $t.suggestors[type] = function (token, number) {
                    if (isNaN(number)) {
                        return [];
                    } else {
                        return _(suggestor(token, number) || []).map(function (value) {
                            return {
                                type: type,
                                value: value,
                                parsed: parseInt(value, 10)
                            };
                        });
                    }
                };
            });
            _({
                'unit': ['minutes', 'hours', 'days', 'weeks', 'fortnights', 'months', 'years'],
                'timespan': ['week', 'month', 'year'],
                'dayname': ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'],
                'monthname': ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'],
                'am': ['am', 'pm'],
                'th': ['st', 'nd', 'rd', 'th'],
                'in': ['in', 'after'],
                'on': ['on', 'this'],
                'at': ['at', '@'],
                'a': ['a', 'an'],
                'and': ['and', '&'],
                'the': ['the'],
                'next': ['next'],
                'tomorrow': ['tomorrow'],
                'today': ['today'],
                'colon': [':'],
                'of': ['of'],
                'time': ['time'],
                'slash': ['/', '\\', '-']
            }).each(function (possibilities, type) {
                $t.suggestors[type] = function (prefix) {
                    return _($t.prefix_filter(prefix, possibilities)).map(function (value) {
                        return {
                            type: type,
                            value: value,
                            parsed: _(possibilities).indexOf(value)
                        };
                    });
                };
            });
            $t.prefix_filter = function (prefix, items) {
                return _.filter(items, function (item) {
                    return item.indexOf(prefix) === 0;
                });
            };
            $t.timeInterpreter = function (date) {
                var index = {}, parsed = _.clone($t.opts.default_time),
                    hour_length;

                function outputMinutes() {
                    var minutes = parsed.hour === 24 ? 0 : parsed.minutes;
                    if ($t.opts.minute_resolution) {
                        return Math.round(minutes / $t.opts.minute_resolution) * $t.opts.minute_resolution;
                    } else {
                        return minutes;
                    }
                }
                return {
                    interpret: function (token, i) {
                        index[token.type] = i + 1;
                        if (token.value) {
                            var number = token.parsed;
                            switch (token.type) {
                            case 'hour':
                                hour_length = token.value.length;
                                if (token.value.length === 4) {
                                    parsed.hours = Math.floor(number / 100);
                                    parsed.minutes = number % 100;
                                    if (parsed.minutes) {
                                        index.minute = index.minute || index.hour;
                                    }
                                } else {
                                    if (token.value.length === 2) {
                                        parsed.hours = number;
                                    } else {
                                        parsed.hours = number < 8 ? number + 12 : number;
                                    }
                                    parsed.minutes = 0;
                                }
                                return true;
                            case 'minute':
                                parsed.minutes = number;
                                return true;
                            case 'am':
                                if (token.value === 'pm' && parsed.hours < 12) {
                                    parsed.hours = parsed.hours + 12;
                                } else if (token.value === 'am' && parsed.hours >= 12) {
                                    parsed.hours = parsed.hours - 12;
                                }
                                return true;
                            case 'dayname':
                            case 'day':
                                if (!token.guessed) {
                                    index.day = i + 1;
                                }
                                break;
                            case 'tomorrow':
                                index.day = i + 1;
                                break;
                            case 'today':
                                index.day = i + 1;
                                break;
                            case 'unit':
                                if (token.value === 'days' && !token.guessed) {
                                    index.day = i + 1;
                                } else if (token.value === 'minutes' || token.value === 'hours') {
                                    index.time = i + 1;
                                }
                            }
                        }
                        return false;
                    },
                    apply: function (date) {
                        if (index.hour && parsed.hours === 24) {
                            date.setHours(23);
                            date.setMinutes(59);
                        } else {
                            date.setHours(parsed.hours);
                            date.setMinutes(outputMinutes());
                        }
                        date.setSeconds(0);
                        date.setMilliseconds(0);
                        return date;
                    },
                    format: function (formatted) {
                        if (index.hour && parsed.hours === 24) {
                            return (formatted + ' at midnight');
                        } else if (index.hour || index.minute) {
                            return formatted + ' at ' + [(parsed.hours % 12 ? parsed.hours % 12 : 12), ((index.minute || index.colon) ? ':' + (outputMinutes() < 10 ? '0' + outputMinutes() : outputMinutes()) : ''), (parsed.hours < 12 ? 'am' : 'pm')].join('');
                        } else {
                            return formatted;
                        }
                    },
                    confidence: function () {
                        var confidence = 1;
                        if (!index.hour && (index.minute || index.colon || index.am || index.at)) {
                            confidence *= 0;
                        }
                        if (hour_length === 4 && index.colon) {
                            confidence *= 0;
                        }
                        if (index.time && index.hour) {
                            confidence *= 0;
                        }
                        if (index.hour && !index.day) {
                            confidence *= 0.1;
                        }
                        if (parsed.minutes % 5) {
                            confidence *= 0.1;
                        }
                        if (parsed.hours < 7 || parsed.hours > 19) {
                            confidence *= 0.1;
                        }
                        if (hour_length === 4) {
                            return confidence * 0.1;
                        } else if (index.hour) {
                            return confidence * (0.1 + 0.15 * ( !! index.at + !! index.minute + !! index.am + (index.on > index.hour)));
                        } else {
                            return confidence;
                        }
                    }
                };
            };
            $t.interpreters = {
                relative: function (parse) {
                    var date = new Date($t.now.getTime()),
                        timer = $t.timeInterpreter(date),
                        quantity = 1,
                        quantity_type = 'a',
                        formatted = [],
                        target_month, iso8601, delta = {
                            minutes: 0,
                            hours: 0,
                            days: 0,
                            months: 0,
                            years: 0
                        }, confidence = 1,
                        last_unguessed_type = null,
                        previous_unit = null;
                    _.each(parse.tokens, function (token, index) {
                        if (!token.guessed) {
                            last_unguessed_type = token.type;
                        }
                        timer.interpret(token, index);
                        switch (token.type) {
                        case 'a':
                            quantity = 1;
                            quantity_type = 'a';
                            break;
                        case 'quantity':
                            quantity = token.parsed;
                            quantity_type = '1';
                            break;
                        case 'unit':
                            if (!isNaN(quantity)) {
                                switch (token.value) {
                                case 'minutes':
                                    delta.minutes += quantity;
                                    break;
                                case 'hours':
                                    delta.hours += quantity;
                                    break;
                                case 'days':
                                    delta.days += quantity;
                                    break;
                                case 'weeks':
                                    delta.days += quantity * 7;
                                    break;
                                case 'fortnights':
                                    confidence *= 0.1;
                                    delta.days += quantity * 14;
                                    break;
                                case 'months':
                                    delta.months += quantity;
                                    break;
                                case 'years':
                                    delta.years += quantity;
                                    break;
                                }
                                formatted.push(formatted.length === 0 ? 'in ' : (parse.tokens.length === index + 1 ? ' and ' : ', '));
                                if (quantity_type === 'a') {
                                    formatted.push(token.value === 'hours' ? 'an ' : 'a ');
                                } else {
                                    formatted.push(quantity + ' ');
                                }
                                if (quantity === 1 || quantity_type === 'a') {
                                    formatted.push(token.value.replace(/s$/, ''));
                                } else {
                                    formatted.push(token.value);
                                }
                                quantity_type = 'a';
                            }
                            if (previous_unit && !_(['hours:minutes', 'days:hours', 'weeks:days', 'months:days', 'months:weeks', 'years:weeks', 'years:months']).include(previous_unit + ":" + token.value)) {
                                confidence *= 0.01;
                            }
                            previous_unit = token.value;
                            break;
                        }
                    });
                    if (last_unguessed_type === 'and') {
                        confidence *= 0.01;
                    }
                    if (_(parse.tokens).last().type === 'quantity') {
                        confidence *= 0.01;
                    }
                    if (!formatted.length) {
                        confidence *= 0;
                    }
                    target_month = (date.getMonth() + delta.months) % 12;
                    date.setMonth(date.getMonth() + delta.months + 12 * delta.years);
                    if (date.getMonth() !== target_month) {
                        date.setDate(0);
                    }
                    date.setDate(date.getDate() + delta.days);
                    if (delta.minutes || delta.hours) {
                        date.setMinutes(date.getMinutes() + delta.minutes + 60 * delta.hours);
                        iso8601 = ('P' + (delta.years ? delta.years + 'Y' : '') +
                            (delta.months ? delta.months + 'M' : '') +
                            (delta.days ? delta.days + 'D' : '') +
                            (delta.hours || delta.minutes ? 'T' : '') +
                            (delta.hours ? delta.hours + 'H' : '') +
                            (delta.minutes ? delta.minutes + 'M' : ''));
                        date.setSeconds(0);
                        date.setMilliseconds(0);
                    } else {
                        date = timer.apply(date);
                        iso8601 = date.toISOString();
                    }
                    return {
                        formatted: timer.format(formatted.join('')),
                        iso8601: iso8601,
                        date: date,
                        confidence: confidence * timer.confidence(),
                        rule: parse.rule,
                        tokens: parse.tokens
                    };
                },
                subsequent: function (parse) {
                    var date = new Date($t.now.getTime()),
                        timer = $t.timeInterpreter(date),
                        next = false,
                        current, target, seen_date = false,
                        seen_time = false,
                        formatted = [],
                        confidence = 1;
                    _.each(parse.tokens, function (token, index) {
                        seen_time = timer.interpret(token, index) || seen_time;
                        switch (token.type) {
                        case 'next':
                            next = true;
                            break;
                        case 'timespan':
                            if (next) {
                                switch (token.value) {
                                case 'week':
                                    date.setDate(date.getDate() - date.getDay() + 8);
                                    break;
                                case 'month':
                                    date.setDate(1);
                                    date.setMonth(date.getMonth() + 1);
                                    break;
                                case 'year':
                                    date.setDate(1);
                                    date.setMonth(0);
                                    date.setFullYear(date.getFullYear() + 1);
                                    break;
                                }
                                formatted.push('next ' + token.value);
                            }
                            seen_date = true;
                            break;
                        case 'dayname':
                            current = $t.now.getDay() || 7;
                            target = token.parsed || 7;
                            if (next) {
                                if (target >= current) {
                                    date.setDate(date.getDate() - current + target + 7);
                                } else if (current === 7) {
                                    date.setDate(date.getDate() + (target === 6 ? 6 : target + 7));
                                } else if (current - target > 3) {
                                    date.setDate(date.getDate() - current + target + 14);
                                } else {
                                    date.setDate(date.getDate() - current + target + 7);
                                }
                                formatted.push('next ');
                            } else {
                                if (current < target) {
                                    date.setDate(date.getDate() - current + target);
                                } else {
                                    date.setDate(date.getDate() + 7 - current + target);
                                }
                                formatted.push('on ');
                            }
                            formatted.push(token.value.replace(/[a-z]/, function (m) {
                                return m.toUpperCase();
                            }));
                            seen_date = true;
                            break;
                        case 'monthname':
                            current = $t.now.getMonth();
                            target = token.parsed;
                            date.setDate(1);
                            date.setMonth(target);
                            if (next) {
                                if (target >= current) {
                                    date.setFullYear(date.getFullYear() + 1);
                                } else if (current - target > 8) {
                                    date.setFullYear(date.getFullYear() + 2);
                                } else {
                                    date.setFullYear(date.getFullYear() + 1);
                                }
                                formatted.push('next ');
                                formatted.push(token.value.replace(/[a-z]/, function (m) {
                                    return m.toUpperCase();
                                }));
                            } else {
                                if (target <= current) {
                                    date.setFullYear(date.getFullYear() + 1);
                                }
                                formatted.push('in ');
                                formatted.push(token.value.replace(/[a-z]/, function (m) {
                                    return m.toUpperCase();
                                }));
                                if (date.getFullYear() !== $t.now.getFullYear()) {
                                    formatted.push(' ' + date.getFullYear());
                                }
                            }
                            seen_date = true;
                            break;
                        case 'tomorrow':
                            date.setDate(date.getDate() + 1);
                            formatted.push(token.value);
                            seen_date = true;
                            break;
                        case 'today':
                            formatted.push(token.value);
                            seen_date = true;
                            break;
                        }
                    });
                    date = timer.apply(date);
                    if (seen_time && !seen_date) {
                        if (date.getHours() <= $t.now.getHours()) {
                            formatted.push("tomorrow");
                            date.setDate(date.getDate() + 1);
                        } else {
                            formatted.push("today");
                        }
                    }
                    if (seen_time && _(formatted).last() === 'today' && date >= $t.now) {
                        confidence /= $t.dateConfidence(date);
                    }
                    return {
                        formatted: timer.format(formatted.join('')),
                        date: date,
                        iso8601: date.toISOString(),
                        confidence: confidence * timer.confidence(),
                        rule: parse.rule,
                        tokens: parse.tokens
                    };
                },
                absolute: function (parse) {
                    var date = new Date($t.now.getTime()),
                        timer = $t.timeInterpreter(date),
                        index = {}, year_specified, date_given, day_given, suffix_given, overflown = false,
                        correct_suffix, target, formatted_day, formatted_date, formatted_month, formatted, confidence = 1;
                    _.each(parse.tokens, function (token, i) {
                        timer.interpret(token, i);
                        if (token.value) {
                            var number = token.parsed;
                            index[token.type] = i + 1;
                            switch (token.type) {
                            case 'year':
                                if (number < 2000) {
                                    number += 2000;
                                }
                                if (overflown && date.getMonth() === 0) {
                                    number = number + 1;
                                }
                                target = date.getDate();
                                date.setFullYear(number);
                                if (date.getDate() !== target) {
                                    overflown = true;
                                }
                                year_specified = !token.guessed;
                                break;
                            case 'month':
                                if (overflown) {
                                    date.setMonth(number + 1);
                                } else {
                                    date.setMonth(number);
                                    if (date.getMonth() !== number) {
                                        overflown = true;
                                    }
                                }
                                break;
                            case 'day':
                                date_given = number;
                                date.setDate(number);
                                if (date.getDate() !== number) {
                                    overflown = true;
                                }
                                break;
                            case 'dayname':
                                day_given = token.parsed;
                                break;
                            case 'th':
                                suffix_given = token.value;
                                break;
                            }
                        }
                    });
                    if (date.getTime() < $t.now.getTime()) {
                        if (index.day && index.month && !year_specified) {
                            target = date.getDate();
                            date.setFullYear(date.getFullYear() + 1);
                            if (date.getDate() !== target) {
                                overflown = true;
                            }
                        } else if (!index.day && !index.month) {
                            date.setDate(date.getDate() + 1);
                        }
                    }
                    if (overflown) {
                        date.setDate(0);
                    }
                    if (date_given && date.getDate() !== date_given) {
                        confidence *= 0.1;
                    }
                    if (!isNaN(day_given) && date.getDay() !== day_given) {
                        confidence *= 0.1;
                    }
                    if (year_specified && !index.day) {
                        date.setDate(1);
                        date.setMonth(0);
                    }
                    correct_suffix = $.date('S', date);
                    if (suffix_given && suffix_given === correct_suffix) {
                        confidence *= 12;
                    }
                    formatted_date = date.getDate();
                    if (!$t.opts.hide_suffixes) {
                        formatted_date += correct_suffix;
                    }
                    formatted_month = $.date('F', date);
                    if (day_given) {
                        formatted_day = "on " + _.capitalize($.date('l', date)) + " ";
                    } else {
                        formatted_day = "on ";
                    }
                    formatted = formatted_day + (index.dayname || index.day < index.month ? [formatted_date, formatted_month] : [formatted_month, formatted_date]).join(' ');
                    if (year_specified || date.getFullYear() !== $t.now.getFullYear()) {
                        formatted = formatted + ' ' + date.getFullYear();
                    }
                    if (date.getTime() - $t.now.getTime() < 3 * 86400000 || index.hour || index.minute) {
                        confidence *= 0.1;
                    }
                    return {
                        formatted: timer.format(formatted, date),
                        date: timer.apply(date),
                        iso8601: date.toISOString(),
                        confidence: confidence * timer.confidence(),
                        rule: parse.rule,
                        tokens: parse.tokens
                    };
                }
            };
            $t.dateConfidence = function (date) {
                var x = (date.getTime() - $t.now.getTime()) / 86400000.0;
                if (x <= 0) {
                    return 0.000001;
                } else if (x < 1) {
                    return 0.8 * x;
                } else {
                    return Math.pow(x, 0.25) * Math.exp(1 - Math.pow((x + 6), 0.25));
                }
            };
            $t.tokenConfidence = function (tokens) {
                var total = 0.0,
                    guessed = 0.0,
                    optional = 0.0,
                    moderated = 1.0;
                _(tokens).each(function (token) {
                    total += 1;
                    guessed += token.guessed ? 0.75 : 0;
                    optional += token.optional ? 0.9 : 0;
                    moderated *= token.confidence || 1.0;
                });
                return moderated * (total - guessed - optional) / total;
            };
            $t.split = function (string) {
                return _(string.toLowerCase().split(/([0-9]+|[a-z]+|[:\/\\\-@&])/)).select(function (token, i) {
                    return i % 2;
                });
            };
            $t.tokenize = function (string) {
                var chunks = $t.split(string);
                return _.map(chunks, function (chunk, i) {
                    var number = parseInt(chunk, 10);
                    return $.concatMap($t.suggestors, function (expander, type) {
                        return _.compact(_.map(expander(chunk, number), function (value) {
                            if (isNaN(number) || parseInt(value.value, 10) === number || i + 1 === chunks.length) {
                                return value;
                            }
                        }));
                    });
                });
            };
            $t.parse = function (input_tokens, grammar) {
                return $.concatMap(grammar, function (meta, rule) {
                    var parsed = _(rule.split(' ')).map(function (spec) {
                        var type_and_optional = spec.match(/([a-z]+)(\?)?(>)?/);
                        return {
                            type: type_and_optional[1],
                            optional: !! type_and_optional[2],
                            force_suggest: !! type_and_optional[3]
                        };
                    });
                    return _.map($t.recursiveParse(parsed, input_tokens), function (tokens) {
                        return {
                            rule: rule,
                            tokens: tokens
                        };
                    });
                });
            };
            $t.recursiveParse = function (rule, tokens, force_suggest) {
                if (tokens.length === 0) {
                    return $t.recursiveSuggest(rule, force_suggest);
                } else {
                    var next = _.first(rule) || {}, ret = [];
                    if (next.optional) {
                        ret = ret.concat($t.recursiveParse(_.rest(rule), tokens, next.force_suggest));
                    }
                    _.each(_.first(tokens), function (token) {
                        if (token.type === next.type) {
                            ret = ret.concat(_.map($t.recursiveParse(_.rest(rule), _.rest(tokens), next.force_suggest), function (tokens) {
                                token = $.extend({
                                    optional: next.optional
                                }, token);
                                return [token].concat(tokens);
                            }));
                        }
                    });
                    return ret;
                }
            };
            $t.recursiveSuggest = function (rule, force_suggest) {
                var next = _.first(rule);
                while (next && next.force_suggest && force_suggest) {
                    rule = _.rest(rule);
                    next = _.first(rule);
                }
                if (!next) {
                    return [[]];
                } else if (next.optional && !force_suggest) {
                    return $t.recursiveSuggest(_.rest(rule));
                } else {
                    return _.map($t.suggestors[next.type]('', 0), function (value) {
                        return [{
                            type: next.type,
                            value: value.value,
                            guessed: !force_suggest,
                            parsed: value.parsed
                        }];
                    });
                }
            };
            $t.output = function (raw_parses, grammar) {
                var parsed = _.map(raw_parses, function (raw_parse) {
                    var meta = grammar[raw_parse.rule],
                        interpreter = meta[0],
                        confidence = meta[1],
                        parse = $t.interpreters[interpreter](raw_parse);
                    parse.confidence *= confidence;
                    parse.confidence *= $t.dateConfidence(parse.date);
                    parse.confidence *= $t.tokenConfidence(parse.tokens);
                    return parse;
                }),
                    max_confidence = _(parsed).reduce(function (confidence, parse) {
                        return Math.max(confidence || 0, parse.confidence || 0);
                    }, 0);
                return _(parsed).chain().select(function (parse) {
                    parse.in_future = parse.date.getTime() >= $t.now.getTime() + $t.opts.future_offset;
                    return parse.date && ($t.opts.allow_explicitly_past_dates || parse.in_future) && (parse.confidence > (max_confidence / 3));
                }).sortBy(_.plucker('date')).uniqBy(_.plucker('date'), true).uniqBy(_.plucker('formatted'), true).value();
            };
        }(jQuery));
        (function ($) {
            $.parseTime = function (time_value) {
                if (time_value instanceof Date) {
                    return time_value.getTime();
                } else if (_.isNumber(time_value)) {
                    return time_value;
                } else if (!isNaN(Date.parse(time_value))) {
                    return Date.parse(time_value);
                } else if (time_value.toUpperCase().indexOf('P') == 0) {
                    return $.iso8601RelativeToTimestamp(time_value);
                }
                var year, month = "01",
                    day = "01",
                    hour = "00",
                    minute = "00",
                    second = "00",
                    timezone = "GMT";
                time_value = time_value.replace(/^(\d\d\d\d)-?(?:(\d\d?)-?(?:(\d\d))?)?[T ]?/, function (m, yr, mt, dy) {
                    year = yr;
                    month = mt || month;
                    day = dy || day;
                    return "";
                });
                time_value = time_value.replace(/(\d\d):?(\d\d?)(?::?(\d\d))?/, function (m, hr, mn, sc) {
                    hour = hr;
                    minute = mn || minute;
                    second = sc || second;
                    return "";
                });
                time_value = time_value.replace(/(Z|([\-\+])(\d)?(\d):?(\d\d))$/, function (m, zed, sign, big, small, minutes) {
                    timezone += (zed === "Z" ? "" : sign + (big || "0") + small + minutes);
                    return "";
                });
                return Date.parse(year + "/" + month + "/" + day + " " + hour + ":" + minute + ":" + second + " " + timezone);
            };

            function parseISO8601Bits(input, transformer) {
                var relative_recognizer = /^P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?)?$/i,
                    matches = input.match(relative_recognizer),
                    pieces = ["year", "month", "day", "hour", "minute"],
                    output = {}, i;
                if (matches && matches.shift()) {
                    for (i = 0; i < pieces.length; i += 1) {
                        if (matches[i] !== undefined) {
                            transformer(pieces[i], matches[i]);
                        }
                    }
                }
            }
            $.iso8601RelativeToDelta = function (relative_string) {
                var output = {};
                parseISO8601Bits(relative_string, function (date_type, value) {
                    output[date_type + "s"] = parseInt(value, 10);
                });
                return output;
            }
            $.iso8601RelativeToHuman = function (relative_string) {
                var output = '';
                parseISO8601Bits(relative_string, function (date_type, value) {
                    if (output) {
                        output += ' and ';
                    } else {
                        output += 'in ';
                    }
                    output += value + " " + date_type;
                    if (parseInt(value, 10) !== 1) {
                        output += "s";
                    }
                });
                return output;
            };
            $.iso8601RelativeToTimestamp = function (relative_string) {
                var parsed = $.iso8601RelativeToDelta(relative_string);
                var future = new Date();
                if (parsed.years) {
                    future.setFullYear(future.getFullYear() + parsed.years);
                }
                if (parsed.months) {
                    future.setMonth(future.getMonth() + parsed.months);
                }
                if (parsed.days) {
                    future.setDate(future.getDate() + parsed.days);
                }
                if (parsed.hours) {
                    future.setHours(future.getHours() + parsed.hours);
                }
                if (parsed.minutes) {
                    future.setMinutes(future.getMinutes() + parsed.minutes);
                }
                future.setSeconds(0);
                future.setMilliseconds(0);
                return future.getTime();
            };
        }(jQuery));
        (function ($) {
            var LATIN1_PUNCTUATION = "\\u0080-\\u00BF",
                UNICODE_PUNCTUATION = "\\u2000-\\u206F",
                NOT_IN_URL = "\\u0000-\\u001F\\s" + LATIN1_PUNCTUATION + UNICODE_PUNCTUATION,
                NOT_IN_HOSTNAME = "`!()\\[\\]\\{\\};:'\".,<>?" + NOT_IN_URL,
                BALANCED_PARENS = "\\(" + "(?:" + "[^()" + NOT_IN_URL + "]+" + "|" + "(?:\\([^()<>" + NOT_IN_URL + "]+\\))" + ")*" + "\\)",
                PROTOCOL_REGEX = "[a-z][a-z0-9]*://",
                USERINFO_REGEX = "(?:(?:[-_.!~*'()a-zA-Z\\d;:&=+$,]|%[a-fA-F0-9]{2})*@)?",
                IPV4_REGEX = "[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}",
                IPV6_REGEX = "\\[(?:(?:[a-fA-F\\d]{1,4}:)*(?:[a-fA-F\\d]{1,4}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})|(?:(?:[a-fA-F\\d]{1,4}:)*[a-fA-F\\d]{1,4})?::(?:(?:[a-fA-F\\d]{1,4}:)*(?:[a-fA-F\\d]{1,4}|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}))?)\\]",
                HOSTNAME_REGEX = "(?:" + "[^/" + NOT_IN_HOSTNAME + "]+" + "\\." + ")*" + "[^/'" + NOT_IN_HOSTNAME + "]+",
                LIBERAL_URL_REGEX = "(" + "(?:" +
                    PROTOCOL_REGEX + USERINFO_REGEX + HOSTNAME_REGEX + "|" +
                    PROTOCOL_REGEX + USERINFO_REGEX + IPV4_REGEX + "|" +
                    PROTOCOL_REGEX + USERINFO_REGEX + IPV6_REGEX + "|" +
                    HOSTNAME_REGEX + ")" + "(?::[0-9]+)?" + "(?:" + "[/#]" + "(?:(?:" + "[^()<>" + NOT_IN_URL + "]+" + "|" +
                    BALANCED_PARENS + ")*" + "(?:" +
                    BALANCED_PARENS + "|" + "[^" + NOT_IN_HOSTNAME + "]+" + ")+)?" + ")?" + ";?" + ")",
                REGEX_TLDS = new RegExp("\\.(ac|ad|ae|aero|af|ag|ai|al|am|an|ao|aq|as|asia|at|aw|ax|az|ba|bb|be|bf|bg|bh|bi|biz|bj|bm|bo|br|bs|bt|bw|by|bz|ca|cat|cc|cd|cf|cg|ch|ci|cl|cm|cn|co|com|coop|cr|cu|cv|cx|cz|de|dj|dk|dm|dz|ec|edu|ee|es|eu|fi|fm|fo|fr|ga|gd|ge|gf|gg|gh|gi|gl|gm|gov|gp|gq|gr|gs|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|im|in|info|int|io|iq|ir|is|it|je|jo|jobs|jp|kg|ki|km|kn|kr|ky|kz|la|lc|li|lk|local|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mil|mk|ml|mn|mo|mobi|mp|mq|mr|ms|mu|museum|mv|mw|mx|my|na|name|nc|ne|net|nf|nl|no|nr|nu|org|pa|pe|pf|ph|pk|pl|pn|pr|pro|ps|pt|pw|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sk|sl|sm|sn|so|sr|st|su|sy|sz|tc|td|tel|tf|tg|th|tj|tk|tl|tm|tn|to|travel|tt|tv|tw|ua|ug|us|uz|va|vc|vg|vi|vn|vu|ws|\\u0627\\u0645\\u0627\\u0631\\u0627\\u062a|\\u4e2d\\u56fd|\\u4e2d\\u570b|\\u0645\\u0635\\u0631|\\u9999\\u6e2f|\\u0627\\u0644\\u0627\\u0631\\u062f\\u0646|\\u0dbd\\u0d82\\u0d9a\\u0dcf|\\u0b87\\u0bb2\\u0b99\\u0bcd\\u0b95\\u0bc8|\\u0641\\u0644\\u0633\\u0637\\u064a\\u0646|\\u0440\\u0444|\\u0642\\u0637\\u0631|\\u0627\\u0644\\u0633\\u0639\\u0648\\u062f\\u064a\\u0629|\\u65b0\\u52a0\\u5761|\\u0b9a\\u0bbf\\u0b99\\u0bcd\\u0b95\\u0baa\\u0bcd\\u0baa\\u0bc2\\u0bb0\\u0bcd|\\u0e44\\u0e17\\u0e22|\\u062a\\u0648\\u0646\\u0633|\\u53f0\\u7063|\\u53f0\\u6e7e)([&?#:/" + NOT_IN_HOSTNAME + "]|$)", "i"),
                REGEX_LOOKS_LIKE_EMAIL = /^([a-z0-9!#$%&'\*+\-\/=?\^_`\{\|\}~\.]+@)/,
                REGEX = new RegExp(LIBERAL_URL_REGEX, "ig");
            $.linkifyText = function (text, opts) {
                return $.escapeHTML(text).replace(REGEX, function (match, url) {
                    opts = $.extend({
                        truncate_url: false,
                        create_link: function (escaped_url, link_html) {
                            return '<a target="_blank" href="' + escaped_url + '">' + link_html + '</a>';
                        }
                    }, opts);
                    var link_text = (opts && opts.truncate_url) ? $.truncate_url(url) : url,
                        suffix = '';
                    if ((!url.match(/[.:]/)) || (!url.match(REGEX_TLDS) && !url.match(PROTOCOL_REGEX + USERINFO_REGEX + IPV4_REGEX) && !url.match(IPV6_REGEX))) {
                        return url;
                    }
                    if (url.match(/^https?:\/\//i)) {
                        url = url;
                    } else if (url.match(REGEX_LOOKS_LIKE_EMAIL)) {
                        url = "mailto:" + url;
                    } else if (!url.match(/^[a-z0-9]+:\/\//) && url.match(/\./)) {
                        url = "http://" + url;
                    } else {
                        return url;
                    }
                    url = url.replace(/^(http:\/\/[^\/]+):80([^0-9]|$)/i, '$1$2').replace(/^(https:\/\/[^\/]+):443([^0-9]|$)/i, '$1$2').replace(/(&gt;|&lt;|&amp;|;)$/i, function (m, s) {
                        suffix = s;
                        return '';
                    }).replace(/(https?:\/\/[^\/#]+)(#|$)/i, '$1/$2').replace(/(^https?:\/\/[^\/]+)/i, function (m) {
                        return m.toLowerCase();
                    });
                    return opts.create_link(url, link_text.replace(/(&gt;|&lt;|&amp;|;)$/, '')) + suffix;
                });
            };
            $.fn.linkify = function (opts) {
                return this.each(function () {
                    switch (this.nodeType) {
                    case 1:
                        if ("A" !== this.tagName) {
                            $(this).contents().linkify(opts);
                        }
                        break;
                    case 3:
                        $(this).after($.linkifyText(this.textContent, opts)).remove();
                        break;
                    }
                });
            };
        }(jQuery));
        (function ($) {
            var SCORE_CONTINUE_MATCH = 1,
                SCORE_START_WORD = 0.9,
                SCORE_OK = 0.8,
                PENALTY_SKIPPED = 0.999,
                PENALTY_CASE_MISMATCH = 0.9999,
                PENALTY_NOT_COMPLETE = 0.99;

            function allCaseInsensitiveSplits(string, chr) {
                var lower = string.toLowerCase(),
                    lchr = chr.toLowerCase(),
                    i = lower.indexOf(lchr),
                    result = [];
                while (i > -1) {
                    result.push({
                        before: string.slice(0, i),
                        chr: string.charAt(i),
                        after: string.slice(i + 1)
                    });
                    i = lower.indexOf(lchr, i + 1);
                }
                return result;
            }

            function htmlEscape(string) {
                return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            }
            $.fuzzyMatch = function (string, abbreviation, cache) {
                if (abbreviation === "") {
                    return {
                        score: string === "" ? SCORE_CONTINUE_MATCH : PENALTY_NOT_COMPLETE,
                        html: htmlEscape(string)
                    };
                }
                if (cache && cache[string] && cache[string][abbreviation]) {
                    return $.extend({}, cache[string][abbreviation]);
                }
                cache = cache || {};
                cache[string] = cache[string] || {};
                cache[string][abbreviation] = $(allCaseInsensitiveSplits(string, abbreviation.charAt(0))).map(function (i, split) {
                    var result = $.fuzzyMatch(split.after, abbreviation.slice(1), cache),
                        preceding_char = split.before.charAt(split.before.length - 1);
                    if (split.before === "") {
                        result.score *= SCORE_CONTINUE_MATCH;
                    } else if (preceding_char.match(/[\\\/\-_+.# \t"@\[\(\{&]/) || (split.chr.toLowerCase() !== split.chr && preceding_char.toLowerCase() === preceding_char)) {
                        result.score *= SCORE_START_WORD;
                    } else {
                        result.score *= SCORE_OK;
                    }
                    if (split.chr !== abbreviation.charAt(0)) {
                        result.score *= PENALTY_CASE_MISMATCH;
                    }
                    result.score *= Math.pow(PENALTY_SKIPPED, split.before.length);
                    result.html = htmlEscape(split.before) + '<b>' + htmlEscape(split.chr) + '</b>' + result.html;
                    return result;
                }).sort(function (a, b) {
                    return a.score < b.score ? 1 : a.score === b.score ? 0 : -1;
                })[0] || {
                    score: 0,
                    html: htmlEscape(string)
                };
                return $.extend({}, cache[string][abbreviation]);
            };
        }(jQuery));
        
       
        (function ($) {
        
            $.pluralize = (function () {
                var userDefined = {};

                function capitalizeSame(word, sampleWord) {
                    if (sampleWord.match(/^[A-Z]/)) {
                        return word.charAt(0).toUpperCase() + word.slice(1);
                    } else {
                        return word;
                    }
                }

                function toKeys(keys) {
                    keys = keys.split(',');
                    var keysLength = keys.length;
                    var table = {};
                    for (var i = 0; i < keysLength; i++) {
                        table[keys[i]] = 1;
                    }
                    return table;
                }
                var uninflected = toKeys("aircraft,advice,blues,corn,molasses,equipment,gold,information,cotton,jewelry,kin,legislation,luck,luggage,moose,music,offspring,rice,silver,trousers,wheat,bison,bream,breeches,britches,carp,chassis,clippers,cod,contretemps,corps,debris,diabetes,djinn,eland,elk,flounder,gallows,graffiti,headquarters,herpes,high,homework,innings,jackanapes,mackerel,measles,mews,mumps,news,pincers,pliers,proceedings,rabies,salmon,scissors,sea,series,shears,species,swine,trout,tuna,whiting,wildebeest,pike,oats,tongs,dregs,snuffers,victuals,tweezers,vespers,pinchers,bellows,cattle");
                var irregular = {
                    I: 'we',
                    you: 'you',
                    he: 'they',
                    it: 'they',
                    me: 'us',
                    you: 'you',
                    him: 'them',
                    them: 'them',
                    myself: 'ourselves',
                    yourself: 'yourselves',
                    himself: 'themselves',
                    herself: 'themselves',
                    itself: 'themselves',
                    themself: 'themselves',
                    oneself: 'oneselves',
                    child: 'children',
                    dwarf: 'dwarfs',
                    mongoose: 'mongooses',
                    mythos: 'mythoi',
                    ox: 'oxen',
                    soliloquy: 'soliloquies',
                    trilby: 'trilbys',
                    person: 'people',
                    forum: 'forums',
                    syllabus: 'syllabi',
                    alumnus: 'alumni',
                    genus: 'genera',
                    viscus: 'viscera',
                    stigma: 'stigmata'
                };
                var suffixRules = [
                    [/man$/i, 'men'],
                    [/([lm])ouse$/i, '$1ice'],
                    [/tooth$/i, 'teeth'],
                    [/goose$/i, 'geese'],
                    [/foot$/i, 'feet'],
                    [/zoon$/i, 'zoa'],
                    [/([tcsx])is$/i, '$1es'],
                    [/ix$/i, 'ices'],
                    [/^(cod|mur|sil|vert)ex$/i, '$1ices'],
                    [/^(agend|addend|memorand|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi)um$/i, '$1a'],
                    [/^(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|\w+hedr)on$/i, '$1a'],
                    [/^(alumn|alg|vertebr)a$/i, '$1ae'],
                    [/([cs]h|ss|x)$/i, '$1es'],
                    [/([aeo]l|[^d]ea|ar)f$/i, '$1ves'],
                    [/([nlw]i)fe$/i, '$1ves'],
                    [/([aeiou])y$/i, '$1ys'],
                    [/(^[A-Z][a-z]*)y$/, '$1ys'],
                    [/y$/i, 'ies'],
                    [/([aeiou])o$/i, '$1os'],
                    [/^(pian|portic|albin|generalissim|manifest|archipelag|ghett|medic|armadill|guan|octav|command|infern|phot|ditt|jumb|pr|dynam|ling|quart|embry|lumbag|rhin|fiasc|magnet|styl|alt|contralt|sopran|bass|crescend|temp|cant|sol|kimon)o$/i, '$1os'],
                    [/o$/i, 'oes'],
                    [/s$/i, 'ses']
                ];

                function pluralize(word, count, plural) {
                    if (word === '') return '';
                    if (Number(count) === 1) return word;
                    if (typeof plural === 'string') return plural;
                    var lowerWord = word.toLowerCase();
                    if (lowerWord in userDefined) {
                        return capitalizeSame(userDefined[lowerWord], word);
                    }
                    if (word.match(/^[A-Z]$/)) return word + "'s";
                    if (word.match(/fish$|ois$|sheep$|deer$|pox$|itis$/i)) return word;
                    if (word.match(/^[A-Z][a-z]*ese$/)) return word;
                    if (lowerWord in uninflected) return word;
                    if (lowerWord in irregular) {
                        return capitalizeSame(irregular[lowerWord], word);
                    }
                    var suffixRulesLength = suffixRules.length;
                    for (var i = 0; i < suffixRulesLength; i++) {
                        var rule = suffixRules[i];
                        if (word.match(rule[0])) {
                            return word.replace(rule[0], rule[1]);
                        }
                    }
                    return word + 's';
                }
                pluralize.define = function (word, plural) {
                    userDefined[word.toLowerCase()] = plural;
                }
                return pluralize;
            })();
        }(jQuery));
        (function ($) {
            $.fn.filteredKeyDown = function (keycode, callback) {
                var event_name = 'filtered_keydown_' + keycode;
                if (callback) {
                    this.keydown(function (e) {
                        if (e && e.keyCode === keycode) {
                            return callback.apply(this, arguments);
                        }
                    });
                    return this.bind(event_name, callback);
                } else {
                    return this.trigger(event_name);
                }
            };
            $.fn.enterKey = function (callback) {
                return this.filteredKeyDown(13, callback);
            };
            $.fn.escapeKey = function (callback) {
                return this.filteredKeyDown(27, callback);
            };
            $.fn.tabKey = function (callback) {
                return this.filteredKeyDown(9, callback);
            };
            $.fn.tabLoop = function () {
                var elements = this.tabKey(function (e) {
                    var next = (elements.length + $.inArray(this, elements) + (e.shiftKey ? -1 : 1)) % elements.length;
                    elements[next].focus();
                    return false;
                });
            };
        }(jQuery));
        (function ($, undefined) {
            $.ui = $.ui || {};
            if ($.ui.version) {
                return;
            }
            $.extend($.ui, {
                version: "@VERSION",
                plugin: {
                    add: function (module, option, set) {
                        var proto = $.ui[module].prototype;
                        for (var i in set) {
                            proto.plugins[i] = proto.plugins[i] || [];
                            proto.plugins[i].push([option, set[i]]);
                        }
                    },
                    call: function (instance, name, args) {
                        var set = instance.plugins[name];
                        if (!set || !instance.element[0].parentNode) {
                            return;
                        }
                        for (var i = 0; i < set.length; i++) {
                            if (instance.options[set[i][0]]) {
                                set[i][1].apply(instance.element, args);
                            }
                        }
                    }
                },
                contains: function (a, b) {
                    return document.compareDocumentPosition ? a.compareDocumentPosition(b) & 16 : a !== b && a.contains(b);
                },
                hasScroll: function (el, a) {
                    if ($(el).css("overflow") === "hidden") {
                        return false;
                    }
                    var scroll = (a && a === "left") ? "scrollLeft" : "scrollTop",
                        has = false;
                    if (el[scroll] > 0) {
                        return true;
                    }
                    el[scroll] = 1;
                    has = (el[scroll] > 0);
                    el[scroll] = 0;
                    return has;
                },
                isOverAxis: function (x, reference, size) {
                    return (x > reference) && (x < (reference + size));
                },
                isOver: function (y, x, top, left, height, width) {
                    return $.ui.isOverAxis(y, top, height) && $.ui.isOverAxis(x, left, width);
                },
                keyCode: {
                    ALT: 18,
                    BACKSPACE: 8,
                    CAPS_LOCK: 20,
                    COMMA: 188,
                    COMMAND: 91,
                    COMMAND_LEFT: 91,
                    COMMAND_RIGHT: 93,
                    CONTROL: 17,
                    DELETE: 46,
                    DOWN: 40,
                    END: 35,
                    ENTER: 13,
                    ESCAPE: 27,
                    HOME: 36,
                    INSERT: 45,
                    LEFT: 37,
                    MENU: 93,
                    NUMPAD_ADD: 107,
                    NUMPAD_DECIMAL: 110,
                    NUMPAD_DIVIDE: 111,
                    NUMPAD_ENTER: 108,
                    NUMPAD_MULTIPLY: 106,
                    NUMPAD_SUBTRACT: 109,
                    PAGE_DOWN: 34,
                    PAGE_UP: 33,
                    PERIOD: 190,
                    RIGHT: 39,
                    SHIFT: 16,
                    SPACE: 32,
                    TAB: 9,
                    UP: 38,
                    WINDOWS: 91
                }
            });
            $.fn.extend({
                _focus: $.fn.focus,
                focus: function (delay, fn) {
                    return typeof delay === "number" ? this.each(function () {
                        var elem = this;
                        setTimeout(function () {
                            $(elem).focus();
                            if (fn) {
                                fn.call(elem);
                            }
                        }, delay);
                    }) : this._focus.apply(this, arguments);
                },
                enableSelection: function () {
                    return this.attr("unselectable", "off").css("MozUserSelect", "");
                },
                disableSelection: function () {
                    return this.attr("unselectable", "on").css("MozUserSelect", "none");
                },
                scrollParent: function () {
                    var scrollParent;
                    if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
                        scrollParent = this.parents().filter(function () {
                            return (/(relative|absolute|fixed)/).test($.curCSS(this, 'position', 1)) && (/(auto|scroll)/).test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1));
                        }).eq(0);
                    } else {
                        scrollParent = this.parents().filter(function () {
                            return (/(auto|scroll)/).test($.curCSS(this, 'overflow', 1) + $.curCSS(this, 'overflow-y', 1) + $.curCSS(this, 'overflow-x', 1));
                        }).eq(0);
                    }
                    return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
                },
                zIndex: function (zIndex) {
                    if (zIndex !== undefined) {
                        return this.css("zIndex", zIndex);
                    }
                    if (this.length) {
                        var elem = $(this[0]),
                            position, value;
                        while (elem.length && elem[0] !== document) {
                            position = elem.css("position");
                            if (position === "absolute" || position === "relative" || position === "fixed") {
                                value = parseInt(elem.css("zIndex"));
                                if (!isNaN(value) && value != 0) {
                                    return value;
                                }
                            }
                            elem = elem.parent();
                        }
                    }
                    return 0;
                }
            });
            $.each(["Width", "Height"], function (i, name) {
                var side = name === "Width" ? ["Left", "Right"] : ["Top", "Bottom"],
                    type = name.toLowerCase(),
                    orig = {
                        innerWidth: $.fn.innerWidth,
                        innerHeight: $.fn.innerHeight,
                        outerWidth: $.fn.outerWidth,
                        outerHeight: $.fn.outerHeight
                    };

                function reduce(elem, size, border, margin) {
                    $.each(side, function () {
                        size -= parseFloat($.curCSS(elem, "padding" + this, true)) || 0;
                        if (border) {
                            size -= parseFloat($.curCSS(elem, "border" + this + "Width", true)) || 0;
                        }
                        if (margin) {
                            size -= parseFloat($.curCSS(elem, "margin" + this, true)) || 0;
                        }
                    });
                    return size;
                }
                $.fn["inner" + name] = function (size) {
                    if (size === undefined) {
                        return orig["inner" + name].call(this);
                    }
                    return this.each(function () {
                        $.style(this, type, reduce(this, size) + "px");
                    });
                };
                $.fn["outer" + name] = function (size, margin) {
                    if (typeof size !== "number") {
                        return orig["outer" + name].call(this, size);
                    }
                    return this.each(function () {
                        $.style(this, type, reduce(this, size, true, margin) + "px");
                    });
                };
            });

            function visible(element) {
                return !$(element).parents().andSelf().filter(function () {
                    return $.curCSS(this, "visibility") === "hidden" || $.expr.filters.hidden(this);
                }).length;
            }
            $.extend($.expr[":"], {
                data: function (elem, i, match) {
                    return !!$.data(elem, match[3]);
                },
                focusable: function (element) {
                    var nodeName = element.nodeName.toLowerCase(),
                        tabIndex = $.attr(element, "tabindex");
                    if ("area" === nodeName) {
                        var map = element.parentNode,
                            mapName = map.name,
                            img;
                        if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                            return false;
                        }
                        img = $("img[usemap=#" + mapName + "]")[0];
                        return !!img && visible(img);
                    }
                    return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" == nodeName ? element.href || !isNaN(tabIndex) : !isNaN(tabIndex)) && visible(element);
                },
                tabbable: function (element) {
                    var tabIndex = $.attr(element, "tabindex");
                    return (isNaN(tabIndex) || tabIndex >= 0) && $(element).is(":focusable");
                }
            });
        })(jQuery);
        (function ($, undefined) {
            var _remove = $.fn.remove;
            $.fn.remove = function (selector, keepData) {
                return this.each(function () {
                    if (!keepData) {
                        if (!selector || $.filter(selector, [this]).length) {
                            $("*", this).add([this]).each(function () {
                                $(this).triggerHandler("remove");
                            });
                        }
                    }
                    return _remove.call($(this), selector, keepData);
                });
            };
            $.widget = function (name, base, prototype) {
                var namespace = name.split(".")[0],
                    fullName;
                name = name.split(".")[1];
                fullName = namespace + "-" + name;
                if (!prototype) {
                    prototype = base;
                    base = $.Widget;
                }
                $.expr[":"][fullName] = function (elem) {
                    return !!$.data(elem, name);
                };
                $[namespace] = $[namespace] || {};
                $[namespace][name] = function (options, element) {
                    if (arguments.length) {
                        this._createWidget(options, element);
                    }
                };
                var basePrototype = new base();
                basePrototype.options = $.extend(true, {}, basePrototype.options);
                $[namespace][name].prototype = $.extend(true, basePrototype, {
                    namespace: namespace,
                    widgetName: name,
                    widgetEventPrefix: $[namespace][name].prototype.widgetEventPrefix || name,
                    widgetBaseClass: fullName
                }, prototype);
                $.widget.bridge(name, $[namespace][name]);
            };
            $.widget.bridge = function (name, object) {
                $.fn[name] = function (options) {
                    var isMethodCall = typeof options === "string",
                        args = Array.prototype.slice.call(arguments, 1),
                        returnValue = this;
                    options = !isMethodCall && args.length ? $.extend.apply(null, [true, options].concat(args)) : options;
                    if (isMethodCall && options.substring(0, 1) === "_") {
                        return returnValue;
                    }
                    if (isMethodCall) {
                        this.each(function () {
                            var instance = $.data(this, name),
                                methodValue = instance && $.isFunction(instance[options]) ? instance[options].apply(instance, args) : instance;
                            if (methodValue !== instance && methodValue !== undefined) {
                                returnValue = methodValue;
                                return false;
                            }
                        });
                    } else {
                        this.each(function () {
                            var instance = $.data(this, name);
                            if (instance) {
                                if (options) {
                                    instance.option(options);
                                }
                                instance._init();
                            } else {
                                $.data(this, name, new object(options, this));
                            }
                        });
                    }
                    return returnValue;
                };
            };
            $.Widget = function (options, element) {
                if (arguments.length) {
                    this._createWidget(options, element);
                }
            };
            $.Widget.prototype = {
                widgetName: "widget",
                widgetEventPrefix: "",
                options: {
                    disabled: false
                },
                _createWidget: function (options, element) {
                    $.data(element, this.widgetName, this);
                    this.element = $(element);
                    this.options = $.extend(true, {}, this.options, $.metadata && $.metadata.get(element)[this.widgetName], options);
                    var self = this;
                    this.element.bind("remove." + this.widgetName, function () {
                        self.destroy();
                    });
                    this._create();
                    this._init();
                },
                _create: function () {},
                _init: function () {},
                destroy: function () {
                    this.element.unbind("." + this.widgetName).removeData(this.widgetName);
                    this.widget().unbind("." + this.widgetName).removeAttr("aria-disabled").removeClass(this.widgetBaseClass + "-disabled " + "ui-state-disabled");
                },
                widget: function () {
                    return this.element;
                },
                option: function (key, value) {
                    var options = key,
                        self = this;
                    if (arguments.length === 0) {
                        return $.extend({}, self.options);
                    }
                    if (typeof key === "string") {
                        if (value === undefined) {
                            return this.options[key];
                        }
                        options = {};
                        options[key] = value;
                    }
                    $.each(options, function (key, value) {
                        self._setOption(key, value);
                    });
                    return self;
                },
                _setOption: function (key, value) {
                    this.options[key] = value;
                    if (key === "disabled") {
                        this.widget()[value ? "addClass" : "removeClass"](this.widgetBaseClass + "-disabled" + " " + "ui-state-disabled").attr("aria-disabled", value);
                    }
                    return this;
                },
                enable: function () {
                    return this._setOption("disabled", false);
                },
                disable: function () {
                    return this._setOption("disabled", true);
                },
                _trigger: function (type, event, data) {
                    var callback = this.options[type];
                    event = $.Event(event);
                    event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
                    data = data || {};
                    if (event.originalEvent) {
                        for (var i = $.event.props.length, prop; i;) {
                            prop = $.event.props[--i];
                            event[prop] = event.originalEvent[prop];
                        }
                    }
                    this.element.trigger(event, data);
                    return !($.isFunction(callback) && callback.call(this.element[0], event, data) === false || event.isDefaultPrevented());
                }
            };
        })(jQuery);
        (function ($, undefined) {
            var lastActive, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
                stateClasses = "ui-state-hover ui-state-active ",
                typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
                formResetHandler = function (event) {
                    $(":ui-button", event.target.form).each(function () {
                        var inst = $(this).data("button");
                        setTimeout(function () {
                            inst.refresh();
                        }, 1);
                    });
                }, radioGroup = function (radio) {
                    var name = radio.name,
                        form = radio.form,
                        radios = $([]);
                    if (name) {
                        if (form) {
                            radios = $(form).find("[name='" + name + "']");
                        } else {
                            radios = $("[name='" + name + "']", radio.ownerDocument).filter(function () {
                                return !this.form;
                            });
                        }
                    }
                    return radios;
                };
            $.widget("ui.button", {
                options: {
                    text: true,
                    label: null,
                    icons: {
                        primary: null,
                        secondary: null
                    }
                },
                _create: function () {
                    this.element.closest("form").unbind("reset.button").bind("reset.button", formResetHandler);
                    this._determineButtonType();
                    this.hasTitle = !! this.buttonElement.attr("title");
                    var self = this,
                        options = this.options,
                        toggleButton = this.type === "checkbox" || this.type === "radio",
                        hoverClass = "ui-state-hover" + (!toggleButton ? " ui-state-active" : ""),
                        focusClass = "ui-state-focus";
                    if (options.label === null) {
                        options.label = this.buttonElement.html();
                    }
                    if (this.element.is(":disabled")) {
                        options.disabled = true;
                    }
                    this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter.button", function () {
                        if (options.disabled) {
                            return;
                        }
                        $(this).addClass("ui-state-hover");
                        if (this === lastActive) {
                            $(this).addClass("ui-state-active");
                        }
                    }).bind("mouseleave.button", function () {
                        if (options.disabled) {
                            return;
                        }
                        $(this).removeClass(hoverClass);
                    }).bind("focus.button", function () {
                        $(this).addClass(focusClass);
                    }).bind("blur.button", function () {
                        $(this).removeClass(focusClass + (!toggleButton ? " ui-state-active" : ""));
                    });
                    if (toggleButton) {
                        this.element.bind("change.button", function () {
                            self.refresh();
                        });
                    }
                    if (this.type === "checkbox") {
                        this.buttonElement.bind("click.button", function () {
                            if (options.disabled) {
                                return false;
                            }
                            $(this).toggleClass("ui-state-active");
                            self.buttonElement.attr("aria-pressed", self.element[0].checked);
                        });
                    } else if (this.type === "radio") {
                        this.buttonElement.bind("click.button", function () {
                            if (options.disabled) {
                                return false;
                            }
                            $(this).addClass("ui-state-active");
                            self.buttonElement.attr("aria-pressed", true);
                            var radio = self.element[0];
                            radioGroup(radio).not(radio).map(function () {
                                return $(this).button("widget")[0];
                            }).removeClass("ui-state-active").attr("aria-pressed", false);
                        });
                    } else {
                        this.buttonElement.bind("mousedown.button", function () {
                            if (options.disabled) {
                                return false;
                            }
                            $(this).addClass("ui-state-active");
                            lastActive = this;
                            $(document).one("mouseup", function () {
                                lastActive = null;
                            });
                        }).bind("mouseup.button", function () {
                            if (options.disabled) {
                                return false;
                            }
                            $(this).removeClass("ui-state-active");
                        }).bind("keydown.button", function (event) {
                            if (options.disabled) {
                                return false;
                            }
                            if (event.keyCode == $.ui.keyCode.SPACE || event.keyCode == $.ui.keyCode.ENTER) {
                                $(this).addClass("ui-state-active");
                            }
                        }).bind("keyup.button", function () {
                            $(this).removeClass("ui-state-active");
                        });
                        if (this.buttonElement.is("a")) {
                            this.buttonElement.keyup(function (event) {
                                if (event.keyCode === $.ui.keyCode.SPACE) {
                                    $(this).click();
                                }
                            });
                        }
                    }
                    this._setOption("disabled", options.disabled);
                },
                _determineButtonType: function () {
                    if (this.element.is(":checkbox")) {
                        this.type = "checkbox";
                    } else {
                        if (this.element.is(":radio")) {
                            this.type = "radio";
                        } else {
                            if (this.element.is("input")) {
                                this.type = "input";
                            } else {
                                this.type = "button";
                            }
                        }
                    }
                    if (this.type === "checkbox" || this.type === "radio") {
                        this.buttonElement = this.element.parents().last().find("label[for=" + this.element.attr("id") + "]");
                        this.element.addClass("ui-helper-hidden-accessible");
                        var checked = this.element.is(":checked");
                        if (checked) {
                            this.buttonElement.addClass("ui-state-active");
                        }
                        this.buttonElement.attr("aria-pressed", checked);
                    } else {
                        this.buttonElement = this.element;
                    }
                },
                widget: function () {
                    return this.buttonElement;
                },
                destroy: function () {
                    this.element.removeClass("ui-helper-hidden-accessible");
                    this.buttonElement.removeClass(baseClasses + " " + stateClasses + " " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
                    if (!this.hasTitle) {
                        this.buttonElement.removeAttr("title");
                    }
                    $.Widget.prototype.destroy.call(this);
                },
                _setOption: function (key, value) {
                    $.Widget.prototype._setOption.apply(this, arguments);
                    if (key === "disabled") {
                        if (value) {
                            this.element.attr("disabled", true);
                        } else {
                            this.element.removeAttr("disabled");
                        }
                    }
                    this._resetButton();
                },
                refresh: function () {
                    var isDisabled = this.element.is(":disabled");
                    if (isDisabled !== this.options.disabled) {
                        this._setOption("disabled", isDisabled);
                    }
                    if (this.type === "radio") {
                        radioGroup(this.element[0]).each(function () {
                            if ($(this).is(":checked")) {
                                $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", true);
                            } else {
                                $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", false);
                            }
                        });
                    } else if (this.type === "checkbox") {
                        if (this.element.is(":checked")) {
                            this.buttonElement.addClass("ui-state-active").attr("aria-pressed", true);
                        } else {
                            this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", false);
                        }
                    }
                },
                _resetButton: function () {
                    if (this.type === "input") {
                        if (this.options.label) {
                            this.element.val(this.options.label);
                        }
                        return;
                    }
                    var buttonElement = this.buttonElement.removeClass(typeClasses),
                        buttonText = $("<span></span>").addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(),
                        icons = this.options.icons,
                        multipleIcons = icons.primary && icons.secondary;
                    if (icons.primary || icons.secondary) {
                        buttonElement.addClass("ui-button-text-icon" +
                            (multipleIcons ? "s" : (icons.primary ? "-primary" : "-secondary")));
                        if (icons.primary) {
                            buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                        }
                        if (icons.secondary) {
                            buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                        }
                        if (!this.options.text) {
                            buttonElement.addClass(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only").removeClass("ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary");
                            if (!this.hasTitle) {
                                buttonElement.attr("title", buttonText);
                            }
                        }
                    } else {
                        buttonElement.addClass("ui-button-text-only");
                    }
                }
            });
            $.widget("ui.buttonset", {
                _create: function () {
                    this.element.addClass("ui-buttonset");
                    this._init();
                },
                _init: function () {
                    this.refresh();
                },
                _setOption: function (key, value) {
                    if (key === "disabled") {
                        this.buttons.button("option", key, value);
                    }
                    $.Widget.prototype._setOption.apply(this, arguments);
                },
                refresh: function () {
                    this.buttons = this.element.find(":button, :submit, :reset, :checkbox, :radio, a, :data(button)").filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function () {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass("ui-corner-left").end().filter(":last").addClass("ui-corner-right").end().end();
                },
                destroy: function () {
                    this.element.removeClass("ui-buttonset");
                    this.buttons.map(function () {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
                    $.Widget.prototype.destroy.call(this);
                }
            });
        }(jQuery));
        (function ($, undefined) {
            $.widget("ui.mouse", {
                options: {
                    cancel: ':input,option',
                    distance: 1,
                    delay: 0
                },
                _mouseInit: function () {
                    var self = this;
                    this.element.bind('mousedown.' + this.widgetName, function (event) {
                        return self._mouseDown(event);
                    }).bind('click.' + this.widgetName, function (event) {
                        if (self._preventClickEvent) {
                            self._preventClickEvent = false;
                            event.stopImmediatePropagation();
                            return false;
                        }
                    });
                    this.started = false;
                },
                _mouseDestroy: function () {
                    this.element.unbind('.' + this.widgetName);
                },
                _mouseDown: function (event) {
                    event.originalEvent = event.originalEvent || {};
                    if (event.originalEvent.mouseHandled) {
                        return;
                    }
                    (this._mouseStarted && this._mouseUp(event));
                    this._mouseDownEvent = event;
                    var self = this,
                        btnIsLeft = (event.which == 1),
                        elIsCancel = (typeof this.options.cancel == "string" ? $(event.target).parents().add(event.target).filter(this.options.cancel).length : false);
                    if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                        return true;
                    }
                    this.mouseDelayMet = !this.options.delay;
                    if (!this.mouseDelayMet) {
                        this._mouseDelayTimer = setTimeout(function () {
                            self.mouseDelayMet = true;
                        }, this.options.delay);
                    }
                    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                        this._mouseStarted = (this._mouseStart(event) !== false);
                        if (!this._mouseStarted) {
                            event.preventDefault();
                            return true;
                        }
                    }
                    this._mouseMoveDelegate = function (event) {
                        return self._mouseMove(event);
                    };
                    this._mouseUpDelegate = function (event) {
                        return self._mouseUp(event);
                    };
                    $(document).bind('mousemove.' + this.widgetName, this._mouseMoveDelegate).bind('mouseup.' + this.widgetName, this._mouseUpDelegate);
                    ($.browser.safari || event.preventDefault());
                    event.originalEvent.mouseHandled = true;
                    return true;
                },
                _mouseMove: function (event) {
                    if ($.browser.msie && !event.button) {
                        return this._mouseUp(event);
                    }
                    if (this._mouseStarted) {
                        this._mouseDrag(event);
                        return event.preventDefault();
                    }
                    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                        this._mouseStarted = (this._mouseStart(this._mouseDownEvent, event) !== false);
                        (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
                    }
                    return !this._mouseStarted;
                },
                _mouseUp: function (event) {
                    $(document).unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
                    if (this._mouseStarted) {
                        this._mouseStarted = false;
                        this._preventClickEvent = (event.target == this._mouseDownEvent.target);
                        this._mouseStop(event);
                    }
                    return false;
                },
                _mouseDistanceMet: function (event) {
                    return (Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance);
                },
                _mouseDelayMet: function (event) {
                    return this.mouseDelayMet;
                },
                _mouseStart: function (event) {},
                _mouseDrag: function (event) {},
                _mouseStop: function (event) {},
                _mouseCapture: function (event) {
                    return true;
                }
            });
        })(jQuery);
        (function ($, undefined) {
            $.widget("ui.draggable", $.ui.mouse, {
                widgetEventPrefix: "drag",
                options: {
                    addClasses: true,
                    appendTo: "parent",
                    axis: false,
                    connectToSortable: false,
                    containment: false,
                    cursor: "auto",
                    cursorAt: false,
                    grid: false,
                    handle: false,
                    helper: "original",
                    iframeFix: false,
                    opacity: false,
                    refreshPositions: false,
                    revert: false,
                    revertDuration: 500,
                    scope: "default",
                    scroll: true,
                    scrollSensitivity: 20,
                    scrollSpeed: 20,
                    snap: false,
                    snapMode: "both",
                    snapTolerance: 20,
                    stack: false,
                    zIndex: false
                },
                _create: function () {
                    if (this.options.helper == 'original' && !(/^(?:r|a|f)/).test(this.element.css("position")))
                        this.element[0].style.position = 'relative';
                    (this.options.addClasses && this.element.addClass("ui-draggable"));
                    (this.options.disabled && this.element.addClass("ui-draggable-disabled"));
                    this._mouseInit();
                },
                destroy: function () {
                    if (!this.element.data('draggable')) return;
                    this.element.removeData("draggable").unbind(".draggable").removeClass("ui-draggable" + " ui-draggable-dragging" + " ui-draggable-disabled");
                    this._mouseDestroy();
                    return this;
                },
                _mouseCapture: function (event) {
                    var o = this.options;
                    if (this.helper || o.disabled || $(event.target).is('.ui-resizable-handle'))
                        return false;
                    this.handle = this._getHandle(event);
                    if (!this.handle)
                        return false;
                    return true;
                },
                _mouseStart: function (event) {
                    var o = this.options;
                    this.helper = this._createHelper(event);
                    this._cacheHelperProportions();
                    if ($.ui.ddmanager)
                        $.ui.ddmanager.current = this;
                    this._cacheMargins();
                    this.cssPosition = this.helper.css("position");
                    this.scrollParent = this.helper.scrollParent();
                    this.offset = this.positionAbs = this.element.offset();
                    this.offset = {
                        top: this.offset.top - this.margins.top,
                        left: this.offset.left - this.margins.left
                    };
                    $.extend(this.offset, {
                        click: {
                            left: event.pageX - this.offset.left,
                            top: event.pageY - this.offset.top
                        },
                        parent: this._getParentOffset(),
                        relative: this._getRelativeOffset()
                    });
                    this.originalPosition = this.position = this._generatePosition(event);
                    this.originalPageX = event.pageX;
                    this.originalPageY = event.pageY;
                    (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));
                    if (o.containment)
                        this._setContainment();
                    if (this._trigger("start", event) === false) {
                        this._clear();
                        return false;
                    }
                    this._cacheHelperProportions();
                    if ($.ui.ddmanager && !o.dropBehaviour)
                        $.ui.ddmanager.prepareOffsets(this, event);
                    this.helper.addClass("ui-draggable-dragging");
                    this._mouseDrag(event, true);
                    return true;
                },
                _mouseDrag: function (event, noPropagation) {
                    this.position = this._generatePosition(event);
                    this.positionAbs = this._convertPositionTo("absolute");
                    if (!noPropagation) {
                        var ui = this._uiHash();
                        if (this._trigger('drag', event, ui) === false) {
                            this._mouseUp({});
                            return false;
                        }
                        this.position = ui.position;
                    }
                    if (!this.options.axis || this.options.axis != "y") this.helper[0].style.left = this.position.left + 'px';
                    if (!this.options.axis || this.options.axis != "x") this.helper[0].style.top = this.position.top + 'px';
                    if ($.ui.ddmanager) $.ui.ddmanager.drag(this, event);
                    return false;
                },
                _mouseStop: function (event) {
                    var dropped = false;
                    if ($.ui.ddmanager && !this.options.dropBehaviour)
                        dropped = $.ui.ddmanager.drop(this, event);
                    if (this.dropped) {
                        dropped = this.dropped;
                        this.dropped = false;
                    }
                    if (!this.element[0] || !this.element[0].parentNode)
                        return false;
                    if ((this.options.revert == "invalid" && !dropped) || (this.options.revert == "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
                        var self = this;
                        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                            if (self._trigger("stop", event) !== false) {
                                self._clear();
                            }
                        });
                    } else {
                        if (this._trigger("stop", event) !== false) {
                            this._clear();
                        }
                    }
                    return false;
                },
                cancel: function () {
                    if (this.helper.is(".ui-draggable-dragging")) {
                        this._mouseUp({});
                    } else {
                        this._clear();
                    }
                    return this;
                },
                _getHandle: function (event) {
                    var handle = !this.options.handle || !$(this.options.handle, this.element).length ? true : false;
                    $(this.options.handle, this.element).find("*").andSelf().each(function () {
                        if (this == event.target) handle = true;
                    });
                    return handle;
                },
                _createHelper: function (event) {
                    var o = this.options;
                    var helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper == 'clone' ? this.element.clone() : this.element);
                    if (!helper.parents('body').length)
                        helper.appendTo((o.appendTo == 'parent' ? this.element[0].parentNode : o.appendTo));
                    if (helper[0] != this.element[0] && !(/(fixed|absolute)/).test(helper.css("position")))
                        helper.css("position", "absolute");
                    return helper;
                },
                _adjustOffsetFromHelper: function (obj) {
                    if (typeof obj == 'string') {
                        obj = obj.split(' ');
                    }
                    if ($.isArray(obj)) {
                        obj = {
                            left: +obj[0],
                            top: +obj[1] || 0
                        };
                    }
                    if ('left' in obj) {
                        this.offset.click.left = obj.left + this.margins.left;
                    }
                    if ('right' in obj) {
                        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                    }
                    if ('top' in obj) {
                        this.offset.click.top = obj.top + this.margins.top;
                    }
                    if ('bottom' in obj) {
                        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                    }
                },
                _getParentOffset: function () {
                    this.offsetParent = this.helper.offsetParent();
                    var po = this.offsetParent.offset();
                    if (this.cssPosition == 'absolute' && this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) {
                        po.left += this.scrollParent.scrollLeft();
                        po.top += this.scrollParent.scrollTop();
                    }
                    if ((this.offsetParent[0] == document.body) || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() == 'html' && $.browser.msie))
                        po = {
                            top: 0,
                            left: 0
                    };
                    return {
                        top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                        left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                    };
                },
                _getRelativeOffset: function () {
                    if (this.cssPosition == "relative") {
                        var p = this.element.position();
                        return {
                            top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                            left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                        };
                    } else {
                        return {
                            top: 0,
                            left: 0
                        };
                    }
                },
                _cacheMargins: function () {
                    this.margins = {
                        left: (parseInt(this.element.css("marginLeft"), 10) || 0),
                        top: (parseInt(this.element.css("marginTop"), 10) || 0)
                    };
                },
                _cacheHelperProportions: function () {
                    this.helperProportions = {
                        width: this.helper.outerWidth(),
                        height: this.helper.outerHeight()
                    };
                },
                _setContainment: function () {
                    var o = this.options;
                    if (o.containment == 'parent') o.containment = this.helper[0].parentNode;
                    if (o.containment == 'document' || o.containment == 'window') this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $(o.containment == 'document' ? document : window).width() - this.helperProportions.width - this.margins.left, ($(o.containment == 'document' ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                    if (!(/^(document|window|parent)$/).test(o.containment) && o.containment.constructor != Array) {
                        var ce = $(o.containment)[0];
                        if (!ce) return;
                        var co = $(o.containment).offset();
                        var over = ($(ce).css("overflow") != 'hidden');
                        this.containment = [co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top];
                    } else if (o.containment.constructor == Array) {
                        this.containment = o.containment;
                    }
                },
                _convertPositionTo: function (d, pos) {
                    if (!pos) pos = this.position;
                    var mod = d == "absolute" ? 1 : -1;
                    var o = this.options,
                        scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                        scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                    return {
                        top: (pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())) * mod)),
                        left: (pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod))
                    };
                },
                _generatePosition: function (event) {
                    var o = this.options,
                        scroll = this.cssPosition == 'absolute' && !(this.scrollParent[0] != document && $.ui.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
                        scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);
                    var pageX = event.pageX;
                    var pageY = event.pageY;
                    if (this.originalPosition) {
                        if (this.containment) {
                            if (event.pageX - this.offset.click.left < this.containment[0]) pageX = this.containment[0] + this.offset.click.left;
                            if (event.pageY - this.offset.click.top < this.containment[1]) pageY = this.containment[1] + this.offset.click.top;
                            if (event.pageX - this.offset.click.left > this.containment[2]) pageX = this.containment[2] + this.offset.click.left;
                            if (event.pageY - this.offset.click.top > this.containment[3]) pageY = this.containment[3] + this.offset.click.top;
                        }
                        if (o.grid) {
                            var top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                            pageY = this.containment ? (!(top - this.offset.click.top < this.containment[1] || top - this.offset.click.top > this.containment[3]) ? top : (!(top - this.offset.click.top < this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;
                            var left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                            pageX = this.containment ? (!(left - this.offset.click.left < this.containment[0] || left - this.offset.click.left > this.containment[2]) ? left : (!(left - this.offset.click.left < this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
                        }
                    }
                    return {
                        top: (pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollTop() : (scrollIsRootNode ? 0 : scroll.scrollTop())))),
                        left: (pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ($.browser.safari && $.browser.version < 526 && this.cssPosition == 'fixed' ? 0 : (this.cssPosition == 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())))
                    };
                },
                _clear: function () {
                    this.helper.removeClass("ui-draggable-dragging");
                    if (this.helper[0] != this.element[0] && !this.cancelHelperRemoval) this.helper.remove();
                    this.helper = null;
                    this.cancelHelperRemoval = false;
                },
                _trigger: function (type, event, ui) {
                    ui = ui || this._uiHash();
                    $.ui.plugin.call(this, type, [event, ui]);
                    if (type == "drag") this.positionAbs = this._convertPositionTo("absolute");
                    return $.Widget.prototype._trigger.call(this, type, event, ui);
                },
                plugins: {},
                _uiHash: function (event) {
                    return {
                        helper: this.helper,
                        position: this.position,
                        originalPosition: this.originalPosition,
                        offset: this.positionAbs
                    };
                }
            });
            $.extend($.ui.draggable, {
                version: "@VERSION"
            });
            $.ui.plugin.add("draggable", "connectToSortable", {
                start: function (event, ui) {
                    var inst = $(this).data("draggable"),
                        o = inst.options,
                        uiSortable = $.extend({}, ui, {
                            item: inst.element
                        });
                    inst.sortables = [];
                    $(o.connectToSortable).each(function () {
                        var sortable = $.data(this, 'sortable');
                        if (sortable && !sortable.options.disabled) {
                            inst.sortables.push({
                                instance: sortable,
                                shouldRevert: sortable.options.revert
                            });
                            sortable._refreshItems();
                            sortable._trigger("activate", event, uiSortable);
                        }
                    });
                },
                stop: function (event, ui) {
                    var inst = $(this).data("draggable"),
                        uiSortable = $.extend({}, ui, {
                            item: inst.element
                        });
                    $.each(inst.sortables, function () {
                        if (this.instance.isOver) {
                            this.instance.isOver = 0;
                            inst.cancelHelperRemoval = true;
                            this.instance.cancelHelperRemoval = false;
                            if (this.shouldRevert) this.instance.options.revert = true;
                            this.instance._mouseStop(event);
                            this.instance.options.helper = this.instance.options._helper;
                            if (inst.options.helper == 'original')
                                this.instance.currentItem.css({
                                    top: 'auto',
                                    left: 'auto'
                                });
                        } else {
                            this.instance.cancelHelperRemoval = false;
                            this.instance._trigger("deactivate", event, uiSortable);
                        }
                    });
                },
                drag: function (event, ui) {
                    var inst = $(this).data("draggable"),
                        self = this;
                    var checkPos = function (o) {
                        var dyClick = this.offset.click.top,
                            dxClick = this.offset.click.left;
                        var helperTop = this.positionAbs.top,
                            helperLeft = this.positionAbs.left;
                        var itemHeight = o.height,
                            itemWidth = o.width;
                        var itemTop = o.top,
                            itemLeft = o.left;
                        return $.ui.isOver(helperTop + dyClick, helperLeft + dxClick, itemTop, itemLeft, itemHeight, itemWidth);
                    };
                    $.each(inst.sortables, function (i) {
                        this.instance.positionAbs = inst.positionAbs;
                        this.instance.helperProportions = inst.helperProportions;
                        this.instance.offset.click = inst.offset.click;
                        if (this.instance._intersectsWith(this.instance.containerCache)) {
                            if (!this.instance.isOver) {
                                this.instance.isOver = 1;
                                this.instance.currentItem = $(self).clone().appendTo(this.instance.element).data("sortable-item", true);
                                this.instance.options._helper = this.instance.options.helper;
                                this.instance.options.helper = function () {
                                    return ui.helper[0];
                                };
                                event.target = this.instance.currentItem[0];
                                this.instance._mouseCapture(event, true);
                                this.instance._mouseStart(event, true, true);
                                this.instance.offset.click.top = inst.offset.click.top;
                                this.instance.offset.click.left = inst.offset.click.left;
                                this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                                this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                                inst._trigger("toSortable", event);
                                inst.dropped = this.instance.element;
                                inst.currentItem = inst.element;
                                this.instance.fromOutside = inst;
                            }
                            if (this.instance.currentItem) this.instance._mouseDrag(event);
                        } else {
                            if (this.instance.isOver) {
                                this.instance.isOver = 0;
                                this.instance.cancelHelperRemoval = true;
                                this.instance.options.revert = false;
                                this.instance._trigger('out', event, this.instance._uiHash(this.instance));
                                this.instance._mouseStop(event, true);
                                this.instance.options.helper = this.instance.options._helper;
                                this.instance.currentItem.remove();
                                if (this.instance.placeholder) this.instance.placeholder.remove();
                                inst._trigger("fromSortable", event);
                                inst.dropped = false;
                            }
                        };
                    });
                }
            });
            $.ui.plugin.add("draggable", "cursor", {
                start: function (event, ui) {
                    var t = $('body'),
                        o = $(this).data('draggable').options;
                    if (t.css("cursor")) o._cursor = t.css("cursor");
                    t.css("cursor", o.cursor);
                },
                stop: function (event, ui) {
                    var o = $(this).data('draggable').options;
                    if (o._cursor) $('body').css("cursor", o._cursor);
                }
            });
            $.ui.plugin.add("draggable", "iframeFix", {
                start: function (event, ui) {
                    var o = $(this).data('draggable').options;
                    $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function () {
                        $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
                            width: this.offsetWidth + "px",
                            height: this.offsetHeight + "px",
                            position: "absolute",
                            opacity: "0.001",
                            zIndex: 1000
                        }).css($(this).offset()).appendTo("body");
                    });
                },
                stop: function (event, ui) {
                    $("div.ui-draggable-iframeFix").each(function () {
                        this.parentNode.removeChild(this);
                    });
                }
            });
            $.ui.plugin.add("draggable", "opacity", {
                start: function (event, ui) {
                    var t = $(ui.helper),
                        o = $(this).data('draggable').options;
                    if (t.css("opacity")) o._opacity = t.css("opacity");
                    t.css('opacity', o.opacity);
                },
                stop: function (event, ui) {
                    var o = $(this).data('draggable').options;
                    if (o._opacity) $(ui.helper).css('opacity', o._opacity);
                }
            });
            $.ui.plugin.add("draggable", "scroll", {
                start: function (event, ui) {
                    var i = $(this).data("draggable");
                    if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') i.overflowOffset = i.scrollParent.offset();
                },
                drag: function (event, ui) {
                    var i = $(this).data("draggable"),
                        o = i.options,
                        scrolled = false;
                    if (i.scrollParent[0] != document && i.scrollParent[0].tagName != 'HTML') {
                        if (!o.axis || o.axis != 'x') {
                            if ((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity)
                                i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                            else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity)
                                i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                        }
                        if (!o.axis || o.axis != 'y') {
                            if ((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity)
                                i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                            else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity)
                                i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
                        }
                    } else {
                        if (!o.axis || o.axis != 'x') {
                            if (event.pageY - $(document).scrollTop() < o.scrollSensitivity)
                                scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                            else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity)
                                scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                        }
                        if (!o.axis || o.axis != 'y') {
                            if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity)
                                scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                            else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity)
                                scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                        }
                    }
                    if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour)
                        $.ui.ddmanager.prepareOffsets(i, event);
                }
            });
            $.ui.plugin.add("draggable", "snap", {
                start: function (event, ui) {
                    var i = $(this).data("draggable"),
                        o = i.options;
                    i.snapElements = [];
                    $(o.snap.constructor != String ? (o.snap.items || ':data(draggable)') : o.snap).each(function () {
                        var $t = $(this);
                        var $o = $t.offset();
                        if (this != i.element[0]) i.snapElements.push({
                                item: this,
                                width: $t.outerWidth(),
                                height: $t.outerHeight(),
                                top: $o.top,
                                left: $o.left
                            });
                    });
                },
                drag: function (event, ui) {
                    var inst = $(this).data("draggable"),
                        o = inst.options;
                    var d = o.snapTolerance;
                    var x1 = ui.offset.left,
                        x2 = x1 + inst.helperProportions.width,
                        y1 = ui.offset.top,
                        y2 = y1 + inst.helperProportions.height;
                    for (var i = inst.snapElements.length - 1; i >= 0; i--) {
                        var l = inst.snapElements[i].left,
                            r = l + inst.snapElements[i].width,
                            t = inst.snapElements[i].top,
                            b = t + inst.snapElements[i].height;
                        if (!((l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d) || (l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d) || (l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d) || (l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d))) {
                            if (inst.snapElements[i].snapping)(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                                    snapItem: inst.snapElements[i].item
                                })));
                            inst.snapElements[i].snapping = false;
                            continue;
                        }
                        if (o.snapMode != 'inner') {
                            var ts = Math.abs(t - y2) <= d;
                            var bs = Math.abs(b - y1) <= d;
                            var ls = Math.abs(l - x2) <= d;
                            var rs = Math.abs(r - x1) <= d;
                            if (ts) ui.position.top = inst._convertPositionTo("relative", {
                                    top: t - inst.helperProportions.height,
                                    left: 0
                                }).top - inst.margins.top;
                            if (bs) ui.position.top = inst._convertPositionTo("relative", {
                                    top: b,
                                    left: 0
                                }).top - inst.margins.top;
                            if (ls) ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: l - inst.helperProportions.width
                                }).left - inst.margins.left;
                            if (rs) ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: r
                                }).left - inst.margins.left;
                        }
                        var first = (ts || bs || ls || rs);
                        if (o.snapMode != 'outer') {
                            var ts = Math.abs(t - y1) <= d;
                            var bs = Math.abs(b - y2) <= d;
                            var ls = Math.abs(l - x1) <= d;
                            var rs = Math.abs(r - x2) <= d;
                            if (ts) ui.position.top = inst._convertPositionTo("relative", {
                                    top: t,
                                    left: 0
                                }).top - inst.margins.top;
                            if (bs) ui.position.top = inst._convertPositionTo("relative", {
                                    top: b - inst.helperProportions.height,
                                    left: 0
                                }).top - inst.margins.top;
                            if (ls) ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: l
                                }).left - inst.margins.left;
                            if (rs) ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: r - inst.helperProportions.width
                                }).left - inst.margins.left;
                        }
                        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first))
                            (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                                snapItem: inst.snapElements[i].item
                            })));
                        inst.snapElements[i].snapping = (ts || bs || ls || rs || first);
                    };
                }
            });
            $.ui.plugin.add("draggable", "stack", {
                start: function (event, ui) {
                    var o = $(this).data("draggable").options;
                    var group = $.makeArray($(o.stack)).sort(function (a, b) {
                        return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
                    });
                    if (!group.length) {
                        return;
                    }
                    var min = parseInt(group[0].style.zIndex) || 0;
                    $(group).each(function (i) {
                        this.style.zIndex = min + i;
                    });
                    this[0].style.zIndex = min + group.length;
                }
            });
            $.ui.plugin.add("draggable", "zIndex", {
                start: function (event, ui) {
                    var t = $(ui.helper),
                        o = $(this).data("draggable").options;
                    if (t.css("zIndex")) o._zIndex = t.css("zIndex");
                    t.css('zIndex', o.zIndex);
                },
                stop: function (event, ui) {
                    var o = $(this).data("draggable").options;
                    if (o._zIndex) $(ui.helper).css('zIndex', o._zIndex);
                }
            });
        })(jQuery);
        (function ($, undefined) {
            $.ui = $.ui || {};
            var horizontalPositions = /left|center|right/,
                horizontalDefault = "center",
                verticalPositions = /top|center|bottom/,
                verticalDefault = "center",
                _position = $.fn.position,
                _offset = $.fn.offset;
            $.fn.position = function (options) {
                if (!options || !options.of) {
                    return _position.apply(this, arguments);
                }
                options = $.extend({}, options);
                var target = $(options.of),
                    collision = (options.collision || "flip").split(" "),
                    offset = options.offset ? options.offset.split(" ") : [0, 0],
                    targetWidth, targetHeight, basePosition;
                if (options.of.nodeType === 9) {
                    targetWidth = target.width();
                    targetHeight = target.height();
                    basePosition = {
                        top: 0,
                        left: 0
                    };
                } else if (options.of.scrollTo && options.of.document) {
                    targetWidth = target.width();
                    targetHeight = target.height();
                    basePosition = {
                        top: target.scrollTop(),
                        left: target.scrollLeft()
                    };
                } else if (options.of.preventDefault) {
                    options.at = "left top";
                    targetWidth = targetHeight = 0;
                    basePosition = {
                        top: options.of.pageY,
                        left: options.of.pageX
                    };
                } else {
                    targetWidth = target.outerWidth();
                    targetHeight = target.outerHeight();
                    basePosition = target.offset();
                }
                $.each(["my", "at"], function () {
                    var pos = (options[this] || "").split(" ");
                    if (pos.length === 1) {
                        pos = horizontalPositions.test(pos[0]) ? pos.concat([verticalDefault]) : verticalPositions.test(pos[0]) ? [horizontalDefault].concat(pos) : [horizontalDefault, verticalDefault];
                    }
                    pos[0] = horizontalPositions.test(pos[0]) ? pos[0] : horizontalDefault;
                    pos[1] = verticalPositions.test(pos[1]) ? pos[1] : verticalDefault;
                    options[this] = pos;
                });
                if (collision.length === 1) {
                    collision[1] = collision[0];
                }
                offset[0] = parseInt(offset[0], 10) || 0;
                if (offset.length === 1) {
                    offset[1] = offset[0];
                }
                offset[1] = parseInt(offset[1], 10) || 0;
                if (options.at[0] === "right") {
                    basePosition.left += targetWidth;
                } else if (options.at[0] === horizontalDefault) {
                    basePosition.left += targetWidth / 2;
                }
                if (options.at[1] === "bottom") {
                    basePosition.top += targetHeight;
                } else if (options.at[1] === verticalDefault) {
                    basePosition.top += targetHeight / 2;
                }
                basePosition.left += offset[0];
                basePosition.top += offset[1];
                return this.each(function () {
                    var elem = $(this),
                        elemWidth = elem.outerWidth(),
                        elemHeight = elem.outerHeight(),
                        position = $.extend({}, basePosition);
                    if (options.my[0] === "right") {
                        position.left -= elemWidth;
                    } else if (options.my[0] === horizontalDefault) {
                        position.left -= elemWidth / 2;
                    }
                    if (options.my[1] === "bottom") {
                        position.top -= elemHeight;
                    } else if (options.my[1] === verticalDefault) {
                        position.top -= elemHeight / 2;
                    }
                    position.left = parseInt(position.left);
                    position.top = parseInt(position.top);
                    $.each(["left", "top"], function (i, dir) {
                        if ($.ui.position[collision[i]]) {
                            $.ui.position[collision[i]][dir](position, {
                                targetWidth: targetWidth,
                                targetHeight: targetHeight,
                                elemWidth: elemWidth,
                                elemHeight: elemHeight,
                                offset: offset,
                                my: options.my,
                                at: options.at
                            });
                        }
                    });
                    if ($.fn.bgiframe) {
                        elem.bgiframe();
                    }
                    elem.offset($.extend(position, {
                        using: options.using
                    }));
                });
            };
            $.ui.position = {
                fit: {
                    left: function (position, data) {
                        var win = $(window),
                            over = position.left + data.elemWidth - win.width() - win.scrollLeft();
                        position.left = over > 0 ? position.left - over : Math.max(0, position.left);
                    },
                    top: function (position, data) {
                        var win = $(window),
                            over = position.top + data.elemHeight - win.height() - win.scrollTop();
                        position.top = over > 0 ? position.top - over : Math.max(0, position.top);
                    }
                },
                flip: {
                    left: function (position, data) {
                        if (data.at[0] === "center") {
                            return;
                        }
                        var win = $(window),
                            over = position.left + data.elemWidth - win.width() - win.scrollLeft(),
                            myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0,
                            offset = -2 * data.offset[0];
                        position.left += position.left < 0 ? myOffset + data.targetWidth + offset : over > 0 ? myOffset - data.targetWidth + offset : 0;
                    },
                    top: function (position, data) {
                        if (data.at[1] === "center") {
                            return;
                        }
                        var win = $(window),
                            over = position.top + data.elemHeight - win.height() - win.scrollTop(),
                            myOffset = data.my[1] === "top" ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0,
                            atOffset = data.at[1] === "top" ? data.targetHeight : -data.targetHeight,
                            offset = -2 * data.offset[1];
                        position.top += position.top < 0 ? myOffset + data.targetHeight + offset : over > 0 ? myOffset + atOffset + offset : 0;
                    }
                }
            };
            if (!$.offset.setOffset) {
                $.offset.setOffset = function (elem, options) {
                    if (/static/.test($.curCSS(elem, "position"))) {
                        elem.style.position = "relative";
                    }
                    var curElem = $(elem),
                        curOffset = curElem.offset(),
                        curTop = parseInt($.curCSS(elem, "top", true), 10) || 0,
                        curLeft = parseInt($.curCSS(elem, "left", true), 10) || 0,
                        props = {
                            top: (options.top - curOffset.top) + curTop,
                            left: (options.left - curOffset.left) + curLeft
                        };
                    if ('using' in options) {
                        options.using.call(elem, props);
                    } else {
                        curElem.css(props);
                    }
                };
                $.fn.offset = function (options) {
                    var elem = this[0];
                    if (!elem || !elem.ownerDocument) {
                        return null;
                    }
                    if (options) {
                        return this.each(function () {
                            $.offset.setOffset(this, options);
                        });
                    }
                    return _offset.call(this);
                };
            }
        }(jQuery));
        (function ($, undefined) {
            $.widget("ui.resizable", $.ui.mouse, {
                widgetEventPrefix: "resize",
                options: {
                    alsoResize: false,
                    animate: false,
                    animateDuration: "slow",
                    animateEasing: "swing",
                    aspectRatio: false,
                    autoHide: false,
                    containment: false,
                    ghost: false,
                    grid: false,
                    handles: "e,s,se",
                    helper: false,
                    maxHeight: null,
                    maxWidth: null,
                    minHeight: 10,
                    minWidth: 10,
                    zIndex: 1000
                },
                _create: function () {
                    var self = this,
                        o = this.options;
                    this.element.addClass("ui-resizable");
                    $.extend(this, {
                        _aspectRatio: !! (o.aspectRatio),
                        aspectRatio: o.aspectRatio,
                        originalElement: this.element,
                        _proportionallyResizeElements: [],
                        _helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
                    });
                    if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                        if (/relative/.test(this.element.css('position')) && $.browser.opera)
                            this.element.css({
                                position: 'relative',
                                top: 'auto',
                                left: 'auto'
                            });
                        this.element.wrap($('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                            position: this.element.css('position'),
                            width: this.element.outerWidth(),
                            height: this.element.outerHeight(),
                            top: this.element.css('top'),
                            left: this.element.css('left')
                        }));
                        this.element = this.element.parent().data("resizable", this.element.data('resizable'));
                        this.elementIsWrapper = true;
                        this.element.css({
                            marginLeft: this.originalElement.css("marginLeft"),
                            marginTop: this.originalElement.css("marginTop"),
                            marginRight: this.originalElement.css("marginRight"),
                            marginBottom: this.originalElement.css("marginBottom")
                        });
                        this.originalElement.css({
                            marginLeft: 0,
                            marginTop: 0,
                            marginRight: 0,
                            marginBottom: 0
                        });
                        this.originalResizeStyle = this.originalElement.css('resize');
                        this.originalElement.css('resize', 'none');
                        this._proportionallyResizeElements.push(this.originalElement.css({
                            position: 'static',
                            zoom: 1,
                            display: 'block'
                        }));
                        this.originalElement.css({
                            margin: this.originalElement.css('margin')
                        });
                        this._proportionallyResize();
                    }
                    this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? "e,s,se" : {
                        n: '.ui-resizable-n',
                        e: '.ui-resizable-e',
                        s: '.ui-resizable-s',
                        w: '.ui-resizable-w',
                        se: '.ui-resizable-se',
                        sw: '.ui-resizable-sw',
                        ne: '.ui-resizable-ne',
                        nw: '.ui-resizable-nw'
                    });
                    if (this.handles.constructor == String) {
                        if (this.handles == 'all') this.handles = 'n,e,s,w,se,sw,ne,nw';
                        var n = this.handles.split(",");
                        this.handles = {};
                        for (var i = 0; i < n.length; i++) {
                            var handle = $.trim(n[i]),
                                hname = 'ui-resizable-' + handle;
                            var axis = $('<div class="ui-resizable-handle ' + hname + '"></div>');
                            if (/sw|se|ne|nw/.test(handle)) axis.css({
                                    zIndex: ++o.zIndex
                                });
                            if ('se' == handle) {
                                axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                            };
                            this.handles[handle] = '.ui-resizable-' + handle;
                            this.element.append(axis);
                        }
                    }
                    this._renderAxis = function (target) {
                        target = target || this.element;
                        for (var i in this.handles) {
                            if (this.handles[i].constructor == String)
                                this.handles[i] = $(this.handles[i], this.element).show();
                            if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                                var axis = $(this.handles[i], this.element),
                                    padWrapper = 0;
                                padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                                var padPos = ['padding', /ne|nw|n/.test(i) ? 'Top' : /se|sw|s/.test(i) ? 'Bottom' : /^e$/.test(i) ? 'Right' : 'Left'].join("");
                                target.css(padPos, padWrapper);
                                this._proportionallyResize();
                            }
                            if (!$(this.handles[i]).length)
                                continue;
                        }
                    };
                    this._renderAxis(this.element);
                    this._handles = $('.ui-resizable-handle', this.element).disableSelection();
                    this._handles.mouseover(function () {
                        if (!self.resizing) {
                            if (this.className)
                                var axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                            self.axis = axis && axis[1] ? axis[1] : 'se';
                        }
                    });
                    if (o.autoHide) {
                        this._handles.hide();
                        $(this.element).addClass("ui-resizable-autohide").hover(function () {
                            $(this).removeClass("ui-resizable-autohide");
                            self._handles.show();
                        }, function () {
                            if (!self.resizing) {
                                $(this).addClass("ui-resizable-autohide");
                                self._handles.hide();
                            }
                        });
                    }
                    this._mouseInit();
                },
                destroy: function () {
                    this._mouseDestroy();
                    var _destroy = function (exp) {
                        $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
                    };
                    if (this.elementIsWrapper) {
                        _destroy(this.element);
                        var wrapper = this.element;
                        wrapper.after(this.originalElement.css({
                            position: wrapper.css('position'),
                            width: wrapper.outerWidth(),
                            height: wrapper.outerHeight(),
                            top: wrapper.css('top'),
                            left: wrapper.css('left')
                        })).remove();
                    }
                    this.originalElement.css('resize', this.originalResizeStyle);
                    _destroy(this.originalElement);
                    return this;
                },
                _mouseCapture: function (event) {
                    var handle = false;
                    for (var i in this.handles) {
                        if ($(this.handles[i])[0] == event.target) {
                            handle = true;
                        }
                    }
                    return !this.options.disabled && handle;
                },
                _mouseStart: function (event) {
                    var o = this.options,
                        iniPos = this.element.position(),
                        el = this.element;
                    this.resizing = true;
                    this.documentScroll = {
                        top: $(document).scrollTop(),
                        left: $(document).scrollLeft()
                    };
                    if (el.is('.ui-draggable') || (/absolute/).test(el.css('position'))) {
                        el.css({
                            position: 'absolute',
                            top: iniPos.top,
                            left: iniPos.left
                        });
                    }
                    if ($.browser.opera && (/relative/).test(el.css('position')))
                        el.css({
                            position: 'relative',
                            top: 'auto',
                            left: 'auto'
                        });
                    this._renderProxy();
                    var curleft = num(this.helper.css('left')),
                        curtop = num(this.helper.css('top'));
                    if (o.containment) {
                        curleft += $(o.containment).scrollLeft() || 0;
                        curtop += $(o.containment).scrollTop() || 0;
                    }
                    this.offset = this.helper.offset();
                    this.position = {
                        left: curleft,
                        top: curtop
                    };
                    this.size = this._helper ? {
                        width: el.outerWidth(),
                        height: el.outerHeight()
                    } : {
                        width: el.width(),
                        height: el.height()
                    };
                    this.originalSize = this._helper ? {
                        width: el.outerWidth(),
                        height: el.outerHeight()
                    } : {
                        width: el.width(),
                        height: el.height()
                    };
                    this.originalPosition = {
                        left: curleft,
                        top: curtop
                    };
                    this.sizeDiff = {
                        width: el.outerWidth() - el.width(),
                        height: el.outerHeight() - el.height()
                    };
                    this.originalMousePosition = {
                        left: event.pageX,
                        top: event.pageY
                    };
                    this.aspectRatio = (typeof o.aspectRatio == 'number') ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);
                    var cursor = $('.ui-resizable-' + this.axis).css('cursor');
                    $('body').css('cursor', cursor == 'auto' ? this.axis + '-resize' : cursor);
                    el.addClass("ui-resizable-resizing");
                    this._propagate("start", event);
                    return true;
                },
                _mouseDrag: function (event) {
                    var el = this.helper,
                        o = this.options,
                        props = {}, self = this,
                        smp = this.originalMousePosition,
                        a = this.axis;
                    var dx = (event.pageX - smp.left) || 0,
                        dy = (event.pageY - smp.top) || 0;
                    var trigger = this._change[a];
                    if (!trigger) return false;
                    var data = trigger.apply(this, [event, dx, dy]),
                        ie6 = $.browser.msie && $.browser.version < 7,
                        csdif = this.sizeDiff;
                    if (this._aspectRatio || event.shiftKey)
                        data = this._updateRatio(data, event);
                    data = this._respectSize(data, event);
                    this._propagate("resize", event);
                    el.css({
                        top: this.position.top + "px",
                        left: this.position.left + "px",
                        width: this.size.width + "px",
                        height: this.size.height + "px"
                    });
                    if (!this._helper && this._proportionallyResizeElements.length)
                        this._proportionallyResize();
                    this._updateCache(data);
                    this._trigger('resize', event, this.ui());
                    return false;
                },
                _mouseStop: function (event) {
                    this.resizing = false;
                    var o = this.options,
                        self = this;
                    if (this._helper) {
                        var pr = this._proportionallyResizeElements,
                            ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                            soffseth = ista && $.ui.hasScroll(pr[0], 'left') ? 0 : self.sizeDiff.height,
                            soffsetw = ista ? 0 : self.sizeDiff.width;
                        var s = {
                            width: (self.size.width - soffsetw),
                            height: (self.size.height - soffseth)
                        }, left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
                            top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;
                        if (!o.animate)
                            this.element.css($.extend(s, {
                                top: top,
                                left: left
                            }));
                        self.helper.height(self.size.height);
                        self.helper.width(self.size.width);
                        if (this._helper && !o.animate) this._proportionallyResize();
                    }
                    $('body').css('cursor', 'auto');
                    this.element.removeClass("ui-resizable-resizing");
                    this._propagate("stop", event);
                    if (this._helper) this.helper.remove();
                    return false;
                },
                _updateCache: function (data) {
                    var o = this.options;
                    this.offset = this.helper.offset();
                    if (isNumber(data.left)) this.position.left = data.left;
                    if (isNumber(data.top)) this.position.top = data.top;
                    if (isNumber(data.height)) this.size.height = data.height;
                    if (isNumber(data.width)) this.size.width = data.width;
                },
                _updateRatio: function (data, event) {
                    var o = this.options,
                        cpos = this.position,
                        csize = this.size,
                        a = this.axis;
                    if (data.height) data.width = (csize.height * this.aspectRatio);
                    else if (data.width) data.height = (csize.width / this.aspectRatio);
                    if (a == 'sw') {
                        data.left = cpos.left + (csize.width - data.width);
                        data.top = null;
                    }
                    if (a == 'nw') {
                        data.top = cpos.top + (csize.height - data.height);
                        data.left = cpos.left + (csize.width - data.width);
                    }
                    return data;
                },
                _respectSize: function (data, event) {
                    var el = this.helper,
                        o = this.options,
                        pRatio = this._aspectRatio || event.shiftKey,
                        a = this.axis,
                        ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width),
                        ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
                        isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width),
                        isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height);
                    if (isminw) data.width = o.minWidth;
                    if (isminh) data.height = o.minHeight;
                    if (ismaxw) data.width = o.maxWidth;
                    if (ismaxh) data.height = o.maxHeight;
                    var dw = this.originalPosition.left + this.originalSize.width,
                        dh = this.position.top + this.size.height;
                    var cw = /sw|nw|w/.test(a),
                        ch = /nw|ne|n/.test(a);
                    if (isminw && cw) data.left = dw - o.minWidth;
                    if (ismaxw && cw) data.left = dw - o.maxWidth;
                    if (isminh && ch) data.top = dh - o.minHeight;
                    if (ismaxh && ch) data.top = dh - o.maxHeight;
                    var isNotwh = !data.width && !data.height;
                    if (isNotwh && !data.left && data.top) data.top = null;
                    else if (isNotwh && !data.top && data.left) data.left = null;
                    return data;
                },
                _proportionallyResize: function () {
                    var o = this.options;
                    if (!this._proportionallyResizeElements.length) return;
                    var element = this.helper || this.element;
                    for (var i = 0; i < this._proportionallyResizeElements.length; i++) {
                        var prel = this._proportionallyResizeElements[i];
                        if (!this.borderDif) {
                            var b = [prel.css('borderTopWidth'), prel.css('borderRightWidth'), prel.css('borderBottomWidth'), prel.css('borderLeftWidth')],
                                p = [prel.css('paddingTop'), prel.css('paddingRight'), prel.css('paddingBottom'), prel.css('paddingLeft')];
                            this.borderDif = $.map(b, function (v, i) {
                                var border = parseInt(v, 10) || 0,
                                    padding = parseInt(p[i], 10) || 0;
                                return border + padding;
                            });
                        }
                        if ($.browser.msie && !(!($(element).is(':hidden') || $(element).parents(':hidden').length)))
                            continue;
                        prel.css({
                            height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
                            width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
                        });
                    };
                },
                _renderProxy: function () {
                    var el = this.element,
                        o = this.options;
                    this.elementOffset = el.offset();
                    if (this._helper) {
                        this.helper = this.helper || $('<div style="overflow:hidden;"></div>');
                        var ie6 = $.browser.msie && $.browser.version < 7,
                            ie6offset = (ie6 ? 1 : 0),
                            pxyoffset = (ie6 ? 2 : -1);
                        this.helper.addClass(this._helper).css({
                            width: this.element.outerWidth() + pxyoffset,
                            height: this.element.outerHeight() + pxyoffset,
                            position: 'absolute',
                            left: this.elementOffset.left - ie6offset + 'px',
                            top: this.elementOffset.top - ie6offset + 'px',
                            zIndex: ++o.zIndex
                        });
                        this.helper.appendTo("body").disableSelection();
                    } else {
                        this.helper = this.element;
                    }
                },
                _change: {
                    e: function (event, dx, dy) {
                        return {
                            width: this.originalSize.width + dx
                        };
                    },
                    w: function (event, dx, dy) {
                        var o = this.options,
                            cs = this.originalSize,
                            sp = this.originalPosition;
                        return {
                            left: sp.left + dx,
                            width: cs.width - dx
                        };
                    },
                    n: function (event, dx, dy) {
                        var o = this.options,
                            cs = this.originalSize,
                            sp = this.originalPosition;
                        return {
                            top: sp.top + dy,
                            height: cs.height - dy
                        };
                    },
                    s: function (event, dx, dy) {
                        return {
                            height: this.originalSize.height + dy
                        };
                    },
                    se: function (event, dx, dy) {
                        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
                    },
                    sw: function (event, dx, dy) {
                        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
                    },
                    ne: function (event, dx, dy) {
                        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
                    },
                    nw: function (event, dx, dy) {
                        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
                    }
                },
                _propagate: function (n, event) {
                    $.ui.plugin.call(this, n, [event, this.ui()]);
                    (n != "resize" && this._trigger(n, event, this.ui()));
                },
                plugins: {},
                ui: function () {
                    return {
                        originalElement: this.originalElement,
                        element: this.element,
                        helper: this.helper,
                        position: this.position,
                        size: this.size,
                        originalSize: this.originalSize,
                        originalPosition: this.originalPosition
                    };
                }
            });
            $.extend($.ui.resizable, {
                version: "@VERSION"
            });
            $.ui.plugin.add("resizable", "alsoResize", {
                start: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options;
                    var _store = function (exp) {
                        $(exp).each(function () {
                            var el = $(this);
                            el.data("resizable-alsoresize", {
                                width: parseInt(el.width(), 10),
                                height: parseInt(el.height(), 10),
                                left: parseInt(el.css('left'), 10),
                                top: parseInt(el.css('top'), 10),
                                position: el.css('position')
                            });
                        });
                    };
                    if (typeof (o.alsoResize) == 'object' && !o.alsoResize.parentNode) {
                        if (o.alsoResize.length) {
                            o.alsoResize = o.alsoResize[0];
                            _store(o.alsoResize);
                        } else {
                            $.each(o.alsoResize, function (exp) {
                                _store(exp);
                            });
                        }
                    } else {
                        _store(o.alsoResize);
                    }
                },
                resize: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options,
                        os = self.originalSize,
                        op = self.originalPosition;
                    var delta = {
                        height: (self.size.height - os.height) || 0,
                        width: (self.size.width - os.width) || 0,
                        top: (self.position.top - op.top) || 0,
                        left: (self.position.left - op.left) || 0
                    }, _alsoResize = function (exp, c) {
                            $(exp).each(function () {
                                var el = $(this),
                                    start = $(this).data("resizable-alsoresize"),
                                    style = {}, css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ['width', 'height'] : ['width', 'height', 'top', 'left'];
                                $.each(css, function (i, prop) {
                                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                                    if (sum && sum >= 0)
                                        style[prop] = sum || null;
                                });
                                if ($.browser.opera && /relative/.test(el.css('position'))) {
                                    self._revertToRelativePosition = true;
                                    el.css({
                                        position: 'absolute',
                                        top: 'auto',
                                        left: 'auto'
                                    });
                                }
                                el.css(style);
                            });
                        };
                    if (typeof (o.alsoResize) == 'object' && !o.alsoResize.nodeType) {
                        $.each(o.alsoResize, function (exp, c) {
                            _alsoResize(exp, c);
                        });
                    } else {
                        _alsoResize(o.alsoResize);
                    }
                },
                stop: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options;
                    var _reset = function (exp) {
                        $(exp).each(function () {
                            var el = $(this);
                            el.css({
                                position: el.data("resizable-alsoresize").position
                            });
                        });
                    }
                    if (self._revertToRelativePosition) {
                        self._revertToRelativePosition = false;
                        if (typeof (o.alsoResize) == 'object' && !o.alsoResize.nodeType) {
                            $.each(o.alsoResize, function (exp) {
                                _reset(exp);
                            });
                        } else {
                            _reset(o.alsoResize);
                        }
                    }
                    $(this).removeData("resizable-alsoresize");
                }
            });
            $.ui.plugin.add("resizable", "animate", {
                stop: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options;
                    var pr = self._proportionallyResizeElements,
                        ista = pr.length && (/textarea/i).test(pr[0].nodeName),
                        soffseth = ista && $.ui.hasScroll(pr[0], 'left') ? 0 : self.sizeDiff.height,
                        soffsetw = ista ? 0 : self.sizeDiff.width;
                    var style = {
                        width: (self.size.width - soffsetw),
                        height: (self.size.height - soffseth)
                    }, left = (parseInt(self.element.css('left'), 10) + (self.position.left - self.originalPosition.left)) || null,
                        top = (parseInt(self.element.css('top'), 10) + (self.position.top - self.originalPosition.top)) || null;
                    self.element.animate($.extend(style, top && left ? {
                        top: top,
                        left: left
                    } : {}), {
                        duration: o.animateDuration,
                        easing: o.animateEasing,
                        step: function () {
                            var data = {
                                width: parseInt(self.element.css('width'), 10),
                                height: parseInt(self.element.css('height'), 10),
                                top: parseInt(self.element.css('top'), 10),
                                left: parseInt(self.element.css('left'), 10)
                            };
                            if (pr && pr.length) $(pr[0]).css({
                                    width: data.width,
                                    height: data.height
                                });
                            self._updateCache(data);
                            self._propagate("resize", event);
                        }
                    });
                }
            });
            $.ui.plugin.add("resizable", "containment", {
                start: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options,
                        el = self.element;
                    var oc = o.containment,
                        ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;
                    if (!ce) return;
                    self.containerElement = $(ce);
                    if (/document/.test(oc) || oc == document) {
                        self.containerOffset = {
                            left: 0,
                            top: 0
                        };
                        self.containerPosition = {
                            left: 0,
                            top: 0
                        };
                        self.parentData = {
                            element: $(document),
                            left: 0,
                            top: 0,
                            width: $(document).width(),
                            height: $(document).height() || document.body.parentNode.scrollHeight
                        };
                    } else {
                        var element = $(ce),
                            p = [];
                        $(["Top", "Right", "Left", "Bottom"]).each(function (i, name) {
                            p[i] = num(element.css("padding" + name));
                        });
                        self.containerOffset = element.offset();
                        self.containerPosition = element.position();
                        self.containerSize = {
                            height: (element.innerHeight() - p[3]),
                            width: (element.innerWidth() - p[1])
                        };
                        var co = self.containerOffset,
                            ch = self.containerSize.height,
                            cw = self.containerSize.width,
                            width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw),
                            height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);
                        self.parentData = {
                            element: ce,
                            left: co.left,
                            top: co.top,
                            width: width,
                            height: height
                        };
                    }
                },
                resize: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options,
                        ps = self.containerSize,
                        co = self.containerOffset,
                        cs = self.size,
                        cp = self.position,
                        pRatio = self._aspectRatio || event.shiftKey,
                        cop = {
                            top: 0,
                            left: 0
                        }, ce = self.containerElement;
                    if (ce[0] != document && (/static/).test(ce.css('position'))) cop = co;
                    if (cp.left < (self._helper ? co.left : 0)) {
                        self.size.width = self.size.width + (self._helper ? (self.position.left - co.left) : (self.position.left - cop.left));
                        if (pRatio) self.size.height = self.size.width / o.aspectRatio;
                        self.position.left = o.helper ? co.left : 0;
                    }
                    if (cp.top < (self._helper ? co.top : 0)) {
                        self.size.height = self.size.height + (self._helper ? (self.position.top - co.top) : self.position.top);
                        if (pRatio) self.size.width = self.size.height * o.aspectRatio;
                        self.position.top = self._helper ? co.top : 0;
                    }
                    self.offset.left = self.parentData.left + self.position.left;
                    self.offset.top = self.parentData.top + self.position.top;
                    var woset = Math.abs((self._helper ? self.offset.left - cop.left : (self.offset.left - cop.left)) + self.sizeDiff.width),
                        hoset = Math.abs((self._helper ? self.offset.top - cop.top : (self.offset.top - co.top)) + self.sizeDiff.height);
                    var isParent = self.containerElement.get(0) == self.element.parent().get(0),
                        isOffsetRelative = /relative|absolute/.test(self.containerElement.css('position'));
                    if (isParent && isOffsetRelative) woset -= self.parentData.left;
                    if (woset + self.size.width >= self.parentData.width) {
                        self.size.width = self.parentData.width - woset;
                        if (pRatio) self.size.height = self.size.width / self.aspectRatio;
                    }
                    if (hoset + self.size.height >= self.parentData.height) {
                        self.size.height = self.parentData.height - hoset;
                        if (pRatio) self.size.width = self.size.height * self.aspectRatio;
                    }
                },
                stop: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options,
                        cp = self.position,
                        co = self.containerOffset,
                        cop = self.containerPosition,
                        ce = self.containerElement;
                    var helper = $(self.helper),
                        ho = helper.offset(),
                        w = helper.outerWidth() - self.sizeDiff.width,
                        h = helper.outerHeight() - self.sizeDiff.height;
                    if (self._helper && !o.animate && (/relative/).test(ce.css('position')))
                        $(this).css({
                            left: ho.left - cop.left - co.left,
                            width: w,
                            height: h
                        });
                    if (self._helper && !o.animate && (/static/).test(ce.css('position')))
                        $(this).css({
                            left: ho.left - cop.left - co.left,
                            width: w,
                            height: h
                        });
                }
            });
            $.ui.plugin.add("resizable", "ghost", {
                start: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options,
                        cs = self.size;
                    self.ghost = self.originalElement.clone();
                    self.ghost.css({
                        opacity: .25,
                        display: 'block',
                        position: 'relative',
                        height: cs.height,
                        width: cs.width,
                        margin: 0,
                        left: 0,
                        top: 0
                    }).addClass('ui-resizable-ghost').addClass(typeof o.ghost == 'string' ? o.ghost : '');
                    self.ghost.appendTo(self.helper);
                },
                resize: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options;
                    if (self.ghost) self.ghost.css({
                            position: 'relative',
                            height: self.size.height,
                            width: self.size.width
                        });
                },
                stop: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options;
                    if (self.ghost && self.helper) self.helper.get(0).removeChild(self.ghost.get(0));
                }
            });
            $.ui.plugin.add("resizable", "grid", {
                resize: function (event, ui) {
                    var self = $(this).data("resizable"),
                        o = self.options,
                        cs = self.size,
                        os = self.originalSize,
                        op = self.originalPosition,
                        a = self.axis,
                        ratio = o._aspectRatio || event.shiftKey;
                    o.grid = typeof o.grid == "number" ? [o.grid, o.grid] : o.grid;
                    var ox = Math.round((cs.width - os.width) / (o.grid[0] || 1)) * (o.grid[0] || 1),
                        oy = Math.round((cs.height - os.height) / (o.grid[1] || 1)) * (o.grid[1] || 1);
                    if (/^(se|s|e)$/.test(a)) {
                        self.size.width = os.width + ox;
                        self.size.height = os.height + oy;
                    } else if (/^(ne)$/.test(a)) {
                        self.size.width = os.width + ox;
                        self.size.height = os.height + oy;
                        self.position.top = op.top - oy;
                    } else if (/^(sw)$/.test(a)) {
                        self.size.width = os.width + ox;
                        self.size.height = os.height + oy;
                        self.position.left = op.left - ox;
                    } else {
                        self.size.width = os.width + ox;
                        self.size.height = os.height + oy;
                        self.position.top = op.top - oy;
                        self.position.left = op.left - ox;
                    }
                }
            });
            var num = function (v) {
                return parseInt(v, 10) || 0;
            };
            var isNumber = function (value) {
                return !isNaN(parseInt(value, 10));
            };
        })(jQuery);
        (function ($, undefined) {
            var uiDialogClasses = 'ui-dialog ' + 'ui-widget ' + 'ui-widget-content ' + 'ui-corner-all ';
            $.widget("ui.dialog", {
                options: {
                    autoOpen: true,
                    buttons: {},
                    closeOnEscape: true,
                    closeText: 'close',
                    dialogClass: '',
                    draggable: true,
                    hide: null,
                    height: 'auto',
                    maxHeight: false,
                    maxWidth: false,
                    minHeight: 150,
                    minWidth: 150,
                    modal: false,
                    position: {
                        my: 'center',
                        at: 'center',
                        of: window,
                        collision: 'fit',
                        using: function (pos) {
                            var topOffset = $(this).css(pos).offset().top;
                            if (topOffset < 0) {
                                $(this).css('top', pos.top - topOffset);
                            }
                        }
                    },
                    resizable: true,
                    show: null,
                    stack: true,
                    title: '',
                    width: 300,
                    zIndex: 1000
                },
                _create: function () {
                    this.originalTitle = this.element.attr('title');
                    if (typeof this.originalTitle !== "string") {
                        this.originalTitle = "";
                    }
                    //// console.log(document);
                    $(document).find('.form-data-container').remove();
                    var self = this,
                        options = self.options,
                        title = options.title || self.originalTitle || '&#160;',
                        titleId = $.ui.dialog.getTitleId(self.element),
                        uiDialog = (self.uiDialog = $('<div id= "general-form-container" style="margin:0px!important" class="clearfix"></div>')).appendTo(document.body).hide().addClass(uiDialogClasses + options.dialogClass).css({
                            zIndex: options.zIndex
                        }).attr('tabIndex', -1).css('outline', 0).keydown(function (event) {
                            if (options.closeOnEscape && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                                self.close(event);
                                event.preventDefault();
                            }
                            if (options.modal) {
                                event.stopPropagation();
                            }
                        }).attr({
                            role: 'dialog',
                            'aria-labelledby': titleId
                        }).mousedown(function (event) {
                            self.moveToTop(false, event);
                        }),
                        uiDialogBackground = $('<div class="Kj-JD-Jh gini-popup-dialog" style="opacity:  0.2!important;background:#000!important; width: 100%!important; height: 100%!important;" aria-hidden="true"></div>').appendTo(document.body),
                        uiDialogContent = self.element.show().removeAttr('title').addClass('form-data-container ui-dialog-content ' + 'ui-widget-content').appendTo(uiDialog),
                        uiDialogTitlebar = (self.uiDialogTitlebar = $('<div></div>')).addClass('general-form-heading ui-dialog-titlebar ' + 'ui-widget-header ' + 'ui-corner-all ' + 'ui-helper-clearfix').prependTo(uiDialog),
                        uiDialogTitlebarClose = $('<div class="close_btn"><a href="#" title="close"></a></div>').addClass('ui-dialog-titlebar-close' + 'ui-corner-all').attr('role', 'button').hover(function () {
                            uiDialogTitlebarClose.addClass('ui-state-hover');
                        }, function () {
                            uiDialogTitlebarClose.removeClass('ui-state-hover');
                        }).focus(function () {
                            uiDialogTitlebarClose.addClass('ui-state-focus');
                        }).blur(function () {
                            uiDialogTitlebarClose.removeClass('ui-state-focus');
                        }).click(function (event) {
                            self.close(event);
                            return false;
                        }).appendTo(uiDialogTitlebar),
                        //uiDialogTitlebarCloseText = (self.uiDialogTitlebarCloseText = $('<span class="close_btn"></span>')).addClass('ui-icon ' + 'ui-icon-closethick').text(options.closeText).appendTo(uiDialogTitlebarClose),
                        uiDialogTitle = $('<span></span>').addClass('heading ui-dialog-title').attr('id', titleId).html('<h3>'+title+'</h3>').prependTo(uiDialogTitlebar);
                    if ($.isFunction(options.beforeclose) && !$.isFunction(options.beforeClose)) {
                        options.beforeClose = options.beforeclose;
                    }
                    uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();
                    // if (options.draggable && $.fn.draggable) {
                    //     self._makeDraggable();
                    // }
                    // if (options.resizable && $.fn.resizable) {
                    //     self._makeResizable();
                    // }
                    self._createButtons(options.buttons);
                    self._isOpen = false;
                    if ($.fn.bgiframe) {
                        uiDialog.bgiframe();
                    }
                },
                _init: function () {
                    if (this.options.autoOpen) {
                        this.open();
                    }
                },
                destroy: function () {
                    //alert('Destroying...');
                    var self = this;
                    if (self.overlay) {
                        self.overlay.destroy();
                    }
                    self.uiDialog.hide();
                    self.element.unbind('.dialog').removeData('dialog').removeClass('ui-dialog-content ui-widget-content').hide().appendTo('body');
                    self.uiDialog.remove();
                    if (self.originalTitle) {
                        self.element.attr('title', self.originalTitle);
                    }
                    return self;
                },
                widget: function () {
                    return this.uiDialog;
                },
                close: function (event) {
                    var self = this,
                        maxZ;
                    if (false === self._trigger('beforeClose', event)) {
                        return;
                    }
                    if (self.overlay) {
                        self.overlay.destroy();
                    }
                    self.uiDialog.unbind('keydown.ui-dialog');
                    self._isOpen = false;
                    if (self.options.hide) {
                        self.uiDialog.hide(self.options.hide, function () {
                            self._trigger('close', event);
                        });
                    } else {
                        $('.gini-popup-dialog').remove();
                        self.uiDialog.hide();
                        self._trigger('close', event);
                    }
                    $.ui.dialog.overlay.resize();
                    if (self.options.modal) {
                        maxZ = 0;
                        $('.ui-dialog').each(function () {
                            if (this !== self.uiDialog[0]) {
                                maxZ = Math.max(maxZ, $(this).css('z-index'));
                            }
                        });
                        $.ui.dialog.maxZ = maxZ;
                    }
                    if (jQuery.contains(self.uiDialog[0], document.activeElement)) {
                        jQuery(document.activeElement).blur();
                    }
                    return self;
                },
                isOpen: function () {
                    return this._isOpen;
                },
                moveToTop: function (force, event) {
                    var self = this,
                        options = self.options,
                        saveScroll;
                    if ((options.modal && !force) || (!options.stack && !options.modal)) {
                        return self._trigger('focus', event);
                    }
                    if (options.zIndex > $.ui.dialog.maxZ) {
                        $.ui.dialog.maxZ = options.zIndex;
                    }
                    if (self.overlay) {
                        $.ui.dialog.maxZ += 1;
                        self.overlay.$el.css('z-index', $.ui.dialog.overlay.maxZ = $.ui.dialog.maxZ);
                    }
                    saveScroll = {
                        scrollTop: self.element.attr('scrollTop'),
                        scrollLeft: self.element.attr('scrollLeft')
                    };
                    $.ui.dialog.maxZ += 1;
                    self.uiDialog.css('z-index', $.ui.dialog.maxZ);
                    self.element.attr(saveScroll);
                    self._trigger('focus', event);
                    return self;
                },
                open: function () {
                    if (this._isOpen) {
                        return;
                    }
                    var self = this,
                        options = self.options,
                        uiDialog = self.uiDialog;
                    self.overlay = options.modal ? new $.ui.dialog.overlay(self) : null;
                    if (uiDialog.next().length) {
                        uiDialog.appendTo('body');
                        $('<div class="Kj-JD-Jh gini-popup-dialog" style="opacity:  0.2!important; background:#000!important; width: 100%!important; height: 100%!important;" aria-hidden="true"></div>').appendTo(document.body);
                    }
                    self._size();
                    self._position(options.position);
                    uiDialog.show(options.show);
                    self.moveToTop(true);
                    if (options.modal) {
                        uiDialog.bind('keydown.ui-dialog', function (event) {
                            if (event.keyCode !== $.ui.keyCode.TAB) {
                                return;
                            }
                            var tabbables = $(':tabbable', this),
                                first = tabbables.filter(':first'),
                                last = tabbables.filter(':last');
                            if (event.target === last[0] && !event.shiftKey) {
                                last.blur();
                                first.focus(1);
                                return false;
                            } else if (event.target === first[0] && event.shiftKey) {
                                first.blur();
                                last.focus(1);
                                return false;
                            }
                        });
                    }
                    uiDialog.focus();
                    self._trigger('open');
                    self._isOpen = true;
                    return self;
                },
                _createButtons: function (buttons) {
                    var self = this,
                        hasButtons = false,
                        uiDialogButtonPane = $('<div></div>').addClass('submit-box ui-dialog-buttonpane ' + 'ui-widget-content ' + 'ui-helper-clearfix'),
                        uiButtonSet = $("<div></div>").addClass("ui-dialog-buttonset").appendTo(uiDialogButtonPane);
                    self.uiDialog.find('.ui-dialog-buttonpane').remove();
                    if (typeof buttons === 'object' && buttons !== null) {
                        $.each(buttons, function () {
                            return !(hasButtons = true);
                        });
                    }
                    if (hasButtons) {
                        $.each(buttons, function (name, fn) {
                            var button = $('<button type="button"></button>').text(name).click(function () {
                                fn.apply(self.element[0], arguments);
                            }).appendTo(uiButtonSet);
                            if ($.fn.button) {
                                button.button();
                            }
                        });
                        uiDialogButtonPane.appendTo(self.uiDialog);
                    }
                },
                _makeDraggable: function () {
                    var self = this,
                        options = self.options,
                        doc = $(document),
                        heightBeforeDrag;

                    function filteredUi(ui) {
                        return {
                            position: ui.position,
                            offset: ui.offset
                        };
                    }
                    self.uiDialog.draggable({
                        cancel: '.ui-dialog-content, .ui-dialog-titlebar-close',
                        handle: '.ui-dialog-titlebar',
                        containment: 'document',
                        start: function (event, ui) {
                            heightBeforeDrag = options.height === "auto" ? "auto" : $(this).height();
                            $(this).height($(this).height()).addClass("ui-dialog-dragging");
                            self._trigger('dragStart', event, filteredUi(ui));
                        },
                        drag: function (event, ui) {
                            self._trigger('drag', event, filteredUi(ui));
                        },
                        stop: function (event, ui) {
                            options.position = [ui.position.left - doc.scrollLeft(), ui.position.top - doc.scrollTop()];
                            $(this).removeClass("ui-dialog-dragging").height(heightBeforeDrag);
                            self._trigger('dragStop', event, filteredUi(ui));
                            $.ui.dialog.overlay.resize();
                        }
                    });
                },
                _makeResizable: function (handles) {
                    handles = (handles === undefined ? this.options.resizable : handles);
                    var self = this,
                        options = self.options,
                        position = self.uiDialog.css('position'),
                        resizeHandles = (typeof handles === 'string' ? handles : 'n,e,s,w,se,sw,ne,nw');

                    function filteredUi(ui) {
                        return {
                            originalPosition: ui.originalPosition,
                            originalSize: ui.originalSize,
                            position: ui.position,
                            size: ui.size
                        };
                    }
                    self.uiDialog.resizable({
                        cancel: '.ui-dialog-content',
                        containment: 'document',
                        alsoResize: self.element,
                        maxWidth: options.maxWidth,
                        maxHeight: options.maxHeight,
                        minWidth: options.minWidth,
                        minHeight: self._minHeight(),
                        handles: resizeHandles,
                        start: function (event, ui) {
                            $(this).addClass("ui-dialog-resizing");
                            self._trigger('resizeStart', event, filteredUi(ui));
                        },
                        resize: function (event, ui) {
                            self._trigger('resize', event, filteredUi(ui));
                        },
                        stop: function (event, ui) {
                            $(this).removeClass("ui-dialog-resizing");
                            options.height = $(this).height();
                            options.width = $(this).width();
                            self._trigger('resizeStop', event, filteredUi(ui));
                            $.ui.dialog.overlay.resize();
                        }
                    }).css('position', position).find('.ui-resizable-se').addClass('ui-icon ui-icon-grip-diagonal-se');
                },
                _minHeight: function () {
                    var options = this.options;
                    if (options.height === 'auto') {
                        return options.minHeight;
                    } else {
                        return Math.min(options.minHeight, options.height);
                    }
                },
                _position: function (position) {
                    var myAt = [],
                        offset = [0, 0],
                        isVisible;
                    if (position) {
                        if (typeof position === 'string' || (typeof position === 'object' && '0' in position)) {
                            myAt = position.split ? position.split(' ') : [position[0], position[1]];
                            if (myAt.length === 1) {
                                myAt[1] = myAt[0];
                            }
                            $.each(['left', 'top'], function (i, offsetPosition) {
                                if (+myAt[i] === myAt[i]) {
                                    offset[i] = myAt[i];
                                    myAt[i] = offsetPosition;
                                }
                            });
                            position = {
                                my: myAt.join(" "),
                                at: myAt.join(" "),
                                offset: offset.join(" ")
                            };
                        }
                        position = $.extend({}, $.ui.dialog.prototype.options.position, position);
                    } else {
                        position = $.ui.dialog.prototype.options.position;
                    }
                    isVisible = this.uiDialog.is(':visible');
                    if (!isVisible) {
                        this.uiDialog.show();
                    }
                    this.uiDialog.css({
                        top: 0,
                        left: 0
                    }).position(position);
                    if (!isVisible) {
                        this.uiDialog.hide();
                    }
                },
                _setOption: function (key, value) {
                    var self = this,
                        uiDialog = self.uiDialog,
                        isResizable = uiDialog.is(':data(resizable)'),
                        resize = false;
                    switch (key) {
                    case "beforeclose":
                        key = "beforeClose";
                        break;
                    case "buttons":
                        self._createButtons(value);
                        resize = true;
                        break;
                    case "closeText":
                        self.uiDialogTitlebarCloseText.text("" + value);
                        break;
                    case "dialogClass":
                        uiDialog.removeClass(self.options.dialogClass).addClass(uiDialogClasses + value);
                        break;
                    case "disabled":
                        if (value) {
                            uiDialog.addClass('ui-dialog-disabled');
                        } else {
                            uiDialog.removeClass('ui-dialog-disabled');
                        }
                        break;
                    case "draggable":
                        if (value) {
                            // self._makeDraggable();
                        } else {
                            uiDialog.draggable('destroy');
                        }
                        break;
                    case "height":
                        resize = true;
                        break;
                    case "maxHeight":
                        if (isResizable) {
                            uiDialog.resizable('option', 'maxHeight', value);
                        }
                        resize = true;
                        break;
                    case "maxWidth":
                        if (isResizable) {
                            uiDialog.resizable('option', 'maxWidth', value);
                        }
                        resize = true;
                        break;
                    case "minHeight":
                        if (isResizable) {
                            uiDialog.resizable('option', 'minHeight', value);
                        }
                        resize = true;
                        break;
                    case "minWidth":
                        if (isResizable) {
                            uiDialog.resizable('option', 'minWidth', value);
                        }
                        resize = true;
                        break;
                    case "position":
                        self._position(value);
                        break;
                    case "resizable":
                        if (isResizable && !value) {
                            uiDialog.resizable('destroy');
                        }
                        if (isResizable && typeof value === 'string') {
                            uiDialog.resizable('option', 'handles', value);
                        }
                        if (!isResizable && value !== false) {
                            self._makeResizable(value);
                        }
                        break;
                    case "title":
                        $(".ui-dialog-title", self.uiDialogTitlebar).html('<h3>' + "" + (value || '&#160;') + '</h3>');
                        break;
                    case "width":
                        resize = true;
                        break;
                    }
                    $.Widget.prototype._setOption.apply(self, arguments);
                    if (resize) {
                        self._size();
                    }
                },
                _size: function () {
                    var options = this.options,
                        nonContentHeight;
                    this.element.css({
                        //width: 'auto',
                        minHeight: 0,
                        height: 0
                    });
                    if (options.minWidth > options.width) {
                        options.width = options.minWidth;
                    }
                    nonContentHeight = this.uiDialog.css({
                        height: 'auto',
                        width: options.width
                    }).height();
                    this.element.css(options.height === 'auto' ? {
                        minHeight: Math.max(options.minHeight - nonContentHeight, 0),
                        height: 'auto'
                    } : {
                        minHeight: 0,
                        height: Math.max(options.height - nonContentHeight, 0)
                    }).show();
                    if (this.uiDialog.is(':data(resizable)')) {
                        this.uiDialog.resizable('option', 'minHeight', this._minHeight());
                    }
                }
            });
            $.extend($.ui.dialog, {
                version: "@VERSION",
                uuid: 0,
                maxZ: 0,
                getTitleId: function ($el) {
                    var id = $el.attr('id');
                    if (!id) {
                        this.uuid += 1;
                        id = this.uuid;
                    }
                    return 'ui-dialog-title-' + id;
                },
                overlay: function (dialog) {
                    this.$el = $.ui.dialog.overlay.create(dialog);
                }
            });
            $.extend($.ui.dialog.overlay, {
                instances: [],
                oldInstances: [],
                maxZ: 0,
                events: $.map('focus,mousedown,mouseup,keydown,keypress,click'.split(','), function (event) {
                    return event + '.dialog-overlay';
                }).join(' '),
                create: function (dialog) {
                    if (this.instances.length === 0) {
                        setTimeout(function () {
                            if ($.ui.dialog.overlay.instances.length) {
                                $(document).bind($.ui.dialog.overlay.events, function (event) {
                                    return ($(event.target).zIndex() >= $.ui.dialog.overlay.maxZ);
                                });
                            }
                        }, 1);
                        $(document).bind('keydown.dialog-overlay', function (event) {
                            if (dialog.options.closeOnEscape && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                                dialog.close(event);
                                event.preventDefault();
                            }
                        });
                        $(window).bind('resize.dialog-overlay', $.ui.dialog.overlay.resize);
                    }
                    var $el = (this.oldInstances.pop() || $('<div></div>').addClass('ui-widget-overlay')).appendTo(document.body).css({
                        width: this.width(),
                        height: this.height()
                    });
                    if ($.fn.bgiframe) {
                        $el.bgiframe();
                    }
                    this.instances.push($el);
                    return $el;
                },
                destroy: function ($el) {
                    this.oldInstances.push(this.instances.splice($.inArray($el, this.instances), 1)[0]);
                    if (this.instances.length === 0) {
                        $([document, window]).unbind('.dialog-overlay');
                    }
                    $el.remove();
                    var maxZ = 0;
                    $.each(this.instances, function () {
                        maxZ = Math.max(maxZ, this.css('z-index'));
                    });
                    this.maxZ = maxZ;
                },
                height: function () {
                    var scrollHeight, offsetHeight;
                    if ($.browser.msie && $.browser.version < 7) {
                        scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
                        offsetHeight = Math.max(document.documentElement.offsetHeight, document.body.offsetHeight);
                        if (scrollHeight < offsetHeight) {
                            return $(window).height() + 'px';
                        } else {
                            return scrollHeight + 'px';
                        }
                    } else {
                        return $(document).height() + 'px';
                    }
                },
                width: function () {
                    var scrollWidth, offsetWidth;
                    if ($.browser.msie && $.browser.version < 7) {
                        scrollWidth = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
                        offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);
                        if (scrollWidth < offsetWidth) {
                            return $(window).width() + 'px';
                        } else {
                            return scrollWidth + 'px';
                        }
                    } else {
                        return $(document).width() + 'px';
                    }
                },
                resize: function () {
                    var $overlays = $([]);
                    $.each($.ui.dialog.overlay.instances, function () {
                        $overlays = $overlays.add(this);
                    });
                    $overlays.css({
                        width: 0,
                        height: 0
                    }).css({
                        width: $.ui.dialog.overlay.width(),
                        height: $.ui.dialog.overlay.height()
                    });
                }
            });
            $.extend($.ui.dialog.overlay.prototype, {
                destroy: function () {
                    $.ui.dialog.overlay.destroy(this.$el);
                }
            });
        }(jQuery));;
        jQuery.effects || (function ($, undefined) {
            $.effects = {};
            $.each(['backgroundColor', 'borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'color', 'outlineColor'], function (i, attr) {
                $.fx.step[attr] = function (fx) {
                    if (!fx.colorInit) {
                        fx.start = getColor(fx.elem, attr);
                        fx.end = getRGB(fx.end);
                        fx.colorInit = true;
                    }
                    fx.elem.style[attr] = 'rgb(' +
                        Math.max(Math.min(parseInt((fx.pos * (fx.end[0] - fx.start[0])) + fx.start[0], 10), 255), 0) + ',' +
                        Math.max(Math.min(parseInt((fx.pos * (fx.end[1] - fx.start[1])) + fx.start[1], 10), 255), 0) + ',' +
                        Math.max(Math.min(parseInt((fx.pos * (fx.end[2] - fx.start[2])) + fx.start[2], 10), 255), 0) + ')';
                };
            });

            function getRGB(color) {
                var result;
                if (color && color.constructor == Array && color.length == 3)
                    return color;
                if (result = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(color))
                    return [parseInt(result[1], 10), parseInt(result[2], 10), parseInt(result[3], 10)];
                if (result = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(color))
                    return [parseFloat(result[1]) * 2.55, parseFloat(result[2]) * 2.55, parseFloat(result[3]) * 2.55];
                if (result = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(color))
                    return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
                if (result = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(color))
                    return [parseInt(result[1] + result[1], 16), parseInt(result[2] + result[2], 16), parseInt(result[3] + result[3], 16)];
                if (result = /rgba\(0, 0, 0, 0\)/.exec(color))
                    return colors['transparent'];
                return colors[$.trim(color).toLowerCase()];
            }

            function getColor(elem, attr) {
                var color;
                do {
                    color = $.curCSS(elem, attr);
                    if (color != '' && color != 'transparent' || $.nodeName(elem, "body"))
                        break;
                    attr = "backgroundColor";
                } while (elem = elem.parentNode);
                return getRGB(color);
            };
            var colors = {
                aqua: [0, 255, 255],
                azure: [240, 255, 255],
                beige: [245, 245, 220],
                black: [0, 0, 0],
                blue: [0, 0, 255],
                brown: [165, 42, 42],
                cyan: [0, 255, 255],
                darkblue: [0, 0, 139],
                darkcyan: [0, 139, 139],
                darkgrey: [169, 169, 169],
                darkgreen: [0, 100, 0],
                darkkhaki: [189, 183, 107],
                darkmagenta: [139, 0, 139],
                darkolivegreen: [85, 107, 47],
                darkorange: [255, 140, 0],
                darkorchid: [153, 50, 204],
                darkred: [139, 0, 0],
                darksalmon: [233, 150, 122],
                darkviolet: [148, 0, 211],
                fuchsia: [255, 0, 255],
                gold: [255, 215, 0],
                green: [0, 128, 0],
                indigo: [75, 0, 130],
                khaki: [240, 230, 140],
                lightblue: [173, 216, 230],
                lightcyan: [224, 255, 255],
                lightgreen: [144, 238, 144],
                lightgrey: [211, 211, 211],
                lightpink: [255, 182, 193],
                lightyellow: [255, 255, 224],
                lime: [0, 255, 0],
                magenta: [255, 0, 255],
                maroon: [128, 0, 0],
                navy: [0, 0, 128],
                olive: [128, 128, 0],
                orange: [255, 165, 0],
                pink: [255, 192, 203],
                purple: [128, 0, 128],
                violet: [128, 0, 128],
                red: [255, 0, 0],
                silver: [192, 192, 192],
                white: [255, 255, 255],
                yellow: [255, 255, 0],
                transparent: [255, 255, 255]
            };
            var classAnimationActions = ['add', 'remove', 'toggle'],
                shorthandStyles = {
                    border: 1,
                    borderBottom: 1,
                    borderColor: 1,
                    borderLeft: 1,
                    borderRight: 1,
                    borderTop: 1,
                    borderWidth: 1,
                    margin: 1,
                    padding: 1
                };

            function getElementStyles() {
                var style = document.defaultView ? document.defaultView.getComputedStyle(this, null) : this.currentStyle,
                    newStyle = {}, key, camelCase;
                if (style && style.length && style[0] && style[style[0]]) {
                    var len = style.length;
                    while (len--) {
                        key = style[len];
                        if (typeof style[key] == 'string') {
                            camelCase = key.replace(/\-(\w)/g, function (all, letter) {
                                return letter.toUpperCase();
                            });
                            newStyle[camelCase] = style[key];
                        }
                    }
                } else {
                    for (key in style) {
                        if (typeof style[key] === 'string') {
                            newStyle[key] = style[key];
                        }
                    }
                }
                return newStyle;
            }

            function filterStyles(styles) {
                var name, value;
                for (name in styles) {
                    value = styles[name];
                    if (value == null || $.isFunction(value) || name in shorthandStyles || (/scrollbar/).test(name) || (!(/color/i).test(name) && isNaN(parseFloat(value)))) {
                        delete styles[name];
                    }
                }
                return styles;
            }

            function styleDifference(oldStyle, newStyle) {
                var diff = {
                    _: 0
                }, name;
                for (name in newStyle) {
                    if (oldStyle[name] != newStyle[name]) {
                        diff[name] = newStyle[name];
                    }
                }
                return diff;
            }
            $.effects.animateClass = function (value, duration, easing, callback) {
                if ($.isFunction(easing)) {
                    callback = easing;
                    easing = null;
                }
                return this.each(function () {
                    var that = $(this),
                        originalStyleAttr = that.attr('style') || ' ',
                        originalStyle = filterStyles(getElementStyles.call(this)),
                        newStyle, className = that.attr('className');
                    $.each(classAnimationActions, function (i, action) {
                        if (value[action]) {
                            that[action + 'Class'](value[action]);
                        }
                    });
                    newStyle = filterStyles(getElementStyles.call(this));
                    that.attr('className', className);
                    that.animate(styleDifference(originalStyle, newStyle), duration, easing, function () {
                        $.each(classAnimationActions, function (i, action) {
                            if (value[action]) {
                                that[action + 'Class'](value[action]);
                            }
                        });
                        if (typeof that.attr('style') == 'object') {
                            that.attr('style').cssText = '';
                            that.attr('style').cssText = originalStyleAttr;
                        } else {
                            that.attr('style', originalStyleAttr);
                        }
                        if (callback) {
                            callback.apply(this, arguments);
                        }
                    });
                });
            };
            $.fn.extend({
                _addClass: $.fn.addClass,
                addClass: function (classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.apply(this, [{
                            add: classNames
                        },
                        speed, easing, callback
                    ]) : this._addClass(classNames);
                },
                _removeClass: $.fn.removeClass,
                removeClass: function (classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.apply(this, [{
                            remove: classNames
                        },
                        speed, easing, callback
                    ]) : this._removeClass(classNames);
                },
                _toggleClass: $.fn.toggleClass,
                toggleClass: function (classNames, force, speed, easing, callback) {
                    if (typeof force == "boolean" || force === undefined) {
                        if (!speed) {
                            return this._toggleClass(classNames, force);
                        } else {
                            return $.effects.animateClass.apply(this, [(force ? {
                                    add: classNames
                                } : {
                                    remove: classNames
                                }), speed, easing, callback]);
                        }
                    } else {
                        return $.effects.animateClass.apply(this, [{
                                toggle: classNames
                            },
                            force, speed, easing
                        ]);
                    }
                },
                switchClass: function (remove, add, speed, easing, callback) {
                    return $.effects.animateClass.apply(this, [{
                            add: add,
                            remove: remove
                        },
                        speed, easing, callback
                    ]);
                }
            });
            $.extend($.effects, {
                version: "@VERSION",
                save: function (element, set) {
                    for (var i = 0; i < set.length; i++) {
                        if (set[i] !== null) element.data("ec.storage." + set[i], element[0].style[set[i]]);
                    }
                },
                restore: function (element, set) {
                    for (var i = 0; i < set.length; i++) {
                        if (set[i] !== null) element.css(set[i], element.data("ec.storage." + set[i]));
                    }
                },
                setMode: function (el, mode) {
                    if (mode == 'toggle') mode = el.is(':hidden') ? 'show' : 'hide';
                    return mode;
                },
                getBaseline: function (origin, original) {
                    var y, x;
                    switch (origin[0]) {
                    case 'top':
                        y = 0;
                        break;
                    case 'middle':
                        y = 0.5;
                        break;
                    case 'bottom':
                        y = 1;
                        break;
                    default:
                        y = origin[0] / original.height;
                    };
                    switch (origin[1]) {
                    case 'left':
                        x = 0;
                        break;
                    case 'center':
                        x = 0.5;
                        break;
                    case 'right':
                        x = 1;
                        break;
                    default:
                        x = origin[1] / original.width;
                    };
                    return {
                        x: x,
                        y: y
                    };
                },
                createWrapper: function (element) {
                    if (element.parent().is('.ui-effects-wrapper')) {
                        return element.parent();
                    }
                    var props = {
                        width: element.outerWidth(true),
                        height: element.outerHeight(true),
                        'float': element.css('float')
                    }, wrapper = $('<div></div>').addClass('ui-effects-wrapper').css({
                            fontSize: '100%',
                            background: 'transparent',
                            border: 'none',
                            margin: 0,
                            padding: 0
                        });
                    element.wrap(wrapper);
                    wrapper = element.parent();
                    if (element.css('position') == 'static') {
                        wrapper.css({
                            position: 'relative'
                        });
                        element.css({
                            position: 'relative'
                        });
                    } else {
                        $.extend(props, {
                            position: element.css('position'),
                            zIndex: element.css('z-index')
                        });
                        $.each(['top', 'left', 'bottom', 'right'], function (i, pos) {
                            props[pos] = element.css(pos);
                            if (isNaN(parseInt(props[pos], 10))) {
                                props[pos] = 'auto';
                            }
                        });
                        element.css({
                            position: 'relative',
                            top: 0,
                            left: 0
                        });
                    }
                    return wrapper.css(props).show();
                },
                removeWrapper: function (element) {
                    if (element.parent().is('.ui-effects-wrapper'))
                        return element.parent().replaceWith(element);
                    return element;
                },
                setTransition: function (element, list, factor, value) {
                    value = value || {};
                    $.each(list, function (i, x) {
                        unit = element.cssUnit(x);
                        if (unit[0] > 0) value[x] = unit[0] * factor + unit[1];
                    });
                    return value;
                }
            });

            function _normalizeArguments(effect, options, speed, callback) {
                if (typeof effect == 'object') {
                    callback = options;
                    speed = null;
                    options = effect;
                    effect = options.effect;
                }
                if ($.isFunction(options)) {
                    callback = options;
                    speed = null;
                    options = {};
                }
                if (typeof options == 'number' || $.fx.speeds[options]) {
                    callback = speed;
                    speed = options;
                    options = {};
                }
                if ($.isFunction(speed)) {
                    callback = speed;
                    speed = null;
                }
                options = options || {};
                speed = speed || options.duration;
                speed = $.fx.off ? 0 : typeof speed == 'number' ? speed : $.fx.speeds[speed] || $.fx.speeds._default;
                callback = callback || options.complete;
                return [effect, options, speed, callback];
            }
            $.fn.extend({
                effect: function (effect, options, speed, callback) {
                    var args = _normalizeArguments.apply(this, arguments),
                        args2 = {
                            options: args[1],
                            duration: args[2],
                            callback: args[3]
                        }, effectMethod = $.effects[effect];
                    return effectMethod && !$.fx.off ? effectMethod.call(this, args2) : this;
                },
                _show: $.fn.show,
                show: function (speed) {
                    if (!speed || typeof speed == 'number' || $.fx.speeds[speed]) {
                        return this._show.apply(this, arguments);
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args[1].mode = 'show';
                        return this.effect.apply(this, args);
                    }
                },
                _hide: $.fn.hide,
                hide: function (speed) {
                    if (!speed || typeof speed == 'number' || $.fx.speeds[speed]) {
                        return this._hide.apply(this, arguments);
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args[1].mode = 'hide';
                        return this.effect.apply(this, args);
                    }
                },
                __toggle: $.fn.toggle,
                toggle: function (speed) {
                    if (!speed || typeof speed == 'number' || $.fx.speeds[speed] || typeof speed == 'boolean' || $.isFunction(speed)) {
                        return this.__toggle.apply(this, arguments);
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args[1].mode = 'toggle';
                        return this.effect.apply(this, args);
                    }
                },
                cssUnit: function (key) {
                    var style = this.css(key),
                        val = [];
                    $.each(['em', 'px', '%', 'pt'], function (i, unit) {
                        if (style.indexOf(unit) > 0)
                            val = [parseFloat(style), unit];
                    });
                    return val;
                }
            });
            $.easing.jswing = $.easing.swing;
            $.extend($.easing, {
                def: 'easeOutQuad',
                swing: function (x, t, b, c, d) {
                    return $.easing[$.easing.def](x, t, b, c, d);
                },
                easeInQuad: function (x, t, b, c, d) {
                    return c * (t /= d) * t + b;
                },
                easeOutQuad: function (x, t, b, c, d) {
                    return -c * (t /= d) * (t - 2) + b;
                },
                easeInOutQuad: function (x, t, b, c, d) {
                    if ((t /= d / 2) < 1) return c / 2 * t * t + b;
                    return -c / 2 * ((--t) * (t - 2) - 1) + b;
                },
                easeInCubic: function (x, t, b, c, d) {
                    return c * (t /= d) * t * t + b;
                },
                easeOutCubic: function (x, t, b, c, d) {
                    return c * ((t = t / d - 1) * t * t + 1) + b;
                },
                easeInOutCubic: function (x, t, b, c, d) {
                    if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
                    return c / 2 * ((t -= 2) * t * t + 2) + b;
                },
                easeInQuart: function (x, t, b, c, d) {
                    return c * (t /= d) * t * t * t + b;
                },
                easeOutQuart: function (x, t, b, c, d) {
                    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
                },
                easeInOutQuart: function (x, t, b, c, d) {
                    if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
                    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
                },
                easeInQuint: function (x, t, b, c, d) {
                    return c * (t /= d) * t * t * t * t + b;
                },
                easeOutQuint: function (x, t, b, c, d) {
                    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
                },
                easeInOutQuint: function (x, t, b, c, d) {
                    if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
                    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
                },
                easeInSine: function (x, t, b, c, d) {
                    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
                },
                easeOutSine: function (x, t, b, c, d) {
                    return c * Math.sin(t / d * (Math.PI / 2)) + b;
                },
                easeInOutSine: function (x, t, b, c, d) {
                    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
                },
                easeInExpo: function (x, t, b, c, d) {
                    return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
                },
                easeOutExpo: function (x, t, b, c, d) {
                    return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
                },
                easeInOutExpo: function (x, t, b, c, d) {
                    if (t == 0) return b;
                    if (t == d) return b + c;
                    if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
                    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
                },
                easeInCirc: function (x, t, b, c, d) {
                    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
                },
                easeOutCirc: function (x, t, b, c, d) {
                    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
                },
                easeInOutCirc: function (x, t, b, c, d) {
                    if ((t /= d / 2) < 1) return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
                    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
                },
                easeInElastic: function (x, t, b, c, d) {
                    var s = 1.70158;
                    var p = 0;
                    var a = c;
                    if (t == 0) return b;
                    if ((t /= d) == 1) return b + c;
                    if (!p) p = d * .3;
                    if (a < Math.abs(c)) {
                        a = c;
                        var s = p / 4;
                    } else var s = p / (2 * Math.PI) * Math.asin(c / a);
                    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
                },
                easeOutElastic: function (x, t, b, c, d) {
                    var s = 1.70158;
                    var p = 0;
                    var a = c;
                    if (t == 0) return b;
                    if ((t /= d) == 1) return b + c;
                    if (!p) p = d * .3;
                    if (a < Math.abs(c)) {
                        a = c;
                        var s = p / 4;
                    } else var s = p / (2 * Math.PI) * Math.asin(c / a);
                    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
                },
                easeInOutElastic: function (x, t, b, c, d) {
                    var s = 1.70158;
                    var p = 0;
                    var a = c;
                    if (t == 0) return b;
                    if ((t /= d / 2) == 2) return b + c;
                    if (!p) p = d * (.3 * 1.5);
                    if (a < Math.abs(c)) {
                        a = c;
                        var s = p / 4;
                    } else var s = p / (2 * Math.PI) * Math.asin(c / a);if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
                    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
                },
                easeInBack: function (x, t, b, c, d, s) {
                    if (s == undefined) s = 1.70158;
                    return c * (t /= d) * t * ((s + 1) * t - s) + b;
                },
                easeOutBack: function (x, t, b, c, d, s) {
                    if (s == undefined) s = 1.70158;
                    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
                },
                easeInOutBack: function (x, t, b, c, d, s) {
                    if (s == undefined) s = 1.70158;
                    if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;
                    return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;
                },
                easeInBounce: function (x, t, b, c, d) {
                    return c - $.easing.easeOutBounce(x, d - t, 0, c, d) + b;
                },
                easeOutBounce: function (x, t, b, c, d) {
                    if ((t /= d) < (1 / 2.75)) {
                        return c * (7.5625 * t * t) + b;
                    } else if (t < (2 / 2.75)) {
                        return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;
                    } else if (t < (2.5 / 2.75)) {
                        return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;
                    } else {
                        return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;
                    }
                },
                easeInOutBounce: function (x, t, b, c, d) {
                    if (t < d / 2) return $.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b;
                    return $.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
                }
            });
        })(jQuery);
        (function ($, undefined) {
            $.effects.highlight = function (o) {
                return this.queue(function () {
                    var elem = $(this),
                        props = ['backgroundImage', 'backgroundColor', 'opacity'],
                        mode = $.effects.setMode(elem, o.options.mode || 'show'),
                        animation = {
                            backgroundColor: elem.css('backgroundColor')
                        };
                    if (mode == 'hide') {
                        animation.opacity = 0;
                    }
                    $.effects.save(elem, props);
                    elem.show().css({
                        backgroundImage: 'none',
                        backgroundColor: o.options.color || '#ffff99'
                    }).animate(animation, {
                        queue: false,
                        duration: o.duration,
                        easing: o.options.easing,
                        complete: function () {
                            (mode == 'hide' && elem.hide());
                            $.effects.restore(elem, props);
                            (mode == 'show' && !$.support.opacity && this.style.removeAttribute('filter'));
                            (o.callback && o.callback.apply(this, arguments));
                            elem.dequeue();
                        }
                    });
                });
            };
        })(jQuery);
        (function ($, undefined) {
            var requestIndex = 0;
            $.widget("ui.autocomplete", {
                options: {
                    appendTo: "body",
                    autoFocus: false,
                    alwaysShow: false,
                    showAfterDelay: false,
                    delay: 300,
                    stopClosePropagating: false,
                    minLength: 1,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        collision: "none"
                    },
                    className: null,
                    noSuggestions: null,
                    source: null
                },
                pending: 0,
                _create: function () {
                    var self = this,
                        doc = this.element[0].ownerDocument,
                        suppressKeyPress;
                    this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off").attr({
                        role: "textbox",
                        "aria-autocomplete": "list",
                        "aria-haspopup": "true"
                    }).bind("keydown.autocomplete", function (event) {
                        if (self.options.disabled || self.element.attr("readonly")) {
                            return;
                        }
                        suppressKeyPress = false;
                        var keyCode = $.ui.keyCode;
                        switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                            self._move("previousPage", event);
                            break;
                        case keyCode.PAGE_DOWN:
                            self._move("nextPage", event);
                            break;
                        case keyCode.UP:
                            self._move("previous", event);
                            event.preventDefault();
                            break;
                        case keyCode.DOWN:
                            self._move("next", event);
                            event.preventDefault();
                            break;
                        case keyCode.ENTER:
                        case keyCode.NUMPAD_ENTER:
                            if (self.menu.active) {
                                suppressKeyPress = true;
                                event.preventDefault();
                                if (self.options.stopClosePropagating) {
                                    event.stopImmediatePropagation();
                                }
                                self.menu.select(event);
                            }
                            break;
                        case keyCode.TAB:
                            if (self.menu.active && self.element.val()) {
                                self.menu.select(event);
                            }
                            break;
                        case keyCode.ESCAPE:
                            if (self.options.stopClosePropagating && self.menu.active) {
                                event.stopImmediatePropagation();
                            }
                            self.element.val(self.term);
                            self.close(event);
                            break;
                        default:
                            clearTimeout(self.searching);
                            self.searching = setTimeout(function () {
                                if (self.term != self.element.val()) {
                                    self.selectedItem = null;
                                    self.search(null, event);
                                }
                            }, self.options.delay);
                            break;
                        }
                    }).bind("keypress.autocomplete", function (event) {
                        if (suppressKeyPress) {
                            suppressKeyPress = false;
                            event.preventDefault();
                        }
                    }).bind("focus.autocomplete", function () {
                        clearTimeout(self.closing);
                        if (self.options.disabled) {
                            return;
                        }
                        if (self.options.showAfterDelay !== false) {
                            self.showAfterTimeout = setTimeout(function () {
                                self.search(self.element.val());
                                self.showAfterTimeout = null;
                            }, self.options.showAfterDelay);
                        } else if (self.options.alwaysShow) {
                            self.search(self.element.val());
                        }
                        self.selectedItem = null;
                        self.previous = self.element.val();
                    }).bind("blur.autocomplete", function (event) {
                        if (self.options.disabled) {
                            return;
                        }
                        if (self.showAfterTimeout) {
                            self.showAfterTimeout = clearTimeout(self.showAfterTimeout);
                        }
                        clearTimeout(self.searching);
                        self.closing = setTimeout(function () {
                            self.close(event);
                            self._change(event);
                            self._trigger('blur', event);
                        }, 150);
                    });
                    this._initSource();
                    this.response = function () {
                        return self._response.apply(self, arguments);
                    };
                    this.menu = $("<ul></ul>").addClass("ui-autocomplete " + (this.options.className || "")).appendTo($(this.options.appendTo || "body", doc)[0]).mousedown(function (event) {
                        var menuElement = self.menu.element[0];
                        if (!$(event.target).closest(".ui-menu-item").length) {
                            setTimeout(function () {
                                $(document).one('mousedown', function (event) {
                                    if (event.target !== self.element[0] && event.target !== menuElement && !$.ui.contains(menuElement, event.target)) {
                                        self.close();
                                    }
                                });
                            }, 1);
                        }
                        setTimeout(function () {
                            clearTimeout(self.closing);
                        }, 13);
                    }).menu({
                        focus: function (event, ui) {
                            if (self.showAfterTimeout) {
                                self.showAfterTimeout = clearTimeout(self.showAfterTimeout);
                            }
                            var item = ui.item.data("item.autocomplete");
                            if (false !== self._trigger("focus", event, {
                                item: item
                            })) {
                                if (/^key/.test(event.originalEvent.type)) {
                                    self.element.val(item.value);
                                }
                            }
                        },
                        selected: function (event, ui) {
                            var item = ui.item.data("item.autocomplete"),
                                previous = self.previous;
                            if (self.element[0] !== doc.activeElement) {
                                self.element.focus();
                                self.previous = previous;
                                setTimeout(function () {
                                    self.previous = previous;
                                    self.selectedItem = item;
                                }, 1);
                            }
                            if (false !== self._trigger("select", event, {
                                item: item
                            })) {
                                if (item) {
                                    self.element.val(item.value);
                                } else {
                                    self.element.val('');
                                }
                            }
                            self.term = self.element.val();
                            self.close(event);
                            self.selectedItem = item;
                        },
                        blur: function (event, ui) {
                            if (self.menu.element.is(":visible") && (self.element[0] !== doc.activeElement) && (self.element.val() !== self.term)) {
                                self.element.val(self.term);
                            }
                        }
                    }).zIndex(this.element.zIndex() + 1).css({
                        top: 0,
                        left: 0
                    }).css('display', this.options.alwaysShow ? 'block' : 'none').data("menu");
                    if ($.fn.bgiframe) {
                        this.menu.element.bgiframe();
                    }
                },
                destroy: function () {
                    this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete").removeAttr("role").removeAttr("aria-autocomplete").removeAttr("aria-haspopup");
                    this.menu.element.remove();
                    $.Widget.prototype.destroy.call(this);
                },
                _setOption: function (key, value) {
                    $.Widget.prototype._setOption.apply(this, arguments);
                    if (key === "source") {
                        this._initSource();
                    }
                    if (key === "appendTo") {
                        this.menu.element.appendTo($(value || "body", this.element[0].ownerDocument)[0])
                    }
                    if (key === "disabled" && value && this.xhr) {
                        this.xhr.abort();
                    }
                },
                _initSource: function () {
                    var self = this,
                        array, url;
                    if ($.isArray(this.options.source)) {
                        array = this.options.source;
                        this.source = function (request, response) {
                            response($.ui.autocomplete.filter(array, request.term));
                        };
                    } else if (typeof this.options.source === "string") {
                        url = this.options.source;
                        this.source = function (request, response) {
                            if (self.xhr) {
                                self.xhr.abort();
                            }
                            self.xhr = $.ajax({
                                url: url,
                                data: request,
                                dataType: "json",
                                autocompleteRequest: ++requestIndex,
                                success: function (data, status) {
                                    if (this.autocompleteRequest === requestIndex) {
                                        response(data);
                                    }
                                },
                                error: function () {
                                    if (this.autocompleteRequest === requestIndex) {
                                        response([]);
                                    }
                                }
                            });
                        };
                    } else {
                        this.source = this.options.source;
                    }
                },
                search: function (value, event) {
                    value = value != null ? value : this.element.val();
                    this.term = this.element.val();
                    if (value.length < this.options.minLength) {
                        return this.close(event);
                    }
                    clearTimeout(this.closing);
                    if (this._trigger("search", event) === false) {
                        return;
                    }
                    return this._search(value);
                },
                _search: function (value) {
                    this.pending++;
                    this.element.addClass("ui-autocomplete-loading");
                    this.source({
                        term: value
                    }, this.response);
                },
                _response: function (content) {
                    if (this.options.disabled) {
                        this.close();
                    } else if (content && content.length || this.options.noSuggestions) {
                        content = this._normalize(content);
                        this._suggest(content);
                        this._trigger("open");
                    } else {
                        this.close();
                    }
                    this.pending--;
                    if (!this.pending) {
                        this.element.removeClass("ui-autocomplete-loading");
                    }
                    this._trigger("render");
                },
                close: function (event) {
                    clearTimeout(this.closing);
                    if (this.menu.element.is(":visible") && !this.options.alwaysShow) {
                        this.menu.element.hide();
                        this.menu.deactivate();
                        this._trigger("close", event);
                    } else {
                        this._trigger("blur", event);
                    }
                },
                _change: function (event) {
                    if (this.previous !== this.element.val()) {
                        this._trigger("change", event, {
                            item: this.selectedItem
                        });
                    }
                },
                _normalize: function (items) {
                    if (items.length && items[0].label && items[0].value) {
                        return items;
                    }
                    return $.map(items, function (item) {
                        if (typeof item === "string") {
                            return {
                                label: item,
                                value: item
                            };
                        }
                        return $.extend({
                            label: item.label || item.value,
                            value: item.value || item.label
                        }, item);
                    });
                },
                _suggest: function (items) {
                    var ul = this.menu.element.empty().zIndex(this.element.zIndex() + 1);
                    this._renderMenu(ul, items);
                    this.menu.deactivate();
                    this.menu.refresh();
                    ul.show();
                    if (this.options.position) {
                        this._resizeMenu();
                        ul.position($.extend({
                            of: this.element
                        }, this.options.position));
                    }
                    if (this.options.autoFocus) {
                        this.menu.next(new $.Event("mouseover"));
                    }
                },
                _resizeMenu: function () {
                    var ul = this.menu.element;
                    ul.outerWidth(Math.max(ul.width("").outerWidth(), this.element.outerWidth()));
                },
                _renderMenu: function (ul, items) {
                    var self = this;
                    if (items && items.length) {
                        $.each(items, function (index, item) {
                            self._renderItem(ul, item);
                        });
                    } else {
                        $("<li/>").addClass("no-suggestions").text(this.options.noSuggestions).appendTo(ul);
                    }
                },
                _renderItem: function (ul, item) {
                    var link = $('<a>');
                    if (item.html) {
                        link.html(item.html);
                    } else {
                        link.text(item.label);
                    }
                    return $("<li></li>").data("item.autocomplete", item).append(link).appendTo(ul);
                },
                _move: function (direction, event) {
                    if (!this.menu.element.is(":visible")) {
                        this.search(null, event);
                        return;
                    }
                    if (this.menu.first() && /^previous/.test(direction) || this.menu.last() && /^next/.test(direction)) {
                        this.element.val(this.term);
                        this.menu.deactivate();
                        return;
                    }
                    this.menu[direction](event);
                },
                widget: function () {
                    return this.menu.element;
                }
            });
            $.extend($.ui.autocomplete, {
                escapeRegex: function (value) {
                    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                },
                filter: function (array, term) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
                    return $.grep(array, function (value) {
                        return matcher.test(value.label || value.value || value);
                    });
                }
            });
        }(jQuery));

        (function ($) {
            $.widget("ui.menu", {
                _create: function () {
                    var self = this;
                    this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all").attr({
                        role: "listbox",
                        "aria-activedescendant": "ui-active-menuitem"
                    }).click(function (event) {
                        if (!$(event.target).closest(".ui-menu-item a").length) {
                            return;
                        }
                        event.preventDefault();
                        self.select(event);
                    });
                    this.refresh();
                },
                refresh: function () {
                    var self = this;
                    var items = this.element.children("li:not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "menuitem");
                    items.children("a").addClass("ui-corner-all").attr("tabindex", -1).mouseenter(function (event) {
                        self.activate(event, $(this).parent());
                    }).mouseleave(function () {
                        self.deactivate();
                    });
                },
                activate: function (event, item) {
                    this.deactivate();
                    if (this.hasScroll() && item.offset()) {
                        var offset = item.offset().top - this.element.offset().top,
                            scroll = this.element.scrollTop(),
                            elementHeight = this.element.height();
                        if (offset < 0) {
                            this.element.scrollTop(scroll + offset);
                        } else if (offset >= elementHeight) {
                            this.element.scrollTop(scroll + offset - elementHeight + item.height());
                        }
                    }
                    this.active = item.eq(0).children("a").addClass("ui-state-hover").attr("id", "ui-active-menuitem").end();
                    this._trigger("focus", event, {
                        item: item
                    });
                },
                deactivate: function () {
                    if (!this.active) {
                        return;
                    }
                    this.active.children("a").removeClass("ui-state-hover").removeAttr("id");
                    this._trigger("blur");
                    this.active = null;
                },
                next: function (event) {
                    this.move("next", ".ui-menu-item:first", event);
                },
                previous: function (event) {
                    this.move("prev", ".ui-menu-item:last", event);
                },
                first: function () {
                    return this.active && !this.active.prevAll(".ui-menu-item").length;
                },
                last: function () {
                    return this.active && !this.active.nextAll(".ui-menu-item").length;
                },
                move: function (direction, edge, event) {
                    if (!this.active) {
                        this.activate(event, this.element.children(edge));
                        return;
                    }
                    var next = this.active[direction + "All"](".ui-menu-item").eq(0);
                    if (next.length) {
                        this.activate(event, next);
                    } else {
                        this.activate(event, this.element.children(edge));
                    }
                },
                nextPage: function (event) {
                    if (this.hasScroll()) {
                        if (!this.active || this.last()) {
                            this.activate(event, this.element.children(".ui-menu-item:first"));
                            return;
                        }
                        var base = this.active.offset().top,
                            height = this.element.height(),
                            result = this.element.children(".ui-menu-item").filter(function () {
                                var close = $(this).offset().top - base - height + $(this).height();
                                return close < 10 && close > -10;
                            });
                        if (!result.length) {
                            result = this.element.children(".ui-menu-item:last");
                        }
                        this.activate(event, result);
                    } else {
                        this.activate(event, this.element.children(".ui-menu-item").filter(!this.active || this.last() ? ":first" : ":last"));
                    }
                },
                previousPage: function (event) {
                    if (this.hasScroll()) {
                        if (!this.active || this.first()) {
                            this.activate(event, this.element.children(".ui-menu-item:last"));
                            return;
                        }
                        var base = this.active.offset().top,
                            height = this.element.height(),
                            result = this.element.children(".ui-menu-item").filter(function () {
                                var close = $(this).offset().top - base + height - $(this).height();
                                return close < 10 && close > -10;
                            });
                        if (!result.length) {
                            result = this.element.children(".ui-menu-item:first");
                        }
                        this.activate(event, result);
                    } else {
                        this.activate(event, this.element.children(".ui-menu-item").filter(!this.active || this.first() ? ":last" : ":first"));
                    }
                },
                hasScroll: function () {
                    return this.element.height() < this.element[$.fn.prop ? "prop" : "attr"]("scrollHeight");
                },
                select: function (event) {
                    this._trigger("selected", event, {
                        item: this.active
                    });
                }
            });
        }(jQuery));

        (function ($) {

            $.selectOptions = function (obj_options, block_str) {

            var str_options = '';
            _(obj_options).each(function (key, value) {
                    if(key !="" && key !== null)
                    {
                        str_options += '<option value="'+value+'">'+key+'</option>';       
                    }
                });
                
              return [block_str, str_options].join('');
            };
        
            $.concatMap = function (array, mapper) {
                var concatenated = [];
                $.each(array, function (index, item) {
                    concatenated = concatenated.concat(mapper(item, index));
                });
                return concatenated;
            };
            
            
            
            
            $.normaliseWhitespace = function (text) {
                return (text || '').replace(/\s+/g, ' ').replace(/^ */, '').replace(/ *$/, '');
            };
            $.escapeHTML = function (text) {
                if(text !== undefined && text !='') {
                    return text.replace(/&/, '&amp;').replace(/"/, '&quot;').replace(/</, '&lt;').replace(/>/, '&gt;');    
                } else {
                    return '';
                }
                
            };
            $.stripHTML = function (html) {
                var div = $('<div/>');
                div.html(html);
                return div.text();
            };
            $.fn.paragraphs = function (text) {
                var paragraphs = (text || '').split(/\n\n/);
                return this.each(function () {
                    var element = $(this).empty();
                    for (var i = 0; i < paragraphs.length; i++) {
                        element.append($('<p>').text(paragraphs[i]));
                    }
                });
            };
            $.wbriseText = function (text) {
                //// console.log('Server##application.js. inside wbriseText ..14042');
                //// console.log(text);
                return $.wbriseHTML($.escapeHTML(text));
            };
            $.truncateText = function (text,maximum_length) {
                text = $.trim(text);
                if (text.length > maximum_length) {
                    text = text.substr(0, maximum_length) + "…";
                }
                return  text;
            }
            $.nameFromEmail = function (input){
                if(input) {
                    var email_chunk= input.split("@")[0];
                    return email_chunk.split('.').join(' ') || '';
                }
                return '';
            }
            $.killAllRequestQueue = function (requestQueue , exceptionQueue , attachmentQueue){
                if(requestQueue === true) {
                    if(ginipkg.requestQueue !== undefined) {
                        ginipkg.requestQueue.forEach(function (entry){
                            if(entry !== undefined) {
                                entry.abort();
                            }
                        });
                        ginipkg.requestQueue = new Array();
                    }
                }
                if(exceptionQueue === true) {
                    if(ginipkg.exceptionQueue !== undefined) {
                        ginipkg.exceptionQueue.forEach(function (entry){
                            if(entry !== undefined) {
                                entry.abort();
                            }
                        });
                        ginipkg.exceptionQueue = new Array();
                    }
                }
                if(attachmentQueue === true) {
                    if(ginipkg.attachmentQueue !== undefined) {
                        ginipkg.attachmentQueue.forEach(function (entry){
                            if(entry !== undefined) {
                                entry.abort();
                            }
                        });
                        ginipkg.attachmentQueue = new Array();
                    }
                }
            }
            $.giniAlert = function (text) {
                if(text) {
                    console.log('Gini Error : '+text);
                    /*var htmlTemplate = "                        <div class=\"overlay_alert\">                            <div class=\"alert_box\">                                <div class=\"alert_header\">                                    <a href=\"javascript:void(0)\" class=\"alert_close\">Close</a>                                </div>                                <div class=\"alert_content\">                                    <span class=\"alert_message\">                                        Gini Alert !                                    </span>                                    <p>"+text+"</p>                                    <div class=\"alert_btn\">                                        <a href=\"javascript:void(0)\" class=\"alert_ok\">Ok</a>                                        <!--<a href=\"javascript:void(0)\" class=\"alert_cancel\">Cancel</a>-->                                    </div>                                </div>                            </div>                        </div>";
                    //alert(text);
                    var alertContainer = $('body').find('.overlay_alert');
                    console.log(alertContainer);
                    if(alertContainer.length <1) {
                        $('body').prepend(htmlTemplate);
                    }
                    alertContainer.show();
                    alertContainer.find('.alert_close').click(function(){
                        alertContainer.fadeOut('slow');
                    });
                    alertContainer.find('.alert_ok').click(function(){
                        alertContainer.fadeOut('slow');
                    });
                    alertContainer.find('.alert_cancel').click(function(){
                        alertContainer.fadeOut('slow');
                    });
                    // setInterval(function(){
                    //     alertContainer.fadeOut('slow');
                    // },5000);*/
                }
            }
            
            //(123456789.12345).formatMoney(2, '.', ',');
            //(123456789.12345).formatMoney(2);

            $.formatCurrency = function (amount, c, d, t) {
                var n = amount, 
                c = isNaN(c = Math.abs(c)) ? 2 : c, 
                d = d == undefined ? "." : d, 
                t = t == undefined ? "," : t, 
                s = n < 0 ? "-" : "", 
                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
                j = (j = i.length) > 3 ? j % 3 : 0;
               return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
            };


            $.wbriseHTML = function (html) {

            // console.log('Server##application.js. inside wbriseText ..14047');
            // console.log(html);
                return $('<div/>').html(html || '').wbrise().html();
            };
            $.fn.wbrise = function () {
                function makeRegex(chars, inverted) {
                    return new RegExp('^([' + (inverted ? '^' : '') + chars + ']+)(.*)');
                }
                var whitespace_chars = /\s/.source,
                    split_after_chars = /!#$%&\)\*\+,\-\.\/:;=>\?@\\\]\^_\|\}~/.source,
                    dont_split_before_chars = /\(\{\["'`/.source,
                    regexes = {
                        whitespace: makeRegex(whitespace_chars),
                        punctuation: makeRegex(split_after_chars),
                        other: makeRegex(dont_split_before_chars),
                        word: makeRegex(whitespace_chars + split_after_chars, true)
                    };

                function splitString(string, categories) {
                    var segments = [],
                        current_segment = '';
                    while (string !== '') {
                        $.each(regexes, function (segment_category, regex) {
                            var match = regex.exec(string);
                            if (match) {
                                var penultimate = categories[categories.length - 2],
                                    last = categories[categories.length - 1];
                                if (penultimate === 'word' && last === 'punctuation' && segment_category === 'word') {
                                    segments.push(current_segment);
                                    current_segment = match[1];
                                    categories.push(segment_category);
                                } else {
                                    current_segment += match[1];
                                    if (categories[categories.length - 1] !== segment_category) {
                                        categories.push(segment_category);
                                    }
                                }
                                string = string.substr(match[1].length);
                            }
                        });
                    }
                    segments.push(current_segment);
                    return segments;
                }

                function wbriseNode(node, categories) {
                    if (node.nodeType === 3) {
                        var replacement = [];
                        $(splitString(node.data, categories)).each(function (index, segment) {
                            if (index > 0) {
                                replacement.push(document.createElement('wbr'));
                            }
                            replacement.push(document.createTextNode(segment));
                        });
                        $(node).replaceWith(replacement);
                    } else if (node.nodeType === 1) {
                        $(node.childNodes).each(function (i, child) {
                            wbriseNode(child, categories);
                        });
                    }
                }
                return this.each(function () {
                    wbriseNode(this, []);
                });
            };
            $.truncate_url = function (url) {
                var maximum_length = 20,
                    stripped = url.replace(/^(ftp|http|https):\/\/(www\.)?/i, "");
                if (stripped.length > maximum_length) {
                    text = text.substr(0, maximum_length) + "…";
                }
                return stripped;
            };
            $.fn.outerHTML = function () {
                return $('<div/>').append(this).html();
            };
            $.fn.replaceWithReturningNew = function (value) {
                var inserted = [];
                if (this[0] && this[0].parentNode) {
                    if (typeof value !== "string") {
                        value = $(value).detach();
                    }
                    this.each(function () {
                        var next = this.nextSibling,
                            parent = this.parentNode,
                            new_elem = $(value)[0];
                        $(this).remove();
                        inserted.push(new_elem);
                        if (next) {
                            parent.insertBefore(new_elem, next);
                        } else {
                            parent.appendChild(new_elem);
                        }
                    });
                    return $(inserted);
                }
            };
            $.addParams = function (url, params) {
                if (!params) {
                    return url;
                } else if (typeof params !== "string") {
                    params = $.param(params);
                }
                return url.replace(/(\?[^#]*)?(?=#|$)/, function (query) {
                    return query ? query + "&" + params : "?" + params;
                });
            };
            $.fn.describe = function () {
                return this.map(function () {
                    var selector = [],
                        element = this;
                    while (element.tagName && element.tagName.toLowerCase() !== 'body') {
                        selector.unshift(element.tagName.toLowerCase() +
                            (element.id ? '#' + element.id : '') +
                            (element.className ? '.' + element.className.split(/\s/).join('.') : ''));
                        element = element.parentNode;
                    }
                    selector.unshift('body');
                    return selector.join(' > ');
                }).get().join(', ');
            };
            $.fn.keyboardSubmission = function (callback) {
                return this.keydown(function (e) {
                    if ((e.ctrlKey || e.metaKey) && e.keyCode === 13) {
                        this.blur();
                        if (callback) {
                            callback();
                        }
                        return false;
                    }
                });
            };
            
            if ($.ui && $.ui.dialog && $.ui.dialog.overlay && $.ui.dialog.overlay.create) {
                (function (original_create) {
                    $.ui.dialog.overlay.create = function (dialog) {
                        var result = original_create.apply(this, [dialog]);
                        if (dialog.options.clickOverlayToClose) {
                            $(document).bind('click.dialog-overlay', function (event) {
                                if ($(event.target).hasClass('ui-widget-overlay')) {
                                    dialog.close(event);
                                }
                            });
                        }
                        return result;
                    };
                }($.ui.dialog.overlay.create));
            }
            if ($.expr[":"].tabbable) {
                $.expr[":"].tabbable = (function (_super) {
                    return function (elem) {
                        return _super.apply(this, arguments) && !jQuery(elem).hasClass("ui-dialog-titlebar-close");
                    };
                }($.expr[":"].tabbable));
            }
            $.expr[":"].focus = function (elem) {
                return elem === elem.ownerDocument.activeElement;
            };
            if (String.prototype.trim) {
                $.trim = function (text) {
                    return String.prototype.trim.call(text || "");
                };
            }
        }(jQuery));
        
        // --- added by ganesh --- //

        (function ($) {
        
               $.singularizeModule = function (str) {
                //return str.substring(0, str.length-1);
                var arrSingularize = {Leads:'Lead',Opportunities:'Opportunity',Cases:'Case',Contacts:'Contact',Accounts:'Account',tasks:'Task',notes:'Note',meetings:'Meeting',calls:'Call',emails:'Email'};    

                if(str in arrSingularize){
                    str = arrSingularize[str];
                }   
                return str;             
              };
        
            $.inlineErrorBox =  function (targetElement) {
                
                // console.log('Inside inlineErrorBox...... ');
                
                // console.log(targetElement);
                $(targetElement).find('.handle_err_msg').remove();
                var str ='';
                
                str +='                <div class=\"handle_err_msg\" style=\"display:none;\">                    <div style=\"text-align:right; clear:both;color:#000000;cursor:pointer;\"><a><b>X</b></a></div>                </div>                ';
                $(targetElement).append(str);
                $(targetElement).find('.handle_err_msg a').bind('click', function(){
                    $(targetElement).find('.handle_err_msg').remove();
                }); 

              };
        
        
            $.addDatePicker =  function (obj) {
                
                // console.log('Inside addDatePicker');
                $.each(obj, function (i, fields){
                
                    $(fields).datePicker({clickInput:false, createButton:true})
                    .dpSetOffset(15, -175)
                    .dpSetStartDate('01/01/1901');
                });
            };
        
            $.validateEmail = function (emailId)
                {
                var reg = /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
                 if (reg.test(emailId)){
                 return true; }
                 else{
                 return false;
                 }
                };
        
                
            $.trimChars = function (text) {
                return (text || '').replace(/[^a-z0-9 \s]/gi, '');
            };
            
            $.trimLeftUnderscore = function (text) {
                return (text || '').replace(/_/g, '');
            };
            

            $.unescapeHtml = function (text) {
                if(text !== undefined && text !== null && text !== "") {
                return text
                        .replace(/&amp;/g, "&")
                        .replace(/&lt;/g, "<")
                        .replace(/&gt;/g, ">")
                        .replace(/&quot;/g, "\"")
                        .replace(/&apos;/g, "'")
                        .replace(/&#039;/g, "'");
                }
                else {
                    return "";
                }
            };
             $.escapeHtmls = function (text) {
                if(text !== undefined && text !== null && text !== "") {
                    return text
                        .replace(/&/g, "&amp;")
                        .replace(/</g, "&lt;")
                        .replace(/>/g, "&gt;")
                        .replace(/"/g, "&quot;")
                        .replace(/'/g, "&apos;");
                }
                else {
                    return "";
                }
            };

            $.stripQuotes = function (text) {
                return text.replace(/"/g, "")
            };

            $.removeDoubleQuotes = function (text) {
                return text.replace(/\\/g, '\\\\').
                    replace(/"/g, '\'');
            };
            //form validations
            $.stripHTMLS=function (html) {
                html = html.replace(/ +(?= )/g,'');
                html=html.replace(/(^\s+|\s+$)/g, '');
                html=html.replace(/(<script>|<\/script>|<\?php |\?>)/g,'')
                return html.replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>?/gi, '');
            }
            /*
            * Code added by Rahul
            * Date : 19 Dec 2013
            * Regular expression for validating phone.
            */
            $.validatePhoneField=function (value){
                
                var phone_regex = /^(\(\+?\d{1,3}\)|\+?\d{1,3})([ \-]?\d{1,5}){1,3}$/;
                if(phone_regex.test(value) === false) {
                    return false;
                }
                else {
                    return true;
                }
            }
            $.validateAmountField=function (value){
                if(isNaN(value)) {
                    return false;    
                } else {
                    return true;
                }
            }
            $.validateNameField=function (value){
                if((/^[a-zA-Z0-9-+%&_$.@""'\r\n ]+$/.test(value) == false) || value.length>200 )
                    return false;
                else
                    return true;
            }
            
            $.validateTimeInHoursField=function (value){
                if((/^[0-9]*$/.test(value)==false))
                    return false;
                else
                    return true;
            }

            $.escapeQuotes = function (text) {
                return text.replace(/\\/g, '\\\\').
                    replace(/\u0008/g, '\\b').
                    replace(/\t/g, '\\t').
                    replace(/\n/g, '\\n').
                    replace(/\f/g, '\\f').
                    replace(/\r/g, '\\r').
                    replace(/'/g, '\\\'').
                    replace(/"/g, '\\"');
            };

            $.trimLeftRight = function (text, char) {
                return (text || '');
            };
            var pop_up_var_set = 0;
            $.setSocialButton = function(target_element,data,widget){
                var resourceType = data.resourceType; // social
                var buttonStatus = data.feedSocialId;
                var socialName   = data.source; 
                var posts        = data.feeds;
                var strButton    = "";

                var valueOfFollowConnect = "";

                if(data != "") {
                    //------- populate_post ---------//
                    var postElement = target_element.find(".posts");
                    if( posts.length > 0){
                        postElement.html("");
                        var nonEmptyPostsCount=0;
                        for (p = 0; p < posts.length; p += 3)
                        {
                            if(posts[p]) {
                                nonEmptyPostsCount++;
                                if(posts[p]!='No results found.' && !(posts[p].match('^Could not find person based on:')) && !(posts[p].match('^Invalid value {')) && !(posts[p].match('^Invalid member id')) && (posts[p]!='Member does not share his/her feed') && (posts[p]!='No status updates found for this profile.'))
                                {
                                    postElement.append("<div class=\"dropDownAppend\"><span class='views' style=\"position: relative;\"><a class=\"view\" href=\"#\" time=\""+posts[p+2]+"\" link=\""+posts[p+1]+"\"></a></span><p style='width:90%;'>"+posts[p]+"</p></div>");
                                }else{
                                    postElement.append("<p style='width:90%;'>"+posts[p]+"</p>");
                                }
                            }
                        }

                        //to generate leads/opp/cases from posts
                        var views = postElement.find("span.views");
                        
                        if(!nonEmptyPostsCount) {
                            postElement.html("<p>Status updates are protected for this profile.</p>");
                        }
                        $('<div class="ginipkg-toolbar_convert" style="display:none">').prependTo(views);
                        var _public = {}, _protected = {};
                        var context_data =  {};
                        addLinkHandlersPosts = function (menu,postElement) {
                            var form_link = menu.find('.crm-module');
                                form_link.click(loggily("gmail.toolbar_menu_convert.crm-module", function () {
                                var moduleName = jQuery(this).text();
                                if(moduleName=='Lead' || moduleName=='Case') 
                                {
                                    moduleName=moduleName+'s';
                                }   
                                else if(moduleName=='Opportunity')
                                {
                                    moduleName='Opportunities';
                                }
                                menu.hide();
                                var row_data = {};
                                var contact_data = ginipkg.contact_data;
                                var options = {
                                    template: 'crm/sugar',
                                    module: _.camelize(moduleName),
                                    mode: 'add',
                                    sugar_config : ginipkg.sugar_config,
                                    contact_data: contact_data,
                                    context_data: row_data,
                                    email: ginipkg.found_user_email,
                                    company_name: (contact_data.company.name !== undefined ) ? contact_data.company.name : '',
                                    site_name: 'sugarCRM'
                                };
                                _public.crm_forms = components.crm_forms(ginipkg, options);
                                _public.crm_forms.edit(moduleName);     
                                return false;
                            }));
                        };
                        postElement.find('span.views a.view').click(function(e)
                        {
                            ginipkg.description_from_post=$(this).parent().parent().find("p").text();
                            ginipkg.source_from_post=$(this).parent().parent().parent().parent().find("li").attr('class');
                            var timeOfPost = $(this).attr('time');
                            var personLink = $(this).parents('div.posts').parent().find('li span.handleLink a').attr('href');
                            var postId=$(this).attr('link');

                            if(ginipkg.source_from_post=='twitter'){
                                timeOfPost = new Date(timeOfPost);
                                if(ginipkg.description_from_post.substring(0,2) == 'RT'){
                                    var friendLink = ginipkg.description_from_post.substring(ginipkg.description_from_post.indexOf('@')+1,ginipkg.description_from_post.indexOf(":"));
                                    ginipkg.link_from_post="https://twitter.com/"+friendLink+"/status/"+postId;
                                }else{
                                    ginipkg.link_from_post=personLink+"/status/"+postId;
                                }
                            }
                            else if(ginipkg.source_from_post=='facebook'){
                                timeOfPost = new Date(timeOfPost);
                                if($(this).attr('link')!=''){
                                    ginipkg.link_from_post=postId;
                                }else{
                                    ginipkg.link_from_post = personLink;
                                }
                            }else if(ginipkg.source_from_post=='googleplus'){
                                ginipkg.link_from_post=postId;
                                timeOfPost = new Date(timeOfPost);
                            }
                            else{
                                ginipkg.link_from_post = '';
                                timeOfPost = timeOfPost.substring(0, 10);
                                timeOfPost = new Date(timeOfPost*1000);
                            }
                            var year = timeOfPost.getFullYear();
                            var date = timeOfPost.getDate();
                            var monthNames = [ "January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December" ];
                            var month = monthNames[timeOfPost.getMonth()];
                            timeOfPost =  date + " " +month + " " + year;
                            ginipkg.time_of_post = timeOfPost;
                            _protected.template = $(this).parent().parent().find('div.ginipkg-toolbar_convert');
                            var convert=components.templateRenderer(ginipkg, 'toolbar_menu_convert/toolbar_menu', ginipkg, ginipkg.sugar_config, _protected.template);
                            _protected.menu_button = _protected.template;
                            _protected.menu_dropdown = _protected.template.find('.gini-toolbar-items_convert');
                            addLinkHandlersPosts(convert.element.parent(),postElement);
                            hideBubblesPost(e);
                            _protected.template.parent().parent().siblings().find('span.views div.ginipkg-toolbar_convert').hide();
                            $(this).parent().parent().find('div.ginipkg-toolbar_convert').toggle();
                        });  
                    }else{
                        postElement.html("<p>No status updates found for this profile.</p>");
                    }
                    //------- populate_post ----------//            
                    if(buttonStatus!="")
                    {
                        // facebook social button
                        if(socialName == 'facebook' && resourceType =='social'){
                            strButton = (buttonStatus == 'CONNECTED') ? "<a href=\"javascript:void(0)\">Connected</a>" : (buttonStatus != 'SELF') ? "<a href=\"javascript:void(0)\" class=\"social_connect\" url='"+widget.add_friend_url+"' socialName='"+socialName+"' afterSuccess=\"Connected\" >Connect</a>" : "";
                            valueOfFollowConnect = (buttonStatus == 'CONNECTED') ? "Connected" : "Not Connected , Click to Connect!";
                        }
                        // linked in social button
                        if(socialName == 'linkedin'){
                            if(resourceType =='social'){
                               strButton = (buttonStatus == 'CONNECTED') ? "<a href=\"javascript:void(0)\">Connected</a>" : (buttonStatus != 'SELF') ? "<a href=\"javascript:void(0)\" class=\"social_connect\" url='"+widget.connect_path+"' socialName='"+socialName+"' afterSuccess=\"\" socialType=\"contact\">Connect</a>" : "";
                               valueOfFollowConnect = (buttonStatus == 'CONNECTED') ? "Connected" : "Not Connected , Click to Connect!";
                            }else if(resourceType =='socialCompany'){
                               strButton = (buttonStatus == 'FOLLOWING') ? "<a href=\"javascript:void(0)\">Following</a>" : (buttonStatus != 'SELF') ? "<a href=\"javascript:void(0)\" class=\"social_connect\" url='"+widget.connect_path+"' socialName='"+socialName+"' afterSuccess=\"Following\" socialType=\"comapny\">Follow</a>" : "";
                               valueOfFollowConnect = (buttonStatus == 'FOLLOWING') ? "Following" : "Not Following , Click to Follow!";
                            }
                        }
                            
                        // twitter social button
                        if(socialName == 'twitter'){
                            strButton = (buttonStatus == 'FOLLOWING') ? "<a href=\"javascript:void(0)\">Following</a>" : (buttonStatus != 'SELF') ? "<a href=\"javascript:void(0)\" class=\"social_connect\" url='"+widget.follow_path+"' socialName='"+socialName+"' afterSuccess=\"Following\">Follow</a>" : "";
                            valueOfFollowConnect = (buttonStatus == 'FOLLOWING') ? "Following" : "Not Following";
                        }
                    
                        // google plus social button
                        if(socialName == 'googleplus'){
                             //strButton = (buttonStatus == 'CONNECTED') ? "<a href=\"javascript:void(0)\">CONNECTED</a>" : (buttonStatus != 'SELF') ? "<a href=\"javascript:void(0)\"></a>" : "";                    
                             if((widget.google_plus_user_id).length > 0){
                               var cnt = parseInt(widget.google_plus_user_id);
                               if(cnt > 0){
                                   strButton = '<div style="border: 0px solid red;width: 85px;height: 25px;overflow: hidden;z-index: 999 !important;position: relative;margin-left: -65px;padding: 10px;margin-top: 19px;"><div style="margin:-52px 0px 0px -35px;" id="content"><g:plus href="https://plus.google.com/'+widget.google_plus_user_id+'" width="150"></g:plus></div></div>';
                                   valueOfFollowConnect = "Click To Check";
                               }else{
                                   valueOfFollowConnect = "Not Following";
                               }
                             }
                    }
                }
                if (valueOfFollowConnect == "Following" || valueOfFollowConnect == "Connected") {
                    target_element.find(".social_button").css("background-position","2px -1323px");
                }
                if (valueOfFollowConnect == "Click To Check") {
                    target_element.find(".social_button").css("background-position","-2px -1162px");
                }

                // show hide social connect button                  
                if(strButton != ""){
                    target_element.find(".social_button").css("display","block").attr("title",valueOfFollowConnect);
                    target_element.find(".social_button").html(strButton);
                }else{
                    target_element.find(".social_button").css("display","none");
                    target_element.find(".social_button").html("");
                }
            }

          }
            
        $.setDateFormat = function(strDate){
            //fsLog("====== In set date Format ======");
            if(strDate !="" && strDate != null && strDate !== undefined)
            {
                var objDate = new Date(strDate);
                if( objDate != "Invalid Date"){
                    strDate= objDate.getMonth()+1+"/"+objDate.getDate()+"/"+objDate.getFullYear();
                }
            }
            return strDate; 
        }   
        }(jQuery));
        // --- added by ganesh --- //       

        jQuery.jsonp.setup({
            callbackParameter: "callback",
            timeout: 60000
        });
        return jQuery;
    }
//JQUERY FUNCTION ENDS HERE


    var jQuery = freshJQuery();
    var $ = jQuery;
    var fsLog; 
    var models = {}; 
    var components = {}; 
    var lib = {}; 
    var client = {
            sidebar_callbacks: {},
            templates: {}
        };
    var helpers = {};



    function handlebar(params, template, context) {
            if (template instanceof Array) {
                template = template.join("");
            }
            return Handlebars.compile(template)(context, params.bound_helpers);
    }

    helpers.setDateFormat = function(params, strDate) {
        return jQuery.setDateFormat(strDate);
    };

    helpers.eachloop = function(context, options) {
    }



    helpers['if'] = function (params, test, block) {
        return present(test) ? (block && block(this)) : '';
    };
  
    /*
    * Custom helper to escape characters
    */
    helpers.addSlashes = function (params,input) {
        input= input.replace(/"/g, '&quot;').
        replace(/'/,'&#39;');
        return decodeURIComponent(input);
    };
    
    
    helpers.unless = function (params, test, block) {
        return present(test) ? '' : (block && block(this));
    };
    helpers['if'].not = helpers.unless;
    helpers.unless.not = helpers['if'];

        
    helpers.if_equal = function (params, value1, value2, block) {
        return (value1 === value2) ? (block && block(this)) : '';
    };
    helpers.unless_equal = function (params, value1, value2, block) {
        return (value1 === value2) ? '' : (block && block(this));
    };
    
    helpers.if_equal_length = function (params, value1, value2, block) {


        return (parseInt(value1.length) > parseInt(value2)) ? (block && block(this)) : '';
    };
     helpers.if_equal_text = function (params,text1,text2,block) {
        if(text1==text2){
            return (block && block(this));
        }
        else{
            return '';
        }
    };
   
    helpers.if_notequal_text = function (params,text1,text2,block) {
        if(text1==text2){
            return '';
        }
        else{
            return (block && block(text1));
        }
    };
    helpers.if_length_zero = function (params, value1, block) {
        return (parseInt(value1.length) <= 0) ? (block && block(this)) : '';
    };

    helpers.nameFromEmail = function (params , input) {
        if(input) {
            var email_chunk= input.split("@")[0];
            return email_chunk.split('.').join(' ') || '';
        }
        return '';
    };
    
    
    helpers.if_equal.not = helpers.unless_equal;
    helpers.unless_equal.not = helpers.if_equal;
    helpers.if_greater_than = function (params, value1, value2, block) {
        return (parseFloat(value1) > parseFloat(value2)) ? (block && block(this)) : '';
    };
    helpers.if_less_than_or_equal = function (params, value1, value2, block) {
        return (parseFloat(value1) > parseFloat(value2)) ? '' : (block && block(this));
    };
    helpers.if_greater_than.not = helpers.if_less_than_or_equal;
    helpers.if_less_than_or_equal.not = helpers.if_greater_than;
    helpers.if_include = function (params, needle) {
        var args = _(arguments).toArray().slice(2);
        var block = _(args).last();
        var haystack = _(args.slice(0, -1)).compact();
        if (_(haystack[0]).isArray()) {
            haystack = haystack[0];
        }
        if (!block) {
            throw "always specify a block to #if_include";
        }
        return (haystack.indexOf(needle) > -1) ? block(this) : '';
    };
    helpers.if_preference_set = function (params, pref_name, block) {
        return (params.user_preferences && params.user_preferences[pref_name]) ? (block && block(this)) : '';
    };
    helpers.unless_preference_set = function (params, pref_name, block) {
        return (params.user_preferences && params.user_preferences[pref_name]) ? '' : (block && block(this));
    };
    helpers.if_preference_set.not = helpers.unless_preference_set;
    helpers.unless_preference_set.not = helpers.if_preference_set;
    helpers.if_beta_user = function (params, feature_name, block) {
        return (params.user_preferences && params.user_preferences[feature_name + "_private_beta_member"]) ? (block && block(this)) : '';
    };

    function call_widget_partial(params, context, suffix) {
        if (context.widget_name) {
            var partial = params.bound_helpers.partials['memberships/widgets/_' + context.widget_name + (suffix || '')];
            if (partial) {
                return partial(context);
            } else {
                return '';
            }
        } else {
            return '';
        }
    }
    helpers.widget_button = function (params, context) {
        return call_widget_partial(params, context, '_button') || (context.widget && context.widget.button);
    };
    helpers.widget_body = function (params, context) {
        return call_widget_partial(params, context) || (context.widget && context.widget.body);
    };
    helpers.memberships_present = function (params, context) {
        return _(context.memberships || []).any(function (membership) {
            return !membership.grabbed;
        });
    };
    helpers.tracked_link = function (params, href, tracking_text, css_classes, block) {
        return handlebar(params, ['<a href="{{href}}" class="{{css}}" ', 'onclick="if (ginipkgLogger) { ginipkgLogger.track(\'{{track}}\'); } return true;" target="_blank"', '>{{{contents}}}</a>'], {
            href: ((href[0] === '/') ? params.ginipkg_base_url : '') + href,
            css: css_classes,
            track: tracking_text,
            contents: block && block(this)
        });
    };

    helpers.context_widget = function (params, css_attributes, block) {
        return ['<div class="context-widget" style="', css_attributes, '">', '<div class="lozenge">', block && block(this), '</div></div>'].join('');
    };

    helpers.trim_chars = function (params, text) {
        
        return $.trimChars(text);
        
    };

    helpers.truncateText = function (params, text, length) {
        
        var text = $.trimChars(text);
        return $.truncateText(text, length);

    };
    helpers.truncateTextWithoutTrim = function (params, text, length) {
        return $.truncateText(text, length);

    };
    


    helpers.unescape_chars = function (params, text) {
        
        return text=(text + '').replace(/[\\"]/g, '\&quot;').replace(/[\\']/g, '\&apos;');
        
    };

    helpers.select_options = function (params,  obj_options, selected, fixed_options) {
                
        var str_options = '';
                
         _(obj_options).each(function (key, value) {
            if(key !="" && key !== null)
            {
                var optionValue = $.trimLeftUnderscore(value);
                if(selected !== undefined && optionValue == selected ) {
                    str_options += '<option value="'+optionValue+'" selected>'+key+'</option>';       
                }
                else {
                    str_options += '<option value="'+optionValue+'" >'+key+'</option>';       
                }
            }
        }); 
        return [fixed_options && fixed_options, str_options].join('');
    };


    helpers.radio_options = function (params,  obj_options, field_name, field_value, fixed_options) {
        var str_options = '';
         _(obj_options).each(function (key, value) {
            optionValue = "";    
            if(key !="" && key !== null) {
                optionValue = value;
            }
            else {
                    optionValue = "";
                    key = "None";
            }
            var checked = (field_value != "" && field_value == optionValue) ? 'checked="checked"' : '';

            str_options += '<span style="margin-right:5px;">';
                str_options += '<input type="radio" value="'+optionValue+'" name="'+field_name+'" id="'+field_name+'"  '+ checked +'>';
            str_options += '</span>';

            str_options += '<label class="form-label" style="margin-right:15px;">';
                str_options += '<div class="data_labels">'+key + '</div>';
            str_options += '</label>';       
    

        });
        return [fixed_options && fixed_options, str_options].join('');
    };

    helpers.format_host = function (params, url) {
        var match = /https?:\/\/([^:\/]*)/.exec(url || '');
        return match && match[1] || url;
    };
    helpers.link_to_hostname = function (params, url) {
        return jQuery('<a>', {
            href: url,
            target: 'blank',
            text: helpers.format_host.call(this, params, url)
        }).html();
    };

    function emailParts(email) {
        return (email || '').split('@');
    }

    helpers.domain_from_email = function (params) {
        return emailParts(params.contact.email)[1];
    };

    helpers.display_name = function (params) {
        var from_dom = jQuery.trim(_(params.identifier).andand().display_name || ''),
            from_server = jQuery.trim(_(params.contact).andand().name || '');
        if (from_dom.toLowerCase() === 'me') {
            from_dom = (params.ginipkg && _(params.ginipkg.user).andand().name) || '';
        }
        if (from_server.match(/\.$/) && from_dom.indexOf(from_server.replace(/\.$/, '')) === 0) {
            return from_dom;
        }
        return from_server || from_dom;
    };

    helpers.format_email_with_domain_link = function (params, email, url) {
        var parts = emailParts(email);
        return [$.wbriseText(parts[0]), '@<wbr/>', '<a href="', url, '" target="_blank" ', 'onclick="if (ginipkgLogger) { ginipkgLogger.track(\'Identifier link clicked\', {link_type: \'domain\'}); } return true;">', $.wbriseText(parts[1]), '</a>'].join('');
    };

    helpers.format_email_with_link = function (params, email, css_class) {
        return ['<a href="#" class="email-link ', css_class, '" email="', email, '">', $.wbriseText(email), '</a>'].join('');
    };

    helpers.wbrise = function (params, context, block) {
        return $.wbriseText(block(this));
    };
    helpers.format_email = function (params, email) {
        var url = 'http://' + emailParts(email)[1];
        return helpers.format_email_with_domain_link.call(this, params, email, url);
    };
    helpers.format_module_id = function (params, moduleName) {
        return 'gini_' + moduleName.toLowerCase();
    };

    helpers.format_location = function (params, location) {
        if (present(location)) {
            return helpers.tracked_link.call(this, params, 'http://maps.google.com/maps?q=' + encodeURIComponent(location), 'Location link clicked', 'location', function () {
                return location.replace(/^([^,]*,[^,]*),.*/, '$1');
            });
        } else {
            return '';
        }
    };

    helpers.format_occupation = function (params, context) {
        var parts = [];
        if (context.job_title) {
            parts.push('<span class="job-title">' + $.escapeHTML(context.job_title) + '</span>');
        }
        if (context.company) {
            parts.push('<span class="company">' + $.escapeHTML(context.company) + '</span>');
        }
        return parts.join(' at ');
    };

    helpers.linked_in_field = function (params, field_name) {
        if (!field_name) {
            return "";
        }
        if (field_name.indexOf("/") > -1) {
            return field_name.substring(field_name.indexOf("/") + 1);
        } else {
            return field_name;
        }
    };

    helpers.relative_time = function (params, context) {
        return $.relativeTime(context || "");
    };

    helpers.print_context = function (params, context, block) {
        var attrs = [],
            obj = context;
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                attrs.push($.escapeHTML(key + ': ' + obj[key]));
            }
        }
        return '{' + attrs.sort().join(', ') + '}';
    };
    
    helpers.ginipkg_base_url = function (params) {
        return $.ginipkg_base_url();
    };

    helpers.is_in_production = function (params) {
        return !!helpers.ginipkg_base_url().match(/ginipkg\.com$/);
    };
    helpers.in_production = function (params, context, block) {
        return helpers.is_in_production(params) ? (block && block(this)) : '';
    };
    helpers.in_development = function (params, context, block) {
        return helpers.is_in_production(params) ? '' : (block && block(this));
    };
    helpers.in_production.not = helpers.in_development;
    helpers.in_development.not = helpers.in_production;
    
    helpers.can_edit_contact = function (params) {
        return params.contact && params.contact.can_be_edited;
    };

    helpers.can_be_edited = function (params) {
        return _(params.contact).andand().can_be_edited;
    };

    helpers.friendly_name = function (params, context, block) {
        return jQuery.escapeHTML(params.contact.friendly_name) || (block && block(this)) || '';
    };
    helpers.users_informal_first_name = function (params, fallback) {
        var full_name = jQuery.escapeHTML(params.user.display_name);
        return _.informalize(full_name, fallback);
    };

    helpers.image_tag = function (params, path_or_url, options) {
        if (path_or_url && path_or_url.indexOf('http') !== 0) {
            path_or_url = helpers.ginipkg_base_url(params) + path_or_url;
        }
        if (path_or_url && path_or_url.indexOf('https') !== 0 && path_or_url.indexOf(params.ginipkg_base_url) !== 0) {
            path_or_url = jQuery.proxyURL(path_or_url);
        }
        return $("<img>", _.extend(options || {}, {
            "src": path_or_url
        })).outerHTML();
    };

    helpers.spinner = function (params, size) {
        var path = "/images/v_3/loader.gif";
        var spinnerClass = "spinner32"
        switch (size) {
        case "16px":
            spinnerClass = "spinner16";
            break;    
        case "32px":
            spinnerClass = "spinner32";
            break;
        case "64px":
            spinnerClass = "spinner64";
            break;
        
        }
        return helpers.image_tag(params, path, {
            "class": "spinner "+spinnerClass,
            "alt": "Processing…"
        });
    };

    helpers.sidebar_spinner = function (params, spinner_class) {
        return handlebar(params, '<div class="sidebar-spinner {{ spinner_class }}" style="display: none">{{{ spinner }}}</div>', {
            spinner_class: spinner_class
        });
    };

    helpers.hovercard = function (params, class_name, image_path_or_block, block_or_null) {
        var image_path = block_or_null ? image_path_or_block : null;
        var block = block_or_null ? block_or_null : image_path_or_block;
        return ['<div class="hovercard ', $.escapeHTML(class_name), (image_path ? '' : ' no-image'), '">', '<div class="hovercard-triangle"></div>', '<div class="hovercard-content">', '<table><tr>', '<td class="hovercard-icon-cell">', (image_path ? helpers.image_tag(params, image_path, {
            "alt": "",
            "class": "hovercard-icon"
        }) : ''), '</td>', '<td>', block && block(this), '</td>', '</tr></table>', '</div></div>'].join('');
    };

    helpers.clear_button = function (params, class_name) {
        return '<div class="clear-button ' + $.escapeHTML(class_name) + '"></div>';
    };
    helpers.action_button = function (params, action, css_class, text) {
        return ['<span href="#', $.escapeHTML(action), '" class="oneline-action oneline-action-', $.escapeHTML(action), '">', '<span class="oneline-action-contents ', $.escapeHTML(css_class), '">', $.escapeHTML(text), '</span></span>'].join('');
    };
    
    helpers.action_button_personal = function (params, action, css_class, text) {
        return ['<button class="button">', '<a class="recent-conversations-link" target="_blank" href="', $.escapeHTML(action),'">', $.escapeHTML(text), '</a>',  '</button>'].join('');
    };

    helpers.action_spinner = function (params, css_class, text) {
        return handlebar(params, ['<div class="{{css_class}}">', '<div class="oneline-status oneline-status-loading">', '<span class="oneline-status-contents">', '<div class="relative-anchor">', '{{{ spinner "32px" }}}', '</div>', '{{text}}', '</span>', '</div>', '</div>'], {
            text: text || 'LOADING',
            css_class: css_class || 'loading-spinner'
        });
    };
    helpers.status_label = function (params, status, text, no_tick) {
        return ['<div class="oneline-status oneline-status-', $.escapeHTML(status), '">', '<span class="oneline-status-contents">', (no_tick ? '' : '<span class="tick">&#x2713;</span>'), $.escapeHTML(text), '</span></div>'].join('');
    };

    function normalizePhoneNumberType(text) {
        return (text && !/other/i.test(text)) ? $.escapeHTML(text.toUpperCase()) : '';
    }
    helpers.phone_call_button = function (params, context) {
        if (context.type && !/fax$/i.test(context.type)) {
            var label = normalizePhoneNumberType(context.type);
            label = (label === '') ? 'CALL' : ('CALL ' + label);
            return ['<span href="#phone" class="oneline-action oneline-action-phone">', '<span class="oneline-action-contents">', label, '</span></span>'].join('');
        } else {
            return '';
        }
    };
    helpers.phone_label = function (params, text) {
        return helpers.status_label(params, 'phone', normalizePhoneNumberType(text), 'no_tick');
    };

    helpers.linked_in_button = function (params, context) {
        function button(action) {
            if (params.contact.point_type === 'email') {
                return helpers.action_button(params, action, 'linkedin-button membership-link', 'CONNECT');
            } else {
                return '';
            }
        }
        if (params.contact.can_be_edited || context.widget.own_profile || !context.widget.may_connect) {
            return '';
        }
        if (!params.user.logged_in) {
            return button('login');
        }
        if (context.widget.authorized) {
            if (context.widget.connected) {
                return helpers.status_label(params, 'connected', 'CONNECTED');
            } else if (context.widget.invited) {
                return helpers.status_label(params, 'invited', 'INVITED');
            } else {
                return button('invite');
            }
        } else {
            return button('authorize');
        }
    };

    function local_context(original, extra) {
        function Context() {
            $.extend(this, extra);
        }
        Context.prototype = original;
        return new Context();
    }

    helpers.facebook_button = function (params, context) {
        var css_classes = 'facebook-button membership-link';
        if (params.contact.can_be_edited || (context && context.widget && (context.widget.own_profile || context.widget.is_page_only))) {
            return '';
        } else if (!params.user.logged_in) {
            return helpers.action_button(params, 'login', css_classes, 'ADD FRIEND');
        } else if (!context.widget.authorized) {
            return helpers.action_button(params, 'authorize', css_classes, 'ADD FRIEND');
        } else if (context.widget.connected) {
            return helpers.status_label(params, 'connected', 'FRIENDS');
        } else if (context.widget.invited) {
            return helpers.status_label(params, 'invited', 'INVITED');
        } else {
            return helpers.action_button(params, 'invite', css_classes, 'ADD FRIEND');
        }
    };

    helpers.truncate_title = function (params, text) {
        return $.truncate(text, {
            length: 46,
            block_tag: 'h1',
            more: '\u00a0\u2026'
        });
    };
    helpers.truncate_sitelink = function (params, text) {
        return $.truncate(text, {
            length: 8,
            truncated_text: false,
            block_tag: false
        });
    };
    helpers.truncate_description = function (params, text) {
        return $.truncate(text, {
            length: 180,
            more: '\u00a0\u2026'
        });
    };
    helpers.truncate_membership_title = function (params, text) {
        var returnText =  '';
        if(text != ''){
            returnText = text.substring(0,18);
        }
        return returnText;
    };
    helpers.truncate = function (params, text, length) {
        return $.truncate(text, {
            length: parseInt(length, 10),
            truncated_text: false,
            block_tag: false
        });
    };
    helpers.format_authorizations_list = function (params, auths) {
        return helpers.join(params, auths, ", ", " and ", function (auth) {
            return auth.human_name;
        });
    };
    helpers.format_authorization_links = function (params, auths, block) {
        return helpers.join(params, auths, ", ", " and ", block);
    };
    helpers.linkify = function (params, context, block) {
        return $('<div>' + (block ? block(this) : '') + '</div>').linkify().html();
    };
    helpers.blankify = function (params, context, block) {
        var html = $('<div>' + (block ? block(this) : '') + '</div>');
        html.find('a').attr('target', '_blank');
        return html.html();
    };
    helpers.join = function (params, items, sep1_or_block, sep2_or_block, block_or_null) {
        var sep1 = _.isString(sep1_or_block) ? sep1_or_block : ", ",
            sep2 = _.isString(sep2_or_block) ? sep2_or_block : sep1,
            block = block_or_null || sep2_or_block || sep1_or_block,
            beginning;
        if (_.isFunction(block)) {
            items = $.map(items || [], function (item) {
                return $.trim(block(item));
            });
        }
        beginning = items.slice(0, -1).join(sep1);
        if (beginning) {
            return beginning + (sep2) + items[items.length - 1];
        } else {
            return items[0] ? items[0].toString() : "";
        }
    };
    helpers.lowercase = function (params, string) {
        return string ? string.toString().toLowerCase() : "";
    };
    helpers.uppercase = function (params, string) {
        return string ? string.toString().toUpperCase() : "";
    };
    helpers.icon_tag_for_authorization = function (params, auth, css_class) {
        return helpers.image_tag(params, "/images/authorizations/" + auth.slug + "_32.png", {
            "alt": "",
            "class": css_class
        });
    };
    helpers.encode_uri_component = function (params, uri) {
        return encodeURIComponent(uri);
    };

    function is_home_link(link) {
        if (!link) {
            return false;
        }
        return link.display_name.toLowerCase() === 'home';
    }

    helpers.trim = function (params, text) {
        return $.trim(text);
    };
    
    //for template text length
    helpers.substr = function (params, text) {
        if (text.length>15){
            return text.substring(0, 15)+ "…";
        } else {
            return text;
        }
    };

    //for template text length
    //last modified on 14 May 2014 for template ui issue which came after URI Malformed error.
    helpers.returnSame = function (params, text) {
        text    =   text.replace(/\%/g, '%25');
        text    =   decodeURIComponent(text);
        text    =   text.replace(/\%25/g, '%');
        text    =   unescape(text);
        if(text.indexOf('&lt;body&gt;')>0) {
            text    =   text.substring(text.indexOf('&lt;body&gt;')+12,text.indexOf("&lt;/body&gt;"));
            text    =   $('<div/>').html(text).text();
        }
        if(text.indexOf('&lt;') == 0) {
            text    =   $('<div/>').html(text).text();
        }
        return text;
    };
    /*These helpers are done for making template favorite or not favourite*/
    helpers.returnFav = function (params, text) {
        if (text == 1) {
            return "unfav";
        }
        if (text == 0) {
            return "fav";
        }

    };
    helpers.returnFavCss = function (params, text) {
        if (text == 1) {
            return "opacity:1";
        }
        if (text == 0) {
            return "opacity:.2";
        }

    };
    /* @added by -GAURAV SHARMA
     * @date - 09 july 2014
     * @dec - This helper is added for if there is sytem generated tag then there will not be edit symbol. */
    helpers.returnSystemTagsEdit = function (params, text) {
        if (text != "SugarCRM Templates") {
            return "<span title=\"Edit This Category\" class=\"edit editTemplateTextButton\">Edit</span>";
        } else {
            return "";
        }
    };
    
    //for template attachment if present
    helpers.returnAttachmentForTemplate = function (params, text) {
        var html ='';
        if ((text !== null) && (text !== undefined) && (text !== '')) {
            if (typeof text != 'object') {
                text = $.parseJSON(text);
            }
            if ((text.attachmentInformation !== undefined) && (text.attachmentInformation[0].attachment_link !== undefined)) {
                html = '<p style="font-weight:bold;">Attachments</p>';
                for (var i=0;i < text.attachmentInformation.length;i++)
                        html += '<p><a href="'+text.attachmentInformation[i].attachment_link+'" target="_blank" >'+text.attachmentInformation[i].name_of_attachment+'</a></p>';    
            }
        }
        return html;
    };

    helpers.returnNoneIfEmpty = function (params, text) {
            if (text === undefined || text == ""){
                return "No Category";
            } else {
                return text;
            }

    };
    helpers.format_bytes = function (params, bytes) {
        var kilobytes = bytes / 1024,
            megabytes = kilobytes / 1024;
        if (bytes < 1024) {
            return bytes + " B";
        } else if (kilobytes < 1024) {
            return kilobytes.toFixed(1) + " KB";
        } else if (megabytes < 1024) {
            return megabytes.toFixed(1) + " MB";
        }
    };

    helpers.pluralize = function (params, count, singular, plural, wordonly) {
        var output = "";
        if (!_(count).isNumber() && _(count.length).isNumber()) {
            count = count.length;
        }
        if (!wordonly) {
            output += count + " ";
        }
        return output + $.pluralize(singular, count, plural);
    };
    helpers.informalize = function (params, text) {
        return _(text).informalize();
    };
    helpers.capitalize = function (params, text, force) {
        if (force) {
            text = text && text.toLowerCase();
        }
        return _(text).capitalize();
    };
    helpers.substring = function (params, text, start) {
        return text.substring(parseInt(start, 10));
    };
    helpers.if_any = function (params) {
        var args = _(arguments).toArray().slice(1);
        var block = args.pop();
        var any = _(args).compact();
        return (any.length > 0) ? block(this) : "";
    };
    helpers.month_name = function (params, month_number, zero_based) {
        if (!zero_based) {
            month_number -= 1;
        }
        var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        return months[month_number] || "";
    };
    helpers.is_today = function (params, year, month, day, block) {
        var checking = new Date();
        checking.setDate(parseInt(day, 10));
        checking.setMonth(parseInt(month, 10));
        var today = false;
        if (year) {
            checking.setYear(parseInt(year, 10));
            today = $.date.isToday(checking);
        } else {
            today = (parseInt(month, 10) === (new Date().getMonth() + 1) && parseInt(day, 10) === new Date().getDate());
        }
        return today ? block(this) : "";
    };
    helpers.proxy_url = function (params, image_url) {
        return jQuery.proxyURL(image_url);
    };

    helpers.profile_url = function (params, name) {
        var membership = _(params.contact.memberships).detect(function (m) {
            return m.site_name === name;
        });
        return membership && membership.profile_url || "";
    };
    helpers.format_attribute_list = function (params, attributes) {
        var i = 0,
            ordering = {
                'Name': [i++, 'name'],
                'Occupation': [i++, 'job'],
                'Location': [i++, 'location'],
                'Image': [i++, 'photo'],
                'EmailAddress': [i++, 'email'],
                'Membership': [i++, 'social profiles'],
                'PhoneNumber': [i++, 'phone numbers']
            }, result = _(attributes).chain().map(function (class_name) {
                return ordering[class_name];
            }).compact().sortBy(_.plucker(0)).pluck(1).uniq().value();
        if (result.length) {
            return helpers.join(params, result, ", ", " and ");
        } else {
            return 'details';
        }
    };
    
    helpers.truncate_note = function (params, text) {
        return $.truncate(text, {
            length: 90,
            block_tag: false,
            truncated_text: false,
            more: '\u00a0\u2026'
        });
    };

    helpers.truncate_task = function (params, text) {
        return helpers.truncate_note(params, text);
    };




    var appStyle = "";


appStyle= appStyle + "\n.Dg58Ge,.oLaOvc>div:last-child{padding-bottom:1px}.nH>.AT,.nH>.iiDCmd{display:none}table.Bs.nH.iY>tr>td.Bu>.nH.adC{position:static!important}div.u5,div.u8{display:none}div.am6{display:none}td.Bu>div.nH>div.nH>div.nH.anT{display:none}\n";

appStyle= appStyle + "\ndiv.fN>form{position:relative;padding-right:263px}table.Bs.nH.iY div.fN>form{padding-right:4px}body.xE div.fN>form{padding-right:0}div.compose-view-sidebar-container{position:absolute;right:11px;margin-top:3px}div.compose-view-sidebar-container div#ginipkg-sidebar{padding-left:15px;padding-right:15px}div.compose-view-sidebar-container>div.ginipkg-placeholder{padding-left:15px;padding-right:15px;border:1px solid transparent}\n";


appStyle= appStyle + "\n.blue-gini .spinner-container{text-align:center;}\n.comment-status{text-align: center;}\n.status-text{text-align:center;}\n.attachment_tab .status-text, .email_tab .status-text {line-height:20px;font-size:12px;}\n.spinner{vertical-align:middle; margin-right:10px;}\n\n.input-spinner {background: url("+img_base_url+"/ajax-loader-16x16.gif) no-repeat right center;}\n";

appStyle = appStyle + "\n.ginipkg-taskBar{margin-bottom: 20px;} .gini_taskbar_oc .hideme{    display: none;  }.gini_taskbar_oc .close {float: right;right: 10px;top: 13px;text-indent: -99999px;position: absolute;height:17px;width:17px;}.gini_taskbar_oc .close {  background:url("+img_base_url+"/v_3/sprites.png) 1px -2170px no-repeat;}.gini_taskbar_oc ul{ padding: 8px;border: 1px solid #d7d7d7; background: #f3f3f3; border-left: 2px solid #db4b39;}.gini_taskbar_oc ul li{  list-style: none;  display: inline-block;}.gini_taskbar_oc .nav li a{  text-decoration: none; margin-right:15px; padding: 6px;   border-bottom: none;  border-radius: 5px;  border-bottom-right-radius: 0px;   border-bottom-left-radius: 0px;   color: #5f5f5f;   font-family: arial;   font-size: 12px;}.gini_taskbar_oc .active{  color: #000!important; font-weight: bold;}.gini_taskbar_oc{  width: 100%;  height: auto;  margin-top: 10px; background-color: #fff;}.gini_taskbar_oc .divide{  margin-top: 9px;}.open_task thead td,.close_task thead td{}.task_bd tr td:nth-child(2){width:17%;}.task_bd tr td:nth-child(1){width:4%;}.task_bd tr td:nth-child(3){width:17%;}.task_bd tr a{text-decoration:none;color: #737373;} .task_bd tr a:hover{text-decoration:underline} .task_bd tr td:nth-child(4){width:17%;}.task_bd tr td:nth-child(5){width:17%;}.task_bd tr td:nth-child(6){width:12%;}.task_bd tr td:nth-child(7){width:12%;}.task_bd tr:hover{background-color:#ffffd6;}.gini_taskbar_oc .content{   display:none; margin-top: 5px; position: relative;}.gini_taskbar_oc .task_bd tr:hover{cursor: pointer;}.gini_taskbar_oc .task_bd {border-collapse:collapse;padding:0;width: 100%;}.gini_taskbar_oc .task_bd tr th{height: 23px;color: #737373; font-weight:bold; font-family: arial;padding-left: 16px;text-align:left;border:1px solid #e1e1e1;font-size: 12px; height:30px;}.task_bd tr td{color: #737373;font-family: arial;font-size: 12px;padding:0;margin: :0;padding-left: 16px;border:1px solid #e1e1e1;height: 30px;}.gini_taskbar_oc .view,.gini_taskbar_oc .edit,.gini_taskbar_oc .delete{float: left;height: 21px;text-indent: -999999px;display: block;width: 21px;margin-left: 5px;}.right_close_add{  width: 60px;  float: right;  right: 0;}.gini_taskbar_oc .collapse,.gini_taskbar_oc .add_task{margin-left: 3px;height: 26px;text-indent: -999999px;display: inline-block;width: 21px;}.gini_taskbar_oc .collapse{background:url("+img_base_url+"/v_3/sprites.png) 1px -2505px no-repeat;width: 27px;}.gini_taskbar_oc .collapsetoggle{ background:url("+img_base_url+"/v_3/sprites.png) 1px -2473px no-repeat;}.gini_taskbar_oc .add_task{ background:url("+img_base_url+"/v_3/sprites.png) 1px -2547px no-repeat;}.gini_taskbar_oc .view{ background:url("+img_base_url+"/v_3/sprites.png) 1px -2417px no-repeat;}.gini_taskbar_oc .edit{ background:url("+img_base_url+"/v_3/sprites.png) 1px -2363px no-repeat;}.gini_taskbar_oc .delete{ background:url("+img_base_url+"/v_3/sprites.png) 1px -2306px no-repeat;}.gini_taskbar_oc .action{  width:86px;  margin: auto;}.gini_taskbar_oc .back{position: absolute;float: left;left: 0;background:url("+img_base_url+"/v_3/sprites.png) 1px -3117px no-repeat;height: 31px;text-indent: -999999px;width: 31px;margin-top: 3px;margin-left: 35px;}.gini_taskbar_oc .del{background:url("+img_base_url+"/v_3/sprites.png) 1px -3162px no-repeat;height: 31px;text-indent: -999999px;width: 37px;margin-top: 11px;margin-left: 10px;display: inline-block;position: absolute;}.gini_taskbar_oc .next{position: absolute;float: right; right:0; background:url("+img_base_url+"/v_3/sprites.png) 1px -3073px no-repeat; height: 31px; text-indent: -999999px; width: 31px;margin-top: 7px;margin-right:63px; }.gini_taskbar_oc .page_index{height:32px;width: 100%;bottom: 0; border-left:none!important; border-right:none!important; border-top:none!important;}.gini_taskbar_oc .counting{ position: absolute;height: 31px;width: 100px;margin-top: 9px;float: left;font-size: 12px;margin-left: 30%;font-family: arial;color: white;word-wrap: break-word;}.gini_taskbar_oc .close_task{  display: none;}.gini_taskbar_oc_search { width: 200px; top: -4px;  position: relative; display: inline-block;float: right; right: 8px; }.gini_taskbar_oc_search input[type=text] {color: rgb(165, 165, 165); border: 1px solid #e5e4e4; padding-left: 5px; border-radius: 5px; font-size: 12px; width: 185px; height: 25px; outline: 0; }.gini_taskbar_oc_search a { background: url("+img_base_url+"/v_3/sprites.png) no-repeat scroll 5px -1868px transparent; top: 4px; height: 20px; right: 6px; overflow: hidden; display: block; float: right; position: absolute; border-left: none !important; text-indent: -999px; width: 30px; border-radius: 0 !important; }.err_task_oc{margin-top: 8%;margin-left: 40%;color: rgb(226, 132, 132);}.pagination_task{width: 239px;float: right;right: 0;clear: both;/*height: 46px;*/position: relative;padding-top:4px;}*{margin:0; padding:0;}.contact_check_green_image{background:url("+img_base_url+"/v_3/sprites.png) no-repeat scroll 1px -1650px;}.contact_check_red_image{background:url("+img_base_url+"/v_3/sprites.png) no-repeat scroll 1px -1594px;}.dropup,.dropdown{position:relative;}.record_exist_green_image{background:url("+img_base_url+"/v_3/sprites.png) no-repeat scroll 3px -1650px;}.record_exist_red_image{background:url("+img_base_url+"/v_3/sprites.png) no-repeat scroll 3px -1594px;}.dropdown-toggle{*margin-bottom:-3px;}.dropdown-toggle:active,.dropdown-toggle:focus,.open .dropdown-toggle{outline:0;}.caret{display:inline-block;width:0;height:0;vertical-align:top;border-top:4px solid #000000;border-right:4px solid transparent;border-left:4px solid transparent;content:'';}.dropdown .caret{margin-top:8px;margin-left:2px;}.dropdown-menu{position:absolute;top:25px;left:-25px;z-index:99999;display:block;float:left;min-width:120px;padding:5px 0;margin:2px 0 0;list-style:none;background-color:#ffffff;border:1px solid #ccc;border:1px solid rgba(0, 0, 0, 0.2);*border-right-width:2px;*border-bottom-width:2px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0, 0, 0, 0.2);-moz-box-shadow:0 5px 10px rgba(0, 0, 0, 0.2);box-shadow:0 5px 10px rgba(0, 0, 0, 0.2);-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box;}\.dropdown-menu.pull-right{right:0;left:auto;}.dropdown-menu .divider{*width:100%;height:1px;margin:9px 1px;*margin:-5px 0 5px;overflow:hidden;background-color:#e5e5e5;border-bottom:1px solid #ffffff;}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:20px;color:#333333;white-space:nowrap;}.dropdown-menu>li>a:hover,.dropdown-menu>li>a:focus,.dropdown-submenu:hover>a,.dropdown-submenu:focus>a{text-decoration:none;color:#ffffff;background-color:#0081c2;background-image:-moz-linear-gradient(top, #0088cc, #0077b3);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0077b3));background-image:-webkit-linear-gradient(top, #0088cc, #0077b3);background-image:-o-linear-gradient(top, #0088cc, #0077b3);background-image:linear-gradient(to bottom, #0088cc, #0077b3);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc', endColorstr='#ff0077b3', GradientType=0);}.dropdown-menu>.active>a,.dropdown-menu>.active>a:hover,.dropdown-menu>.active>a:focus{color:#ffffff;text-decoration:none;outline:0;background-color:#0081c2;background-image:-moz-linear-gradient(top, #0088cc, #0077b3);background-image:-webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0077b3));background-image:-webkit-linear-gradient(top, #0088cc, #0077b3);background-image:-o-linear-gradient(top, #0088cc, #0077b3);background-image:linear-gradient(to bottom, #0088cc, #0077b3);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc', endColorstr='#ff0077b3', GradientType=0);}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{color:#999999;}.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled = false);cursor:default;}.open{*z-index:1000;}\.open>.dropdown-menu{display:block;}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990;}.pull-right>.dropdown-menu{right:0;left:auto;}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px solid #000000;content:'';}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:1px;}.dropdown-submenu{position:relative;}.dropdown-submenu>.dropdown-menu{top:0;left:100%;margin-top:-6px;margin-left:-1px;-webkit-border-radius:0 6px 6px 6px;-moz-border-radius:0 6px 6px 6px;border-radius:0 6px 6px 6px;}.dropdown-submenu:hover>.dropdown-menu{display:block;}.dropup .dropdown-submenu>.dropdown-menu{top:auto;bottom:0;margin-top:0;margin-bottom:-2px;-webkit-border-radius:5px 5px 5px 0;-moz-border-radius:5px 5px 5px 0;border-radius:5px 5px 5px 0;}.dropdown-submenu>a:after{display:block;content:' ';float:right;width:0;height:0;border-color:transparent;border-style:solid;border-width:5px 0 5px 5px;border-left-color:#cccccc;margin-top:5px;margin-right:-10px;}.dropdown-submenu:hover>a:after{border-left-color:#ffffff;}.dropdown-submenu.pull-left{float:none;}\.dropdown-submenu.pull-left>.dropdown-menu{left:-100%;margin-left:10px;-webkit-border-radius:6px 0 6px 6px;-moz-border-radius:6px 0 6px 6px;border-radius:6px 0 6px 6px;}.dropdown .dropdown-menu .nav-header{padding-left:20px;padding-right:20px;}.typeahead{z-index:1051;margin-top:2px;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;}.accordion{margin-bottom:20px;}.accordion-group{margin-bottom:2px;border:1px solid #e5e5e5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;}.accordion-heading{border-bottom:0;}.accordion-heading .accordion-toggle{display:block;padding:8px 15px;}.accordion-toggle{cursor:pointer;}.accordion-inner{padding:9px 15px;border-top:1px solid #e5e5e5;}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);-moz-box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);box-shadow:inset 0 1px 1px rgba(0, 0, 0, 0.05);}\.well blockquote{border-color:#ddd;border-color:rgba(0, 0, 0, 0.15);}.well-large{padding:24px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;}.well-small{padding:9px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;}.close{float:right;font-size:20px;font-weight:bold;line-height:20px;color:#000000;text-shadow:0 1px 0 #ffffff;opacity:0.2;filter:alpha(opacity=20);}\.close:hover,.close:focus{color:#000000;text-decoration:none;cursor:pointer;opacity:0.4;filter:alpha(opacity=40);}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none;}.pull-right{float:right;}.pull-left{float:left;}.hide{display:none;}.show{display:block;}.invisible{visibility:hidden;}.affix{position:fixed;}.fade{opacity:0;-webkit-transition:opacity 0.15s linear;-moz-transition:opacity 0.15s linear;-o-transition:opacity 0.15s linear;transition:opacity 0.15s linear;}\.fade.appin{opacity:1;}.collapse{position:relative;height:0;overflow:hidden;-webkit-transition:height 0.35s ease;-moz-transition:height 0.35s ease;-o-transition:height 0.35s ease;transition:height 0.35s ease;}\.collapse.appin{height:auto;}@-ms-viewport{width:device-width;}\.hidden{display:none;visibility:hidden;}.visible-phone{display:none !important;}.visible-tablet{display:none !important;}.hidden-desktop{display:none !important;}.visible-desktop{display:inherit !important;}@media (min-width:768px) and (max-width:979px){.hidden-desktop{display:inherit !important;}\ .visible-desktop{display:none !important ;}\ .visible-tablet{display:inherit !important;}\ .hidden-tablet{display:none !important;}\}\@media (max-width:767px){.hidden-desktop{display:inherit !important;}\ .visible-desktop{display:none !important;}\ .visible-phone{display:inherit !important;}\ .hidden-phone{display:none !important;}\}\.visible-print{display:none !important;}\n";
// New UI bstrap.css  //

appStyle= appStyle + "\ntable.jCalendar {\n    background: none repeat scroll 0 0 #FFFFFF;\n    border-collapse: separate;\n    border-spacing: 0px;\n    width: 100%;\n}\ntable.jCalendar th {\n  background: none repeat scroll 0 0 #dadada;\n    color: #474747;\n    font-weight: bold;\n    padding: 3px 5px;\n}\n\ntable.jCalendar td {\n    background: #fff;\n    color: #000;\n    padding: 3px 5px;\n    text-align: center;\n}\ntable.jCalendar td.other-month {\n    \n    color: #ababab;\n}\ntable.jCalendar td.today {\n    background: #666;\n    color: #fff;\n}\ntable.jCalendar td.selected {\n    background: #f66;\n    color: #fff;\n}\ntable.jCalendar td.selected.dp-hover {\n    background: #f33;\n    color: #fff;\n}\ntable.jCalendar td.dp-hover,\ntable.jCalendar tr.activeWeekHover td {\n    background: #efefef;\n    color: #000;\n}\ntable.jCalendar tr.selectedWeek td {\n    background: #f66;\n    color: #fff;\n}\ntable.jCalendar td.disabled, table.jCalendar td.disabled.dp-hover {\n    background: #f4f4f4;\n    color: #888;\n}\ntable.jCalendar td.unselectable,\ntable.jCalendar td.unselectable:hover,\ntable.jCalendar td.unselectable.dp-hover {\n    background: #bbb;\n    color: #888;\n}\n\n/* For the popup */\n\n/* NOTE - you will probably want to style a.dp-choose-date - see how I did it in demo.css */\n\ndiv.dp-popup {\n background: none repeat scroll 0 0 #FFFFFF;\n    border: 1px solid #cccccc;\n    font-family: arial,sans-serif;\n    font-size: 11px;\n    line-height: 1.2em;\n    padding: 2px;\n    position: relative;\n    width: 171px;\n-webkit-box-shadow: 4px 4px 0px rgba(50, 50, 50, 0.1);\n-moz-box-shadow:    4px 4px 0px rgba(50, 50, 50, 0.1);\nbox-shadow:         4px 4px 0px rgba(50, 50, 50, 0.1);\n}\ndiv#dp-popup {\n    position: absolute;\n    z-index: 1010;\n}\ndiv.dp-popup h2 {\n    font-size: 12px;\n    text-align: center;\n    margin: 4px 0;\n    padding: 0;\n}\na#dp-close {\n    font-size: 11px;\n    padding: 4px 0;\n    text-align: center;\n    display: block;\n}\na#dp-close:hover {\n    text-decoration: underline;\n}\ndiv.dp-popup a {\n    color: #000;\n    text-decoration: none;\n    padding: 3px 2px 0;\n}\ndiv.dp-popup div.dp-nav-prev {\n    position: absolute;\n    top: 2px;\n    left: 4px;\n    width: 100px;\n}\ndiv.dp-popup div.dp-nav-prev a {\n    float: left;\n}\n/* Opera needs the rules to be this specific otherwise it doesn't change the cursor back to pointer after you have disabled and re-enabled a link */\ndiv.dp-popup div.dp-nav-prev a, div.dp-popup div.dp-nav-next a {\n    cursor: pointer;\n}\ndiv.dp-popup div.dp-nav-prev a.disabled, div.dp-popup div.dp-nav-next a.disabled {\n    cursor: default;\n}\ndiv.dp-popup div.dp-nav-next {\n    position: absolute;\n    top: 2px;\n    right: 4px;\n    width: 100px;\n}\ndiv.dp-popup div.dp-nav-next a {\n    float: right;\n}\ndiv.dp-popup a.disabled {\n    cursor: default;\n    color: #aaa;\n}\ndiv.dp-popup td {\n    cursor: pointer;\n}\ndiv.dp-popup td.disabled {\n    cursor: default;\n}\na.dp-choose-date{\n    width: 16px;\n    height: 16px;\n    padding: 0;\n    margin: 5px 3px 0;\n    display: inline-block;\n    text-indent: -2000px;\n    overflow: hidden;\n    background: url("+img_base_url+"/calendar.png) no-repeat; \n}\na.dp-choose-date.dp-disabled {\n    background-position: 0 -20px;\n    cursor: default;\n}\n";

//  New UI default.css  //
appStyle  = appStyle+"\n.gini-nav-menu{ border:1px solid #bebebe; background:#FFF; /*border-top:0px solid;*/ -webkit-box-shadow: 6px 6px 0px rgba(50, 50, 50, 0.09);-moz-box-shadow:    2px 3px 1px rgba(50, 50, 50, 0.09);box-shadow:         6px 6px 0px rgba(50, 50, 50, 0.09);}.gini-nav-menu ul {list-style-type:none!important; min-width:350px;}.gini-nav-menu ul li a{padding-left:20px; padding-right:10px; height:35px; line-height:35px; text-decoration:none; color:#15c; display:block; }.gini-nav-menu ul li a:hover{background:#f5f5f5;}\n";

appStyle  = appStyle+"\n.reveal-open {max-height: 250px!important;overflow-y:auto!important}\np.profile-description { overflow: hidden;max-height: 60px;-webkit-transition: max-height .5s linear;-moz-transition: max-height .5s linear;transition: max-height .5s linear;}\n";

appStyle = appStyle + "\n.blue-gini{background:white;width:220px!important; font-family:Arial, Helvetica, sans-serif; font-size:13px; padding:0; word-wrap:  break-word;     direction:  ltr; line-height:  1.2;z-index:0 !important; height:100%; /*border-left:1px dotted #9e9e9e;*/}.blue-gini > ol.sections { list-style: none; padding: 0; margin: 0; width: 236px}.blue-gini > ol.sections li { padding: 0px;}.blue-gini a {list-style:none; text-decoration:none;}.blue-gini ul li {list-style:none;}.blue-gini .header{height:20px; font-size:13px;  position:relative;padding-top: 3px;padding-left: 0px;}.blue-gini .header img{float:left; padding-right:5px;}.blue-gini .personal{margin-bottom:10px;}.blue-gini .personal a{ color:#066591;}.blue-gini .personal a:hover{text-decoration:underline;}.blue-gini .personal h2{background: #e8eef2; /* Old browsers */background: -moz-linear-gradient(top,  #e8eef2 0%, #bec6ca 100%); /* FF3.6+ */background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#e8eef2), color-stop(100%,#bec6ca)); /* Chrome,Safari4+ */background: -webkit-linear-gradient(top,  #e8eef2 0%,#bec6ca 100%); /* Chrome10+,Safari5.1+ */background: -o-linear-gradient(top,  #e8eef2 0%,#bec6ca 100%); /* Opera 11.10+ */background: -ms-linear-gradient(top,  #e8eef2 0%,#bec6ca 100%); /* IE10+ */background: linear-gradient(to bottom,  #e8eef2 0%,#bec6ca 100%); /* W3C */filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#e8eef2', endColorstr='#bec6ca',GradientType=0 ); /* IE6-9 */border:1px solid #d6d9db; color:#103d4a; font-size:12px; font-weight:normal; padding:3px 5px;}.blue-gini .personal h2 span.minus, .blue-gini .personal h2 span.plus{background:url("+img_base_url+"/plus-minus-icn.png) no-repeat 0 0; height:12px; width:12px; float:right; margin-top:2px;}.blue-gini .personal h2 span.plus{background-position:0 -13px;}.blue-gini .personal .block1, .blue-gini .personal .block2, .blue-gini .personal .block3{border-bottom:1px dashed #c9d2d6; padding:8px 5px; background:#f7f8f8;position:relative;}.blue-gini .personal .block1:after{clear:both; display:block; visibility:hidden; content:'.'; height:1px;}.blue-gini .personal .block1 .prof-pic{ border: 1px solid #C0CDD7;border-radius: 4px 4px 4px 4px;float: left;margin-right: 10px; padding: 4px; position: relative;}.blue-gini .personal .block1 .no-company-msg{ border: 1px solid #C0CDD7;border-radius: 4px 4px 4px 4px;float: left;margin-right: 15px; padding: 4px; position: relative;}.blue-gini .personal .block1 h3{color:#69848d; font-size:13px; padding-bottom:5px;}.blue-gini .personal .block1 h3 span.info, .blue-gini .personal .block4 span.info{  background: url('"+img_base_url+"/sprits.png') no-repeat scroll -10px 0 transparent;height: 15px;margin-left: 5px;position: absolute;right: 2px;top: 8px;width: 15px;}.blue-gini .personal .block1 h3 span.info .info-settings, .blue-gini .personal .block4 span.info .info-settings{ display:block; overflow:hidden; text-indent:-999px;}.blue-gini .personal .block1 p{color:#636464; font-style:italic; padding-bottom:5px; font-size:12px;}.blue-gini .personal .block2 h3{color:#066591; padding-bottom:3px; font-size:11px; }.blue-gini .personal .block2 p{color:#636464; padding-bottom:7px; }.blue-gini .personal .block3 span.cnt img, .blue-gini .personal .block4 .cnt img{vertical-align:middle; margin-right:5px;}.blue-gini .personal .block3 .button, .blue-gini .personal .block4 .button{ margin-right:15px;background: #eef2f4; /* Old browsers */background: -moz-linear-gradient(top,  #eef2f4 0%, #dce7f0 100%); /* FF3.6+ */background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#eef2f4), color-stop(100%,#dce7f0)); /* Chrome,Safari4+ */background: -webkit-linear-gradient(top,  #eef2f4 0%,#dce7f0 100%); /* Chrome10+,Safari5.1+ */background: -o-linear-gradient(top,  #eef2f4 0%,#dce7f0 100%); /* Opera 11.10+ */background: -ms-linear-gradient(top,  #eef2f4 0%,#dce7f0 100%); /* IE10+ */background: linear-gradient(to bottom,  #eef2f4 0%,#dce7f0 100%); /* W3C */filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#eef2f4', endColorstr='#dce7f0',GradientType=0 ); /* IE6-9 */border:1px solid #cfdce5; color:#8e979d; text-transform:uppercase; font-size:10px; float:right; width:70px; text-align:center; border-radius:3px;}.blue-gini .personal .block4{border-bottom:1px dashed #c9d2d6; padding:8px 5px; position:relative;}.blue-gini .personal .block4 .open-gini{background:url("+img_base_url+"/plus-minus-icn.png) no-repeat 0 -45px; height:12px; width:12px; float:right; margin-right:10px;}.blue-gini .personal .block4 .close{background:url("+img_base_url+"/plus-minus-icn.png) no-repeat 0 -56px; height:12px; width:12px; float:right; margin-right:10px;}.blue-gini .personal .block4 p{color:#2d2d2d; padding-top:5px;}.blue-gini .block-border {border-top:1px solid #CCC;}.blue-gini .block-remove-doted{border-bottom:0px solid!important;}#crm-block .crm-info li.crm-list-left, .crm-list-right {list-style: none outside none; text-align: center; width: 49.5%; height:23px;}#crm-block .crm-info b.caret{border-top: 4px solid  #FFF;margin-top: 11px;}#crm-block .crm-info li.crm-list-left {border-right:1px solid #374b53;}#crm-block .crm-info li.crm-list-left {float:left;}#crm-block .crm-info li.crm-list-right {border-left:1px solid #797b7b; float:right;}.calling-details {width:100%; float:left; height:23px;  background: rgb(119,119,119); /* Old browsers */background: -moz-linear-gradient(top,  rgba(119,119,119,1) 0%, rgba(80,80,80,1) 99%); /* FF3.6+ */background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(119,119,119,1)), color-stop(99%,rgba(80,80,80,1))); /* Chrome,Safari4+ */background: -webkit-linear-gradient(top,  rgba(119,119,119,1) 0%,rgba(80,80,80,1) 99%); /* Chrome10+,Safari5.1+ */background: -o-linear-gradient(top,  rgba(119,119,119,1) 0%,rgba(80,80,80,1) 99%); /* Opera 11.10+ */background: -ms-linear-gradient(top,  rgba(119,119,119,1) 0%,rgba(80,80,80,1) 99%); /* IE10+ */background: linear-gradient(to bottom,  rgba(119,119,119,1) 0%,rgba(80,80,80,1) 99%); /* W3C */filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#777777', endColorstr='#505050',GradientType=0 ); /* IE6-9 */}#crm-block a.dropdown-toggle{ color:#FFF;}#crm-block .crm-info li.crm-list-left a{text-decoration:none; line-height:24px; }#crm-block .crm-info li.crm-list-right a{text-decoration:none; line-height:24px;}.main-call-btn { padding-left:25px; background:url("+img_base_url+"/sprits.png)-3px -195px no-repeat;}#crm-block .call-details-form li { text-align:left; border-bottom:1px solid #1e4553; border-bottom: 1px solid #1E4553;border-top: 1px solid #3E6976;height: 32px; padding: 4px 0;}#crm-block .dropdown-menu li:first-child{ border-top:0px;}#crm-block .dropdown-menu li:last-child{ border-bottom:0px;}#crm-block .call-details-form {min-width:198px; background:#275765; border-radius:0px; padding:5px;}#crm-block .call-details-form input[type='text']{ width:98%; height:18px; border:1px solid #abadb3;}.call-text-box {float:left; width:64%; margin-top:6px;}.call-links-box{float:left; width:36%; margin-top:5px;}.call-links-number { width:65%; float:left; margin-top:6px; line-height:14px; color:#FFF; font-size:13px;}#crm-block .head-phone { background:url("+img_base_url+"/sprits.png) 3px -113px no-repeat; display:block; float:left; width:34px; height:21px; text-indent:-999px; overflow:hidden;}#crm-block .phone-talk { background:url("+img_base_url+"/sprits.png) 3px -150px no-repeat; display:block; float:left; width:34px; height:21px; text-indent:-999px; overflow:hidden;}#crm-block .crm-info-add { background:#275765;  border-radius:0px; text-align:left; font-size:13px; right:0px;}#crm-block .crm-info-add a {color:#FFF;}#crm-block .crm-info-add a:hover{background:#3399ff;}#crm-block .icon-chevron {width:16px; height:16px;background:url("+img_base_url+"/sprits.png) -11px -406px;}#crm-block .collapsed .icon-chevron {width:16px; height:16px; background:url("+img_base_url+"/sprits.png) -11px -369px;}.top-drop-box{  position: absolute;right: 1px;top: 11px;width: 20px; background:url("+img_base_url+"/sprits.png) -11px -221px no-repeat;}.top-drop-box:hover{  position: absolute;right: 1px;top: 11px;width: 20px; background:url("+img_base_url+"/sprits.png) -11px -252px no-repeat;}.top-drop-box .dropdown{position:relative; height:20px; font-size:13px; font-family:Arial, Helvetica, sans-serif;}.top-drop-box .dropdown a {color:#26799f; text-decoration:none; height:24px;}.dropbox-link{display:block; overflow:hidden; display:block; text-indent:-999px;}.top-drop-box .dropdown-menu {left:-142px;}.search-detail {margin:5px 0; height:16px;}.add-new-details-link { height:13px; width:53px; color:#616467; text-align:center; text-decoration:none; line-height:13px; border:1px solid #d1dfe7; border-radius:3px; display:block; background: rgb(240,246,248); /* Old browsers */background: -moz-linear-gradient(top,  rgba(240,246,248,1) 0%, rgba(224,237,244,1) 100%); /* FF3.6+ */background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(240,246,248,1)), color-stop(100%,rgba(224,237,244,1))); /* Chrome,Safari4+ */background: -webkit-linear-gradient(top,  rgba(240,246,248,1) 0%,rgba(224,237,244,1) 100%); /* Chrome10+,Safari5.1+ */ background: -o-linear-gradient(top,  rgba(240,246,248,1) 0%,rgba(224,237,244,1) 100%); /* Opera 11.10+ */background: -ms-linear-gradient(top,  rgba(240,246,248,1) 0%,rgba(224,237,244,1) 100%); /* IE10+ */background: linear-gradient(to bottom,  rgba(240,246,248,1) 0%,rgba(224,237,244,1) 100%); /* W3C */filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f0f6f8', endColorstr='#e0edf4',GradientType=0 ); /* IE6-9 */}.add-new-details-link .caret {margin-top:5px!important;}.dropdown-details{float:left; width:25%;}.searchbox {float:left; width:97%; margin-left:3%;}.searchbox input[type='text']{width:88%; height:14px; border:1px solid #dde1e3; background:#FFF;}.searchbox input[type='button']{width:20px; float:right; display:block; text-indent:-999px; background:url("+img_base_url+"/sprits.png) -14px -286px no-repeat; height:12px; width:12px; border:none; margin-top:2px; cursor:pointer;}.call-record-desc {clear:both;}.call-record-desc .accordion-group {margin-bottom:-1px;  background:#f9f9f9; border-right:none; border-left:none;  border-radius:0px;}.call-record-desc .accordion-heading {position:relative;}.new-leads-detail { position: absolute; right: 36px; top: 8px;}.call-record-desc .icon-arrow-down{ background:red; height:32px; width:32px; color:red;}.icon-arrow-up { background:blue; height:32px; width:32px; color:red;}.call-record-desc .email-id{   left: 14px; position: relative; top: -6px;}.call-record-desc .accordion { margin-bottom:0px;}.call-record-desc .accordion-heading a{color:#066591; font-size:12px;}.call-record-desc .accordion-heading a{color:#066591; font-size:12px;}.call-record-desc .accordion-inner {padding: 0px 0px 0 0px; background:#FFF;}.old-leads, .new-leads {float:left; margin-left:5px; height:16px; text-align:center; border-radius:3px;}.new-leads {background:#e5563e; color:#FFF; width:20px; }.old-leads {background:#255765; color:#FFF; width:16px; }.call-record-desc .common-name-time li { height:26px; border-top:1px solid #e7eaeb; line-height:26px; margin:0px; }.call-record-desc .common-name-time li > span {padding-left:20px;}.call-record-desc .common-name-time li:first-child {border-top:0px solid #e7eaeb;}.caret-dropdown  {  background: url('"+img_base_url+"/sprits.png') no-repeat scroll -12px -307px transparent;display: block; height: 16px; overflow: hidden; text-indent: -999px; width: 16px; float:right; margin-right:10px; margin-top: 3px;}.call-record-desc .common-name-time .dropdown{ float:right;}.call-record-desc .common-name-time .dropdown-menu { border-radius:0px; min-width: 300px; padding:5px; left:-287px;}.call-record-desc .common-name-time .dropdown-menu li {height:auto; line-height:auto; clear:both; padding-top:3px;}.call-record-desc .common-name-time .dropdown-menu li strong{display: block; line-height:18px; float: left; width: 35%; }.call-record-desc .common-name-time .dropdown-menu li p {float:left; line-height: 18px; padding-left:5px;width: 61%;}.call-record-desc .common-name-time .dropdown-menu:before {border-bottom: 7px solid rgba(0, 0, 0, 0.2); border-left: 7px solid transparent; border-right: 7px solid transparent; content: '';display: inline-block;right: 9px; position: absolute; top: -7px;}.call-record-desc .common-name-time .dropdown-menu:after {border-bottom: 6px solid #FFFFFF;border-left: 6px solid transparent;border-right: 6px solid transparent;content: '';display: inline-block;right: 10px;position: absolute;top: -6px;}.caret-dropdown:hover { background: url('"+img_base_url+"/sprits.png') no-repeat scroll -12px -328px transparent;}.blue-gini .more-link { float:right;text-transform:uppercase;;margin-right:5px;cursor:pointer;}.blue-gini .info .dropdown-menu{ border-radius:0px; padding:0; border-top:0px solid; min-width:100px; left: -87px;}.blue-gini .info .dropdown-menu li { border-top:1px solid #dfe2e4;}.blue-gini .accordion-body.appin{ overflow:visible; }.text-label { color: #cdcdcd;   font-size:10px;}.edit_image_button {position:absolute;  bottom:-62px; left:10px; -moz-border-radius-topright: 10px;-webkit-border-top-right-radius: 10px;border-top-right-radius: 10px;display:none;}.edit_image_button a{width:15px; height:15px; background:url('"+img_base_url+"/sprits.png') -11px -1305px #fff; no-repeat scroll 2px -425px #fff;border: 1px solid #d8d8d8; display:block; text-indent:-999px; overflow:hidden;}.edit_image_button a:hover{border: 1px solid #c8c8c8;}";
//  New UI default.css  //


// New UI Form.css  //
appStyle = appStyle + "\n#general-form-container .form-fields input[type='file'] {}\n#general-form-container .form-fields .error {-webkit-box-shadow: 0 0 10px -2px rgba(252, 0, 0, 0.42);-moz-box-shadow: 0 0 10px -2px rgba(252, 0, 0, 0.42));box-shadow: 0 0 10px -2px rgba(252, 0, 0, 0.42); border:1px solid #F00;}\n.form-data-container input[type='text'],  .form-data-container textarea, .form-data-container select{background-color: #ffffff;border:1px solid #cccccc;-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);-moz-box-shadow: inset 0 1px 1px rgba(0, 0,0, 0.075); box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);-webkit-transition: border linear 0.2s, box-shadow linear 0.2s;-moz-transition: border linear 0.2s, box-shadow linear 0.2s;-o-transition: border linear 0.2s, box-shadow linear 0.2s;transition: border linear 0.2s, box-shadow linear 0.2s;  display: inline-block;  height: 20px;  padding: 4px 0;  font-size: 14px;  line-height: 20px;color: #555555;  vertical-align: middle;  -webkit-border-radius: 4px;     -moz-border-radius: 4px; border-radius: 4px;}\n.form-data-container textarea {    height: auto;}\n.form-data-container textarea:hover {    border:1px solid #a9a8a8;}\n.form-data-container textarea:focus {-webkit-box-shadow: 0px 0px 10px -1px rgba(234,234,234,1);-moz-box-shadow: 0px 0px 10px -1px rgba(234,234,234,1);box-shadow: 0px 0px 10px -1px rgba(234,234,234,1); border:1px solid #e3e3e3; }\n.form-data-container select {height: 30px;}\ntextarea:focus, input:focus{outline: 0;}\n.form-data-container input[type='text']:hover {border:1px solid #a9a8a8;}\n.form-data-container input[type='text']:focus {-webkit-box-shadow: 0px 0px 10px -1px rgba(234,234,234,1);-moz-box-shadow: 0px 0px 10px -1px rgba(234,234,234,1);box-shadow: 0px 0px 10px -1px rgba(234,234,234,1); border:1px solid #e3e3e3; }\n#general-form-container {width:50%; margin:2% auto; border:1px solid #CCC; -webkit-border-radius: 5px;-moz-border-radius: 5px;border-radius: 5px; font-family:Arial, Helvetica, sans-serif; background:#ffffff;}\n#general-form-container .submit-box{ clear: both;    height: 55px;    padding-right: 40px;    text-align: right;}\n#general-form-container .submit-box button {margin-right:5px!important;border:1px solid #dcdcdc;  background:#f7f7f7; height:35px; padding:0 10px 0 10px; -webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;}\n#general-form-container .submit-box button:hover { border:1px solid #c6c6c6;  -webkit-box-shadow: 2px 2px 2px rgba(50, 50, 50, 0.1);-moz-box-shadow:    2px 2px 2px rgba(50, 50, 50, 0.1);box-shadow:         2px 2px 2px rgba(50, 50, 50, 0.1); cursor:pointer;}\n#general-form-container .general-form-heading {height:40px; position:relative; border-bottom:1px solid #d6d6d6; font-family:Arial, Helvetica, sans-serif; background:#efefef; -moz-border-radius-topleft: 5px;-webkit-border-top-left-radius: 5px; border-top-left-radius: 5px;-moz-border-radius-topright: 5px;-webkit-border-top-right-radius: 5px;border-top-right-radius: 5px;}\n#general-form-container .form-fields > span {    float: left;    margin-right: 15px;    font-size:13px; color:#555555;}\n#general-form-container .general-form-heading .heading {float:left; margin-left:20px; font-size:13px; line-height:40px;}\n#general-form-container .general-form-heading .heading h3 { font-size:15px;}\n#general-form-container .form-fields .radio_checkbox_text{ display:inline; line-height:25px;}\n#general-form-container .general-form-heading .close_btn {font-size: 13px;    line-height: 47px;    margin-right: 20px;    position: absolute;    right: 0;    top: 8px;}\n#general-form-container .general-form-heading .close_btn a {background:url("+img_base_url+"/sprits.png) -9px -433px no-repeat; width:20px; height:20px; overflow:hidden; text-indent:-9999px; display:block;}\n#general-form-container .form-row { width:100%; float:left; margin:8px 0;}\n#general-form-container .top-legends{width:90%; color:#555555; float:left; text-align:left; margin-right:4%; height:28px; line-height:28px; font-size:12px; clear:both;}\n#general-form-container .top-legends .error-mark{color:#F00; font-size:12px; font-weight: bold; text-align:right; margin-right:4px; }\n#general-form-container .form-label{width:30%; color:#555555; float:left; text-align:right; margin-right:4%; height:28px; line-height:28px; font-size:12px;}\n#general-form-container .form-fields .add-on {position:absolute; right:-3px;}\n#general-form-container .form-fields{width:60%; float:left; position:relative;}\n#general-form-container .form-fields .dependency-date{width:31%;}\n#general-form-container .form-fields .dependency-text{width:31%;}\n#general-form-container .form-fields .dependency-select{width:17%;}\n#general-form-container .form-fields .dependency-text-select{width:60%;}\n#general-form-container .form-fields div.error-msg {color:#F00; clear:both; font-size:12px; font-style:italic; margin-top:5px;}\n#general-form-container .form-fields label {width:auto; float:left; margin-right:10px;}\n#general-form-container .form-data-container { margin:2% 3%; width:94%; height:auto; float:left; overflow-y:auto;max-height:700px !important;}\n#new-template-iframe, #save-template-iframe{height: 505px!important;}#configure-crm-iframe{height: 229px!important;}#general-form-container .form-fields input[type='radio'] {width:14px; height:28px;}\n#general-form-container .form-fields input[type='checkbox'] {width:14px; height:28px;}\n#general-form-container .form-fields input{ width:92%;}\n#general-form-container .form-fields textarea {width:92%; font-family:Arial, Helvetica, sans-serif; font-size:14px;}\n#general-form-container .form-fields select {width:92%; padding-right:2%;}\n#general-form-container .form-fields .processing { display: inline;    right: 10px;    position: absolute;    top: 5px;}\n#general-form-container .form-fields .btn-group{width:100%;}\n#general-form-container .form-fields .btn-group .dropdown-toggle{width:100%;}\n#general-form-container .form-fields .label_check,#general-form-container .form-fields .label_radio { padding-left: 25px; }\n#general-form-container .form-fields .label_radio {background:url("+img_base_url+"/forms/checkbox-radio-bg.png) 0px -33px no-repeat;}\n.label_check {background:url("+img_base_url+"/forms/checkbox-radio-bg.png) 0px -109px no-repeat; }\n#general-form-container .form-fields label.c_on { background:url("+img_base_url+"/forms/checkbox-radio-bg.png) 0px -71px no-repeat; }\n#general-form-container .form-fields label.r_on { background:url("+img_base_url+"/forms/checkbox-radio-bg.png) 0px 2px no-repeat; }\n#general-form-container .form-fields .label_check input,#general-form-container .form-fields .label_radio input { position: absolute; left: -9999px; }\n.clearfix:after {   visibility: hidden; display: block; font-size: 0;   content: ' ';   clear: both;    height: 0;}\n.checkbox, .radio { width: 19px;    height: 25px;   padding: 0 5px 0 0; background: url("+img_base_url+"/forms/images/checkbox.png) no-repeat;  display: block; clear: left;    float: left;}\n.radio {    background:url("+img_base_url+"/forms/radio.png) no-repeat;}\n.gini_listing_box {width:100%; clear:both;padding:5px 0px 0px 2px}\n.gini_listing_box .top-heading {background:#255765; color:#FFF;}\n.gini_listing_box .file-details , .gini_listing_box .file-date { height:20px; line-height:20px; border-bottom:1px solid #e3e3e3; padding-left:1%; }\n.emailTable{min-height:100px;}\n.gini_listing_box .file-details { width:57%; float:left;}\n.gini_listing_box .file-date { width:40%; float:left; border-left:1px solid #e3e3e3;}\n.gini_listing_box .file-date span {float:right;}\n.gini_listing_box .file-date span a {display: inline-block;height:16px;width:16px;text-indent:-999px;overflow:hidden;background:url("+img_base_url+"/sprits.png)-12px -542px;}\n.gini_listing_box .file-date span a:hover {background:url("+img_base_url+"/sprits.png)-12px -567px;}\n";

// handle_err_msg class

appStyle = appStyle + "\n.error_alert {\npadding: 10px;background: #fffef9;margin: 10px;border: 1px solid #bfbfbf;box-shadow: 0px 0px 5px 0px rgba(50, 50, 50, 0.2);text-align: center;font-size: 12px;}\n.error_alert strong {color: #fb7c7c;margin-bottom: 15px;display: block;font-size: 13px;text-transform: uppercase;}\n.error_details { border: 1px solid #CCCCCC;color: #000000;background-color: rgb(247, 240, 240);padding: 5px 0px 5px 5px;margin-top: 15px;display: none;} \n\n.blue-gini .personal input[type='text']{background-color: #ffffff;border:1px solid #cccccc; display: inline-block;  height: 16px;  padding: 1px 0px 1px 2px;  font-size: 11px;  color: #555555;  vertical-align: top; border-radius: 4px;}\n.userAttachmetList .header th{line-height:23px;}\n";


//  New UI Form.css Ends here //

appStyle = appStyle + "\n#ginipkg-template-category{    margin-top:3px;    padding-left: 8px;}\n.template-container{    border:1px solid black;    margin-top: 7px;    padding-top: 5px;}\n.ginipkg-templatebar{\template-container#ginipkg-template-category .template-category{    padding-left: 10px;padding-right: 10px;padding-top: 8px;margin: 3px;color: #103d4a;background-color: rgb(249,249,249);    }.template-container{    height: auto;}button {    margin-right:5px!important;border:1px solid #dcdcdc;  background:#f7f7f7; height:35px; padding:0 10px 0 10px; -webkit-border-radius: 2px;-moz-border-radius: 2px;border-radius: 2px;}\n}button:hover { border:1px solid #c6c6c6;  -webkit-box-shadow: 2px 2px 2px rgba(50, 50, 50, 0.1);-moz-box-shadow:    2px 2px 2px rgba(50, 50, 50, 0.1);box-shadow:         2px 2px 2px rgba(50, 50, 50, 0.1); cursor:pointer;}\n}";
//gksc

// ---------------------------------------- v_3.0 CSS ------------------------------------------
img_base_url = img_base_url+"/v_3";appStyle
//some Css changes by gaurav at 10 july 2014
appStyle = appStyle + "\nhtml,\nbody { height: 100%; }\n*{ margin:0; padding:0; }\n.outer_div{height:auto; font-family:Arial, Helvetica, sans-serif; margin:0px; padding:0px; height:100%; border-left:1px solid #e3e4e4; border-right:1px solid #e3e4e4;margin: 0 auto; }\n.outer_div ul li {list-style-type:none;}\n.main_header { /*height:208px;*/ }\n.top_header {min-height:50px; position:relative; }\n.logo { background:url("+img_base_url+"/ginicube_40px.png) 7px 0px no-repeat; line-height:29px; font-size:10px; border-bottom:1px solid #e3e4e4;height:32px;width:55px;}\n.main-logo-back { cursor:pointer; border:1px solid red;}\n.header_dropdown { height:29px; width:23px; line-height:29px; position:absolute; right:0px; top:0px;}\n.search_box {height:37px; position:relative; border-bottom:1px solid #e3e2e2; background: rgb(251,252,252);\nbackground: -moz-linear-gradient(top, rgba(251,252,252,1) 0%, rgba(237,238,237,1) 100%);\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(251,252,252,1)), color-stop(100%,rgba(237,238,237,1))); \nbackground: -webkit-linear-gradient(top, rgba(251,252,252,1) 0%,rgba(237,238,237,1) 100%);\nbackground: -o-linear-gradient(top, rgba(251,252,252,1) 0%,rgba(237,238,237,1) 100%);\nbackground: -ms-linear-gradient(top, rgba(251,252,252,1) 0%,rgba(237,238,237,1) 100%);\nbackground: linear-gradient(to bottom, rgba(251,252,252,1) 0%,rgba(237,238,237,1) 100%);\nfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fbfcfc', endColorstr='#edeeed',GradientType=0 );}\n.search_box input[type='text']{ height:22px; width:150px; padding-left:5px; padding-right:20px; margin-left:8px; margin-top:7px; border:1px solid #e5e4e4; background:#FFF; -webkit-border-radius: 80px;-moz-border-radius: 80px;border-radius: 80px; -webkit-box-shadow: 0px 0px 5px rgba(50, 50, 50, 0.06); position: absolute; left: 28px;-moz-box-shadow:    0px 0px 5px rgba(50, 50, 50, 0.06);box-shadow:0px 0px 5px rgba(50, 50, 50, 0.06);}\n.search_box input[type='text']{ /*height:22px; width:140px; padding-left:5px; padding-right:25px; margin-left:38px; margin-top:7px; border:1px solid #e5e4e4; background:#FFF; -webkit-border-radius: 80px;-moz-border-radius: 80px;border-radius: 80px; -webkit-box-shadow: 0px 0px 5px rgba(50, 50, 50, 0.06);-moz-box-shadow:    0px 0px 5px rgba(50, 50, 50, 0.06);box-shadow:0px 0px 5px rgba(50, 50, 50, 0.06);}\n.search_box input[type='text']:focus { border:1px solid #cccbcb; -webkit-transition: all 0.6s ease-in-out;-moz-transition: all 0.6s ease-in-out;-o-transition: all 0.6s ease-in-out;transition: all 0.6s ease-in-out;*/}\n.edit_sync{position: absolute;right: 10px;top: 10px;}\n.edit_sync ul li {float:left;  background:#FFF; border:1px solid #d3d3d3; width:16px; height:17px;}\n.edit_sync ul li:first-child{border-right:0px solid;}\n.edit_sync ul li a {overflow:hidden; display:block; text-indent:-999px; width:16px; height:17px;}\n.edit_sync ul li.sync a{  background: url("+img_base_url+"/sprites.png) no-repeat scroll 1px -399px ;}\n.edit_sync ul li.edit a{  background: url("+img_base_url+"/sprites.png) no-repeat scroll 2px -424px ;}\n.edit_sync_account{position: absolute;float:right;right: 3px;margin-top: 8px;}\n.edit_sync_account ul li {float:left;  background:#FFF; border:1px solid #d3d3d3; width:16px; height:17px;}\n.edit_sync_account ul li:first-child{border-right:0px solid;}\n.edit_sync_account ul li a {overflow:hidden; display:block; text-indent:-999px; width:16px; height:17px;}\n.edit_sync_account ul li.sync a{  background: url("+img_base_url+"/sprites.png) no-repeat scroll 1px -399px ;}\n.edit_sync_account ul li.edit a{  background: url("+img_base_url+"/sprites.png) no-repeat scroll 2px -424px ;}\n.search_box input[type='button'] { background: url("+img_base_url+"/sprites.png) no-repeat scroll 1px -4px #fff; cursor:pointer;border: medium none;height: 22px;position: absolute;right: 21px;top: 7px;width: 20px;}\n.person_info{ background:#f7f8f8; border-top:1px solid #FFF; position:relative; padding:10px 8px 23px 8px; }\n.person_name {min-height:20px;font-size:17px; color:#747474; width:80%;}\n.primary-profile .person_name {padding-left: 10px;}\n.person_details {float:left; width:121px; margin:12px 0 0 10px; min-height:80px;}\n.person_pic{ border:1px solid #dadada; width:70px; height:72px; background:#fff; margin-top:13px; float:left; }\n.person_profile {color:#555555; font-style:italic; font-size:14px; }\n.person_Company a{ color:#0074b2; line-height:20px; font-size:13px; text-decoration:none;}\n.person_email { color:#555555; font-size:13px; line-height:20px;}\n.person_phone{ color:#555555; font-size:13px; line-height:20px;}\n.arrow_down {border-left: 5px solid transparent;border-right: 5px solid transparent;border-top: 5px solid #949494;height: 5px;margin-left: 4px;position: relative;top: 11px;width: 5px;}\n.main_body {float:left;}\n.tabs input[type=radio] {\n          position: absolute;\n          top: -9999px;\n          left: -9999px;\n      }\n      .tabs {\n        list-style: none;\n        position: relative;\n        padding: 0;\n      }\n      .tabs li{\n        float: left;\n      }\n      .tabs label {\n          display: block;\n          width:42px;\n          height:33px;\n          border:1px solid #eeeeee;\n          cursor: pointer;\n          position: relative;\n          border-right:none;\n          top: 0px;\n          background: rgb(255,255,255); \n        background: -moz-linear-gradient(top, rgba(255,255,255,1) 0%, rgba(248,248,248,1) 100%);\n        background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,1)), color-stop(100%,rgba(248,248,248,1)));\n        background: -webkit-linear-gradient(top, rgba(255,255,255,1) 0%,rgba(248,248,248,1) 100%);\n        background: -o-linear-gradient(top, rgba(255,255,255,1) 0%,rgba(248,248,248,1) 100%);\n        background: -ms-linear-gradient(top, rgba(255,255,255,1) 0%,rgba(248,248,248,1) 100%);\n        background: linear-gradient(to bottom, rgba(255,255,255,1) 0%,rgba(248,248,248,1) 100%);]\n        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#f8f8f8',GradientType=0 );\n        -webkit-box-shadow: 0px -7px 11px rgba(50, 50, 50, 0.05);\n        -moz-box-shadow:    0px -7px 11px rgba(50, 50, 50, 0.05);\n        box-shadow:         0px -7px 11px rgba(50, 50, 50, 0.05);\n      }.tabs label:hover {background: rgba(255,255,255,0.5);top: 0;}\n.person, .company, .attachments, .mails, .crm{display: block;height: 34px;width: 40px;}\n.person { background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -32px ;}\n.company {background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -67px ;}\n.attachments {background: url("+img_base_url+"/sprites.png) no-repeat scroll 16px -137px;}\n.mails { background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -176px ;}\n.crm {background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -211px ; border-right:1px solid #e1e1e1;}\n[id^=tab]:checked + label {background:#FFF;color: white;top: 0;border-bottom:1px solid #FFF;}\n[id^=tab]:checked + label .person {background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -503px ;}\n[id^=tab]:checked + label .company {background: url("+img_base_url+"/sprites.png) no-repeat scroll 14px -532px ;}\n[id^=tab]:checked + label .attachments {background: url("+img_base_url+"/sprites.png) no-repeat scroll 15px -561px;}\n[id^=tab]:checked + label .mails {background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -592px ;}\n[id^=tab]:checked + label .crm {background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -624px;}\n[id^=tab]:checked ~ [id^=tab-content] {display: block;}\n.tab-content{z-index: 1;text-align: left;padding-top: 10px;background: #fff;position: absolute;left: 0;box-sizing: border-box;-webkit-animation-duration: 0.5s;-o-animation-duration: 0.5s;-moz-animation-duration: 0.5s;animation-duration: 0.5s;width:220px;}\n.abtus-sect {padding:5px;}\n.abtus-sect h3, .social-sect h3{color:#2e2e2e; text-transform:uppercase; text-transform:upper-case; padding:3px 0 7px 30px; border-bottom:none;  font-weight:normal; font-size:14px;}\n.abtus-sect h3{background:url("+img_base_url+"/sprites.png) no-repeat 4px -457px;}\n.social-sect h3 {background:url("+img_base_url+"/sprites.png) no-repeat 4px -108px}\n.social-sect h2 {no-repeat 4px -104px}\n.abtus-sect .cntnt{padding:10px 0;}\n.abtus-sect .cntnt p{color:#7e7e7e; font-size:13px; padding-bottom:10px; line-height:18px;}\n.abtus-sect .cntnt p.in{cursor:default;color:#928B8B; padding-right:36px; font-style:italic; display:inline; background:url("+img_base_url+"/sprites.png) 1px -262px no-repeat;}.abtus-sect .cntnt p.in img{padding-left:5px;}\n.abtus-sect .cntnt p.more{  float:right;}\n.source {padding-top: 7px;padding-left: 0;}.abtus-sect .cntnt p.more a{font-size:11px;color:#eb6a2e; text-transform:upper-case; text-decoration:none;padding-top:7px}\n.corporate_sect .cntnt{padding:10px 0; clear:both;}\n.corporate_sect .cntnt p{color:#7e7e7e; font-size:13px; padding-bottom:10px; line-height:18px;}\n.corporate_sect .cntnt p.in{color:#7e7e7e; padding-right:36px; font-style:italic; display:inline; background:url("+img_base_url+"/sprites.png) 1px -263px no-repeat;}.corporate_sect .cntnt p.in img{padappStyleding-left:5px;}\n.corporate_sect .cntnt p.more{  float:right;}\n.corporate_sect .cntnt p.more a{font-size:11px;color:#eb6a2e; text-transform:upper-case; text-decoration:none;}\n.corporate_sect .detail_summery {font-size:13px; clear:both; line-height:20px;}\n.corporate_sect .company_pic { width:72px; height:71px; overflow:hidden; border:1px solid #e9e7e8; float:left; margin-left:5px; margin-top:10px; -webkit-box-shadow: 0px 0px 4px rgba(50, 50, 50, 0.18);\n-moz-box-shadow:    0px 0px 4px rgba(50, 50, 50, 0.18);\nbox-shadow:         0px 0px 4px rgba(50, 50, 50, 0.18);}\n.corporate_sect .company_details { font-size:13px; margin-left:10px; float:left; width:120px; margin-top:10px;}\n.corporate_sect .comp_prof { font-style:italic; display:block;width:70%;}\n.corporate_sect .comp_add {color:#0274b2; line-height:20px; font-style:italic; margin-top:5px; display:block;}\n.social-sect{border-top:1px solid #ededed; padding-top:7px;\nbackground: -moz-linear-gradient(top,  rgba(229,229,229,0.74) 0%, rgba(255,255,255,0.78) 15%, rgba(255,255,255,1) 100%);\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(229,229,229,0.74)), color-stop(15%,rgba(255,255,255,0.78)), color-stop(100%,rgba(255,255,255,1)));\nbackground: -webkit-linear-gradient(top,  rgba(229,229,229,0.74) 0%,rgba(255,255,255,0.78) 15%,rgba(255,255,255,1) 100%);\nbackground: -o-linear-gradient(top,  rgba(229,229,229,0.74) 0%,rgba(255,255,255,0.78) 15%,rgba(255,255,255,1) 100%);\nbackground: -ms-linear-gradient(top,  rgba(229,229,229,0.74) 0%,rgba(255,255,255,0.78) 15%,rgba(255,255,255,1) 100%);\nbackground: linear-gradient(to bottom,  rgba(229,229,229,0.74) 0%,rgba(255,255,255,0.78) 15%,rgba(255,255,255,1) 100%);\nfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#bde5e5e5', endColorstr='#ffffff',GradientType=0 );\n}\n.social-sect .cntnt ul{list-style:none;}\n.social-sect .cntnt ul li{list-style:none; padding:10px 0 10px 34px; border-bottom:1px solid #ededed; width:165px;}\n.social-sect .cntnt ul li a{color:#0074b2; font-size:13px; font-style:italic; text-decoration:none;}\n.social-sect .cntnt ul li.twitter{background:url("+img_base_url+"/t.png) 0px 5px no-repeat;}\n.social-sect .cntnt ul li.facebook{background:url("+img_base_url+"/f.png) 0px 5px no-repeat;}\n.social-sect .cntnt ul li.linkedin{background:url("+img_base_url+"/in.png) 0px 5px no-repeat;}\n.abtus-sect .cntnt p.googleplus, .corporate_sect .cntnt p.googleplus, .social-sect .cntnt ul li.googleplus{    cursor:default;background:url("+img_base_url+"/g.png) 0px 5px no-repeat;}\n.social-sect .cntnt ul li .sttngs{float:right; display:block;  width:auto; height:17px;}\n.social-sect .cntnt ul li .sttngs .views{background:url("+img_base_url+"/sprites.png) 1px -370px no-repeat !important; margin-top:0px; width:17px; height:17px; display:block; float:left; border:1px solid #d3d3d3; cursor:pointer; text-indent:-9999px;}\n.social-sect .cntnt ul li .sttngs .follow{background:url("+img_base_url+"/sprites.png) 2px -1358px no-repeat !important; margin-top:0px; width:17px; height:17px; display:block; float:left; border:1px solid #d3d3d3; cursor:pointer; text-indent:-9999px;}\n.social-sect .cntnt ul li .sttngs .edit{background:url("+img_base_url+"/sprites.png) 4px -424px no-repeat !important;  margin-top:0px; width:17px; height:17px; display:block; float:left; border:1px solid #d3d3d3; border-width:1px 1px 1px 0; cursor:pointer; text-indent:-9999px;}\n.top_nav,.top_nav ul {\n    list-style:none;\n    margin:0;\n    padding:0;\n}\n.top_nav {\n    height:29px;\n    position:relative;\n    z-index:2;\n}.top_nav ul {\n    left:-9999px;\n    position:absolute;\n    top:27px;\n    width:auto;\n}.top_nav ul ul {\n    left:-9999px;\n    position:relative;\n    top:0;\n    left:-117px;\n    width:auto;\n    z-index:999999;\n}.top_nav li {\n    float:left;\n    margin-right:5px;\n    position:relative;\n}\n.top_nav li a {\n    background:#d34836;\n    color:#fff;\n    display:block;\n    float:left;\n    font-size:12px;\n    padding:8px 10px;\n    text-decoration:none;\n}\n.top_nav > li > a {overflow:hidden;}\n.top_nav li a.fly {padding-right:15px;}\n.top_nav li a.first {background:url("+img_base_url+"/sprites.png)3px -3497px no-repeat; height:13px; margin-left:0px; display:block; overflow:hidden; text-indent:-999px;}\n.top_nav ul li {margin:0;}\n.top_nav ul li a {width:120px;}\n.top_nav ul li a.fly {padding-right:10px;}\n.top_nav li:hover > a {background-color:#993427;color:#fff;}\n.top_nav li a:focus {outline-width:0;}\n.top_nav li a:active + ul.dd,.top_nav li a:focus + ul.dd,.top_nav li ul.dd:hover {left:-117px;}\n.email_phone,.email_phone ul {list-style:none;margin:0;padding:0;}\n.email_phone {position:relative;z-index:2;}\n.email_phone ul {left:-9999px;position:absolute;top:0px;width:auto;}\n.email_phone ul ul {left:-9999px;position:relative;top:0;left:-117px;width:auto;z-index:999999;}\n.email_phone li {float:left;margin-right:5px;position:relative;}\n.email_phone li a {color:#949494;display:block;float:left;font-size:12px;text-decoration:none;}\n.email_phone > li > a {overflow:hidden;}\n.email_phone li a.first {}\n.email_phone ul li {margin:0;}\n.email_phone ul li a {width:200px;padding-left:10px;height:29px;line-height:29px;}\n.email_phone .dd {  background:#FFF; z-index:12; position:absolute; z-index:100;border:1px solid #e1e1e1; -webkit-border-radius: 8px;-moz-border-radius: 8px;border-radius: 8px; -webkit-box-shadow: 3px 3px 3px rgba(50, 50, 50, 0.11);-moz-box-shadow:    3px 3px 3px rgba(50, 50, 50, 0.11);box-shadow:         3px 3px 3px rgba(50, 50, 50, 0.11);}.email_phone ul li a.fly {padding-right:10px;}\n.email_phone li:hover > a {color:#0074b2;}\n.email_phone li a:focus {outline-width:0;}\n.email_phone li a:active + ul.dd, .email_phone li a:focus + ul.dd, .email_phone li ul.dd:hover {left:-75px;z-index:99999;}\ninput[type='text'], textarea, select {outline: none;}\n/*Attachments*/\n.attachment_tab{ padding:0px 5px; position:relative;}\n.attachment_tab .attach_search input[type='text'] { border:1px solid #e4e4e4; width:175px; height:24px; outline: none;}\n.attachment_tab .attach_search input[type='text']:focus {/*border:1px solid #aeaeae;*/ outline: none; -webkit-transition: all 0.6s ease-in-out;\n-moz-transition: all 0.6s ease-in-out;\n-o-transition: all 0.6s ease-in-out;\ntransition: all 0.6s ease-in-out;}\n.attachment_tab .attach_search input#search_attachments{ -moz-border-bottom-colors: none;\n    -moz-border-left-colors: none;\n    -moz-border-right-colors: none;\n    -moz-border-top-colors: none;\n    background: url("+img_base_url+"/sprites.png) no-repeat scroll 5px -667px #939393;\n    border-color: #E4E4E4 #E4E4E4 #E4E4E4 -moz-use-text-color;\n    border-image: none;\n    border-style: solid solid solid none;\n    border-width: 1px 1px 1px medium;\n    height: 28px;\n    overflow: hidden;\n    position: relative;\n    text-indent: -999px;\n    width: 32px;\n    top:-1px;\n    }\n.attachment_tab .view_attachment { border-top: 1px; height:auto; font-size:13px; margin-top:20px;}\n.attachment_tab table {width: 220px;table-layout:fixed;margin-left:0;}\n.attachment_tab table{border-collapse:collapse;}\n.attachment_tab table th td{border-bottom: 1px solid #ededed;font-style:italic;}\n.attachment_tab tr:hover {background:#ffffef;-webkit-transition: all 0.3s ease-in-out;-moz-transition: all 0.3s ease-in-out;-o-transition: all 0.3s ease-in-out;transition: all 0.3s ease-in-out;}\n.attachment_tab td{height:40px;padding-left:2px; padding-left:1px; overflow:hidden;}\n.attachment_tab table .download {  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -712px transparent;display: block;height: 20px;overflow: hidden;text-indent: -999px;width: 20px; float:right;}\n.attachment_tab table strong.pdf {  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -745px transparent;height: 40px;overflow: hidden;text-indent: -999px;width: 28px; display:inline-block; float:left ;}\n.attachment_tab table strong.doc {  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -779px transparent;height: 40px;overflow: hidden;text-indent: -999px;width: 28px; display:inline-block; float:left ;}\n.attachment_tab table strong.no_image {background: url("+img_base_url+"/sprites.png) no-repeat scroll 2px -450px transparent;height: 40px;overflow: hidden;text-indent: -999px;width: 28px; display:inline-block; float:left;}\n.download_page { margin-top:20px;}\n.download_all {float:left;}\n.download_all a{  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -909px transparent;height: 20px; color:#e86a2f; text-decoration:none;padding-left: 27px; display:inline-block; line-height:20px;}\n.attachment_tab table span {/*line-height:40px; float:left;*/color:#0074b2;font-style: italic !important;}\n.pagination, .email-pagination {margin-left:48px;margin-top:8px;position: absolute;bottom: 0;}\n.pagination em ,.email-pagination em {line-height:20px; float:left; margin:0px 5px;}\n.pagination .next, .pagination .back,.pagination .no_back,.pagination .no_next { display:-webkit-inline-flex; height:20px; width:30px; background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 0 transparent; overflow:hidden; text-indent:-999px; }\n.pagination .email-back,.email-pagination .no_back{float:left}.email-pagination .email-next, .email-pagination .email-back,.email-pagination .no_back,.email-pagination .no_next { display:-webkit-inline-flex; height:20px; width:30px; background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 0 transparent; overflow:hidden; text-indent:-999px; }\nemail-pagination .email-back,.email-pagination .no_back{float:left}.email-pagination .email-next, .pagination .next  {background-position:9px -834px;}\n.email-pagination .email-back,.pagination .back  {background-position:4px -872px;}\n.email-pagination .no_next, .pagination .no_next {background-position:7px -1224px;}\n.email-pagination .no_back ,.pagination .no_back{background-position:0px -1198px;}\n.crm_container .add_dropdown { margin:10px 5px;}\n.crm_container .add_dropdown p {float:left; width:172px;}\n.crm_container .add_dropdown p select { border:1px solid #d1cfd0; width:170px; padding:3px; height:30px; background: url("+img_base_url+"/sprites.png)147px -1049px  transparent no-repeat; -webkit-appearance: none;}\n.crm_container .add_dropdown span input[type='button'] {border:1px solid #d1cfd0; width:37px; padding:3px; height:29.5px; background:url("+img_base_url+"/sprites.png) 11px -935px no-repeat; -webkit-box-shadow: 3px 3px 0px rgba(50, 50, 50, 0.10);\n-moz-box-shadow:    3px 3px 0px rgba(50, 50, 50, 0.10);\nbox-shadow:         3px 3px 0px rgba(50, 50, 50, 0.10);}\n.ac-container{margin: 20px auto 30px auto;text-align: left;}\n.ac-container label{\n    padding: 5px 5%;\n    border-left:none;\n    border-right:none;\n    width:90%;\n    position: relative;\n    z-index: 20;\n    display: block;\n    height: 30px;\n    cursor: pointer;\n    color: #555;\n    text-shadow: 1px 1px 1px rgba(255,255,255,0.8);\n    line-height: 33px;\n    font-size: 12px;\n    text-transform:uppercase;\n    background: rgb(255,255,255);\nbackground: -moz-linear-gradient(top, rgba(255,255,255,1) 0%, rgba(241,241,241,1) 100%);\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,255,255,1)), color-stop(100%,rgba(241,241,241,1)));\nbackground: -webkit-linear-gradient(top, rgba(255,255,255,1) 0%,rgba(241,241,241,1) 100%);\nbackground: -o-linear-gradient(top, rgba(255,255,255,1) 0%,rgba(241,241,241,1) 100%);\nbackground: -ms-linear-gradient(top, rgba(255,255,255,1) 0%,rgba(241,241,241,1) 100%);\nbackground: linear-gradient(to bottom, rgba(255,255,255,1) 0%,rgba(241,241,241,1) 100%);\n}\n.ac-container label:after{ /* content: '';position: absolute;width: 24px;height: 24px;right: 13px;top: 7px;background:url("+img_base_url+"/sprites.png)0px -1015px no-repeat;*/}\n.ac-container label span {color:#ababab;width:100%;display:block;height:100%; background: url("+img_base_url+"/sprites.png) 180px -968px no-repeat;}\n.ac-container label:hover{background: #fff;}\n.ac-container input:checked + label,\n.ac-container input:checked + label:hover{\nbackground: rgb(241,241,241);\nbackground: -moz-linear-gradient(top, rgba(241,241,241,1) 0%, rgba(255,255,255,1) 100%);\nbackground: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(241,241,241,1)), color-stop(100%,rgba(255,255,255,1)));\nbackground: -webkit-linear-gradient(top, rgba(241,241,241,1) 0%,rgba(255,255,255,1) 100%);\nbackground: -o-linear-gradient(top, rgba(241,241,241,1) 0%,rgba(255,255,255,1) 100%);\nbackground: -ms-linear-gradient(top, rgba(241,241,241,1) 0%,rgba(255,255,255,1) 100%);\nbackground: linear-gradient(to bottom, rgba(241,241,241,1) 0%,rgba(255,255,255,1) 100%);\ncolor: #555;font-weight:bold;text-shadow: 0px 1px 1px rgba(255,255,255, 0.6);}\n.ac-container input:checked + label:after{  /*content: '';position: absolute;width: 24px;height: 24px;right: 13px;top: 7px;background:url("+img_base_url+"/sprites.png)0px -971px no-repeat;*/}\n.ac-container label:hover:after,\n.ac-container input:checked + label:hover:after{/*content: '';position: absolute;width: 24px;height: 24px;right: 13px;top: 7px;*/}\n.ac-container input:checked + label:hover:after{}\n.ac-container input{display: none;}\n.ac-container #article{\n    background: rgba(255, 255, 255, 0.5);\n    margin-top: -1px;\n    overflow: hidden;\n    height: 0px;\n    position: relative;\n    z-index: 10;\n    -webkit-transition: height 0.3s ease-in-out, box-shadow 0.6s linear;\n    -moz-transition: height 0.3s ease-in-out, box-shadow 0.6s linear;\n    -o-transition: height 0.3s ease-in-out, box-shadow 0.6s linear;\n    -ms-transition: height 0.3s ease-in-out, box-shadow 0.6s linear;\n    transition: height 0.3s ease-in-out, box-shadow 0.6s linear;\n}\n.ac-container #article div{\n    font-style: italic;\n    color: #777;\n    line-height: 23px;\n    font-size: 14px;\n    padding: 0px 0px;\n    text-shadow: 1px 1px 1px rgba(255,255,255,0.8);\n}\n.ac-container #article div ul li{ width:100%; background:#faf9f9; /*position:relative;*/ border-top:1px solid #FFF; border-bottom:1px solid #e6e5e5; padding-left:25px !important; height:33px; line-height:33px;z-index:0;}\n.ac-container #article div ul li a {color:#0074b2; font-style:italic;  text-decoration:none;}\n.ac-container #article div ul li span {width:24px; height:24px; position:absolute; right:40px;}\n.ac-container #article div ul li span a-1 {background:url("+img_base_url+"/sprites.png)0px -1087px no-repeat; display:block; overflow:hidden; text-indent:-999px;}\n.ac-container input:checked ~ #article{\n    -webkit-transition: height 0.5s ease-in-out, box-shadow 0.1s linear;\n    -moz-transition: height 0.5s ease-in-out, box-shadow 0.1s linear;\n    -o-transition: height 0.5s ease-in-out, box-shadow 0.1s linear;\n    -ms-transition: height 0.5s ease-in-out, box-shadow 0.1s linear;\n    transition: height 0.5s ease-in-out, box-shadow 0.1s linear;\n}\n.ac-container input:checked ~ #article.ac-small{height: auto;}\n.ac-container input:checked ~ #article.ac-medium{height: 180px;}\n.ac-container input:checked ~ #article.ac-large{height: 230px;}\n.email_tab{ /*padding:0px 5px;*/ position:relative;height:auto;}\n.email_tab .email_search {margin:0px 5px;}\n.email_tab .email_search input[type='text'] { border:1px solid #e4e4e4; width:190px; height:24px; outline: none;}\n.email_tab .email_search input[type='text']:focus {border:1px solid #aeaeae; outline: none; -webkit-transition: all 0.6s ease-in-out;\n-moz-transition: all 0.6s ease-in-out;\n-o-transition: all 0.6s ease-in-out;\ntransition: all 0.6s ease-in-out;}\n.email_tab .email_search input[type='button']{ -moz-border-bottom-colors: none;\n    -moz-border-left-colors: none;\n    -moz-border-right-colors: none;\n    -moz-border-top-colors: none;\n    background: url("+img_base_url+"/sprites.png) no-repeat scroll 5px -667px #939393;\n    border-color: #E4E4E4 #E4E4E4 #E4E4E4 -moz-use-text-color;\n    border-image: none;\n    border-style: solid solid solid none;\n    border-width: 1px 1px 1px medium;\n    height: 29px;\n    overflow: hidden;\n    position: absolute;\n    text-indent: -999px;\n    width: 32px;}\n.email_details {margin-top:20px; font-size:13px;height:auto; border-top:1px;}\n.email_details ul li { width:100%; position:relative; height:66px; border-top:1px solid #ededed;}\n.email_details ul li:hover{ background:#f1f1f1;}\n.email_details ul li div.email_pic {width:30px; height:30px; background:#CCC; float:left; margin-top:11px; margin-left:8px;}\n.email_details ul li div.name_sub {float:left; margin-left:10px; margin-top:14px; width:186px; background:url("+img_base_url+"/sprites.png) right -1122px no-repeat;}\n.email_details ul li div.name_sub span {}\n.email_details ul li div.name_sub span.date { font-size: 11px;position: absolute;right: 29px;top: 13px; color:#a4a4a4;}\n.email_details ul li div.name_sub p {width:130px; color:#a4a4a4;}\n.email_tab table {width: 220px;table-layout: fixed;margin-left: 0} .email_tab{height:auto;}\n.attachment_tab{height: 530px;}\n.email_tab table{border-collapse:collapse;}\n.email_tab table th td{border-bottom: 1px solid #ededed;font-style:italic;}\n.email_tab tr:hover {background:#ffffef;-webkit-transition: all 0.3s ease-in-out;-moz-transition: all 0.3s ease-in-out;-o-transition: all 0.3s ease-in-out;transition: all 0.3s ease-in-out;}\n.email_tab td,th{height:40px;padding-left:5px;}\n.email_tab table .download {  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -712px transparent;display: block;height: 20px;overflow: hidden;text-indent: -999px;width: 20px; float:right;}\n.email_tab table strong.pdf {  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -745px transparent;height: 40px;overflow: hidden;text-indent: -999px;width: 28px; display:inline-block; float:left;}\n.email_tab table strong.no_image {background: url("+img_base_url+"/sprites.png) no-repeat scroll 2px -450px transparent;height: 40px;overflow: hidden;text-indent: -999px;width: 28px; display:inline-block; float:left;}\n.email_tab table strong.doc {  background: url("+img_base_url+"/sprites.png) no-repeat scroll 0 -779px transparent;height: 30px;overflow: hidden;text-indent: -999px;width: 28px; display:inline-block; float:left ;}\n.email_tab table span {/*line-height:40px; float:left;*/}\n.posts {width:220px; overflow-y:auto; max-height:120px;}.posts p { color: rgb(105, 105, 105); line-height:18px; border-bottom:1px solid #CFCBCB; padding:5px; clear: both; background: rgb(253, 253, 247);}\n.posts p a {color:#0074b2;}\n.crm_not_found{line-height:20px;font-size:12px;padding-top:20px;}\n.crm_not_found span {float:right;}\n.crm_not_found input[type='button']{float:right;line-height:10px;cursor:pointer;margin-right:5px;margin-top:5px;padding:5px;border:none;background-color:rgb(235, 235, 235);}\n.Gini_templates {background-color:white;width:242px; height:330px; margin:0 auto; border:1px solid #e6e5e5; position:relative;  font-family:Arial, Helvetica, sans-serif;}\n.fav_category {position: relative;}\n.fav_category .tabs label {width: 120px;}\n.Gini_templates .search_box input[type='text']{width: 193px; margin-left: -16px;}\n.gini_fav, .gini_category{display: block;font-size: 11px; font-weight: bold;height: 34px;line-height: 34px;padding-left: 33px; text-transform: uppercase;}\n.futter_bar { width:242px; height:36px; background:#f3f3f3; z-index: 100; position:absolute; bottom:0px; left:0px; border-top:1px solid #e6e5e5; font-size:12px;}\n.futter_bar ul li {float:left;   list-style-type:none; margin-left:10px;}\n.futter_bar .add_template a , .futter_bar .del a , .futter_bar .save_template a {  color: #555555;line-height: 24px;padding: 4px 4px 4px 26px;font-size: 10px!important; text-transform: uppercase;text-decoration: none;}\n.fav_category .gini_fav {background: url("+img_base_url+"/sprites_tpl.png) no-repeat scroll 12px -1347px ;}\n.shareTemplate{background: url("+img_base_url+"/sprites.png) no-repeat scroll 12px -3720px!important; text-indent: -999px;}\n.fav_category .gini_category {background: url("+img_base_url+"/sprites_tpl.png) no-repeat scroll 12px -1389px ;}\n.fav_category [id^=tpl]:checked + label {color: #555555;}\n.fav_category [id^=tpl]:checked + label +  {color: #555555;}\n[id^=tpl]:checked + label {background:#FFF;color: white;top: 0;border-bottom:1px solid #FFF;}\n.fav_list ul li{ height:40px; line-height:40px; font-size:12px; border-bottom:1px solid #e6e5e5; width:100%; color:#919090; /*list-style-type:none;*/}\n.fav_list ul li:hover { background:#fffef6;  -webkit-transition: all 0.6s ease-in-out;-moz-transition: all 0.6s ease-in-out;-o-transition: all 0.6s ease-in-out;transition: all 0.6s ease-in-out;}\n.fav_list .edit   {   background: url("+img_base_url+"/sprites_tpl.png) no-repeat scroll 0 -414px transparent; cursor: pointer;display: none;float: right;height: 24px;margin-right: 5px;overflow: hidden;text-indent: -9999px;width: 13px;}\n.fav_list ul li a+span{color: #000000; background: #dddddd; border-radius: 90px;width: 19px;height: 19px;display: inline-block;line-height: 19px; text-align: center;font-size: 11px; float: right; margin-right: 4px; margin-top: 10px;}\n.fav_list ul li:hover .edit {display:block;}\n.fav_list ul li span {margin-left:5px; }\n .fav_list ul li span:first-child{float: right; margin-right: 7px; margin-top: 3px;}\n.most_used{height: 15px;width: 16px;background: #eb6b32;border-radius: 3px;color: #fff;font-size: 10px;display: inline-block;text-align: center;line-height: 15px;position: relative;left: -4px;}\n span.tpl_fav_unfav{background: url("+img_base_url+"/sprites_tpl.png) no-repeat scroll 0px -1353px;width: 16px;height: 16px;display: inline-block; opacity: 0.2;position: relative;top: 3px;left: -2px;}\n span.template-use strong{font-weight:normal;} span.template-use{cursor:pointer; white-space: nowrap; display: inline-block; width: 122px; padding-left: 22px; margin-left: -15px!important;}\n.fav_list ul li .tooltip {  color:#919090;text-decoration:none; }\n.futter_bar .add_template, .futter_bar .del, .futter_bar .save_template { cursor: pointer;height: 24px;margin-right: 5px;}\n.futter_bar .add_template{ background: url("+img_base_url+"/sprites.png) no-repeat scroll -20px -2680px #fff; margin-top:5px; border: 1px solid #bdbdbd;}\n.futter_bar .save_template{ background: url("+img_base_url+"/sprites.png) no-repeat scroll -20px -2715px #fff; margin-top: 5px; border: 1px solid #bdbdbd;}\n.futter_bar .del{background: url("+img_base_url+"/sprites_tpl.png) no-repeat scroll 3px -1210px #fff; margin-top: 5px; border: 1px solid #bdbdbd;}\nsection {display: block;}\n.accordionCRM{-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;    -moz-box-shadow: 0 1px 0 #999;-webkit-box-shadow: 0 1px 0 #999;}\n.accordionCRM section {border-bottom: 1px solid #e1e1e1;background-color: #fff;}\n.accordionCRM strong,.accordionCRM p{margin: 0;font-size: 12px;}\n.accordionCRM p{padding: 10px;}\n.accordionCRM strong a {display: block;position: relative;padding: 10px;color: #333;text-decoration: none;}\n.accordionCRM strong a:hover {background: #fff;}\n.accordionCRM strong + div {height: 0;overflow: hidden;-moz-transition: height 0.3s ease-in-out;-webkit-transition: height 0.3s ease-in-out;-o-transition: height 0.3s ease-in-out;transition: height 0.3s ease-in-out; }\n.accordionCRM:target strong a:after {  content: '';position: absolute;right: 10px;top: 50%;margin-top: -3px;border-top: 5px solid #333;border-left: 5px solid transparent;border-right: 5px solid transparent; }\n.accordionCRM:target strong + div {height: 124px;background:#f9f9f9;}\n.accordionCRM div ul li { width:100%; font-size:12px; border-top:1px solid #E1E1E1; }\n.accordionCRM div ul li a {line-height:20px; padding-left:10px; display:block; line-height:30px;}\n.accordionCRM div ul li a:hover { background:#fffef6;}\n.LW-avf ol li,.LW-avf ul li,.LW-avf ol,.LW-avf ol{padding:0px;margin-left:11px;/*for template li on body*/}\n.accordionCRM div ul li a.tooltip, .fav_list ul li .tooltip {outline:none; }\n.accordionCRM div ul li a.tooltip strong, .fav_list ul li .tooltip strong {line-height:30px;}\n.view_template_edit_insert{height: 36px; background: #f3f3f3; border-top: 1px solid #e6e5e5; font-size: 12px;}\n.view_template_edit_insert input[type=\"button\"]{height: 24px; background: #fff; border: 1px solid #a9a8a8; padding: 2px 4px 0px 4px; margin-left: 10px; text-transform: uppercase; font-size: 10px; line-height: 22px;}\n.detail_template{height: 248px; padding: 4px 13px; overflow: auto;}\n.accordionCRM div ul li a.tooltip:hover, .fav_list ul li .tooltip:hover {text-decoration:none;}\n.accordionCRM div ul li a.tooltip span.innerTemplateText, .fav_list ul li .tooltip span.innerTemplateText {display: none;left: -242px;top:-83px;width: 239px;z-index: 9999999; min-height:258px;height:293px;overflow:auto;}\n.fav_list ul li .tooltip span.innerTemplateText{ left: -246px;}\n.accordionCRM div ul li a.tooltip:hover span.innerTemplateText, .fav_list ul li .tooltip:hover span.innerTemplateText{ display:inline; position:absolute; color:#111;  background:rgba(255, 254, 246, 0.9);}\n.accordionCRM div ul li .callout, .fav_list ul li .callout  {z-index:20;position:absolute;top:30px;border:0;left:0;}\n.accordionCRM div ul li a.tooltip span.innerTemplateText, .fav_list ul li .tooltip span.innerTemplateText {  box-shadow:2px 2px 5px 0px rgba(50, 50, 50, 0.05); -webkit-box-shadow: 2px 2px 5px 0px rgba(50, 50, 50, 0.05); border-right-width:0; }\n.accordionCRM div ul li a.tooltip span.innerTemplateText,  .fav_list ul li .tooltip span.innerTemplateText {   border: 1px solid #d5d5d3;background: rgba(255, 255, 255, 1) !important; }\n\.ac-container ul{display: block;        height: auto;    }.ac-container ul li {    list-style-type: none;    display: block;    position: relative;    width: 100%;    height: auto;}.ac-container > ul > li:hover{    cursor: default;}.ac-container ul li ul li {    width:  96.3%;    min-height: 20px;    display: none;    padding: 6px;    border-bottom: 1px solid #e6e5e5;}.ac-container ul li ul li div.crm_content_box select.recordActivity {    border: 1px solid #d1cfd0;    width: 80px;    padding: 3px;    height: 25px;    margin-bottom:2px;    background: url("+img_base_url+"/sprites.png)147px -1049px transparent no-repeat;}.ac-container ul li ul li div.crm_content_box a{    float:right;    font-size:10px;}.ac-container ul li ul li div.crm_content_box p{    color: #7F888D;    border-bottom:1px solid #EBEBEB;}.ac-container ul li ul li div.crm_content_box p strong{    display:inline-block;    width:50%;}.ac-container ul li ul li div.crm_content_box p.no-bottom-border{    border-bottom:none;}.ac-container ul li ul li div.crm_content_box{    line-height:22px;    font-size:12px;    display: none;    position: absolute;    top: 20px;    width: 228px;    max-height: 335px;    overflow-y:auto;    left: -20px;    background-color: white;    z-index: 99999;    padding: 10px;    background-image: linear-gradient(top, rgb(255,255,255) 21%, rgb(242,242,242) 72%);    background-image: -o-linear-gradient(top, rgb(255,255,255) 21%, rgb(242,242,242) 72%);    background-image: -moz-linear-gradient(top, rgb(255,255,255) 21%, rgb(242,242,242) 72%);    background-image: -webkit-linear-gradient(top, rgb(255,255,255) 21%, rgb(242,242,242) 72%);    background-image: -ms-linear-gradient(top, rgb(255,255,255) 21%, rgb(242,242,242) 72%);    background-image: -webkit-gradient(        linear,        left top,        left bottom,        color-stop(0.21, rgb(255,255,255)),        color-stop(0.72, rgb(242,242,242))    );    /*-webkit-box-shadow: -5px 5px 6px rgba(100, 100, 53, 0.65);    -moz-box-shadow:    -5px 5px 6px rgba(100, 100, 53, 0.65);*/    /*box-shadow:         -5px 5px 6px rgba(100, 100, 53, 0.65);*/    border: 1px solid #D4D8DA;    border-radius:5px;}.ac-container ul li ul li a.dropdown-toggle {    background: url("+img_base_url+"/sprites.png)0px -1087px no-repeat;    display: block;    height: 26px;    width: 30px;    overflow: hidden;    float: right;    right: -5px;    text-indent: -999px;    top : -8px;    position: relative;}.ac-container ul li ul li{    color:#0074b2;    font-style:italic;    text-decoration:none;    font-size: 14px;}.ac-container ul li {width:100%;}.err_msg {    text-align:center;    color:red;}.social-child-section p {    padding-top : 10px;    /*max-height:60px;*/    /*overflow-y:auto;*/}span.popupConnect:hover{cursor:pointer;}.view_attachment table tr:nth-child(even),  .email_details table tr:nth-child(even){background-color:#F9F9F9 ;border:1px solid #F2F2F2;}.view_attachment  table tr:nth-child(odd),.email_details table tr:nth-child(odd){border:1px solid #F2F2F2;}.view_attachment table thead , .email_details table thead{background-color:rgb(240,240,240);}.handleLink { display : block; overflow:hidden; }.blue-gini *::-webkit-scrollbar-track{    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);    background-color: #e9e9e9;}.blue-gini *::-webkit-scrollbar{    width: 6px;    background-color: #e9e9e9;}.blue-gini *::-webkit-scrollbar-thumb{   background-color: #989898;}.ginipkg-templatebar *::-webkit-scrollbar-track{    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);    background-color: #e9e9e9;}.ginipkg-templatebar *::-webkit-scrollbar{    width: 6px;    background-color: #e9e9e9;}.ginipkg-templatebar *::-webkit-scrollbar-thumb{   background-color: #989898;}.gini-dropdown {-webkit-box-sizing: border-box;-moz-box-sizing: border-box;box-sizing: border-box;width:193px;float:left;display:none; left: -110px;margin-top: 3px;inline-block;border:1px solid #cccccc;background:#ffffff;box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);position: absolute;}.gini-dropdown ul {margin:0;padding:0;}.gini-dropdown ul li {list-style:none;float:left;width:100%;margin-left:0;}.gini-dropdown ul li a {    color:#555555;font-size:13px;text-decoration:none;padding:4px 10px 4px 40px;display:inline-block;width:75%;float:left;font-weight:normal;clear:both;}.gini-dropdown ul li a:hover {}.gini-dropdown .archieve a,.gini-dropdown .convert a {color:#010101!important;}.gini-dropdown .archieve,.gini-dropdown .convert {border-bottom:1px solid #ebebeb;}.gini-dropdown .archieve span {    width:100%;}.gini-dropdown .archieve {    background: url("+img_base_url+"/archieve-ico.png) no-repeat scroll 15px 9px rgba(0, 0, 0, 0);    }.gini-dropdown .convert {    background: url("+img_base_url+"/convert-ico.png) no-repeat scroll 15px 9px rgba(0, 0, 0, 0);    }.gini-dropdown .archieve-always {    background: url("+img_base_url+"/checkmark.png) no-repeat scroll 78% 8px rgba(0, 0, 0, 0);    }.gini-dropdown .mail-only {}.gini-dropdown .mail-only a {    /*color:#eeeeee;*/    }.gini-dropdown .archieve span {    /*background: url("+img_base_url+"/archieve-ico.png) no-repeat scroll 15px 2px rgba(0, 0, 0, 0);width:16px;height:16px;*/    }.gini-dropdown .convert span {    /*background: url("+img_base_url+"/convert-ico.png) no-repeat scroll 15px 2px rgba(0, 0, 0, 0);width:16px;height:16px;*/    }.gini-dropdown:after, .gini-dropdown:before {    bottom: 100%;border: solid transparent;content: '';height: 0;width: 0;position: absolute;pointer-events: none;}.gini-dropdown:after {    border-color: rgba(255, 255, 255, 0);border-bottom-color: #ffffff;border-width: 10px;left: 50%;margin-left: 18px;}.gini-dropdown:before {    border-color: rgba(204, 204, 204, 0);border-bottom-color: #cccccc;border-width: 11px;left: 50%;margin-left: 17px;}.crm-module {    }.gini-top {    position: relative;}.first_spinner {    width:130%;    text-align:center;}.overlay_login_steps{top:0;left:0;right:0;bottom:0;z-index:9289898999928798;position:absolute;background-color:rgba(255,255,255,.4);}.login_steps{position:relative;width:420px;border:1px solid #c3c3c3;background-color:#FFF;margin:15% auto; box-shadow: 0 0 15px 0 rgba(67, 64, 71, .25); height: 373px;}.login_steps .close_login{background:url("+img_base_url+"/sprites.png) -30px -3547px no-repeat;float:right;margin-right:5px;top:22px;text-indent:-99999px;height:28px;width:25px}.login_steps .header{border-bottom:1px solid #ccc;background-color:#FFF;padding:10px}.login_steps .message{width: 95%;font-family:georgia;font-size:22px;color:#abb59e;font-style:italic;display:block;text-align:center;padding-top:100px;padding-bottom:90px}.login_steps .nav_menu{display:inline-block;margin-left:20px}.login_steps .nav_menu a{display:inline-block;height:15px;width:15px;margin-top:8px;background-color:#FFF;border:1px solid #9bb975;border-radius:180px;margin-left:2px;margin-right:2px}.login_steps .nav_menu .active{background-color:#6e6e6e;}.login_steps .next{width:100%;position:absolute;bottom:0;height:40px;padding-top:12px;background-color:#a2c07b}.login_steps .nextbtn{float:right;display:block;background-color:#81b143;color:#FFF;margin-right:25px;text-decoration:none;font-size:13px;font-family:arial;padding:8px}.login_steps .skip{float:right;color:#FFF;padding-top:8px;font-size:13px;font-family:arial;margin-right:30px}.login_steps .nextbtn:hover{background-color:#FFF;color:#81b143;cursor:pointer}.login_steps .header img{vertical-align:middle;float:left;}.login_steps .header .header_msg{display:inline-block;text-align:center;font-family:arial;width:310px;font-size:16px;font-weight:700;margin-top:4px;color: #34a0c4;}.login_steps .contact{padding:40px 30px 0}.login_steps .contact input[type=text],.login_steps .contact textarea{margin-right:30px;border:1px dotted #556159;margin-top:5px;margin-bottom:2px;width:97%;color:#556159;padding:5px}.login_steps .contact span{color:#556159;font-size:1em;font-family:georgia;font-style:italic}.login_steps .contact input[type=submit]{background:#FFF;border:1px solid #7b9c86;font-size:.8em;width:150px;padding:5px}.login_steps .contact input[type=submit]:hover{cursor:pointer}.login_steps .finish_setup,.login_steps .socialconnect,.login_steps .crmsetting{display:none}.login_steps .btm_btn{display:inline}.login_steps .social_conection{width:100%;height:auto;margin-top:20px}.login_steps .social_conection .content{height:auto;margin-top:1px;background-color:#FFF}.login_steps .social_conection .task_bd{border-collapse:collapse;width:100%;padding:0}.login_steps .social_conection .task_bd tr th{height:33px;color:#737373;font-family:arial;text-align:center;font-weight:400;font-style:normal;border:1px solid #e1e1e1;background-color:#ededed;font-size:14px}.login_steps .social_conection .task_bd tr:hover{background-color:#f7f7f7}.login_steps .social_conection .task_bd tr td{color:#737373;font-family:arial;font-size:12px;text-align:center;border:1px solid #e1e1e1;height:32px;margin::0;padding:0}.login_steps .social_conection .task_bd tr td:nth-child(1){width:20%;border-left:none;padding:5px}.login_steps .social_conection .task_bd tr td:nth-child(2){width:40%;text-align:left;padding-left:10px}.login_steps .social_conection .task_bd tr td:nth-child(3){width:20%;border-right:none}.login_steps .social_conection .edit,.social_conection .disconnect{float:left;height:25px;text-indent:-999999px;display:block;width:21px;margin-left:10px}.login_steps .social_conection .edit{background:url("+img_base_url+"/sprites.png) 1px -2363px no-repeat}.login_steps .social_conection .disconnect{background:url("+img_base_url+"/sprites.png) -29px -2361px no-repeat}.login_steps .social_conection .action{width:86px;margin:auto}.login_steps .social_conection .facebook,.login_steps .social_conection .twitter,.social_conection .linkedin,.login_steps .social_conection .gplus{height:32px;width:32px;margin:auto}.login_steps .social_conection .facebook{background:url("+img_base_url+"/sprites.png) -2px -2763px no-repeat}.login_steps .social_conection .linkedin{background:url("+img_base_url+"/sprites.png) -2px -2814px no-repeat}.login_steps .social_conection .gplus{background:url("+img_base_url+"/sprites.png) -2px -2918px no-repeat}.login_steps .social_conection .twitter{background:url("+img_base_url+"/sprites.png) -2px -2869px no-repeat}.login_steps .social_conection .task_bd tr:nth-child(1){border-top:none}.login_steps .social_conection .task_bd tr:nth-child(4){border-bottom:none}.block { display:inline-block;  overflow:hidden; border:solid #d8d8d8 1px; width:299px;height:75px;}.block select { padding:10px; margin:-5px -20px -5px -5px;width:305px; }.archive_bar {width: 98%;font-size: 12px;margin-top: 19px;}\n.archive_bar ul li {float: left;list-style-type: none;border-bottom: 1px solid rgb(197, 197, 197);width: 100%;}\n.archive_bar .add_record a {color: #7E7E7E;line-height: 30px;font-family: arial;font-size: 14px;text-decoration: none;padding: 9px;display: block;}\n.view{background: url("+img_base_url+"/sprites.png) 1px -942px no-repeat;margin-top: 0px;width: 14px;height: 13px;display: block;float: right;border: 1px solid #d3d3d3;cursor: pointer;text-indent: -9999px;}";


/*New Email UI
* Date : 15 Jan 2014
*/

appStyle = appStyle + ".email_body_tab tr:nth-child(odd){background-color:#f7f8f8}.email_body_tab tr:hover{cursor:pointer}.email_body_tab_cls{width:100%;margin-top:10px;height:391px}.email_body_tab{width:100%;border-collapse:collapse;padding:0;margin:auto}.email_body_tab tr th{font-weight:400;font-style:normal;height:33px;color:#737373;font-family:arial;text-align:center;border:1px solid #e1e1e1;background-color:#ededed;font-size:14px}.email_body_tab tr th:nth-child(1){border:0;width:67%;padding:4px;}.email_body_tab tr td{border-left: 0;padding-left: 5px;color:#737373;font-weight:400;font-style:normal;font-family:arial;font-size:12px;padding:0;margin::0;/*text-align:center;*/border:1px solid #e1e1e1;height:32px;border-left:0;}.email_body_tab tr td:nth-child(2){border-right:0;padding-left: 5px}.email_body_tab tr td:nth-child(1){padding-left:15px}.email_body_tab tr td:hover{color:#000000; text-decoration: underline;}.email_body_tab .hasTooltip .arrow{position:absolute;top:43px;right:-11px;width:0;height:0;border-top:11px solid transparent;border-bottom:11px solid transparent;border-left:11px solid #8b8b8b}.email_body_tab .hasTooltip .mail_pop_up_box{display:none;text-decoration:none;height:250px;width:260px;background-color:#FFFFFF;color:#727272;font-family:arial}.email_body_tab .hasTooltip:hover .mail_pop_up_box,.email_body_tab tr:hover .mail_pop_up_box{display:block;position:absolute;border:1px solid #CCC;margin-left:-415px;margin-top:-62px}.email_body_tab .hasTooltip .title_mail{cursor: default;color:#fff;font-size:14px;width:251px;background-color:#666;font-family:arial;padding-top:8px;padding-bottom:8px;/*text-align:center*/padding-left:10px;}.email_body_tab .hasTooltip .title_cntnt{cursor: default;font-size:12px;text-align:left;height:200px;font-family:arial;padding-left:10px;max-width:240px;overflow-y:auto;overflow:auto;padding-top:15px;padding-right:5px;/*word-break:break-all*/;margin-top:0}.email_body_tab .hasTooltip .title_cntnt::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#e9e9e9}.email_body_tab .hasTooltip .title_cntnt::-webkit-scrollbar{width:6px;background-color:#e9e9e9}.email_body_tab .hasTooltip .title_cntnt::-webkit-scrollbar-thumb{background-color:#989898}.email_body_tab_cls .back {float: left;left: 10px;position: absolute;background: url("+img_base_url+"/sprites.png) -2px -1749px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 8px;}.email_body_tab_cls .next {position: absolute;float: right;right: 0;background: url("+img_base_url+"/sprites.png) -2px -1693px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 8px;margin-right: 10px;}.email_body_tab_cls .no-back {cursor:default;opacity:0.5;float: left;left: 10px;position: absolute;background: url("+img_base_url+"/sprites.png) -2px -1749px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 8px;}.email_body_tab_cls .no-next {cursor:default;opacity:0.5;position: absolute;float: right;right: 0;background: url("+img_base_url+"/sprites.png) -2px -1693px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 8px;margin-right: 10px;}.email_body_tab_cls .page_index{position: relative;background-color:#a6a2a2;height: 36px;bottom:0;position:absolute;width:100%;}.email_body_tab_cls .counting{position: absolute;height:20px;/*width:45px;*/margin-top:13px;float:left;font-size:12px;margin-left: 75px;font-family:arial;color:#fff}.email_body_tab_cls tr .header{font-size:14px;}.email_tab .email_err_box { /*display:none;*/  padding: 4px; margin: auto; color: red; margin-bottom: 10px; font-size: 10px; text-align: center; width: 90%;}.email_tab .email_err_box p{ word-break:break-all;padding-top: 2px;font-size: 10px; color:#eb6a2e; font-style: italic; font-family: inherit; margin-top: 0px; padding: 0px!important;}.email_tab .email_loader{ /*display:none;*/position: absolute;top: 46%;left: 47%;}.email_tab #get-email-auth {line-height:10px;cursor:pointer;margin-top:5px;padding:5px;border:none;background-color:rgb(235, 235, 235);}.email_tab .mask{display:none;position: absolute;width: 100%;top: 0px;height: 109%;z-index: 1;background: rgba(255, 255, 255, 0.5);}";

/*New Attachment UI
* Date : 17 Jan 2014
*/

appStyle = appStyle + ".attachment_tab .attach_search input[type=text]{border:1px solid #e5e4e4;width:108px;height:24px;outline:0;border-right: none; border-radius: 3px;}.attachment_tab .attach_search input[type=text]:focus{outline:0;-webkit-transition:all .6s ease-in-out;-moz-transition:all .6s ease-in-out;-o-transition:all .6s ease-in-out;transition:all .6s ease-in-out;border-right: none;}.attachment_tab .attach_search a{background:url("+img_base_url+"/sprites.png) no-repeat scroll 5px -1864px transparent;top:0;height:24px;right:0;overflow:hidden;display:block;float:right;position:absolute;text-indent:-999px;width:30px;border: 1px solid #eee;border-left: none;}.attach_search{width:140px;margin:auto !important;position:relative}.atchment_body_tab tr:nth-child(odd){background-color:#f7f8f8}.atchment_body_tab tr:hover{cursor:pointer}.atchment_body_tab_cls{height: 410px!important;margin-top: 10px;}.atchment_body_tab{border-collapse:collapse;padding:0;margin:auto}.atchment_body_tab tr th{height:33px;color:#737373;font-family:arial;text-align:center;font-weight:normal;font-style:normal;border:1px solid #e1e1e1;background-color:#ededed;font-size:14px}.atchment_body_tab tr td{font-style:normal;color:#737373;font-familyarial;font-size:12px;margin::0;/*text-align:center;*/border:1px solid #e1e1e1;height:32px;}.atchment_body_tab_cls .back{float: left;left: 10px;position: absolute;background: url("+img_base_url+"/sprites.png) -2px -1749px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 7px;}.atchment_body_tab_cls .next{position: absolute;float: right;right: 0;background: url("+img_base_url+"/sprites.png) -2px -1693px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 7px;margin-right: 10px;}.atchment_body_tab_cls .no-back{cursor:default;opacity:0.5;float: left;left: 10px;position: absolute;background: url("+img_base_url+"/sprites.png) -2px -1749px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 7px;}.atchment_body_tab_cls .no-next{cursor:default;opacity:0.5;position: absolute;float: right;right: 0;background: url("+img_base_url+"/sprites.png) -2px -1693px no-repeat;height: 22px;text-indent: -999999px;width: 22px;margin-top: 7px;margin-right: 10px;}.atchment_body_tab_cls .page_index{background-color:#a6a2a2;height: 36px;bottom:0;position:absolute;width:100%;}.atchment_body_tab_cls .counting{position: absolute;height:20px;/*width:45px;*/margin-top: 13px;float:left;font-size:12px;margin-left: 75px;font-family:arial;color:#fff}.attachment_tab {padding: 0px;position: relative;height:auto;}.atchment_body_tab tr td:nth-child(1){border:0;width: 15%;height: 22px;padding-top: 4px;}.atchment_body_tab tr td:nth-child(2){width:70%;font-size: 12.5px; !important}.atchment_body_tab tr td:nth-child(3){border:0;width: 15%;border: 1px solid #e1e1e1;height:27px;}.atchment_body_tab tr td:nth-child(2) a{ width: 100%;display: block;padding-left: 7px;color:#737373;height: 26px;line-height: 29px;}.atchment_body_tab tr td:nth-child(3) input[type='checkbox']{margin-top:7px;}.atchment_body_tab .file_type_word{height:20px;width:20px;margin:auto;background:url("+img_base_url+"/sprites.png) -1px   -2070px no-repeat}.atchment_body_tab .file_type_pdf{height:20px;width:20px;margin:auto;background:url("+img_base_url+"/sprites.png) 1px -2029px no-repeat}.atchment_body_tab .file_type_xl{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) 2px -2116px no-repeat}.atchment_body_tab .file_type_none{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) -30px -2028px no-repeat}.atchment_body_tab .file_type_image{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) -30px -2113px no-repeat}.revenue_edit{color:transparent;background:url("+img_base_url+"/sprites_tpl.png) 0 -1172px no-repeat}.atchment_body_tab .file_type_video{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) -30px -2164px no-repeat}.atchment_body_tab .file_type_zip{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) -32px -2258px no-repeat}.atchment_body_tab .file_type_rar{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) -31px -2305px no-repeat}.atchment_body_tab .file_type_file{height:20px;width:22px;margin:auto;background:url("+img_base_url+"/sprites.png) 0px -2268px no-repeat}.atchment_body_tab .file_type_ppt{height:20px;width:20px;margin:auto;background:url("+img_base_url+"/sprites.png) -1px -789px no-repeat}.attachment_tab .attach_err_box { /*display:none;*/  padding: 4px; margin: auto; color: red; margin-bottom: 10px; font-size: 10px; text-align: center; width: 90%;}.attachment_tab .attach_err_box p{ word-break:break-all;padding-top: 2px;font-size: 10px; color:#eb6a2e; font-style: italic; font-family: inherit; margin-top: 0px; padding: 0px!important;}.attachment_tab .attach_loader{ display:none;position: absolute;top: 50%;left: 47%;}.attachment_tab #get-attach-auth {line-height:10px;cursor:pointer;margin-top:5px;padding:5px;border:none;background-color:rgb(235, 235, 235);}.atchment_body_tab_cls .attachment-download{float: right;left: 10px; top:-41px;display:none;background: url("+img_base_url+"/sprites.png) 4px -3032px #313131 no-repeat; font-size:11px; color:#f2f2f2; height: 18px; line-height:18px; font-weight:bold;width: 66px; padding:5px 0px 5px 25px; border: 1px solid black; border-radius: 3px; margin-top: 3px;position: absolute;}.atchment_body_tab_cls .attachment-download:after{clear:both;}.attachment_tab .mask {display:none;position: absolute;width: 100%;top: 0px;height: 109%;z-index: 1;background: rgba(255, 255, 255, 0.5);}.atchment_body_tab .hasTooltip .arrow{position:absolute;top:43px;right:-11px;width:0;height:0;border-top:11px solid transparent;border-bottom:11px solid transparent;border-left:11px solid #8b8b8b}.atchment_body_tab .hasTooltip .mail_pop_up_box{display:none;text-decoration:none;height:250px;width:260px;background-color:#FFFFFF;color:#727272;font-family:arial}.atchment_body_tab .hasTooltip:hover .mail_pop_up_box,.atchment_body_tab tr:hover .mail_pop_up_box{display:block;position:absolute;border:1px solid #CCC;margin-left:-456px;margin-top:-62px}.atchment_body_tab .hasTooltip .title_mail{color:#fff;font-size:14px;width:251px;background-color:#666;font-family:arial;padding-top:8px;padding-bottom:8px;text-align:left;padding-left:10px;}.atchment_body_tab .hasTooltip .title_cntnt{font-size:12px;text-align:left;height:200px;font-family:arial;padding-left:10px;max-width:240px;overflow-y:auto;overflow:auto;padding-top:15px;padding-right:5px;/*word-break:break-all*/;margin-top:0}.atchment_body_tab .hasTooltip .title_cntnt::-webkit-scrollbar-track{-webkit-box-shadow:inset 0 0 6px rgba(0,0,0,.3);background-color:#e9e9e9}.atchment_body_tab .hasTooltip .title_cntnt::-webkit-scrollbar{width:6px;background-color:#e9e9e9}.atchment_body_tab .hasTooltip .title_cntnt::-webkit-scrollbar-thumb{background-color:#989898}.initial-container .primary-profile{background-color:rgba(0,0,0,0) !important; background:url("+img_base_url+"/shadow.png) no-repeat bottom center !important; min-height:115px;}.initial-container .secondary-profile-container .open-profile{ background-color:rgba(0,0,0,0) !important; color:#ed610c; background:url("+img_base_url+"/sprits.png) no-repeat -10px -571px; border-bottom: 1px solid #efefef !important;padding-bottom: 5px !important;margin-bottom: 5px!important; width:85% !important;}.initial-container .secondary-profile-container .open-profile{padding-left:25px !important;}.initial-container .secondary-profile-container{border-bottom:1px solid #e3e4e4 !important;}";

/*
* Carrot for Top Gini Option.
* Date : 24 Jan 2014
*/

appStyle = appStyle + "#ginipkg-navigation-menu .arrow{border-color: transparent;border-bottom-color: #FFF;border-style: dashed dashed solid;border-width: 0 8px 8px;display: none;position: absolute;left: 36px;top: -8px;z-index: 1;display: block;height: 0;width: 0;}";


/*
* New Loader and different sizes..
*/
appStyle = appStyle + ".blue-gini .spinner16{width:16px;height:16px}.blue-gini .spinner32{width:32px;height:32px}.blue-gini .spinner64{width:64px;height:64px}";

/*
* Style for Custom Gini Alert Box
*/
appStyle = appStyle + ".overlay_alert .alert_box{background: #fff;position: relative;z-index: 99999999;width: 363px;height: auto;padding-bottom: 27px;border: 1px solid #d6d6d6;-webkit-box-shadow: 0 0 15px 0 rgba(67,64,71,.25);-moz-box-shadow: 0 0 15px 0 rgba(67,64,71,.25);box-shadow: 0 0 15px 0 rgba(67,64,71,.25);margin: 200px auto;}.overlay_alert .alert_box .alert_close{background:url("+img_base_url+"/sprites.png) -30px -3547px no-repeat;float:right;margin-right:5px;top:22px;text-indent:-99999px;height:28px;width:25px;margin-top:3px;outline:0}.overlay_alert .alert_box .alert_close:active,.overlay_alert .alert_box .alert_close:visited{outline:0}.overlay_alert .alert_box .alert_header{padding:5px; border-bottom: 1px solid #eeeeee; background: #f9f9f9;height: 35px;}.overlay_alert .alert_box .alert_content p{width:84%;font-size:13px; margin-top: 10px;font-family:arial;color: #555555;margin-top:10px;padding:10px}.overlay_alert .alert_box .alert_content .alert_message{font-family:arial;font-size:16px; position: absolute; top: 14px; left: 10px; color:#747474;font-weight:700;display:block;text-align:center;}.overlay_alert .alert_box .alert_btn{margin:25px auto auto}.overlay_alert .alert_box .alert_content .alert_cancel,.overlay_alert .alert_box .alert_content .alert_ok{text-align: center;padding-top: 11px;height: 26px;width: 48%;font-size: 13px;color: #fff;font-family: arial;margin-left: 91px;display: inline-block;border-radius: 3px;border: 1px solid #fff;text-decoration: none;}.overlay_alert .alert_box .alert_content .alert_cancel{background-color:#ec2323}.overlay_alert .alert_box .alert_content .alert_ok{background-color:#f2f2f2; color: #555555; border: 1px solid #d9d9d9;width: 60px; margin-left: 41%;}.overlay_alert .alert_box .alert_content .alert_cancel:hover{background-color:#e43b3b}.overlay_alert .alert_box .alert_content .alert_ok:hover{background-color:#eaeaea;}.overlay_alert {z-index:99999999;display:none;position:absolute;top:0;left:0;height:100%;width:100%;background:rgba(255,255,255,.4);}";

/*
* Style for Custom Gini Confirm Box
*/
appStyle = appStyle + ".overlay_confirm .confirm_box{background:#fff;position:relative;z-index:99999999;width:363px;height:auto;padding-bottom:27px;border:1px solid #d6d6d6;-webkit-box-shadow:0 0 18px 0 rgba(67,64,71,.64);-moz-box-shadow:0 0 18px 0 rgba(67,64,71,.64);box-shadow:0 0 18px 0 rgba(67,64,71,.64);border-radius:5px;margin:200px auto}.overlay_confirm .confirm_box .confirm_close{background:url("+img_base_url+"/sprites.png) -4px -2636px no-repeat;float:right;margin-right:5px;top:22px;text-indent:-99999px;height:28px;width:25px;margin-top:3px;outline:0}.overlay_confirm .confirm_box .confirm_close:active,.overlay_confirm .confirm_box .confirm_close:visited{outline:0}.overlay_confirm .confirm_box .confirm_header{padding:5px}.overlay_confirm .confirm_box .confirm_content p{width:84%;font-size:16px;height:74px;border:1px solid #e4e4e4;font-family:arial;color:#696969;margin:26px auto auto;padding:10px}.overlay_confirm .confirm_box .confirm_content .confirm_message{font-family:arial;font-size:24px;color:#747474;font-weight:700;display:block;text-align:center;padding-top:30px}.overlay_confirm .confirm_box .confirm_btn{width:55%;margin:25px auto auto}.overlay_confirm .confirm_box .confirm_content .confirm_cancel,.overlay_confirm .confirm_box .confirm_content .confirm_ok{text-align:center;padding-top:11px;height:26px;width:68px;font-size:13px;color:#fff;font-family:arial;margin-left:18px;display:inline-block;border-radius:3px;border:1px solid #fff;text-decoration:none}.overlay_confirm .confirm_box .confirm_content .confirm_cancel{background-color:#ec2323}.overlay_confirm .confirm_box .confirm_content .confirm_ok{background-color:#7f9b43}.overlay_confirm .confirm_box .confirm_content .confirm_cancel:hover{background-color:#e43b3b}.overlay_confirm .confirm_box .confirm_content .confirm_ok:hover{background-color:#94b450}.overlay_confirm {z-index:99999999;display:none;position:absolute;top:0;left:0;height:100%;width:100%;background:rgba(0,0,0,.4);}.hx .gH{z-index: -1;}.Bu{position: relative;z-index:0;}.b7{z-index: 999; !important}.top_header .logo-back {/*width: 25%;position: absolute;height: 25px;top: 0px;cursor: pointer;*/}.inactive-back-button{position: absolute;top: -33px;left: 6px;z-index: 9;margin-top:40px;width:25px;height:30px;background: url("+img_base_url+"/sprites.png) no-repeat scroll 0px -3912px;}.ginipkg-collapse-open{background: url("+img_base_url+"/bar-expand.png)!important; position:absolute;left: -20px!important; top: -35px!important;z-index: 9;margin-top:40px;width:18px;height:23px; }.ginipkg-collapse-closed{background: url("+img_base_url+"/bar-collapse.png)!important; position:absolute; left: 201px!important; top: -35px!important;z-index: 9;margin-top:40px;width:19px;height:23px; }";

appStyle = appStyle +".initial-container {width:220px;}.initial-container .primary-profile {cursor:pointer;background: #f7f8f8;padding:5px;}.initial-container .image-container {width:50px;float:left;margin: 12px 0 0 10px;}.initial-container .primary-profile-container {width: 121px;margin: 12px 0 0 10px;padding-left: 60px;min-height:55px;}.initial-container .secondary-profile-container {clear:both;padding:5px;height: 255px;overflow: auto;}.initial-container .secondary-profile-container .open-profile {border-bottom:1px solid white;background-color:rgb(241, 241, 241);width: 96%;padding: 5px;cursor: pointer; text-transform:capitalize;}.initial-container .secondary-profile-container .img-container {float:right;}.initial-container .secondary-profile-container .opportunity-container {float:right;display:none;}.initial-container .primary-profile-container .img-container {float:right;margin-right:-21px;}.initial-container .primary-profile-container .opportunity-container {display:none;margin-right:-25px;float:right;}.all-mail-receipts{width: 97%;margin: 0 auto;overflow: auto;height: 343px;padding-left: 7px;border-bottom: 1px solid #bfbfbe;}.all-mail-receipts li{ line-height:30px; border-bottom:1px solid #ededed; cursor: pointer;width: 96%;}.all-mail-receipts .avatar{  border: 1px solid #DEDEDE;    display: inline-block;    float: left;    height: 36px;    margin-top: 10px;    width: 36px;}.all-mail-receipts strong {     display: inline-block;    color: #555;    text-transform: capitalize;}.all-mail-receipts em { float:right; font-size:10px; color:#999;}";

appStyle = appStyle +" .gbts.gbtsa{float: left;height: 27px;width: 20px;margin-right: 20px; background:url("+img_base_url+"/ginicube_icon24px.png) no-repeat;}.gbts.gbtsa img{display:none;}.login_required {font-style: normal !important;}.already_login{background:url("+img_base_url+"/sprites.png) -4px -3200px repeat-x; border-bottom:1px solid #cbcbcb; font-style: normal !important;}.gini-nav-menu ul li a{padding-left:30px; padding-right:10px; margin:0 10px; border-bottom:1px solid #efefef;height:35px; line-height:35px; text-decoration:none; display:block; }.gini-nav-menu ul li.login_required a{background:url("+img_base_url+"/sprites.png) 1px -3419px; background-repeat: no-repeat; padding-left: 30px;}.gini-nav-menu ul li.already_login a{color:#34a0c4; margin:0; border:none;}.gini-nav-menu ul li.logout a{border:none;}#ginipkg-navigation-menu .arrow{background:url("+img_base_url+"/sprites.png) 0px -3248px no-repeat; width: 14px;height: 15px; top:-16px;}.gini-nav-menu ul{min-width: 335px;}#ginipkg-navigation-menu{top: 38px !important;left: -40px !important;}#ginipkg-navigation-menu li.sugarcrm a{background:url("+img_base_url+"/sprites.png) 0px -3276px no-repeat;}#ginipkg-navigation-menu li.sync a{background:url("+img_base_url+"/sprites.png) 0 -3313px no-repeat;}#ginipkg-navigation-menu li.networks a{background:url("+img_base_url+"/sprites.png) 0 -3347px no-repeat;}#ginipkg-navigation-menu li.settings a{background:url("+img_base_url+"/sprites.png) 0 -3384px no-repeat;}#ginipkg-navigation-menu li.logout a{background:url("+img_base_url+"/sprites.png) 0 -3419px no-repeat;}#ginipkg-navigation-menu li.signup_required a{background:url("+img_base_url+"/sprites.png) 0px -4025px no-repeat;}#ginipkg-navigation-menu li.about-ginicube #about-menu-link{background:url("+img_base_url+"/sprites.png) 0 -3518px no-repeat;cursor:pointer;padding-left: 30px;padding-right: 10px;margin: 0 10px;line-height: 35px;text-decoration: none;display: block;height: 35px;color: #15c;}#ginipkg-navigation-menu li.about-ginicube{border-bottom: 1px solid #efefef;}#ginipkg-navigation-menu li.about-ginicube span#version_details{padding-left:40px;color:#585858;font-size:12px;display: block;height: 50px;line-height: 23px;}#ginipkg-navigation-menu li.about-ginicube a.about-gini-website-link{display: inline-block;padding-left: 0;border:none}#ginipkg-navigation-menu li.about-ginicube div.about-ginicube-toggle{height:65px;display:none;}#general-form-container, #general-form-container .general-form-heading{-webkit-border-radius: 0px;-moz-border-radius: 0px;border-radius: 0px;}.form-data-container.ui-dialog-content.ui-widget-content{height:auto !important; min-height:400px;}#edit-template-iframe{height:505px!important;}.popup-container .form-top-box{margin:0;}#general-form-container .general-form-heading .heading{color:#5d5d5d;}.popup-container .submit-box{text-align:left !important;}.popup-container .submit-box input[type='button']{background:url("+img_base_url+"/sprites.png) 0 -3459px repeat-x !important;}.search_box{background:url("+img_base_url+"/shadow.png) no-repeat bottom center; height:58px; border:0;}.logo{border:0;}.search_box input[type='text']{-webkit-border-radius: 3px;-moz-border-radius:3px;border-radius: 3px; height:26px; line-height:26px;}.person_info{background:none; padding:0px 8px 23px 8px;}.basic-info-section{overflow:hidden; margin-bottom:10px !important;}.person_name{color:#34a0c4;}.blue-gini a{color:#555555;}.blue-gini, .tab-content{border:solid #bfbfbe; border-width:0 1px; margin-left:-1px;}.tabs label{width:40px;}.tabs .crm-section label{border-right:1px solid #bfbfbe;}.outer_div{border:0;}.ginipkg-placeholder{border-right:1px solid #bfbfbe; width:221px !important; height:auto !important;}.tabs li.personal-section{margin-left:7px;}.blue-gini{min-height:260px; /*margin-top: -9px;*/ margin-left: -2px;}.tab-content{width: 222px; border-top:1px solid #bfbfbe; border-bottom:1px solid #bfbfbe; margin-top:-1px; z-index:-1;}.abtus-sect{background:url("+img_base_url+"/shadow.png) no-repeat bottom center; padding:7px; padding-bottom:20px;}.social-sect{background:none !important; border-top:none; margin:0 7px;}.social-sect h3{border-bottom:0;}.social-sect .social-child-section li span, .social-sect .social-child-section li span a{background:none !important; color:#555555; font-size: 12px; font-style:italic;}.social-sect .social-child-section li span:hover, .social-sect .social-child-section li span a:hover{text-decoration: underline;}.abtus-sect .cntnt p.googleplus, .corporate_sect .cntnt p.googleplus, .social-sect .cntnt ul li.googleplus{}.social-sect .cntnt ul li.googleplus{border-bottom:none;}.person_profile{font-size:13px; color:#555;}.person_email{color:#555555;}.search_box input[type='button']{background-position:4px -6px; padding-right:22px; right:8px; margin:5px !important; border-left:1px solid #d6dced; height:17px !important;}.search_box input[type='button']{/*background-position:4px -6px; padding-right:35px; right:-6px; margin:5px !important; border-left:1px solid #d6dced; height:17px !important;*/}.edit_sync{top:0;}.corporate_sect .company_details{width:115px;}.email_body_tab tr th, .email_body_tab tr td{border:0;}.email_err_box{border:0 !important; padding:0 !important; position:absolute; z-index: 50; background: #ffffff; top: -20px;left: 5px;}.email_body_tab tr th, .email_body_tab .hasTooltip .title_mail, .email_body_tab_cls .page_index, .atchment_body_tab .hasTooltip .title_mail, .atchment_body_tab_cls .page_index{color:#555 !important; border-top:1px solid #ececec !important;, border-bottom:1px solid #ececec !important; height:41px !important; background:url("+img_base_url+"/sprites.png) -4px -3200px repeat-x;}.email_body_tab .hasTooltip .title_mail{height:30px !important; color:#34a0c4 !important; font-size14px !important;}.atchment_body_tab_cls .page_index, .email_body_tab_cls .page_index, .page_index{height:36px !important; border:1px solid #bfbfbe !important;}.email_body_tab tr:nth-child(odd){background-color:none !important;}.email_body_tab tr th{padding:0 0 0 7px !important;}.email_body_tab_cls tr .header{text-align:left;}.email_body_tab tr th, .email_body_tab tr td{padding-left:7px !important; background-color:rgba(0,0,0,0) !important;}.email_body_tab tr td:nth-child(1){color:#0074b2; }.email_body_tab tr td:nth-child(2){color:#afafaf !important; font-size:12px !important;font-style: italic;}.email_body_tab .hasTooltip .title_cntnt, .atchment_body_tab .hasTooltip .title_cntnt{height:180px !important;}.atchment_body_tab .hasTooltip .title_cntnt{height:170px !important;}.email_body_tab_cls .page_index, .page_index{margin-bottom: -38px; margin-left:-1px !important;}.ginipkg-taskBar .page_index{margin-bottom: 0px;}.email_body_tab_cls{height:410px !important;}.email_body_tab_cls .next, .email_body_tab_cls .no-back, .email_body_tab_cls .counting, .counting{color:#555 !important;}.email_body_tab .hasTooltip .arrow, .atchment_body_tab .hasTooltip .arrow{background:url("+img_base_url+"/sprites.png) -1px -1801px no-repeat !important; width: 26px;height: 20px; border:none !important;}}.top_nav li a.first{background-position:3px -3497px !important;}.top_nav li:hover > a{ background-color:rgba(0,0,0,0) !important;}.corporate_sect .comp_add{color:##0074b2; line-height: 17px}.corporate_sect .cntnt p.more a{font-size:13px !important;}.atchment_body_tab thead td,.atchment_body_tab thead th{border-left:none !important; border-right:none !important; text-align:left !important; color:#555 !important; border-top:1px solid #ececec !important;, border-bottom:1px solid #ececec !important; height:30px !important;background-color:rgba(0,0,0,0) !important; background:url("+img_base_url+"/sprites.png) -4px -3200px repeat-x;}#download-td-check{background-color:rgba(0,0,0,0) !important; padding-left:10px;}.attach_search{width: 109px !important; position: absolute !important; right: 7px; top: 5px;}.attachment_tab .attach_err_box{border:0 !important; padding:0 !important; position:absolute; z-index: 50; background: #ffffff; top: -20px;left: 5px;}.atchment_body_tab tbody tr td{border:none !important; border-bottom:1px solid #f0f0f0 !important;}.atchment_body_tab tr td:nth-child(2){width:10% !important;}.atchment_body_tab tbody tr td#download-td-check:nth-child(1){padding-left:10px !important;}.login_steps .header, .login_steps .popup-container .next{border-bottom:1px solid #ececec !important; height:30px !important; background:#f9f9f9;}#myiframe{width: 420px!important; margin-left: 0px!important;height:332px !important}.thankuscreen{position: relative;top: 216px; z-index: 100; color:#6e6e6e; font-weight:normal; font-size:13px;}.login_steps .header, .login_steps .popup-container .next{background-position:-4px -3197px !important; height:20px !important;}.atchment_body_tab tbody tr td:nth-child(2){width:15% !important;}.atchment_body_tab tbody tr td:nth-child(2) div{margin:0; padding:0;}.atchment_body_tab tbody tr td:nth-child(3){width:60% !important;}.atchment_body_tab tbody tr td:nth-child(3) a{width:auto !important;}.attachment_tab table{table-layout: inherit !important;}.atchment_body_tab tr:nth-child(odd){background-color:rgba(0,0,0,0) !important;}.atchment_body_tab .hasTooltip:hover .mail_pop_up_box, .atchment_body_tab tr:hover .mail_pop_up_box{margin-left: -262px !important;margin-top: -65px !important;}.atchment_body_tab .hasTooltip .title_mai{color:#34a0c4 !important;}.tabs .crm-section .ac-container label{width:92%; border-right:none !important; padding:2px 5%; height:30px;}.ac-container ul li ul li{font-size:13px; color:#0074b2;}.ac-container label span{color:#555;}.ac-container ul li{width:98%;}.login_steps .header img{width: 45px;height: 22px;}#manage-settings-iframe{height:349px!important;}#social-connect-iframe{height: 213px!important;}.form-data-container.ui-dialog-content.ui-widget-content{}#general-form-container{}.dropDownAppend{margin:0 10px !important;}.atchment_body_tab tr td:nth-child(1) input{ border-right:1px solid red !important; padding-right:5px !important; }.sync-popup-container .social-connect{background:url("+img_base_url+"/sprites.png) -4px -3200px repeat-x;}.gini-nav-menu ul li a:hover, .top_nav li a.first{background-color:rgba(0,0,0,0) !important;}#gini-toolbar-items .SK.AX > div[selector=Accounts]{background:url("+img_base_url+"/icopop.png) no-repeat 4px 5px !important;}#gini-toolbar-items .SK.AX > div[selector=Cases]{background:url("+img_base_url+"/icopop.png) no-repeat 4px -37px !important;}#gini-toolbar-items .SK.AX > div[selector=Contacts]{background:url("+img_base_url+"/icopop.png) no-repeat 4px -77px !important;}#gini-toolbar-items .SK.AX > div[selector=Leads]{background:url("+img_base_url+"/icopop.png) no-repeat 4px -118px !important;}#gini-toolbar-items .SK.AX > div[selector=Opportunities]{background:url("+img_base_url+"/icopop.png) no-repeat 4px -159px !important;}#gini-toolbar-items .SK.AX > div {height: 24px;line-height: 24px;border-bottom: 1px solid #efefef;}#gini-toolbar-items .SK.AX > div:last-child{border:none;}#general-form-container .submit-box button{background:url("+img_base_url+"/sprites.png) repeat-x 0 -3459px !important; padding:0 10px; height:31px; color:#fff;}#general-form-container .form-label{width: 25%;color: #555555; float: left;text-align: left;margin-right: 4%;height: 28px;line-height: 28px;font-size: 12px;}#templateForm .errorEmpty{width:auto !important;}#templateForm .mce-tinymce.mce-container.mce-panel{width:442px !important;}.form-data-container input[type='text'], .form-data-container textarea, .form-data-container select{border-radius:0 !important}#general-form-container .submit-box{text-align:left !important; margin-left:31%;}#general-form-container .top-legends{width:65% !important; padding-left:29% !important;}#general-form-container .form-row{margin:4px 0 !important;}#general-form-container .form-fields label{color:#AEADAE; font-weight:bolder;}.ginipkg-templatebar_strip {border-top: 1px solid #cfcfcf;}.ginipkg-templatebar_strip > .templateToggle {border:none!important;}.comment-status .status-text{background:url("+img_base_url+"/sprits.png) no-repeat 2px -467px; background-color: #e0f1c5;display: block;border-radius: 3px;height: 40px;line-height: 40px;padding-left: 38px;color: #8cad59;font-size: 90%;text-align: left;text-shadow: 1px 1px 1px rgba(255, 255, 255, 1); width:90%;}.fav_category .tabs label{z-index: 2;}.ginipkg-templatebar .tab-content{width:100%; border: 1px solid #D5D5D3;border-width: 0 0 0 1px;}.template_list .form-top-box span { background: none repeat scroll 0 0 #EFFFE6;border: 1px solid #cbdbb2 !important;border-radius: 3px 3px 3px 3px;clear: both;height: 40px;margin: 10px auto 0;padding-right: 23px;text-align: left;width: 88%;margin:0;margin-bottom:10px;}[id^=tpl]:checked + label{border-left:0;}.initial-container .primary-profile div.contact_exist_container {height: 14px;float: left;width: 16px;}.initial-container li div.contact_exist_container {display: inline-block;vertical-align: -15px;padding-left: 16px;width:145px;}.initial-container .contact_exist_container.active{background: url("+img_base_url+"/sprites.png) no-repeat scroll -2px -1650px;}.initial-container .contact_exist_container.inactive{background: url("+img_base_url+"/sprites.png) no-repeat scroll -2px -1593px;}.initial-container li div.contact_exist_container.inactive{background: url("+img_base_url+"/sprites.png) no-repeat scroll 1px -1587px;}.initial-container li div.contact_exist_container.active{background: url("+img_base_url+"/sprites.png) no-repeat scroll 1px -1644px;}.data-section-loader{padding-left: 45%;}.back-toggle{background-position: 0px -3952px;cursor:pointer;}.taskbar-gini-logo {    width: 20px;position: absolute;    background: url("+img_base_url+"/ginicube_icon24px.png) no-repeat;    height: 24px;left: -30px;top: 4px;}.logo-back {    border: 1px solid red;width: 55px;height: 25px;position: absolute;top: 0;cursor: pointer;display: none;}.error_msgOnForms{    background: url("+img_base_url+"/sprits.png) no-repeat 2px -500px !important;     background-color: #f2c2c2 !important;     color: red !important; }";

client.stylesheet = appStyle;

//HandleBar.js starts here
    var Handlebars = {
        compilerCache: {},
        compile: function (string) {
            if (Handlebars.compilerCache[string] == null) {
                var fnBody = Handlebars.compileFunctionBody(string);
                var fn = new Function("context", "fallback", "stack", "Handlebars", fnBody);
                Handlebars.compilerCache[string] = function (context, fallback, stack) {

                    return fn(context, fallback, stack, Handlebars);
                };
            }
            return Handlebars.compilerCache[string];
        },
        compileToString: function (string) {
            var fnBody = Handlebars.compileFunctionBody(string);
            return "function(context, fallback, stack) { " + fnBody + "}";
        },
        compileFunctionBody: function (string) {
            var compiler = new Handlebars.Compiler(string);
            compiler.compile();
            return "var stack = stack || [];" + compiler.fn;
        },
        isFunction: function (fn) {
            return Object.prototype.toString.call(fn) == "[object Function]";
        },
        trim: function (str) {
            return str.replace(/^\s+|\s+$/g, '');
        },
        escapeText: function (string) {
            string = string.replace(/'/g, "\\'");
            string = string.replace(/\"/g, "\\\"");
            return string;
        },
        escapeExpression: function (string) {
            if (string instanceof Handlebars.SafeString) {
                return string.toString();
            } else if (string === null) {
                string = "";
            }
            return string.toString().replace(/&(?!\w+;)|["\\<>]/g, function (str) {
                switch (str) {
                case "&":
                    return "&amp;";
                    break;
                case '"':
                    return "&quot;";
                case "\\":
                    return "\\\\";
                    break;
                case "<":
                    return "&lt;";
                    break;
                case ">":
                    return "&gt;";
                    break;
                default:
                    return str;
                }
            });
        },
        compilePartial: function (partial) {
            if (Handlebars.isFunction(partial)) {
                compiled = partial;
            } else {
                compiled = Handlebars.compile(partial);
            }
            return compiled;
        },
        buildContext: function (context, stack) {
            var ContextWrapper = function (stack) {
                this.__context__ = context;
                this.__stack__ = stack.slice(0);
                this.__get__ = function (path) {
                    return this.__context__.evalExpression(path, this.__stack__).data;
                };
            };
            ContextWrapper.prototype = context.data;
            return new ContextWrapper(stack);
        },
        pathPatterns: {},
        parsePath: function (path) {
            if (path == null) {
                return [0, []];
            } else if (Handlebars.pathPatterns["hbs-" + path] != null) {
                return Handlebars.pathPatterns["hbs-" + path];
            }
            var parts = path.split("/");
            var readDepth = false;
            var depth = 0;
            var dig = [];
            for (var i = 0, j = parts.length; i < j; i++) {
                switch (parts[i]) {
                case "..":
                    if (readDepth) {
                        throw new Handlebars.Exception("Cannot jump out of context after moving into a context.");
                    } else {
                        depth += 1;
                    }
                    break;
                case ".":
                case "this":
                    break;
                default:
                    readDepth = true;
                    dig.push(parts[i]);
                }
            }
            var ret = [depth, dig];
            Handlebars.pathPatterns["hbs" + path] = ret;
            return ret;
        },
        isEmpty: function (value) {
            if (typeof value === "undefined") {
                return true;
            } else if (value === null) {
                return true;
            } else if (value === false) {
                return true;
            } else if (Object.prototype.toString.call(value) === "[object Array]" && value.length == 0) {
                return true;
            } else {
                return false;
            }
        },
        filterOutput: function (value, escape) {
            if (Handlebars.isEmpty(value)) {
                return "";
            } else if (escape) {
                return Handlebars.escapeExpression(value);
            } else {
                return value;
            }
        },
        handleBlock: function (lookup, context, arg, fn, notFn) {
            var out = "",
                args;
            var originalArgs = arg.length ? arg : [null]
            if (Handlebars.isFunction(lookup.data)) {
                args = originalArgs.concat(fn);
                out = out + lookup.data.apply(context, args);
                if (notFn != null && Handlebars.isFunction(lookup.data.not)) {
                    args = originalArgs.concat(notFn);
                    out = out + lookup.data.not.apply(context, args);
                }
            } else {
                if (!Handlebars.isEmpty(lookup.data)) {
                    out = out + Handlebars.helperMissing.call(arg[0], lookup, fn);
                }
                if (notFn != null) {
                    out = out + Handlebars.helperMissing.not.call(arg[0], lookup, notFn);
                }
            }
            return out;
        },
        handleExpression: function (lookup, context, args, isEscaped) {
            var out = "";
            if (Handlebars.isFunction(lookup.data)) {
                out = out + Handlebars.filterOutput(lookup.data.apply(context, args), isEscaped);
            } else if (!Handlebars.isEmpty(lookup.data)) {
                out = out + Handlebars.filterOutput(lookup.data, isEscaped);
            }
            return out;
        },
        handleInvertedSection: function (lookup, context, fn) {
            var out = "";
            if (Handlebars.isFunction(lookup.data) && Handlebars.isEmpty(lookup.data())) {
                out = out + fn(context);
            } else if (Handlebars.isEmpty(lookup.data)) {
                out = out + fn(context);
            }
            return out;
        },
        handleArgument: function (lookup, context) {
            if (Handlebars.isFunction(lookup.data)) {
                return lookup.data.call(context, context);
            } else {
                return lookup.data;
            }
        }
    }

    Handlebars.Context = function (context, fallback, path) {
        if (context instanceof Handlebars.Context) {
            this.data = context.data;
            this.fallback = context.fallback;
            this.path = context.path;
        } else {
            this.data = context;
            this.fallback = fallback || {};
            this.path = path || "";
        }
    };
    Handlebars.Context.prototype = {
        evalExpression: function (path, stack) {
            var newContext = new Handlebars.Context(this);
            var parsedPath = Handlebars.parsePath(path);
            var depth = parsedPath[0];
            var parts = parsedPath[1];
            if (depth > stack.length) {
                newContext.data = null;
            } else if (depth > 0) {
                newContext = new Handlebars.Context(stack[stack.length - depth]);
            }
            for (var i = 0, j = parts.length; i < j && typeof newContext.data !== "undefined" && newContext.data !== null; i++) {
                newContext.data = newContext.data[parts[i]];
            }
            if (parts.length == 1 && typeof newContext.data === "undefined") {
                newContext.data = newContext.fallback[parts[0]];
            }
            return newContext;
        }
    };
    Handlebars.Compiler = function (string) {
        this.string = string;
        this.pointer = -1;
        this.mustache = false;
        this.text = "";
        this.fn = "context = new Handlebars.Context(context, fallback); var out = ''; var lookup, arg; ";
        this.newlines = "";
        this.comment = false;
        this.escaped = true;
        this.partial = false;
        this.inverted = false;
        this.endCondition = null;
        this.continueInverted = false;
    };
    Handlebars.Exception = function (message) {
        this.message = message;
    };
    Handlebars.SafeString = function (string) {
        this.string = string;
    }
    Handlebars.SafeString.prototype.toString = function () {
        return this.string.toString();
    }
    Handlebars.helperMissing = function (object, fn) {
        var ret = "";
        if (object.data === true) {
            return fn(this);
        } else if (object.data === false) {
            return "";
        } else if (Object.prototype.toString.call(object.data) === "[object Array]") {
            for (var i = 0, j = object.data.length; i < j; i++) {
                ret = ret + fn(object.data[i]);
            }
            return ret;
        } else {
            return fn(object.data);
        }
    };

    Handlebars.helperMissing.not = function (context, fn) {
        return fn(context);
    }

    Handlebars.Compiler.prototype = {
        getChar: function (n) {
            var ret = this.peek(n);
            this.pointer = this.pointer + (n || 1);
            return ret;
        },
        peek: function (n) {
            n = n || 1;
            var start = this.pointer + 1;
            return this.string.slice(start, start + n);
        },

        compile: function (endCondition) {
            if (!endCondition || !endCondition(this)) {
                var chr;
                while (chr = this.getChar()) {
                    if (chr === "{" && this.peek() === "{" && !this.mustache) {
                        this.getChar();
                        this.parseMustache();
                    } else {
                        if (chr === "\n") {
                            this.newlines = this.newlines + "\n";
                            chr = "\\n";
                        } else if (chr === "\r") {
                            this.newlines = this.newlines + "\r";
                            chr = "\\r";
                        } else if (chr === "\\") {
                            chr = "\\\\";
                        }
                        this.text = this.text + chr;
                    }
                    if (endCondition && this.peek(5) == "{{^}}") {
                        this.continueInverted = true;
                        this.getChar(5);
                        break;
                    } else if (endCondition && endCondition(this)) {
                        break
                    };
                }
            }
            this.addText();
            this.fn += "return out;";
            return;
        },
        addText: function () {
            if (this.text) {
                this.fn = this.fn + "out = out + \"" + Handlebars.escapeText(this.text) + "\"; ";
                this.fn = this.fn + this.newlines;
                this.newlines = "";
                this.text = "";
            }
        },
        addExpression: function (mustache, params) {
            if (!params[0]) params = ["null"]
            params = params.join(", ")
            var expr = this.lookupFor(mustache);
            this.fn += "var wrappedContext = Handlebars.buildContext(context, stack);"
            this.fn += "out = out + Handlebars.handleExpression(" + expr + ", wrappedContext, [" + params + "], " + this.escaped + ");";
        },
        addInvertedSection: function (mustache) {
            var compiler = this.compileToEndOfBlock(mustache);
            var result = compiler.fn;
            var fnId = "fn" + this.pointer.toString();
            this.fn += "var " + fnId + " = function(context) {" + result + "}; ";
            this.fn += "lookup = " + this.lookupFor(mustache) + "; ";
            this.fn += "out = out + Handlebars.handleInvertedSection(lookup, context, " + fnId + ");"
            this.openBlock = false;
            this.inverted = false;
        },
        lookupFor: function (param) {
            if (typeof param === "undefined") {
                return "context";
            } else {
                return "(context.evalExpression('" + param + "', stack))";
            }
        },
        compileToEndOfBlock: function (mustache) {
            var compiler = new Handlebars.Compiler(this.string.slice(this.pointer + 1));
            compiler.compile(function (compiler) {
                if (compiler.peek(3) === "{{/") {
                    if (compiler.peek(mustache.length + 5) === "{{/" + mustache + "}}") {
                        compiler.getChar(mustache.length + 5);
                        return true;
                    } else {
                        throw new Handlebars.Exception("Mismatched block close: expected " + mustache + ".");
                    }
                }
            });
            this.pointer += compiler.pointer + 1;
            return compiler;
        },
        addBlock: function (mustache, params) {
            var compiler = this.compileToEndOfBlock(mustache);
            var result = compiler.fn;
            var fnId = "fn" + this.pointer.toString();
            this.fn += "var wrappedContext = Handlebars.buildContext(context, stack);";
            this.fn += "var " + fnId + " = function(context) {" + result + "}; ";
            this.fn += "lookup = " + this.lookupFor(mustache) + "; ";
            this.fn += "arg = [" + params.join(", ") + "] ;";
            this.fn += "stack.push(context);";
            if (compiler.continueInverted) {
                var invertedCompiler = this.compileToEndOfBlock(mustache);
                this.fn += "  var " + fnId + "Not = function(context) { " + invertedCompiler.fn + " };";
            } else {
                this.fn += " var " + fnId + "Not = null;";
            }
            this.fn += "out = out + Handlebars.handleBlock(lookup, wrappedContext, arg, " + fnId + ", " + fnId + "Not);"
            this.fn += "stack.pop();";
            this.openBlock = false;
        },
        addPartial: function (mustache, param) {
            this.fn += "if (typeof context.fallback['partials'] === 'undefined' || typeof context.fallback['partials']['" + mustache + "'] === 'undefined') throw new Handlebars.Exception('Attempted to render undefined partial: " + mustache + "');";
            this.fn += "out = out + Handlebars.compilePartial(context.fallback['partials']['" + mustache + "'])(" + param + ", null, stack);";
        }
        ,
        parseMustache: function () {
            var chr, part, mustache, param;
            var next = this.peek();
            if (next === "!") {
                this.comment = true;
                this.getChar();
            } else if (next === "#") {
                this.openBlock = true;
                this.getChar();
            } else if (next === ">") {
                this.partial = true;
                this.getChar();
            } else if (next === "^") {
                this.inverted = true;
                this.openBlock = true;
                this.getChar();
            } else if (next === "{" || next === "&") {
                this.escaped = false;
                this.getChar();
            }
            this.addText();
            var params = [""],
                currentParam = 0,
                literals = [];
            while (chr = this.getChar()) {
                if (this.stringLiteral) {
                    params[currentParam] += chr;
                    if (chr === "\\" && this.peek() === '"') {
                        params[currentParam] += '"';
                        this.getChar();
                    } else if (chr === '"') {
                        this.stringLiteral = false;
                    }
                } else if (chr === '"') {
                    if (params[currentParam] !== "") {
                        throw new Handlebars.Exception("You are already in the middle of" + "the " + params[currentParam] + " param. " + "You cannot start a String param")
                    }
                    this.stringLiteral = true;
                    params[currentParam] = chr;
                    literals[currentParam] = true;
                } else if (chr === " ") {
                    if (params[currentParam] !== "") params[++currentParam] = ""
                } else if (chr === "}" && this.peek() === "}") {
                    mustache = params[0];
                    arguments = [];
                    if (!params[1]) params[1] = undefined;
                    for (var i = 1, l = params.length; i < l; i++) {
                        var argument = params[i];
                        arguments.push(literals[i] ? argument : "Handlebars.handleArgument(" + this.lookupFor(argument) + ", wrappedContext)");
                    }
                    this.mustache = false;
                    this.getChar();
                    if (!this.escaped && this.peek() === "}") {
                        this.getChar();
                    }
                    if (this.comment) {
                        this.comment = false;
                        return;
                    } else if (this.partial) {
                        this.addPartial(mustache, "(" + this.lookupFor(argument) + ")");
                        this.partial = false;
                        return;
                    } else if (this.inverted) {
                        this.addInvertedSection(mustache);
                        this.inverted = false;
                        return;
                    } else if (this.openBlock) {
                        this.addBlock(mustache, arguments)
                        return;
                    } else {
                        return this.addExpression(mustache, arguments);
                    }
                    this.escaped = true;
                } else if (this.comment) {;
                } else {
                    params[currentParam] += chr;
                }
            }
        }
        
    };
    
    var exports = exports || {};
    exports['compile'] = Handlebars.compile;
    exports['compileToString'] = Handlebars.compileToString;

    //HandleBar.js Ends here

    lib.view = function (_public, _protected, element_type) {
        _public.remove = function () {
            _public.$el.remove();
        };
    };

    var History = function () {
        this.handlers = [];
        _.bindAll(this, 'checkUrl');
    };
    var routeStripper = /^[#\/]/;
    var isExplorer = /msie [\w.]+/;
    History.started = false;



    lib.fillable = function (_public, _protected, spec) {
        var remaining_arguments = _.toArray(arguments).slice(3);

        function mergeSetOfObjects(old_array, new_array, constructor) {
            return _(new_array).map(function (data) {
                var new_object = constructor.apply(this, remaining_arguments.concat([data])),
                    existing = _(old_array || []).detect(function (old) {
                        return old.identity && old.identity === new_object.identity;
                    });
                if (existing) {
                    (existing.refill || existing.attributes)(data);
                    return existing;
                } else {
                    return new_object;
                }
            });
        }
        if (!spec || _.isArray(spec) || typeof (spec) === 'string') {
            lib.model.apply(this, arguments);
            _public.refill = _public.attributes;
        } else if (_.isFunction(spec)) {
            lib.model.apply(this, [_public, _protected].concat(remaining_arguments));
            _public.refill = spec;
        } else {
            lib.model(_public, _protected, _(spec).keys());
            _public.refill = function (attributes) {
                return _public.transaction(function () {
                    _(attributes).each(function (value, name) {
                        var filler = _public[name] && (_public[name].refill || _public[name].attributes),
                            triggerer = function () {
                                _public.trigger(name + "_change", _public[name]);
                            };
                        if (_.isFunction(filler)) {
                            _public[name].onChange(triggerer);
                            filler.call(_public[name], value);
                            _public[name].removeHandler(name + "_change", triggerer);
                        } else if (_.isFunction(spec[name])) {
                            _public[name] = spec[name].apply(this, remaining_arguments.concat(value));
                        } else if (_.isArray(spec[name]) && _.isFunction(spec[name][0])) {
                            _public[name] = mergeSetOfObjects(_public[name], value, spec[name][0]);
                        } else if (typeof value !== 'undefined') {
                            _public[name] = value;
                        }
                    });
                    _public.triggerChange(_public);
                });
            };
        }
        return _public.refill;
    };

    lib.showable = function (_public, _protected, manager) {
        lib.model(_public, _protected, 'visible');
        lib.destroyable(_public, _protected);
        _public.visible = false;
        _public.show = function () {
            _public.visible = true;
            return _public;
        };
        _public.hide = function () {
            _public.visible = false;
            return _public;
        };
        _public.toggle = function () {
            _public.visible = arguments.length ? arguments[0] : !_public.visible;
            return _public;
        };
        _public.onDestroy(_public.hide);
        return _public;
    };


    lib.destroyable = function (_public, _protected) {
        lib.hasEvent(_public, _protected, 'destroy');
        _public.listenUntilDestroyed = function (object, event_name, handler) {
            object[(object.jquery ? event_name : 'on' + _.camelize(event_name))](handler);
            _public.onDestroy(function () {
                object[(object.jquery ? 'unbind' : 'removeHandler')](event_name, handler);
            });
        };
        _public.chainedDestroyable = function (destroyable) {
            _public.onDestroy(destroyable.triggerDestroy);
            return destroyable;
        };
        _public.chainedDeferrable = function (deferrable) {
            _public.onDestroy(deferrable.reject);
            return deferrable;
        };
        _public.destroyableDiv = function (node) {
            node = node || jQuery('<div>');
            _public.onDestroy(function () {
                node.remove();
            });
            return node;
        };
        return _public;
    };


    lib.hasEvent = function (_public, _protected, event_names) {

        _protected.event_handlers = _protected.event_handlers || {};
        _public.on = _public.on || function (name, handler) {
            if (!_.isFunction(handler)) {
                throw new TypeError("Tried to bind " + name + " with non-function:" + String(handler));
            }
            _protected.event_handlers[name] = _protected.event_handlers[name] || [];
            _protected.event_handlers[name].push(handler);
            return _public;
        };
        _public.onceOn = _public.onceOn || function (name, handler) {
            if (!_.isFunction(handler)) {
                throw new TypeError("Tried to bind " + name + " with non-function:" + String(handler));
            }

            function onceHandler() {
                _public.removeHandler(name, onceHandler);
                return handler.apply(this, arguments);
            }
            return _public.on(name, onceHandler);
        };
        _public.nowAndOn = _public.nowAndOn || function (name, handler) {
            handler.apply(_public, _(arguments).toArray().slice(2));
            return _public["on" + _.camelize(name)](handler);
        };
        _public.removeHandlers = _public.removeHandlers || function (name) {
            _protected.event_handlers[name] = [];
        };
        _public.removeHandler = _public.removeHandler || function (name, handler) {
            var handlers = _protected.event_handlers[name];
            if (!handlers) {
                return;
            }
            var index = handlers.indexOf(handler);
            if (index < 0) {
                return;
            }
            return handlers.splice(index, 1)[0];
        };
        _public.trigger = _public.trigger || function (name) {
            var args = Array.prototype.slice.call(arguments, 1),
                that = this;
            if (_protected.event_handlers.hasOwnProperty(name)) {
                _(_protected.event_handlers[name]).chain().clone().each(function (handler) {
                    handler.apply(that, args);
                });
            }
            return _public;
        };
        _public.hasHandlers = _public.hasHandlers || function (event_name) {
            return _(_protected.event_handlers[event_name]).andand().length > 0;
        };
        if (!_(event_names).isArray()) {
            event_names = _(arguments).toArray().slice(2);
        }
        _(event_names).each(function (event_name) {
            _protected.event_handlers[event_name] = _protected.event_handlers[event_name] || [];
            _public['on' + _(event_name).camelize()] = function (handler) {
                return _public.on(event_name, handler);
            };
            _public['trigger' + _(event_name).camelize()] = function () {
                return _public.trigger.apply(this, [event_name].concat(_(arguments).toArray()));
            };
        });
    };


    lib.postMessageShim = function (_public, _protected, opts) {
        var other = opts.iframe || opts.window,
            debug = true;

        function sendMessage(msg) {
            if (debug) {
                fsLog((opts.name || 'pmshim') + " SENT-->: " + JSON.stringify(msg));
            }
            $.message(other, msg, (_.isFunction(opts.remote_base_url) ? opts.remote_base_url() : opts.remote_base_url));
        }
        if (opts.model) {
            lib.model(_public, _protected, opts.model);
            opts.receive = (opts.receive || []).concat(_(opts.model).map(function (field) {
                return field + '_sync';
            }));
            _(opts.model).each(function (name) {
                var syncedValue;
                _public.on(name + '_sync', function (value) {
                    syncedValue = value.value;
                    _public[name] = value.value;
                    syncedValue = undefined;
                });
                _public.on(name + '_change', function (value) {
                    if (value !== syncedValue) {
                        sendMessage({
                            action: name + '_sync',
                            ginipkg: true,
                            value: value
                        });
                    }
                });
            });
        }
        if (opts.receive) {
            lib.hasEvent(_public, _protected, opts.receive);
            $.message(other, loggily("postmessageshim.message", function (msg, reply, e) {
                if (_(opts.receive).include(msg.action)) {
                    if (debug) {
                        fsLog((opts.name || 'pmshim') + " -->RECV: " + JSON.stringify(msg));
                    }
                    _public.trigger(msg.action, msg);
                } else if (msg.ginipkg) {
                    fsLog((opts.name || 'pmshim') + " got unexpected postMessage: " + JSON.stringify(msg));
                }
            }));
        }
        if (opts.send) {
            lib.hasEvent(_public, _protected, opts.send);
            _(opts.send).each(function (name) {
                _public.on(name, function (msg) {
                    sendMessage(jQuery.extend({
                        action: name,
                        ginipkg: true
                    }, msg));
                });
            });
        }
    };


    lib.model = function (_public, _protected, declared_attributes) {
        _protected.attributes = _protected.attributes || {};
        lib.hasEvent(_public, _protected, 'change');
        if (!_(declared_attributes).isArray()) {
            declared_attributes = _(arguments).toArray().slice(2);
        }
        _(declared_attributes).each(function (name) {
            var change_event_name = name + '_change';
            lib.hasEvent(_public, _protected, change_event_name);
            _public.on(change_event_name, function (new_value) {
                _public.transactionalTrigger('change');
            });
            _public.__defineGetter__(name, function () {
                return _protected.attributes[name];
            });
            _public.__defineSetter__(name, function (new_value) {
                return _protected.setAttribute(name, new_value, new_value !== _public[name]);
            });
            _public['set' + _(name).camelize() + 'Later'] = function (new_value) {
                _public.setAttributeLater(name, new_value);
            };
        });
        _protected.setAttribute = function (name, new_value, trigger_change) {
            _protected.attributes[name] = new_value;
            if (trigger_change) {
                _public.transactionalTrigger(name + '_change', new_value);
            }
        };
        _public.attributes = function (new_attributes) {
            return _public.transaction(function () {
                if (typeof (new_attributes) !== 'undefined') {
                    for (var attribute in new_attributes) {
                        if (new_attributes.hasOwnProperty(attribute)) {
                            _public[attribute] = new_attributes[attribute];
                        }
                    }
                }
                return _.clone(_protected.attributes);
            });
        };
        _public.unbuild = function () {
            var obj = {};
            _(_protected.attributes).each(function (attr, name) {
                obj[name] = _(attr.unbuild).isFunction() ? attr.unbuild() : attr;
            });
            return obj;
        };
        _public.setAttributeLater = function (name, new_value) {
            window.setTimeout(function () {
                _public[name] = new_value;
            }, 0);
        };
        _public.bindTo = function (parent, attribute) {
            _public.onChange(function () {
                parent.trigger(attribute + '_change', _public);
            });
            parent.trigger(attribute + '_change', _public);
            return _public;
        };
        _public.whenEqual = function (name, expected_value, callback) {
            if (_public[name] === expected_value) {
                callback.call(_public);
            } else {
                _protected.when_equal = _protected.when_equal || {};
                if (_protected.when_equal[name]) {
                    _protected.when_equal[name].push({
                        expected_value: expected_value,
                        callback: callback
                    });
                } else {
                    _protected.when_equal[name] = [{
                            expected_value: expected_value,
                            callback: callback
                        }
                    ];
                    _public.on(name + '_change', function (new_value) {
                        _protected.when_equal[name] = _(_protected.when_equal[name]).reject(function (item) {
                            if (item.expected_value === new_value) {
                                item.callback.call(_public);
                                return true;
                            }
                        });
                    });
                }
            }
            return _public;
        };
        _public.wheneverEqual = function (name, expected_value, callback) {
            return _public.nowAndOn(name + '_change', function () {
                if (_public[name] === expected_value) {
                    callback.call(_public);
                }
            });
        };
        _public.transaction = function (func) {
            if (_protected.transaction_queue) {
                return func();
            }
            _protected.transaction_queue = [];
            var ret = func();
            while (_protected.transaction_queue.length) {
                _(_protected.transaction_queue.splice(0)).invoke('call');
            }
            _protected.transaction_queue = null;
            if (_protected.transaction_triggered_change) {
                _protected.transaction_triggered_change = false;
                _public.triggerChange();
            }
            return ret;
        };
        _public.transactionalTrigger = function () {
            var thiz = this,
                args = arguments;
            if (_protected.transaction_queue) {
                if (args[0] === 'change') {
                    _protected.transaction_triggered_change = true;
                } else {
                    _protected.transaction_queue.push(function () {
                        _public.trigger.apply(thiz, args);
                    });
                }
            } else {
                _public.trigger.apply(thiz, args);
            }
        };
        _protected.cloneable = function (model_class) {
            var clone_cache;

            function deepClone(thing) {
                if (typeof (thing) !== 'object' || thing === null) {
                    return thing;
                }
                if (_(thing).isArray()) {
                    return _(thing).map(deepClone);
                }
                var cached = _(clone_cache).detect(function (pair) {
                    return pair[0] === thing;
                });
                if (cached) {
                    return cached[1];
                }
                var clone;
                if (typeof (thing.clone) === 'function') {
                    clone = thing.clone({
                        clone_cache: clone_cache
                    });
                } else {
                    clone = {};
                    clone_cache.push([thing, clone]);
                    _(thing).each(function (attr, name) {
                        clone[name] = deepClone(attr);
                    });
                }
                return clone;
            }
            _public.clone = function (options) {
                var clone = model_class();
                clone_cache = options && options.clone_cache || [];
                clone_cache.push([_public, clone]);
                _(_protected.attributes).each(function (attr, name) {
                    clone[name] = deepClone(attr);
                });
                return clone;
            };
        };
        return _public;
    };
    lib.model.build = function (attributes) {
        var obj = this();
        obj.attributes(attributes);
        return obj;
    };
    lib.model.class_from_attributes = function (attributes) {
        var klass = function () {
            var _public = {}, _protected = {};
            lib.model(_public, _protected, attributes);
            return _public;
        };
        klass.build = lib.model.build;
        return klass;
    };
    lib.model.usingEquality = function (isEqual) {
        return function (_public, _protected, declared_attributes) {
            lib.model.apply(lib.model, arguments);
            if (!_(declared_attributes).isArray()) {
                declared_attributes = _(arguments).toArray().slice(2);
            }
            _(declared_attributes).each(function (name) {
                _public.__defineSetter__(name, function (new_value) {
                    return _protected.setAttribute(name, new_value, !isEqual(new_value, _public[name]));
                });
                _public[_.camelize(name, true) + 'Equals'] = function (other_value) {
                    return isEqual(_public[name], other_value);
                };
            });
        };

    };


    models.pollable = function (data) {
        var _public = {}, _protected = {};
        lib.fillable(_public, _protected, function (attrs) {
            attrs.retrieved_at = (new Date()).getTime();
            if (attrs.response && _public.response) {
                _public.response.refill(attrs.response);
                delete attrs.response;
            }
            _public.attributes(attrs);
            _public.time_until_recheck = _public.recheck_after * 1000;
        }, 'response', 'retrieved_at', 'path', 'recheck_after', 'time_until_recheck', 'active')(data);
        return _public;
    };


    models.authorizationTracker = function (ginipkg) {
        var _public = {}, _protected = {}, social_networks = ['Twitter', 'Facebook', 'LinkedIn', 'GoogleContacts', 'GmailImap', 'Admin', 'Highrise'];
        lib.model(_public, _protected, social_networks);
        lib.hasEvent(_public, _protected, 'authorize', 'deauthorize');
        _public.onAuthorize(function (auth) {
            _public[auth.type_name] = auth;
            ginipkg.lookup_service.clearCache();
        });
        _public.onDeauthorize(function (auth) {
            _public[auth.type_name] = null;
            ginipkg.lookup_service.clearCache();
        });
        _public.setActive = function (latest_active_auths) {
            if (!latest_active_auths) {
                fsLog("Unexpected null authorizations");
            }
            _(latest_active_auths || []).each(function (auth) {
                var existing_info = _public[auth.type_name];
                if (!existing_info) {
                    _public.triggerAuthorize(auth);
                }
            });
            _(social_networks).each(function (network_name) {
                var existingNetwork = _(_public[network_name]).andand().type_name;
                if (existingNetwork && (!latest_active_auths || latest_active_auths.length === 0 || !_(_(latest_active_auths).pluck('type_name')).include(existingNetwork))) {
                    _public.triggerDeauthorize(_public[network_name]);
                }
            });
        };
        _public.deauthorize = function (network_name) {
            if (_public[network_name]) {
                _public.triggerDeauthorize(_public[network_name]);
            }
        };
        return _public;
    };

    models.contact_response = function (ginipkg, contact_data) {
        var _public = _.clone(contact_data),
            _protected = {};
        lib.fillable(_public, _protected, {
            contact: models.profile
        }, ginipkg)(contact_data);
        lib.model(_public, _protected, 'identifier');
        return _public;
    };

    models.lookupService = function (ginipkg) {
        var _public = {}, _protected = {};
 
        var cache = {
                expiry: 5 * 60 * 1000,
                store: {},
                active_pollable: null,
                lookup: function (path) {
                    fsLog("Looking in response cache for " + path);
                    cache.truncate();
                    return cache.store[path];
                },
                set: function (path, pollable) {
                    fsLog("Storing data for " + path + " in the response cache");
                    cache.store[path] = pollable.wheneverEqual('active', true, function () {
                        if (cache.active_pollable && cache.active_pollable !== pollable) {
                            cache.active_pollable.active = false;
                        }
                        cache.active_pollable = pollable;
                    });
                },
                invalidate: function (path) {
                    fsLog("Invalidating cache entry for " + path);
                    delete cache.store[path];
                },
                clear: function () {
                    fsLog("Clearing the entire response cache");
                    cache.store = {};
                },
                truncate: function () {
                    var horizon = (new Date()).getTime() - cache.expiry;
                    jQuery.each(cache.store, function (path, entry) {
                        if (entry.retrieved_at < horizon) {
                            cache.invalidate(path);
                        }
                    });
                }
            };

        function pathFor(type, value) {
            ginipkg.firstEmail = value;
            return "/person.php?" + encodeURIComponent(type) + "=" + encodeURIComponent(value);

        }
        _public.isCached = function (point_type, identifier) {
            return !!cache.lookup(pathFor(point_type, identifier));
        };
        _public.invalidateCacheForEmail = function (email) {
            cache.invalidate(pathFor('email', email));
        };
        _public.invalidateCacheForTwitter = function (twitter) {
            cache.invalidate(pathFor('twitter', twitter));
        };
        _public.clearCache = function () {
            cache.clear();
        };

        function poll(pollable) {
            if (_.isNumber(pollable.recheck_after) && !pollable.timeout) {
                pollable.active = true;
                pollable.timeout = setTimeout(function () {
                    fsLog("Polling " + pollable.path + " after " + pollable.recheck_after);
                    pollable.timeout = null;

                    ginipkg.request({
                        path: pollable.path,
                        server: 'profiles',
                        jsonp: 'true',
                        //_method:'POST',
                        data: {
                            if_none_match: _(pollable.response.contact).andand().etag,
                            recheck_after: pollable.recheck_after,
                            polling_active: pollable.active,
                            // _method         :  'post',
                        },
                        success: loggily("lookup_service.poll.response", function (new_data) {
                            if (pollable.stopped) {
                                return;
                            }
                            if (new_data.status === 200) {
                                pollable.refill({
                                    response: new_data,
                                    recheck_after: new_data.recheck_after
                                });
                            } else if (new_data.status === 304) {
                                pollable.refill({
                                    recheck_after: new_data.recheck_after
                                });
                            }
                            if (pollable.active) {
                                poll(pollable);
                            }
                        })
                    });
                        

                }, pollable.time_until_recheck);
            }
        }

        function compareVersions(ver1, ver2) {
            function parse(ver) {
                return _(ver.toString().split('.')).map(parseInt);
            }
            ver1 = parse(ver1);
            ver2 = parse(ver2);
            for (var i = 0; i < Math.max(ver1.length, ver2.length); i += 1) {
                if ((ver1[i] || 0) < (ver2[i] || 0)) {
                    return -1;
                }
                if ((ver1[i] || 0) > (ver2[i] || 0)) {
                    return 1;
                }
            }
            return 0;
        }

        function error_code(status) {
            var code = 'unknown';
            if (status < 200 || status >= 400) {
                if (status === 0) {
                    var chrome_version = navigator.userAgent.match(/ Chrome\/(\d+)/),
                        webkit_version = navigator.userAgent.match(/ AppleWebKit\/(\d+\.\d+)/),
                        firefox_version = navigator.userAgent.match(/ Firefox\/(\d+\.\d+(?:\.\d+)?)/);
                    if (chrome_version && compareVersions(chrome_version[1], '11') < 0) {
                        code = 'buggy_cors_chrome';
                    } else if (webkit_version && compareVersions(webkit_version[1], '534.18') < 0) {
                        code = ginipkg.isMailplane() ? 'buggy_cors_mailplane' : 'buggy_cors_safari';
                    } else if (firefox_version && compareVersions(firefox_version[1], '3.5') < 0) {
                        code = 'not_cors_compatible';
                    } else {
                        code = 'server_inaccessible';
                    }
                } else {
                    code = 'http_status_' + status;
                }
                return code;
            }
            throw "tried to generate an error_code on a non-error response: " + status;
        }

        function cachedLookup(path, continuation) {
            var cached_pollable = cache.lookup(path);

            function onResponse(response) {
                var pollable = models.pollable({
                    response: models.contact_response(ginipkg, response),
                    recheck_after: response.recheck_after,
                    path: path
                });
                if (response.status === 200) {
                    cache.set(path, pollable);
                }
                if(ginipkg.isProfileUpdated === true) {
                    ginipkg.isProfileUpdated = false;
                }
                continuation(pollable);
            }


            if (!ginipkg.cors_compatible) {
                onResponse({
                    error_code: 'not_cors_compatible'
                });
                return;
            }

            if (cached_pollable) {
                setTimeout(function () {
                    continuation(cached_pollable);
                }, 1);
            } 
            else {
                var nameFromEmail   = $('.ajA.SK').find('span[email='+ginipkg.firstEmail+']').first().text();
                nameFromEmail       = nameFromEmail.replace('<'+ginipkg.firstEmail+'>','')
                                          .replace(/\"/g,'').replace(/\./g,' ');
                nameFromEmail       = nameFromEmail.trim();
                ginipkg.request({
                    path: path,
                    data: {
                        viewport_height: jQuery(window).height(),
                        view_type: ginipkg.host_environment.active_view.viewType(),
                        source: 'ext',      
                        client: 'chromium',
                        requestType : 'personal',
                        name : nameFromEmail,
                        isProfileUpdated : ginipkg.isProfileUpdated === true? true :false ,
                        // profileFullFetch : (ginipkg.profileFullFetch) ? true : false
                        profileFullFetch : true
                        // _method:'post',
                    },
                    server: 'profiles',
                    //_method:'POST',
                    // jsonp: 'true',
                    beforeSend: function (){
                        $.killAllRequestQueue(true , true ,true);
                    },
                    success: loggily("lookup_service.lookup.on_response", onResponse),
                    error: function (data, text_status, xhr) 
                        {
                            var status = xhr.readyState === 4 ? xhr.status : 0;
                            if (status !== 401 && status !== 0) {
                                fsLog("Unexpected response status from lookup (" + path + "): " +
                                    xhr.status, "lookup_service.lookup", "warning");
                            }

                            onResponse(data && (data.html || data.error_code) ? data : {
                                error_code: error_code(status)
                            });
                        }
                });
            }
        }
        _public.lookup = function (key, continuation) {
            cachedLookup(pathFor(key.point_type, key.identifier), function (pollable) {
                continuation(pollable.response);
                poll(pollable);
                
            });
            
        };
        return _public;
    };


    models.sidebar = function (ginipkg) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'requested_key', 'processing_key', 'displayed_key', 'contact_data', 'width', 'viewport_top_offset', 'viewport_top_margin', 'show_wip_spinner');
        lib.hasEvent(_public, _protected, 'reset', 'before_sidebar_refresh', 'new_or_updated_contact_data');
        _public.sections = models.sections(_public);
        _public.viewport_top_margin = 0;

        function sameKey(key1, key2) {
            return key1 && key2 && (key1.point_type === key2.point_type) && (key1.identifier === key2.identifier);
        }

        function handleSpecialLookup(lookup_key, handleResponse) {
            var special_contact = {
                special_component: 'reminder-sidebar',
                email: lookup_key.identifier,
                bumped: ( !! lookup_key.identifier.match(ginipkg.RE_REMINDER_SENDER))
            };
            if (lookup_key.point_type === 'email' && (lookup_key.identifier.match(ginipkg.RE_REMINDER_EMAIL) || special_contact.bumped)) {
                handleResponse(models.contact_response(ginipkg, special_contact));
                return true;
            }
        }
        _public.onReset(function () {
            _public.displayed_key = null;
            _public.requested_key = null;
        });
        _public.onRequestedKeyChange(function (lookup_key) {
            if (lookup_key && sameKey(lookup_key, _public.displayed_key)) {
                _public.show_wip_spinner = false;
                _public.requested_key = null;
                return;
            }

            function onResponse(contact_data) {
                if (sameKey(lookup_key, _public.processing_key)) {
                    _public.processing_key = null;
                }
                if (sameKey(lookup_key, _public.requested_key)) {
                    _public.removeHandlers('before_sidebar_refresh');
                    _public.requested_key = null;
                    _public.displayed_key = lookup_key;
                    _public.show_wip_spinner = false;
                    _public.contact_data = null;
                    if (contact_data) {
                        contact_data.identifier = _public.displayed_key;
                    }
                    _public.contact_data = contact_data;
                } else if (_public.requested_key) {
                    fsLog(['Last requested ', _public.requested_key.point_type, ': ', _public.requested_key.identifier, ', which is different from ', lookup_key.point_type, ': ', lookup_key.identifier, '.'].join(''));
                }
            }
            if (lookup_key && lookup_key.point_type && lookup_key.identifier && !handleSpecialLookup(lookup_key, onResponse)) {
                ginipkg.found_user_email = lookup_key.identifier;           // set found_user_email
                ginipkg.attachments = undefined;
                ginipkg.mails = undefined;
                ginipkg.lookup_service.lookup(lookup_key, onResponse);
            }
        });

        function allowSidebarRefresh() {
            var checker = {
                allow: true
            };
            _public.triggerBeforeSidebarRefresh(checker);
            return checker.allow;
        }

        function contactDataOnChangeHandler(contact_data) {
            if (allowSidebarRefresh()) {
                _public.triggerNewOrUpdatedContactData(contact_data);
            }
        }
        _public.onContactDataChange(function (contact_data) {
            if (contact_data) {
                contact_data.onChange(contactDataOnChangeHandler);
            }
            if (_protected.old_contact_data) {
                _protected.old_contact_data.removeHandler('change', contactDataOnChangeHandler);
            }
            _public.triggerNewOrUpdatedContactData(contact_data);
            _protected.old_contact_data = contact_data;
        });

        function updateSidebar(lookup_key, force, subtle) {
            console.log("update sidebar called......");
            console.log(force);
            if (force) {
                _public.processing_key = lookup_key;
                _public.requested_key = lookup_key;
            }

            if (ginipkg.host_environment.active_view.isComposePopout()) {
                return;
            }
            
            fsLog(_public.processing_key);fsLog(_public.requested_key);fsLog(_public.displayed_key);
            if (sameKey(lookup_key, _public.displayed_key) || sameKey(lookup_key, _public.requested_key)) {

                if (sameKey(lookup_key, _public.requested_key)) {
                    fsLog('Not updating sidebar: no change of lookup.');
                } else {
                    fsLog("Not updating sidebar: reverted to previous");
                    _public.requested_key = lookup_key;
                }
            } else if (!allowSidebarRefresh()) {
                fsLog('Not updating sidebar: prevented by hook.');
            } else {

                if (subtle) {
                    _public.show_wip_spinner = true;
                } else {
                    _public.processing_key = lookup_key;
                    _public.displayed_key = null;
                }
                _public.requested_key = lookup_key;
            }
        }
        _public.updateSidebarFromEmail = function (email, opts) {
            opts = opts || {};
            updateSidebar({
                point_type: 'email',
                identifier: email,
                display_name: opts.display_name
            }, !! opts.force, !! opts.subtle);
        };
        _public.updateSidebarFromTwitter = function (username, opts) {
            opts = opts || {};
            updateSidebar({
                point_type: 'twitter',
                identifier: username
            }, !! opts.force, !! opts.subtle);
        };
        _public.refreshSidebar = function (preserve_content) {
            var lookup_key = _public.displayed_key;
            if (lookup_key && allowSidebarRefresh()) {
                _public.invalidateCacheEntry();
                _public.displayed_key = null;
                if (!preserve_content) {
                    _public.processing_key = lookup_key;
                }
                _public.requested_key = lookup_key;
            }
        };
        _public.clearContents = function () {
            _public.processing_key = _public.displayed_key;
            _public.displayed_key = null;
        };
        _public.invalidateCacheEntry = function () {
            var key = _public.displayed_key;
            if (key && key.point_type && key.identifier) {
                var func = (key.point_type === 'email') ? ginipkg.lookup_service.invalidateCacheForEmail : ginipkg.lookup_service.invalidateCacheForTwitter;
                func(key.identifier);
            }
        };
        _public.editOwnProfile = function () {
            _public.show_profile_editing_info_on_next_sidebar_load = true;
            if (allowSidebarRefresh() || confirm("You have unsaved words on the visible "+app_name+" profile. Continue and lose your changes?")) {
                _public.updateSidebarFromEmail(ginipkg.authenticated_as, {
                    force: true
                });
            }
        };
        _public.updateFromServer = function (contact_data) {
            _public.contact_data = models.contact_response(ginipkg, contact_data);
        };
        _public.onWidthChange(function () {
            _public.sections.triggerMeasure('resized');
        });
        return _public;
    };

    models.user = function (ginipkg) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'name');
        return _public;
    };

    models.sections = function (sidebar_model) {
        var _public = {}, _protected = {}, next_section_id = 1,
            last_layout = 0,
            debounce_reason = null,
            debounce_timer = null;
        var debug = false;
        lib.model(_public, _protected, 'sections', 'target_height', 'section_heights', 'total_height', 'last_layout_reason', 'pause_layout');
        lib.hasEvent(_public, _protected, 'measure', 'layout');
        _protected.cloneable(models.sections);
        _public.sidebar_model = sidebar_model;
        _public.sections = [];
        _public.onMeasure(function (reason) {
            _public.pause_layout = true;
            _(_public.sections).each(function (section) {
                section.triggerMeasure();
            });
            _public.pause_layout = false;
            _public.layout(reason);
        });

        function debugInfo(possibilities) {
            if (debug) {
                possibilities.print();
                if (_public.section_heights) {
                    fsLog('Optimum: ' +
                        _(_public.section_heights).map(function (limited_height, section_id) {
                        return section_id + ': ' + limited_height + 'px';
                    }).join(', '));
                } else {
                    fsLog('Optimum is not defined');
                }
            }
        }
        _public.recalculateLayout = function (reason) {
            var sections = _public.sections || [];
            var possibilities = _public.layoutPossibilities();
            var start_time = (new Date()).getTime();
            last_layout = start_time;
            var lru_order = _(_public.sections).clone().sort(function (section1, section2) {
                var time_diff = section2.lru_timestamp - section1.lru_timestamp;
                if (Math.abs(time_diff) >= 1) {
                    return time_diff;
                } else {
                    return section1.lru_index - section2.lru_index;
                }
            });
            _(lru_order).each(function (section, index) {
                section.lru_index = index;
            });
            _(sections).each(function (section) {
                var cost_function = section.costFunction(sections.length, _public.target_height, reason);
                possibilities = possibilities.add(section.id, cost_function);
            });
            _public.last_layout_reason = reason;
            _public.section_heights = possibilities.optimum();
            debugInfo(possibilities);
            var offset = 0;
            _(sections).each(function (section) {
                if (_public.section_heights && (typeof _public.section_heights[section.id] !== 'undefined')) {
                    section.limited_height = _public.section_heights[section.id];
                    section.offset = offset;
                    section.sections = _public;
                    offset += section.limited_height;
                }
            });
            _public.total_height = offset;
            _(sections).each(function (section) {
                section.triggerLayout(reason);
            });
            _public.triggerLayout(reason);
            if (debug) {
                var layout_time = (new Date()).getTime() - start_time;
                fsLog("Recalculated layout in " + layout_time.toFixed(0) + "ms (" + reason + ", " +
                    possibilities.size() + " possibilities)");
            }
        };
        _public.layout = function (reason) {
            var precedence = ['new-sidebar', 'resized', 'section-loaded', 'expanded', 'content-changed'],
                debounce_period = 100,
                now = (new Date()).getTime();
            if (debounce_reason) {
                debounce_reason = precedence[Math.min(_(precedence).indexOf(reason), _(precedence).indexOf(debounce_reason))] || reason || debounce_reason;
                if (!_public.pause_layout && !debounce_timer) {
                    _public.recalculateLayout(debounce_reason);
                    debounce_reason = null;
                }
            } else if (_public.pause_layout) {
                debounce_reason = reason;
            } else if (now - last_layout < debounce_period) {
                debounce_reason = reason;
                debounce_timer = debounce_timer || window.setTimeout(function () {
                    _public.recalculateLayout(debounce_reason);
                    debounce_timer = null;
                    debounce_reason = null;
                }, debounce_period);
            } else {
                _public.recalculateLayout(reason);
            }
        };
        _public.layoutPossibility = function (section_id, cost_point, choices) {
            if (!choices) {
                choices = {};
                choices[section_id] = cost_point;
            }
            var that = {
                min: cost_point[0],
                opt: cost_point[1],
                max: cost_point[2],
                cost_base: cost_point[3]
            };
            var height_limits, cached_cost;
            that.add = function (added_id, added_point) {
                var updated_choices = _.clone(choices);
                updated_choices[added_id] = added_point;
                var sum = _.range(4).map(function (i) {
                    return cost_point[i] + added_point[i];
                });
                return _public.layoutPossibility(added_id, sum, updated_choices);
            };
            that.cost = function () {
                if (that.min > _public.target_height) {
                    cached_cost = that.cost_base + Math.pow(that.min - _public.target_height, 2);
                    height_limits = that.limitsAtMin();
                } else if (that.max < _public.target_height) {
                    cached_cost = that.cost_base + _public.target_height - that.max;
                    height_limits = that.limitsAtMax();
                }
                if (cached_cost) {
                    return cached_cost;
                }
                var dist_to_cover = _public.target_height - that.opt;
                var section_ids = _(choices).keys();
                height_limits = {};
                var i, section_id;
                while (section_ids.length > 0) {
                    var step = dist_to_cover / section_ids.length,
                        limiting_id = null;
                    for (i = 0; i < section_ids.length; i += 1) {
                        section_id = section_ids[i];
                        var section_min = choices[section_id][0],
                            section_opt = choices[section_id][1],
                            section_max = choices[section_id][2];
                        var section_boundary = (dist_to_cover < 0) ? (section_min - section_opt) : (section_max - section_opt);
                        if (Math.abs(step) > Math.abs(section_boundary)) {
                            step = section_boundary;
                            limiting_id = section_id;
                        }
                    }
                    if (limiting_id) {
                        height_limits[limiting_id] = choices[limiting_id][1] + step;
                        section_ids = _(section_ids).without(limiting_id);
                        dist_to_cover -= step;
                    } else {
                        for (i = 0; i < section_ids.length; i += 1) {
                            section_id = section_ids[i];
                            height_limits[section_id] = choices[section_id][1] + step;
                        }
                        section_ids = [];
                    }
                }
                cached_cost = _(height_limits).reduce(function (sum, limited_height, section_id) {
                    return sum + Math.abs(limited_height - choices[section_id][1]);
                }, that.cost_base);
                return cached_cost;
            };
            that.print = function () {
                fsLog('Possibility: ' +
                    _(choices).map(function (point, section_id) {
                    return section_id + ': [' + point.join(',') + ']';
                }).join(', ') + ' --> Sum: [' + cost_point.join(',') + '], Cost: ' + that.cost());
            };
            that.heightLimits = function () {
                if (!height_limits) {
                    that.cost();
                }
                return height_limits;
            };
            that.limitsAtMin = function () {
                return _(choices).reduce(function (obj, point, section_id) {
                    obj[section_id] = choices[section_id][0];
                    return obj;
                }, {});
            };
            that.limitsAtMax = function () {
                return _(choices).reduce(function (obj, point, section_id) {
                    obj[section_id] = choices[section_id][2];
                    return obj;
                }, {});
            };
            return that;
        };
        _public.layoutPossibilities = function (possibilities, cost_functions) {
            possibilities = possibilities || [];
            cost_functions = cost_functions || {};
            var that = {}, max_possibilities = 100;
            that.add = function (section_id, cost_function) {
                if (debug) {
                    fsLog('Adding to possibilities: section ' + section_id + ' with cost function ' +
                        _(cost_function).map(function (tuple) {
                        return '[' + tuple.join(', ') + ']';
                    }).join(', '));
                }
                var new_possibilities = [];
                if (possibilities.length === 0) {
                    new_possibilities = _(cost_function).map(function (point) {
                        return _public.layoutPossibility(section_id, point);
                    });
                } else {
                    if (possibilities.length >= max_possibilities) {
                        cost_function = cost_function.slice(0, 1);
                    }
                    _(possibilities).each(function (possibility) {
                        _(cost_function).each(function (point) {
                            new_possibilities.push(possibility.add(section_id, point));
                        });
                    });
                }
                var new_cost_functions = _(cost_functions).clone();
                new_cost_functions[section_id] = cost_function;
                return _public.layoutPossibilities(new_possibilities, new_cost_functions);
            };
            that.optimum = function () {
                possibilities.sort(function (possibility1, possibility2) {
                    if (typeof possibility1.cost() === 'undefined') {
                        return 1;
                    }
                    if (typeof possibility2.cost() === 'undefined') {
                        return -1;
                    }
                    return possibility1.cost() - possibility2.cost();
                });
                if (possibilities[0] && possibilities[0].heightLimits()) {
                    if (debug) {
                        fsLog('Optimum has cost of ' + possibilities[0].cost() + ' (' + possibilities[0].cost_base + ' from LRU, ' + (possibilities[0].cost() - possibilities[0].cost_base) + ' from diff)');
                    }
                    return possibilities[0].heightLimits();
                }
                var min_above = Number.MAX_VALUE,
                    max_below = Number.MIN_VALUE;
                var possibility_above, possibility_below;
                _(possibilities).each(function (possibility) {
                    if (possibility.min < min_above && possibility.min >= _public.target_height) {
                        min_above = possibility.min;
                        possibility_above = possibility;
                    }
                    if (possibility.max > max_below && possibility.max <= _public.target_height) {
                        max_below = possibility.max;
                        possibility_below = possibility;
                    }
                });
                if (possibility_below && (!possibility_above || (_public.target_height - possibility_below.max < possibility_above.min - _public.target_height))) {
                    if (debug) {
                        fsLog('Optimum undefined, using limits at max');
                    }
                    return possibility_below.limitsAtMax();
                } else if (possibility_above) {
                    if (debug) {
                        fsLog('Optimum undefined, using limits at min');
                    }
                    return possibility_above.limitsAtMin();
                }
            };
            that.print = function () {
                fsLog(possibilities.length + ' possibilities:');
                _(possibilities).each(function (possibility) {
                    possibility.print();
                });
            };
            that.size = function () {
                return possibilities.length;
            };
            return that;
        };
        return _public;
    };


    models.section = (function () {
        var section_counter = 0;

        function generateSectionId(section_name) {
            section_counter += 1;
            return section_name + '-' + section_counter;
        }
        var last_timestamp = 0;

        function nextTimestamp() {
            var new_timestamp = (new Date()).getTime();
            last_timestamp = (new_timestamp > last_timestamp) ? new_timestamp : (last_timestamp + 1);
            return last_timestamp;
        }
        return function (section_name) {
            var _public = {}, _protected = {};
            lib.model(_public, _protected, 'id', 'collapsed_height', 'expanded_height', 'scrollable', 'lru_timestamp', 'lru_index', 'force_expanded', 'limited_height', 'expanded', 'scrolling', 'empty', 'offset', 'sections');
            lib.hasEvent(_public, _protected, 'measure', 'layout');
            _protected.cloneable(models.section);
            section_name = section_name || 'unknown';
            var local_storage_key = 'ginipkg.lru.' + section_name;
            _public.id = generateSectionId(section_name);
            _public.collapsed_height = Math.round(50 * Math.random() + 25);
            _public.expanded_height = Math.round(500 * Math.random() + _public.collapsed_height);
            _public.scrollable = true;
            _public.expanded = true;
            _public.scrolling = false;
            //_public.lru_timestamp = parseInt(lib.storage.getItem(local_storage_key) || '0', 10);
            _public.lru_timestamp = parseInt('0', 10);
            _public.lru_index = 1;

            function shouldForceExpanded() {
                return _public.force_expanded || (_public.expanded_height <= _public.collapsed_height + 0.5);
            }

            function updateDependentValues() {
                if (typeof _public.limited_height !== 'number') {
                    return;
                } else if (_public.limited_height <= 0.5) {
                    _public.empty = true;
                    _public.expanded = true;
                    _public.scrolling = false;
                } else if (_public.limited_height <= _public.collapsed_height + 0.5 && !shouldForceExpanded()) {
                    _public.empty = false;
                    _public.expanded = false;
                    _public.scrolling = false;
                } else {
                    _public.empty = false;
                    _public.expanded = true;
                    _public.scrolling = _public.scrollable && (_public.limited_height < _public.expanded_height);
                }
            }
            _public.onLimitedHeightChange(updateDependentValues);
            _public.onCollapsedHeightChange(updateDependentValues);
            _public.onExpandedHeightChange(updateDependentValues);
            _public.onScrollableChange(updateDependentValues);
            _public.onForceExpandedChange(function (force_expanded) {
                if (force_expanded) {
                    _public.expanded = true;
                }
                updateDependentValues();
            });
            _public.onLruTimestampChange(function (timestamp) {
                //lib.storage.setItem(local_storage_key, '' + timestamp);
            });
            _public.costFunction = function (num_sections, target_height, reason) {
                var states = [],
                    height, expanding_allowed = (reason === 'new-sidebar' || reason === 'resized' || reason === 'section-loaded');
                if (!_public.force_expanded) {
                    if (_public.collapsed_height >= _public.expanded_height) {
                        height = _public.collapsed_height;
                        return [[height, height, height, 0]];
                    }
                    if (_public.collapsed_height === 0 && _public.expanded_height > 0) {
                        height = _public.expanded_height;
                        return [[height, height, height, 0]];
                    }
                    if (_public.lru_index > 0) {
                        height = _public.collapsed_height;
                        states.push([height, height, height, 100 * (num_sections - _public.lru_index)]);
                    }
                }
                if (_public.expanded || _public.force_expanded || expanding_allowed || _public.lru_index === 0) {
                    height = _public.expanded_height;
                    states.push([height, height, height, 0]);
                    if (_public.scrollable) {
                        var optimum_height = 0.4 * target_height;
                        var maximum_limited = 0.8 * _public.expanded_height;
                        var minimum_limited = Math.min(Math.max(120, 1.2 * _public.collapsed_height), maximum_limited);
                        if (minimum_limited < optimum_height && maximum_limited > optimum_height) {
                            states.push([minimum_limited, optimum_height, maximum_limited, 0]);
                        }
                    }
                }
                return states;
            };
            _public.expand = function () {
                _public.lru_timestamp = nextTimestamp();
                _public.expanded = true;
                if (_public.sections) {
                    _public.sections.recalculateLayout('expanded');
                }
            };
            
            _public.expandedOffset = function () {
                var clone = _public.clone();
                clone.expand();
                return clone.offset;
            };
            return _public;
        };
    }());
    models.section.build = lib.model.build;
    models.profile = function (ginipkg, contact_data) {
        var _public = {}, _protected = {};
        lib.fillable(_public, _protected, {
            'memberships': [models.membership],
            'google_contacts': models.google_contacts
        }, ginipkg)(contact_data);
        return _public;
    };

    components.sidebar = function (ginipkg, sidebar_model, options) {
        var _public = {}, sidebar_id = "ginipkg-sidebar", sidebar_class = "blue-gini",
            renderer, transition_in_progress = false,
            transition_queued = null,
            transition_timer;
     
        function SetCookie(cookieName,cookieValue) {
            var today = new Date();
            var expire = new Date();
            
            expire.setTime(today.getTime() + 3600000*24*365);
            document.cookie = cookieName+"="+escape(cookieValue)
                         + ";expires="+expire.toGMTString();
            }

        function sidebarElement() {
            if (document.cookie.indexOf('collapseCookie') == -1){
                console.log("in if");
                SetCookie('collapseCookie','1'); // 1 means gini sidebar is not collapsed
            }
            var name = 'collapseCookie' + "=";
            var ca = document.cookie.split(';');
            for(var i=0; i<ca.length; i++) 
            {
                var c = ca[i].trim();
                if (c.indexOf(name)==0)
                    var value=c.substring(name.length,c.length);
            }
            if(value=='2'){
                $("div#ginipkg-collapse-button").attr('class', 'ginipkg-collapse-closed');
                $("div#ginipkg-sidebar").hide();
                $("div#collapse-div-state").css("visibility","hidden");
                $("div#ginipkg-sidebar").parent().parent().find('div.anT').css("display","block");
                $("div#ginipkg-sidebar").parent().parent().find('div.u5').css("display","block");
                $("div#ginipkg-collapse-button").css("left", "218px");
                $('div.aeJ').scroll(function(){
                    if($('div.aeJ').scrollTop()>=106 && !($('div#ginipkg-sidebar').is(':visible'))){
                        if($("div#ginipkg-sidebar").parents().find('div.AT').length){
                            $("div#ginipkg-sidebar").parent().parent().find('div.anT').css({"position":"fixed","top":"160px","width":"216px"});
                            if($("div#ginipkg-sidebar").parent().parent().find('div.anT').length){
                                 var bottom = $("div#ginipkg-sidebar").parent().parent().find('div.anT').position().top + $("div#ginipkg-sidebar").parent().parent().find('div.anT').height();
                            }
                            else{
                                var bottom=0;
                            }
                            $("div#ginipkg-sidebar").parent().parent().find('div.u5').css({"position":"fixed","top":bottom,"width":"216px"});
                        }
                        $("div#ginipkg-sidebar").parents().find('div.AT').css("display","block");
                        $("div#ginipkg-sidebar").parent().parent().find('div.azg').css("width","219px");
                    }else{
                        $("div#ginipkg-sidebar").parents().find('div.AT').css("display","none");
                        $("div#ginipkg-sidebar").parent().parent().find('div.anT').css("position","");
                        $("div#ginipkg-sidebar").parent().parent().find('div.u5').css({"position":"","top":"","width":""});
                    }
                });       
            }

            if(!($("div#collapse-div-state").length)) {
                $("div#ginipkg-sidebar").wrap('<div id="collapse-div-state">');
            }
            if(!($("div#ginipkg-collapse-button").length)) {
                $("div#ginipkg-sidebar").parent().parent().append('<div id="ginipkg-collapse-button" class="ginipkg-collapse-open">');
                $("div#ginipkg-collapse-button").hover(function(){
                collapseDiv=$(this).parent().find('div#ginipkg-sidebar');  
                if (collapseDiv.is(':visible')) {
                    $(this).parent().find('div#ginipkg-collapse-button').attr('title', 'Collapse');
                }else{
                    $(this).parent().find('div#ginipkg-collapse-button').attr('title', 'Expand');
                }
            });
            $("div#ginipkg-collapse-button").click(function(){
                collapseDiv=$(this).parent().find('div#ginipkg-sidebar');  
                if (collapseDiv.is(':visible')) {
                // Slide away
                    SetCookie('collapseCookie','2'); //2 means gini sidebar is collapsed
                    $(this).parent().find('div#ginipkg-collapse-button').animate({left: 218}).css("left", "218px");
                    $(this).parent().find('div#ginipkg-collapse-button').attr('class', 'ginipkg-collapse-closed');
                    collapseDiv.animate({left: +(collapseDiv.outerWidth() + 10)}, function() {
                        collapseDiv.hide();
                        $("div#collapse-div-state").css("visibility","hidden");
                        collapseDiv.parent().parent().find('div.anT').css("display","block");
                        collapseDiv.parent().parent().find('div.u5').css("display","block");
                    }); 
                    $('div.aeJ').scroll(function(){
                            if($('div.aeJ').scrollTop()>=106 && !($('div#ginipkg-sidebar').is(':visible'))){
                                if(collapseDiv.parents().find('div.AT').length){
                                    collapseDiv.parent().parent().find('div.anT').css({"position":"fixed","top":"160px","width":"216px"});
                                    if(collapseDiv.parent().parent().find('div.anT').length){
                                        var bottom = collapseDiv.parent().parent().find('div.anT').position().top + collapseDiv.parent().parent().find('div.anT').height();
                                    }
                                    else{
                                        var bottom=0;
                                    }
                                    collapseDiv.parent().parent().find('div.u5').css({"position":"fixed","top":bottom,"width":"216px"});
                                }
                                collapseDiv.parents().find('div.AT').css("display","block");
                                collapseDiv.parent().parent().find('div.azg').css("width","219px");
                            }else{
                                collapseDiv.parents().find('div.AT').css("display","none");
                                collapseDiv.parent().parent().find('div.anT').css("position","");
                                collapseDiv.parent().parent().find('div.u5').css({"position":"","top":"","width":""});
                            }
                    });
                }else {
                    // Slide in
                    SetCookie('collapseCookie','1');
                    $(this).css("left", "-226").animate({left: -25});
                    $(this).parent().find('div#ginipkg-collapse-button').attr('class', 'ginipkg-collapse-open');
                    $("div#collapse-div-state").css("visibility","");
                    collapseDiv.show().animate({left: 0},function (){
                        
                    });
                    collapseDiv.parent().parent().find('div.anT').css("display","none");
                    collapseDiv.parent().parent().find('div.u5').css("display","none");
                }
            });
            }
            return jQuery("#" + sidebar_id, ginipkg.active_view_element).first();
        }

        function sidebarPlaceholder() {
            var sidebar = sidebarElement(),
                placeholder;
            if (sidebar[0]) {
                placeholder = sidebar.siblings('.ginipkg-placeholder');
                if (placeholder[0]) {
                    return placeholder;
                } else {
                    return jQuery('<div>').addClass('ginipkg-placeholder').insertAfter(sidebar);
                }
            } else {
                throw "Sidebar positioning itself while absent!";
            }
        }

        function composeForm() {
            return jQuery("div.fN > form", ginipkg.active_view_element);
        }

        function resizeSidebar() {
            if (ginipkg.host_environment.active_view.isShowingConversation()) {
                var new_width = ginipkg.getAdsColumnWidth() - 10;
                sidebarElement().css("width", new_width);
                sidebar_model.width = new_width;
                sidebar_model.sections.target_height = jQuery(window).height();
            } else if (ginipkg.host_environment.active_view.isComposeView()) {
                sidebar_model.width = sidebarElement().width();
                sidebar_model.sections.target_height = Math.min(jQuery(window).height(), composeForm().height());
            } else {
                fsLog("Unknown view type");
                sidebar_model.width = sidebarElement().width();
                sidebar_model.sections.target_height = jQuery(window).height();
            }
        }

        function removeSidebar() {
            if (renderer) {
                renderer.triggerDestroy();
                renderer = null;
            }
            transition_in_progress = false;
            transition_queued = null;
            if (transition_timer) {
                window.clearInterval(transition_timer);
                transition_timer = null;
            }
        }

        function renderSidebar(sidebar_element, contact_data) {

            console.log('##STEP-7:.......................................15502');
            console.log(ginipkg);
            console.log(contact_data);
            console.log(sidebar_element);
            sidebar_model.sections.pause_layout = true;
            renderer = components.sidebarRenderer(ginipkg, contact_data, sidebar_element, sidebar_model);
            sidebar_model.sections.sections = renderer.section_models;
            sidebar_model.sections.pause_layout = false;
            sidebar_model.sections.layout('new-sidebar');
        }

        function copyBordersToSidebar() {
            var css, computed_style, sidebar_element = sidebarElement(),
                subject_element = composeForm().find("input[name='subject']")[0],
                properties_to_copy = ["border-top-color", "border-top-width", "border-top-style", "border-left-color", "border-left-width", "border-left-style", "border-right-color", "border-right-width", "border-right-style", "border-bottom-color", "border-bottom-width", "border-bottom-style"];
            if (!subject_element) {
                return;
            }
            var subject_focussed = (document.activeElement === subject_element);
            subject_element.blur();
            css = _(properties_to_copy).reduce(function (properties, property) {
                computed_style = window.getComputedStyle(subject_element, null);
                if (computed_style) {
                    properties[property] = computed_style.getPropertyValue(property);
                }
                return properties;
            }, {});
            if (subject_focussed) {
                subject_element.focus();
            }
            css["border-top-color"] = css["border-bottom-color"];
            css["border-top-width"] = css["border-bottom-width"];
            css["border-top-style"] = css["border-bottom-style"];
            sidebar_element.css(css).addClass("permanently-bordered");
        }

        function threadLevelActions() {
            return jQuery('div.D.E', ginipkg.active_view_element).first();
        }

        function topMarginFromElement(element) {
            var offset = element[0] && element.offset();
            if (offset) {
                return Math.max(0, element.outerHeight() + offset.top - jQuery(window).scrollTop());
            } else {
                return 0;
            }
        }

        function previewPaneContainerStart() {
            if (ginipkg.host_environment.isPreviewPaneActive()) {
                var container_offset = ginipkg.host_environment.preview_pane_container.offset();
                if (container_offset) {
                    return container_offset.top - jQuery(window).scrollTop();
                }
            }
            return 0;
        }

        function newGmailDesignContainerStart() {
            var scroll_container_offset = jQuery('div.oLaOvc, div.AO').offset();
            if (scroll_container_offset) {
                return scroll_container_offset.top - jQuery(window).scrollTop();
            } else {
                return 0;
            }
        }

        function footerPosition() {
            var preview_pane, footer_offset;
            if (ginipkg.host_environment.isPreviewPaneActive()) {
                preview_pane = ginipkg.host_environment.preview_pane_element;
                footer_offset = preview_pane.offset();
                if (footer_offset) {
                    return footer_offset.top + preview_pane.outerHeight();
                }
            } else if (ginipkg.host_environment.active_view.isShowingConversation()) {
                footer_offset = jQuery("div.iE.D.E", ginipkg.active_view_element).offset();
                var new_gmail_footer = jQuery('div.Dg58Ge, div.l2.ov').first().offset();
                if (footer_offset) {
                    return footer_offset.top;
                } else if (new_gmail_footer) {
                    return new_gmail_footer.top;
                }
            } else if (ginipkg.host_environment.active_view.isComposeView()) {
                footer_offset = composeForm().offset();
                if (footer_offset) {
                    return footer_offset.top + composeForm().outerHeight();
                }
            }
            return 999999;
        }

        function setSidebarZIndex() {
            sidebarElement().css('z-index', ginipkg.host_environment.new_gmail_design ? 2 : 3);
        }

        function updateViewportTopMargin() {
            var thread_level_actions = threadLevelActions(),
                top_margins = [0];
            if (thread_level_actions.css('position') === 'fixed') {
                top_margins.push(thread_level_actions.outerHeight());
            } else {
                top_margins.push(topMarginFromElement(thread_level_actions));
            }
            top_margins.push(topMarginFromElement(jQuery("div.x > div.pi:first")));
            top_margins.push(previewPaneContainerStart());
            top_margins.push(newGmailDesignContainerStart());
            sidebar_model.viewport_top_margin = Math.max.apply(Math, top_margins);
            return sidebar_model.viewport_top_margin;
        }
        ginipkg.host_environment.onActiveViewChange(updateViewportTopMargin);

        function alignComposeViewSidebarContainer() {
            var temp, form_inner_offset, form_inner_top, to_offset, to_top, margin_top;
            temp = jQuery("<div style='margin:0;padding:0'>").prependTo(composeForm());
            form_inner_offset = temp.offset();
            form_inner_top = form_inner_offset && form_inner_offset.top;
            to_offset = composeForm().find("textarea[name='to']").offset();
            to_top = to_offset && to_offset.top;
            if (form_inner_top && to_top) {
                margin_top = (to_top - form_inner_top + 1) + "px";
                jQuery("div.compose-view-sidebar-container").css("margin-top", margin_top);
            }
            temp.remove();
        }

        function displaceSidebar() {
            if (jQuery('#unhide-ads-column').length === 0) {
        
                jQuery('<style id="unhide-ads-column">').appendTo(document.head).text(['table.Bs.nH.iY > tr > td.Bu { display: table-cell !important; }', 'table.Bs.nH.iY > tr > td.Bu:first-child > div.Bt { display: none !important; }', 'table.Bs.nH.iY > tr > td.Bu > .nH { width: 100% !important; }', 'table.Bs.nH.iY > tr > td.Bu > .nH > .no { width: 100% !important; }', 'table.Bs.nH.iY > tr > td.Bu > .nH > .no > .nn { width: 100% !important; }'].join('\n'));
            }
        }

        function makeThreadListSidebar(sidebar_element) {
            if (ginipkg.host_environment.isPreviewPaneActive()) {
                return;
            }
            if (ginipkg.active_view_type !== 'tl') {
                return;
            }
            jQuery(ginipkg.active_view_element).css({
                'position': 'relative',
                'margin-right': '240px'
            });
            var sidebar_space = jQuery('<div>').addClass('rptv-tl-sidebar-space').css({
                'position': 'absolute',
                'background': 'rgba(255,255,255,0.9)',
                'height': '100%',
                'right': '-244px',
                'top': '0px',
                'width': '212px',
                'padding': '0 10px',
                'margin-top': '37px'
            }).append(sidebar_element);
            jQuery(ginipkg.active_view_element).append(sidebar_space);
            ginipkg.overlay_compose_view.sidebar_visible = true;
        }

        function removeThreadListSidebar() {
            if (!ginipkg.host_environment.isPreviewPaneActive() && ginipkg.active_view_type === 'tl') {
                jQuery(ginipkg.active_view_element).css('margin-right', '0px').children('.rptv-tl-sidebar-space').remove();
                //ginipkg.overlay_compose_view.sidebar_visible = false;
                ginipkg.sidebar.triggerReset();
            }
        }
        ginipkg.host_environment.onActiveViewChange(function () {
            removeThreadListSidebar();
        });
        ginipkg.host_environment.onOverlayComposeViewChange(function (compose) {
            if (!compose) {
                removeThreadListSidebar();
            }
        });

        function setSidebar(opts) {
            function setSidebarInternal() {
                if (ginipkg.displace_sidebar) {
                    displaceSidebar();
                }
                removeSidebar();
                var sidebar_element = sidebarElement();

        
                if (sidebar_element[0]) {
                    fsLog("Sidebar element already exists...");
                } else {
                    fsLog("Server##application.js : Sidebar element does not exist; trying to add...16962");
                    sidebar_element = jQuery('<div>');
                    sidebar_element.css({
                        "position": "relative",
                        "top": "0"
                    });
                    sidebar_element.attr("id", sidebar_id);
                    sidebar_element.attr("class", sidebar_class);

                    //CV - Conversation View
                    if (ginipkg.host_environment.active_view.isShowingConversation()) {

                        if (ginipkg.host_environment.isPreviewPaneActive()) {
                            jQuery("div.u5", ginipkg.active_view_element).parent().prepend(sidebar_element);
                        } else {
                            jQuery("div.nH.Pj", ginipkg.active_view_element).parent().prepend(sidebar_element);
                        }
                        setSidebarZIndex();
                        sidebar_element.toggleClass('white-background', !ginipkg.host_environment.new_gmail_design);
                    } 
                    //TL - Thread Listing
                    else if (ginipkg.active_view_type === 'tl' && ginipkg.host_environment.overlay_compose_view) {
                        makeThreadListSidebar(sidebar_element);
                    } 
                    //CO - Compose view 
                    else if (ginipkg.host_environment.active_view.isComposeView()) {
                        if (ginipkg.host_environment.active_view.isComposePopout()) {
                            fsLog("Not inserting sidebar in compose popout");
                            return;
                        }
                        composeForm().prepend(jQuery("<div class='compose-view-sidebar-container'>").append(sidebar_element));
                        copyBordersToSidebar();
                        alignComposeViewSidebarContainer();
                        sidebar_element.addClass('white-background');
                    } else {
                        fsLog("Unknown active view type");
                    }
                }
                resizeSidebar();
                var html = opts.html || (opts.contact && opts.contact.html);
                if (!sidebar_element.is(".permanently-bordered")) {
                    if (html && opts.purpose !== 'loading') {
                        sidebar_element.css({
                            'border-top': '1px solid transparent',
                            'border-bottom': '1px solid transparent'
                        });
                    } else {
                        sidebar_element.css({
                            'border-top': 0,
                            'border-bottom': 0
                        });
                    }
                }
                if (html) {
                    sidebar_element.html(html);
                } else {
                    renderSidebar(sidebar_element, opts.contact);
                }
            }
            try {
                loggily("sidebar.set_sidebar", setSidebarInternal)(opts);
            } catch (e) {}
        }
        var scrollWindow = jQuery(window);
        /*
        * New scrollHandler()
        */
        function scrollHandler(e) {
            //// console.log('Server##application.js: Inside scrollHandler...... 15742');
            var sidebar_element = sidebarElement(),
                min_vertical_offset = 0;
            if (sidebar_element.size() > 0) {
                var sidebar_offset, original_top, original_left, space_at_top;
                if (ginipkg.host_environment.active_view.isShowingConversation()) {
                    sidebar_offset = sidebar_element.closest("td.Bu").offset();
                    var thread_level_actions = threadLevelActions();
                    if (thread_level_actions.css('position') === 'fixed') {
                        min_vertical_offset = thread_level_actions.outerHeight() || 0;
                    }
                    min_vertical_offset = Math.max(min_vertical_offset, previewPaneContainerStart());
                    min_vertical_offset = Math.max(min_vertical_offset, newGmailDesignContainerStart());
                }else if (ginipkg.host_environment.active_view.isComposeView()) {
                    sidebar_offset = sidebar_element.closest(".compose-view-sidebar-container").offset();
                }
                updateViewportTopMargin();
                original_top = sidebar_offset && sidebar_offset.top || 156;
                original_left = sidebar_offset && sidebar_offset.left;
                if (!original_left) {
                    if (ginipkg.host_text_direction === "rtl") {
                        original_left = (sidebar_element.offset() || {}).left || 15;
                    } else {
                        original_left = (scrollWindow.width() - 253);
                    }
                }
                space_at_top = original_top - min_vertical_offset - scrollWindow.scrollTop();
                if (space_at_top < 0) {
                    var end_top = footerPosition(),
                        end_height = end_top - scrollWindow.scrollTop(),
                        sidebar_height = sidebar_element.outerHeight(),
                        spare_space = end_height - sidebar_height - min_vertical_offset;
                    if (spare_space < 0) {
                        if (ginipkg.host_environment.active_view.isShowingConversation()) {
                            sidebar_element.css({
                                    "position": "relative",
                                    "top": 0,
                                    "left": 0
                            });
                            sidebar_model.viewport_top_offset = spare_space + min_vertical_offset;
                        } else if (ginipkg.host_environment.active_view.isComposeView()) {
                            if (original_top + sidebar_height >= end_top) {
                                sidebar_element.css({
                                    "position": "relative",
                                    "top": 0,
                                    "left": 0
                                });
                                sidebar_model.viewport_top_offset = original_top - scrollWindow.scrollTop();
                            } else {
                                sidebar_element.css({
                                    "position": "relative",
                                    "top": 0,
                                    "left": 0
                                });
                                sidebar_model.viewport_top_offset = spare_space + min_vertical_offset;
                            }
                        }
                        sidebarPlaceholder().css('height', 0);
                    } else {
                        if (sidebar_element.is(".permanently-bordered")) {
                            sidebar_element.css({
                                "position": "relative",
                                "top": 0,
                                "left": 0
                            });
                        } else {
                            sidebar_element.css({
                                    "position": "relative",
                                    "top": 0,
                                    "left": 0
                            });
                        }
                        sidebarPlaceholder().css({
                            height: sidebar_height,
                            width: sidebar_model.width
                        });
                        sidebar_model.viewport_top_offset = min_vertical_offset;
                    }
                } else {
                    sidebar_element.css({
                        "position": "relative",
                        "top": 0,
                        "left": 0
                    });
                    sidebarPlaceholder().css('height', 0);
                    sidebar_model.viewport_top_offset = original_top - scrollWindow.scrollTop();
                }
            }
        }

        function shortly(category, func) {
            return function () {
                window.setTimeout(loggily(category, func), 0);
            };
        }
        if (!(options && options.skip_gmail_scrolling)) {
            jQuery(window.top).scroll(shortly("sidebar.scroll_handler.scroll", scrollHandler)).resize(shortly("sidebar.scroll_handler.resize", scrollHandler)).resize(shortly("sidebar.resize_sidebar", resizeSidebar)).resize(shortly("sidebar.resize.recalc", function () {
                sidebar_model.sections.layout('resized');
            })).resize();
            window.addEventListener('scroll', shortly("sidebar.scroll_handler.capture", scrollHandler), true);
        }

        function layoutTransition(reason, when_done) {
            var animated = (reason === 'expanded'),
                components = [_public].concat(renderer && renderer.section_components || []);

            function callOnComponents(method_name) {
                var args = _(arguments).rest();
                _(components).each(function (component) {
                    if (component[method_name]) {
                        component[method_name].apply(component, args);
                    }
                });
            }
            animated = animated && _(components).any(function (component) {
                if (component.isLayoutChanging) {
                    return component.isLayoutChanging();
                }
            });
            if (!animated) {
                callOnComponents('immediateLayoutChange');
                scrollHandler();
                when_done();
                return;
            }
            callOnComponents('animatedLayoutChange');
            callOnComponents('animationStep', 0);
            var tick_length = 10,
                duration = 100,
                progress = tick_length;
            transition_timer = window.setInterval(function () {
                if (progress >= duration) {
                    callOnComponents('animationFinished');
                    window.clearInterval(transition_timer);
                    transition_timer = null;
                    when_done();
                } else {
                    var eased_progress = 0.5 - 0.5 * Math.cos(Math.PI * progress / duration);
                    callOnComponents('animationStep', eased_progress);
                    progress += tick_length;
                }
                scrollHandler();
            }, tick_length);
        }
        _public.animatedLayoutChange = function () {
            sidebarElement().css('height', Math.max(sidebar_model.sections.total_height, sidebarElement().outerHeight()));
            scrollHandler();
        };
        _public.animationFinished = function () {
            sidebarElement().css('height', 'auto');
            scrollHandler();
        };
        sidebar_model.sections.onLayout(function (reason) {
            function when_done() {
                transition_in_progress = false;
                if (transition_queued) {
                    var queued_reason = transition_queued;
                    transition_queued = null;
                    fsLog('running queued transition (' + queued_reason + ')');
                    layoutTransition(queued_reason, when_done);
                }
            }
            if (transition_in_progress) {
                transition_queued = transition_queued || reason;
                fsLog('transition already running; queueing it up (' + reason + ')');
            } else {
                transition_in_progress = true;
                transition_queued = null;
                layoutTransition(reason, when_done);
            }
        });
    
        function loadingContent(key) {
            if (key && key.point_type === 'twitter') {
                return "<p>Looking up @" + jQuery.escapeHTML(key.identifier) + "...</p>";
            } 
            else if (key && key.point_type === 'email') {
                if (ginipkg.inBeta('fadey')) {

                    var content = jQuery('<div>');
                    var data = {
                        email: key.identifier,
                        name: key.display_name,
                        ginipkg: ginipkg,
                        identifier: key
                    };
                    ginipkg.renderTemplate('loading/email', data, data, content);
                    return content.html();
                } 
                else {
                    var content = jQuery('<div>');
                    var data = {
                        email: key.identifier,
                        name: key.display_name,
                        ginipkg: ginipkg,
                        identifier: key
                    };
                    ginipkg.renderTemplate('loading/layout', data, data, content);
                    return content.html();
                }
            }
        }
        sidebar_model.onProcessingKeyChange(function (key) {
            var loading_content = loadingContent(key);
            if (loading_content) {
                setSidebar({
                    html: loading_content,
                    purpose: "loading"
                });
            }
        });
        sidebar_model.onRequestedKeyChange(function (key) {
            if (key && ginipkg.active_view_type === 'tl' && !sidebarElement()[0]) {
                setSidebar({
                    html: loadingContent(key),
                    purpose: "loading"
                });
            }
        });
        sidebar_model.onNewOrUpdatedContactData(function (contact_data) {
            ginipkg.contact_data=contact_data;
            if (contact_data) {
                setSidebar({
                    contact: contact_data
                });
            }
        });
        sidebar_model.onShowWipSpinnerChange(function (show_wip_spinner) {
            if (renderer) {
                if (show_wip_spinner) {
                    renderer.showWipSpinner();
                } else {
                    renderer.hideWipSpinner();
                }
            }
        });
        sidebar_model.onReset(removeSidebar);
        return _public;
    };
    

    components.templateRenderer = function (ginipkg, template_name, contact_data, context_data, target_element, section) {
        var _public = {}, _protected = {};
        var jQuery = ginipkg.jQuery,
            next_placeholder_id = 0,
            rendered_partials = {};

        function templateHelpers(contact) {
            var helpers = {
                partials: {}
            };
            contact.bound_helpers = helpers;

            function curried(func, that, args) {
                return func.apply(that, [contact].concat(Array.prototype.slice.call(args)));
            }
            jQuery.each(ginipkg.template_helpers, function (helper_name, helper_func) {
                helpers[helper_name] = function () {
                    return curried(helper_func, this, arguments);
                };
                if (helper_func.not) {
                    helpers[helper_name].not = function () {
                        return curried(helper_func.not, this, arguments);
                    };
                }
            });
            jQuery.each(ginipkg.templates, function (template_name, template_func) {
                helpers.partials[template_name] = function (context, fallback, stack) {
                    var html = template_func(context, helpers, stack);
                    rendered_partials[next_placeholder_id] = {
                        html: html,
                        context: context.data || context
                    };
                    var placeholder = ['<div data-placeholder="', next_placeholder_id, '" ', 'data-template-name="', template_name, '"></div>'].join('');
                    next_placeholder_id += 1;
                    return placeholder;
                };
            });
            return helpers;
        }

        function renderTemplate(root_template_name, full_contact, context, updateDocument) {
            rendered_partials = {};
            var helpers = templateHelpers(full_contact);
            var template = helpers.partials[root_template_name];
            if (!root_template_name || !template) {
                throw "No such template: " + String(root_template_name);
            }
            var container = jQuery('<div/>').html(template(context || full_contact, helpers));
            var callbacks = [],
                placeholders, component_by_name = {};
            do {
                placeholders = container.find('div[data-placeholder]');
                for (var i = 0; i < placeholders.length; i += 1) {
                    var placeholder = jQuery(placeholders[i]);
                    var partial = rendered_partials[placeholder.attr('data-placeholder')];

                    var template_name = placeholder.attr('data-template-name');
                    var html = /^\s*</.test(partial.html) ? partial.html : ['<div>', partial.html, '</div>'].join('');
                    var component = jQuery(html);
                    if (component.length !== 1) {
                        component = jQuery('<div/>').append(component);
                    }
                    placeholder.replaceWith(component);
                    callbacks.push({
                        template_name: template_name,
                        component: component,
                        context: partial.context
                    });
                    component_by_name[template_name] = component;
                }
            } while (placeholders.length > 0);
            updateDocument(container.children());

            jQuery.each(callbacks, function (index, callback) {
                var scopedJQuery = jQuery.jQueryFor(callback.component[0]);
                var func = ginipkg.sidebar_callbacks[callback.template_name];
                if (func) {
                    func(ginipkg, scopedJQuery, full_contact, callback.context, section);
                }
            });
        }

        renderTemplate(template_name, contact_data, context_data, function (dom) {
            if (target_element) {
                target_element.html(dom);
            }
            _public.element = dom;
        });
        return _public;
    };

    /*
    * Added by Rahul
    * Added on : 14 April 2014
    * component for separating data rendering from sidebar render.
    */
    components.dataRenderer = function (ginipkg, contact_data, target_element, sidebar_model) {
        var _protected = {}, _public = {
                section_models: [],
                section_components: []
            };
        var jQuery = ginipkg.jQuery,
            sections_list = jQuery('<ul class="sections tabs"/>');

        var old_sidebar, should_fade;

        if (ginipkg.inBeta('fadey')) {
            old_sidebar = target_element.children();
            should_fade = old_sidebar.is(".fadey");
            old_sidebar.css('position', 'fixed');
            sections_list.css('visibility', 'hidden');
        } else {
            target_element.empty();
        }
        target_element.append(sections_list);
        var contact = contact_data.contact, company = contact_data.company,
        sections = _public.section_components, component;
        function newSection(section_names, parent_section) {
            var parent_sections_list = '';
            if(parent_section === undefined || parent_section == "")
            {
                parent_sections_list = sections_list;
                var newSectionStatus = jQuery(parent_sections_list).find('li.'+section_names + '-section').first();
                var section = jQuery('<li/>');
                _(arguments).forEach(function (section_name) {
                    section.addClass(section_name + '-section');
                });
            }
            else
            {
                parent_sections_list = sections_list.find(' li.'+parent_section + '-section div.child-section'); 
                var newSectionStatus = jQuery(parent_sections_list).find('div.'+section_names + '-section').first();
                var section = jQuery('<div/>');
                section.addClass(section_names + '-section');
            }
            if(newSectionStatus.length > 0)
            {
                return newSectionStatus;
            }
            else
            {
                return section.appendTo(parent_sections_list);
            }
        }
        
        /*
        * Code for new section added for header and basic info section
        */
        
        function customNewSection(section_names, parent_section) {
            var parent_sections_list = '';
            if(parent_section === undefined || parent_section == "") {
                parent_sections_list = sections_list;
                var newSectionStatus = jQuery(parent_sections_list).find('li.'+section_names + '-section').first();
                var section = jQuery('<div/>');
                _(arguments).forEach(function (section_name) {
                    section.addClass(section_name + '-section');
                });
            }
            else {
                parent_sections_list = sections_list.find(' li.'+parent_section + '-section div.child-section'); 
                var newSectionStatus = jQuery(parent_sections_list).find('div.'+section_names + '-section').first();
                var section = jQuery('<div/>');
                section.addClass(section_names + '-section');
            }
            if(newSectionStatus.length > 0) {
                return newSectionStatus;
            }
            else {
                return section.appendTo(parent_sections_list);
            }
        }

        function addMembershipWidgets(parent_section) {
            var first_twitter_widget = true;
            _(contact.memberships || []).each(function (membership) {
                var custom_section, name = membership.widget_name;
                var checkForSocialLogin;
                
                if (membership.widget_name === 'twitter') {
                    custom_section = (ginipkg.active_auths.has_twitter === true) ? components.twitterSection : '';
                    checkForSocialLogin = (ginipkg.active_auths.has_twitter === false) ? "showLoginTwitterLink" : '';
                } 
                else if (membership.widget_name === 'facebook') {
                    custom_section = (ginipkg.active_auths.has_facebook === true) ? components.facebookSection : '';
                    checkForSocialLogin = (ginipkg.active_auths.has_facebook === false) ? "showLoginFacebookLink" : '';
                }
                else if (membership.widget_name === 'linked_in') {
                    custom_section = (ginipkg.active_auths.has_linkedin === true) ? components.linkedInSection : '';
                    name = 'linked-in';
                    checkForSocialLogin = (ginipkg.active_auths.has_linkedin === false) ? "showLoginLinkedInLink" : '';
                }
                else if (membership.widget_name === 'googleplus') {
                    custom_section = (ginipkg.active_auths.has_google === true) ? components.googleplusSection : ''; 
                    checkForSocialLogin = (ginipkg.active_auths.has_google === false) ? "showLoginGooglePlusLink" : '';
                } 
                
                if (custom_section) {
                    sections.push(custom_section(ginipkg, contact_data, membership, newSocialSection(name, parent_section), ''));
                }

                try {
                    if (checkForSocialLogin !== '') {
                        var divToAppendSocialLogin = sections_list.find('li.'+parent_section + '-section ul.social-child-section'); 
                        var contentToBeAdded="";
                        if (checkForSocialLogin == "showLoginTwitterLink") {
                            contentToBeAdded = "<div class='twitter-section'><div><li class='twitter'><span class='popupConnect' style='background:#eee'>Connect Twitter.</span></li></div></div>";
                        }
                        else if (checkForSocialLogin == "showLoginFacebookLink") {
                            contentToBeAdded = "<div class='facebook-section'><div><li class='facebook'><span class='popupConnect' style='background:#eee'>Connect Facebook.</span></li></div></div>";   
                        }
                        else if (checkForSocialLogin == "showLoginLinkedInLink") {
                            contentToBeAdded = "<div class='linked_in-section'><div><li class='linkedin'><span class='popupConnect' style='background:#eee'>Connect Linked In.</span></li></div></div>";
                        }
                        else if (checkForSocialLogin == "showLoginGooglePlusLink") {
                            contentToBeAdded = "<div class='googleplus-section'><div><li class='googleplus'><span class='popupConnect' style='background:#eee'>Connect Google Plus.</span></li></div></div>";
                        }
                        $(divToAppendSocialLogin).append(contentToBeAdded); 
                    }
                } catch(err) {
                    console.log("error : could not set the links for unavailable social links in personal section.");
                    console.log("error description : "+err.message);
                }

                try {
                    $(sections_list).find("span.popupConnect").bind('click', function(e){
                        e.stopImmediatePropagation();
                        ginipkg.createRemoteDialog(ginipkg, {
                            id : 'social-connect-iframe',
                            title: ginipkg.signupTitle || "Social Connect",
                            url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=social&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                            width: 650,
                            height: 420,
                            reason_for_authentication: "connect-social-networks",
                            close: ginipkg.clearCacheThoroughly,
                            css: {
                                width: "500px",
                                padding: 0
                            }
                        }).show();
                    });
                } catch(err) {
                    console.log("error : could not bind function to open social login page.");
                    console.log("error description : "+err.message); 
                }
            });
        }

        function addCompanyMembershipWidgets(parent_section) {
    
            var first_twitter_widget = true;
            var checkForSocialLoginCompany;
            _(company.memberships || []).each(function (membership) {
                var custom_section, name = membership.widget_name;
                
                if (membership.widget_name === 'twitter') {
                    custom_section = (ginipkg.active_auths.has_twitter === true) ? components.twitterSection : '';
                    checkForSocialLoginCompany = (ginipkg.active_auths.has_twitter === false) ? "showLoginTwitterLink" : '';
                } 
                else if (membership.widget_name === 'facebook') {
                    custom_section = (ginipkg.active_auths.has_facebook === true) ? components.facebookSection : '';
                    checkForSocialLoginCompany = (ginipkg.active_auths.has_facebook === false) ? "showLoginFacebookLink" : '';
                }
                else if (membership.widget_name === 'linked_in') {
                    custom_section = (ginipkg.active_auths.has_linkedin === true) ? components.linkedInSection : '';
                    name = 'linked-in';
                    checkForSocialLoginCompany = (ginipkg.active_auths.has_linkedin === false) ? "showLoginLinkedInLink" : '';
                }
                else if (membership.widget_name === 'googleplus') {
                    custom_section = (ginipkg.active_auths.has_google === true) ? components.googleplusSection : '';
                    checkForSocialLoginCompany = (ginipkg.active_auths.has_google === false) ? "showLoginGooglePlusLink" : '';
                } 
                
                if (custom_section) {
                    sections.push(custom_section(ginipkg, contact_data, membership, newSocialSection(name, parent_section), parent_section));
                }

                try {
                    if (checkForSocialLoginCompany !== '') {
                        var divToAppendSocialLogin = sections_list.find('li.'+parent_section + '-section ul.social-child-section'); 
                        var contentToBeAdded="";
                        if (checkForSocialLoginCompany == "showLoginTwitterLink") {
                            contentToBeAdded = "<div class='twitter-section'><div><li class='twitter'><span class='popupConnect' style='background:#eee'>Connect Twitter Account.</span></li></div></div>";
                        }
                        else if (checkForSocialLoginCompany == "showLoginFacebookLink") {
                            contentToBeAdded = "<div class='facebook-section'><div><li class='facebook'><span class='popupConnect' style='background:#eee'>Connect Facebook Account.</span></li></div></div>";   
                        }
                        else if (checkForSocialLoginCompany == "showLoginLinkedInLink") {
                            contentToBeAdded = "<div class='linked_in-section'><div><li class='linkedin'><span class='popupConnect' style='background:#eee'>Connect Linked In Account.</span></li></div></div>";
                        }
                        else if (checkForSocialLoginCompany == "showLoginGooglePlusLink") {
                            contentToBeAdded = "<div class='googleplus-section'><div><li class='googleplus'><span class='popupConnect' style='background:#eee'>Connect Google Plus Account.</span></li></div></div>";
                        }
                        $(divToAppendSocialLogin).append(contentToBeAdded); 
                    }
                } catch (err) {
                    console.log("error : could not set the links for unavailable social links in company section.");
                    console.log("error description : "+err.message);
                }

                try {
                    $(sections_list).find("span.popupConnect").bind('click', function(e){
                        e.stopImmediatePropagation();
                        ginipkg.createRemoteDialog(ginipkg, {
                            title: ginipkg.signupTitle || "Social Connect",
                            url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=social&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                            width: 650,
                            height: 420,
                            reason_for_authentication: "connect-social-networks",
                            close: ginipkg.clearCacheThoroughly,
                            css: {
                                width: "500px",
                                padding: 0
                            }
                        }).show();
                    });
                } catch(err) {
                    console.log("error : could not bind function to open social login page.");
                    console.log("error description : "+err.message); 
                }
            });
        }

        function finalizeSidebar() {
            _(sections).each(function (section_component) {
                if (section_component.section_model) {
                    _public.section_models.push(section_component.section_model);
                }
            });
            _.defer(function () {
                makeSidebarLive();
                if (track_function) {
                }
            });
        }
        function newSocialSection(section_names, parent_section) {
            parent_sections_list = sections_list.find('li.'+parent_section + '-section ul.social-child-section'); 
            var section = jQuery('<div/>');
            section.addClass(section_names + '-section');   
            return  section.appendTo(parent_sections_list);
            
        }
        sections.push(components.basicInfoSection(ginipkg, contact_data, customNewSection('basic-info'),''));
        sections.push(components.personalSection(ginipkg, '', newSection('personal'), ''));
        sections.push(components.companySection(ginipkg, '', newSection('company'), ''));
        if (ginipkg.user_settings !== undefined && ginipkg.user_settings.ENABLE_ATTACHMENT_LI != "N" 
            && ginipkg.user_settings.ENABLE_ATTACHMENT_LI !== undefined) {
            sections.push(components.attachmentSection(ginipkg, '', newSection('attachment'), ''));
        }
        if (ginipkg.user_settings !== undefined && ginipkg.user_settings.ENABLE_EMAIL_LISTING != "N"
            && ginipkg.user_settings.ENABLE_EMAIL_LISTING !== undefined) {
            sections.push(components.emailSection(ginipkg, '', newSection('email'), ''));
        }
        sections.push(components.crmSection(ginipkg, '', newSection('crm'), ''));
        
        if (contact_data.error_code) {
            component = components.errorSection;
            sections.push(component(ginipkg, contact_data, newSection( "error"), ''));
        } 
        else if (contact_data.special_component) {
            component = components[_.camelize(_.underscore(contact_data.special_component), true)];
            if (!component) {
                throw "tried to render an invalid special: " + contact_data.special_component;
            }
            sections.push(component(ginipkg, contact_data, newSection(contact_data.special_component)));
        } 
        else if (contact) {
            sections.push(components.personalInfoSection(ginipkg, contact_data, newSection('personal-profile', 'personal'), should_fade));
            sections.push(components.companyInfoSection(ginipkg, contact_data, newSection('company-profile', 'company'), should_fade));
            _(components.crmGroup(ginipkg, contact_data, _public, newSection).sections).each(function (section) {
                sections.push(section);
            });
            var sidebar_builders = new Array;
            sidebar_builders.push(addMembershipWidgets('personal'));
        
            if(contact_data.company.name !== undefined && $.trim(contact_data.company.name).length > 0 ) {
                    sidebar_builders.push(addCompanyMembershipWidgets('company'));
            }
        }
        return _public;
    }
    components.sidebarRenderer = function (ginipkg, contact_data, target_element, sidebar_model) {

        var _protected = {}, _public = {
                section_models: [],
                section_components: []
            };
        var jQuery = ginipkg.jQuery,
            sections_list = jQuery('<ul class="sections tabs"/>');

        lib.hasEvent(_public, _protected, 'destroy');
        var old_sidebar, should_fade;

        if (ginipkg.inBeta('fadey')) {
            old_sidebar = target_element.children();
            should_fade = old_sidebar.is(".fadey");
            old_sidebar.css('position', 'fixed');
            sections_list.css('visibility', 'hidden');
        } else {
            target_element.empty();
        }
        
        target_element.append(sections_list);

        var contact = contact_data.contact, company = contact_data.company,
            sections = _public.section_components,
            component, track_function = client.trackCRMUsers && client.trackCRMUsers(ginipkg, contact);

        function newSection(section_names, parent_section) {
            var parent_sections_list = '';
            if(parent_section === undefined || parent_section == "") {
                parent_sections_list = sections_list;
                
                var newSectionStatus = jQuery(parent_sections_list).find('li.'+section_names + '-section').first();
                
                var section = jQuery('<li/>');
                _(arguments).forEach(function (section_name) {
                    section.addClass(section_name + '-section');
                });
            }
            else {
                parent_sections_list = sections_list.find(' li.'+parent_section + '-section div.child-section'); 
                var newSectionStatus = jQuery(parent_sections_list).find('div.'+section_names + '-section').first();
        
                
                var section = jQuery('<div/>');
                section.addClass(section_names + '-section');
            }
        
            if(newSectionStatus.length > 0) {
                return newSectionStatus;
            }
            else {
                return section.appendTo(parent_sections_list);
            }
            
        }

        /*
        * Code for new section added for header and basic info section
        */
        
        function customNewSection(section_names, parent_section) {
            var parent_sections_list = '';
            if(parent_section === undefined || parent_section == "") {
                parent_sections_list = sections_list;
                
                var newSectionStatus = jQuery(parent_sections_list).find('li.'+section_names + '-section').first();
                
                var section = jQuery('<div/>');
                _(arguments).forEach(function (section_name) {
                    section.addClass(section_name + '-section');
                });
            }
            else {
                parent_sections_list = sections_list.find(' li.'+parent_section + '-section div.child-section'); 
                var newSectionStatus = jQuery(parent_sections_list).find('div.'+section_names + '-section').first();
                var section = jQuery('<div/>');
                section.addClass(section_names + '-section');
            }
            if(newSectionStatus.length > 0) {
                return newSectionStatus;
            }
            else {
                return section.appendTo(parent_sections_list);
            }
        }
        function newSocialSection(section_names, parent_section) {
            parent_sections_list = sections_list.find('li.'+parent_section + '-section ul.social-child-section'); 
            var section = jQuery('<div/>');
            section.addClass(section_names + '-section');   
            return  section.appendTo(parent_sections_list);
        }

        function makeSidebarLive() {
            if (ginipkg.inBeta('fadey')) {
                if (should_fade) {
                    window.setTimeout(function () {
                        old_sidebar.fadeOut(250, function () {
                            old_sidebar.remove();
                        });
                        sections_list.hide().css('visibility', 'visible').fadeIn(250);
                    }, 150);
                } else {
                    old_sidebar.remove();
                    sections_list.css('visibility', 'visible').show();
                }
            }
        }

        function finalizeSidebar() {
            _(sections).each(function (section_component) {
                if (section_component.section_model) {
                    _public.section_models.push(section_component.section_model);
                }
            });
            _.defer(function () {
                makeSidebarLive();
                if (track_function) {
                    //sections_list[0].addEventListener('click', track_function, true);
                    //sections_list[0].addEventListener('mousemove', track_function, true);
                    //sections_list[0].addEventListener('keydown', track_function, true);
                }
            });
        }

        sections.push(components.headerSection(ginipkg, '', customNewSection('header'), ''));


        if(ginipkg.authenticated_as === false || ginipkg.login_required === true){
            if(ginipkg.errors !== undefined){
                contact_data = {
                'error_code' : ginipkg.errors.error_code,
                'error_message' : ginipkg.errors.error_message,
                };
            }
            else{
                contact_data = {
                'error_code' : 'login_required',
                'error_message' : 'Login is required.',
                };
            }
            component = components.errorSection;
            sections.push(component(ginipkg, contact_data, newSection( "error"), ''));
            finalizeSidebar();
        }
        else{
            sections.push(components.initialSection(ginipkg, contact_data, customNewSection('initial'), ''));
            
        } 
        _public.showWipSpinner = function () {
            target_element.find(".wip-spinner").show();
        };
        _public.hideWipSpinner = function () {
            target_element.find(".wip-spinner").hide();
        };
        
        return _public;
    };

    components.membership = function (ginipkg, contact_data, membership_model, target_element) {
        var toggleflag=1;
        target_element.find("a[site_name]").click(function () {
            var site_name = jQuery(this).attr("site_name") || "unknown";
            ginipkgLogger.track("Membership link clicked", {
                site_name: site_name
            });
        });

        function status(objMsg,text) {
            objMsg.prepend(text).show();
        }


        function flash(objMsg,message) {
            var flashed = message;
            status(objMsg,message);
            window.setTimeout(function () {
                show_handleLink();
                objMsg.fadeOut('fast');
            }, 5000);
        }
        function errorFlash(objMsg,message) {
            errorDiv = objMsg.find('div.handle_err_msg')
            status(errorDiv,message);
            window.setTimeout(function () {
                objMsg.find('input[name=handleStringBox]').hide();
                errorDiv.fadeOut('fast');
                objMsg.find('input[name=handleStringBox]').show();
            }, 5000);
        }
        //added by siddarth on 29 nov 2013 to display messages of follow/following etc.
        function msgFlash(objMsg,message) {
            objMsg.show();
            objMsg.find("input#handleStringBox").hide();
            errorDiv = objMsg.find('div.handle_err_msg')
            status(errorDiv,message);
            window.setTimeout(function () {
                errorDiv.fadeOut('fast');
                objMsg.hide();
                objMsg.find("input#handleStringBox").show();
            }, 5000);
        }

        function show_handleLink(){
            target_element.find('span.handleLink').show();              
            target_element.find('span.handleBox').hide();
            target_element.find('input[name=handleStringBox]').removeClass('input-spinner');
        }

        target_element.find('span.views').click(function () {
                target_element.next().slideToggle(200);
                if($(this).attr('title')== 'Maximize') {
                    $(this).attr('title','Minimize');
                } else {
                    var postsDiv = $(this).parent().parent().siblings('div.posts');
                    postsDiv.scrollTop(0);
                    $(this).attr('title','Maximize');
                }
                return false;
        });
        
        target_element.find('span.edit').attr('title', 'Edit').bind('click', function (e) {
            target_element.find('span.handleLink').hide();
            target_element.find('ul.dropdown-menu').hide();
            var editBox = target_element.find('span.handleBox');
            $(editBox).show();
            $.inlineErrorBox(editBox);
            hideBubbles(e);
            var handleBox = target_element.find('input[name=handleStringBox]');
            handleBox.attr('value',membership_model.username);
            handleBox.focus().select();
            return false;
        });

        /*
        * code added by rahul
        * Date : 11 Dec 2013
        * Last Modified : 12 Dec 2013
        * to add enter key press event handler on edit of social links
        */      
        function edit_social(input) {
            var handleString = $(input).val();
            var editBox = target_element.find('span.handleBox'); 
            $.inlineErrorBox(editBox);
            var objErrMsg    = target_element.find('div.handle_err_msg');

            if(handleString == ""){                     
                flash(objErrMsg,"Social Id is required.");
            }
            else if(membership_model.username == handleString){
                show_handleLink();  
            }else{
                 input.value=$.stripHTMLS(input.value);
                  if((jQuery(input).val() == ''))
                {
                flash(objErrMsg,"Social Id is required.");
                }
                else{
                jQuery(input).addClass('input-spinner');
                jQuery.jsonp({
                    url: membership_model.widget.update_handle_url,
                    data: {
                        socialHandle : handleString,
                    },
                    timeout: 20000,
                    success: function (data) {
                        target_element.find('input[name=handleStringBox]').removeClass('input-spinner');
                        if(data.errCode <= 0) {
                            //This if clause added for refreshing profile in case of Google+ and Linkedin
                            if (membership_model.display_name == "Google+" || membership_model.display_name == "LinkedIn") {
                                var display_name = 'Reload SideBar'  
                                ginipkg.sidebar.clearContents();
                                ginipkg.sidebar.updateSidebarFromEmail(ginipkg.found_user_email,{display_name:display_name,force:true});
                            }
                            var userSocialName = data.returnParams.socialUserName;
                            var userSocialURL  = data.returnParams.socialUpdate.userSocialUrl;
                            membership_model.username = userSocialName;
                            target_element.find('a.membership-link').attr('href',userSocialURL);
                            target_element.find('a.membership-link').html($.truncateText(userSocialName,20));
                            show_handleLink();
                            // Commented by gaurav 
                            //components.templateRenderer(ginipkg, 'crm_options/menu', ginipkg, ginipkg.sugar_config, crmmenu);
                            jQuery.setSocialButton(target_element.parent(),data.returnParams.socialUpdate,membership_model.widget); // set social button
                            console.log(target_element);
                            target_element.find("div.posts p span.views a.view").click(function(){
                                target_element.find("div.gini-dropdown").toggle(); 
                            });
                        }
                        else {
                            flash(objErrMsg,data.errMsg);
                        }
                    },
                    complete:function (result) {
                    },
                    error: function (data, text_status, xhr) {
                        target_element.find('input[name=handleStringBox]').removeClass('input-spinner');
                        flash('Sorry, something broke! Please try again later.');
                    }
                });
            }}
            return false;
        }   
        target_element.find('input[name=handleStringBox]').focusout(function () {               
            return edit_social(this);
        });
        target_element.find('input[name=handleStringBox]').keydown(function (event) {
            if(event.keyCode == 13) {
                return edit_social(this);    
            }
        });
        
        target_element.find('.dropdown-toggle').click(function(e){
            e.stopImmediatePropagation();
            hideBubbles(e);
            target_element.find('ul.dropdown-menu').show('fast');
        });
        
        // send friend request and following option
        target_element.find('.social_button').click(function () {
                objErrMsg = target_element.find('span.handleBox');
                $.inlineErrorBox(objErrMsg);
                var objSocialConnect = target_element.find('.follow.social_button > .social_connect');
                var connectURL = objSocialConnect.attr('url');
                var titleOfLi = "";
                titleOfLi = $(this).attr("title");
                //setting message value.
                if (titleOfLi == "Following") { msgFlash(objErrMsg,"Already following...."); }
                if (titleOfLi == "Connected") { msgFlash(objErrMsg,"Already connected...."); }
                if (titleOfLi == "Not Connected , Click to Connect!") {msgFlash(objErrMsg,"Request Sent , Waiting For Response....");}
                if (titleOfLi == "Not Following") { msgFlash(objErrMsg,"Request sent for following....");}
                if (titleOfLi == "Not Following , Click to Follow!") { msgFlash(objErrMsg,"Request sent for following....");}
                if( (typeof connectURL !== 'undefined') && (connectURL != "") ) {
                    //var socialName   = objSocialConnect.attr('socialName');
                    var socialName   = objSocialConnect.attr('socialName');
                    var afterSuccess = objSocialConnect.attr('afterSuccess');
                    if(socialName == 'facebook') {
                        window.open(connectURL,'facebook ', "height=350, width=500");
                    }
                    else {
                        objSocialConnect.addClass('input-spinner');
                        jQuery.jsonp({
                            url: connectURL,
                            timeout: 20000,
                            success: function (data) {
                                //fsLog(data);
                                objSocialConnect.removeClass('input-spinner');                                                      
                                if(data.status === true)
                                {   
                                    var result = data.result[socialName];
                                    if(result.errCode == 0){
                                        objSocialConnect.attr("url","");
                                        if(afterSuccess != ""){ objSocialConnect.html(afterSuccess); }
                                    }else{
                                        console.log(data.errMsg);
                                    }
                                }
                                else
                                {   
                                    if ( (result !== undefined) && (result.feeds !== undefined) ) {
                                        msgFlash(objErrMsg,result.feeds);
                                    }                                
                                }
                            },
                            complete:function (result) {
                            },
                            error: function (data, text_status, xhr) {
                                objSocialConnect.removeClass('input-spinner');
                                msgFlash(objErrMsg,"Sorry! Something broke.");
                            }
                        });
                    }  
                } else {
                    var googleplusFlag = $(this).parents('li.googleplus');
                    if(googleplusFlag.length > 0 ) {
                            if(toggleflag==1){
                                $(this).find('div:nth-child(1)').show();
                                toggleflag =0;    
                            } 
                            else{
                                $(this).find('div:nth-child(1)').hide();
                                toggleflag=1;
                            }
                    }
                }
                return false;
        });
        return {};
    };


   // setting unique id for individual email messages when page refresh 
      addArchiveAttr();
    
    components.crmGroup = function (ginipkg, contact_data, sidebar_renderer, newSection) {
        // setting unique id for individual email messages when page refresh 
         addArchiveAttr();
        var _public = {}, _protected = {}, timeout, on_new_data;
        if (ginipkg.has_crm === false || ginipkg.has_crm_but_not_valid === true) {
            _public.sections = {
                notFound: components.crmNotFoundSection(ginipkg, contact_data, newSection( 'crm-not-found', 'crm'), _public),
            };
        } else {
            _public.sections = {  
                basics: components.crmBasicsSection(ginipkg, contact_data, newSection( 'crm-basics', 'crm'), _public),
                listing: components.crmListingSection(ginipkg, contact_data, newSection('crm-listing', 'crm'), _public),
                archive: components.templateArchive(ginipkg, contact_data, newSection('crm-basics', 'crm'), _public),
            };
        }
        return _public;
    };
    
    /*****************************archive functionality start by mahesh**********************************/


   var msgln='';
   var msgindex='';
   function addArchiveAttr() {
        var getParentMsgId=window.top.location.href;
        var finalParentMsgId = getParentMsgId.substring(getParentMsgId.lastIndexOf('/') + 1);
        finalParentMsgId = finalParentMsgId.split("?")[0];
        // setting unique id for individual email messages
        msgln=1;
        $("div.G3.G2").each(function(){
            $(this).attr('archflag',finalParentMsgId+'_arch_'+msgln);
            msgln=msgln+1;
        });
   };
  function giniDropdownZindex(type)
  {
      var getParentMsgId=window.top.location.href;
      var finalParentMsgId = getParentMsgId.substring(getParentMsgId.lastIndexOf('/') + 1);
      finalParentMsgId = finalParentMsgId.split("?")[0];
        if(type=='topNav') {
            $("div.G3.G2").each(function(){
                  $(this).css('z-index',1);
                  $(this).css('position','relative');
            });
        }
        else {   
             msgindex=$("div.G3.G2").length;
             msgln=1;
             $("div.G3.G2").each(function(){
                $(this).css('z-index',msgindex);
                $(this).css('position','relative');
                $(this).attr('archflag',finalParentMsgId+'_arch_'+msgln);
                msgln=msgln+1;
                msgindex=msgindex-1;
            });
            if(msgindex==0) {
              msgindex=$("div.G3.G2").length+1; 
            }
        }
  }
    
    jQuery('#ginipkg-navigation').live('click', function(){
       giniDropdownZindex('topNav');
    });
  
  /* author: mohit
  * purpose : check archive always flag set or not
  * added on : 20 nov 2013
  * updated at : 12 jun 2014
  * */
  function checkArchiveAlways(to_emails,email_subject,email_body) {
       ginipkg.request({
            path: '/crm.php?',
            server: 'crm',    
            jsonp: 'true',
            data: {
                requestType:'CRM',
                _method: 'post',
                subType:'archive_always_exist',
                from_email: ginipkg.user_email,
                to_email:to_emails,
            },
            success: function (response){
                
                var respStatus = response.result.archive_always;
                var frmPostData={};
                frmPostData['parent_type']= 'Emails';
                frmPostData['moduleName']= 'Emails';
                frmPostData['parent_id']= '';
                frmPostData['date_sent']= '1';
                frmPostData['from_addr']= ginipkg.user_email;
                frmPostData['to_addrs'] = respStatus;
                frmPostData['cc_addrs']= '';
                frmPostData['name']= email_subject;
                frmPostData['description']=jQuery(email_body).text();
                frmPostData['description_html']=jQuery(email_body).html();

                if(respStatus != 0) {
                    ginipkg.request({
                        path: '/crm.php?',
                        server: 'crm',    
                        jsonp: 'true',
                        data:{
                                data:frmPostData,
                                email: ginipkg.found_user_email,
                                archiveType :'automaticArchive',
                                fromArchive :1,
                                requestType:'CRM',
                                moduleName:'Emails',
                                has_crm_premium: (ginipkg.has_crm_premium !== undefined) ? ginipkg.has_crm_premium : false,
                                _method: 'post',
                                subType:'save',
                                parent_type:frmPostData['parent_type'],
                                parent_id:frmPostData['parent_id'],
                        },
                        success: function (response){
                                       var respStatus = response.result.status; 
                                       var message = 'Email Archived on Composing an Email.';
                                       ginipkg.request({
                                            url: server_url + '/logs/createLog.php?message=Compose_archiving'+":"+message+'&filepath=applicationLog.txt',
                                            jsonp : true,
                                            success: function (data, status) {
                                                console.log('Error Successfully Logged in Application Log file...');
                                            },
                                            error: function (response) {
                                                console.log('Error Logging Failed...');
                                                console.log(response);
                                            }
                                        }); 
                        },
                        error: function (data, text_status, xhr) {
                           var message = 'Sorry, something broke when archiving! Please try again later.';
                           ginipkg.request({
                                url: server_url + '/logs/createLog.php?message=Compose_archiving'+":"+message+'&filepath=applicationLog.txt',
                                jsonp : true,
                                success: function (data, status) {
                                    console.log('Error Successfully Logged in Application Log file...');
                                },
                                error: function (response) {
                                    console.log('Error Logging Failed...');
                                    console.log(response);
                                }
                            }); 
                        }
                    });
                }
            },
            error: function (data, text_status, xhr) {
               var message = 'Sorry, something broke when check for rule! Please try again later.';
               ginipkg.request({
                    url: server_url + '/logs/createLog.php?message=Compose_archiving'+":"+message+'&filepath=applicationLog.txt',
                    jsonp : true,
                    success: function (data, status) {
                        console.log('Error Successfully Logged in Application Log file...');
                    },
                    error: function (response) {
                        console.log('Error Logging Failed...');
                        console.log(response);
                    }
                }); 
            }
        });
    }

 /* author: mahesh
  * purpose : check archive always flag set or not
  * added on : 20 nov 2013
  * updated on : 11 jun 2014
  * */
   function sentArchiveAlways(flagtype,selectorDetails) {
        postedData= {'archive_always':'1'};
        ginipkg.request({
            path: '/crm.php?',
            server: 'crm',    
            jsonp: 'true',
            data: {
                data:postedData,
                requestType:'CRM',
                _method: 'post',
                subType:'archive_always',
                archiveFlag:flagtype,
                email: ginipkg.found_user_email
            },
            success: function (response){
                
                var respStatus = response.result.archive_always; 
                if(respStatus === 'added') {
                    $('.mail-only').hide();
                    $('.archive-fixed').addClass('archieve-always');
                    archiveThisMailOnly('automaticArchive',selectorDetails);
                }
                else if(respStatus === 'automatic_yes') {
                    $('.mail-only').hide();
                    $('.archive-fixed').addClass('archieve-always');
                    archiveThisMailOnly('automaticArchive',selectorDetails);
                }
                else if(respStatus === 'exist') {
                    $('.mail-only').hide();
                    $('.archive-fixed').addClass('archieve-always');
                }
                else if(respStatus === 'notexist') {
                    $('.mail-only').show();
                    $('.archive-fixed').removeClass('archieve-always');
                }
                else {
                    $('.mail-only').show();
                    $('.archive-fixed').removeClass('archieve-always');
                }
            },
            error: function (data, text_status, xhr) {
                $.giniAlert('Sorry, something broke! Please try again later');
            }
        });
     }


  function checkArchiveExist(frmPostData,archiveType,selectordiv,modulename) {
        var archiveDivFlag=$(selectordiv).parents('.G3.G2').attr('archflag');
        console.log(archiveDivFlag);
        postedData= {};
        postedData['name']=frmPostData['name'];
        ginipkg.request({
                        path: '/crm.php?',
                        server: 'crm',    
                        jsonp: 'true',
                        data: {
                                 data:postedData,
                                 requestType:'CRM',
                                 _method: 'post',
                                 subType:'archive_exist',
                                 archiveFlag:archiveType,
                                 archiveDivFlag:archiveDivFlag,
                                 email: ginipkg.found_user_email
                               },
                        success: function (response){
                                 var respStatus = response.result.archive_exist; 
                                 if(respStatus==0) {
                                    if(modulename != undefined) {
                                              getMessageBasedAttachment(frmPostData,archiveDivFlag,archiveType,modulename);
                                    } else {
                                              getMessageBasedAttachment(frmPostData,archiveDivFlag,archiveType);
                                    }
                                 } else {
                                     $("#chkArchAjxrequest").val('0');
                                     if(modulename != undefined) {
                                          alert(modulename +' saved successfully.Email Already archived.');
                                          ginipkg.clearCacheThoroughly();
                                     } else if(archiveType != 'automaticArchive'){
                                          alert('Email Already archived.');
                                     }
                                 }
                            
                       },
                       error: function (data, text_status, xhr) {
                       }
                    });
            $(".gini-dropdown").hide();
   }

function getMessageBasedAttachment(frmPostData,archiveDivFlag,archiveType,modulename){
    
    var getParentMsgId=window.top.location.href;
    var finalParentMsgId = getParentMsgId.substring(getParentMsgId.lastIndexOf('/') + 1);
    $("#chkArchAjxrequest").val('1');
    ginipkg.request({
        server: 'profiles',
        path  : '/dbRequest.php?',
        // jsonp : true,
        data  : {
            email           : ginipkg.found_user_email,
            requestType     :'DB',
            userAction      :'getMessageBasedAttachment',
            fetchAttachment : '1',
            isFullFetch     : false,
            startCounter    :'0'+"##"+finalParentMsgId,
           _method          :  'post',
        },
        success: function (response) {
            if(response.errCode == 0) {
                var concatarchStr='';
                if(response.result.countmsgattachment > 0) {
                    var concatarchStr='<div id="msg_arch_attachment">';
                    concatarchStr +='<div id="count_arch_attachment">'+response.result.countmsgattachment+' <strong>Attachments</strong></div><br><div>';
                    for(var msl=0;msl<response.result.countmsgattachment;msl++) {
                        var msgHrefUrl=ginipkg.services_base_url+"/dbRequest.php?userEmail="+ginipkg.user_email+"&userDomain="+ginipkg.user_domain+"&archAttachments=downloadAttach&downLoadAttFile="+response.result.attachment[msl]['id']+"-"+response.result.attachment[msl]['name'];
                        concatarchStr +="<span style='display:block;'><a href='"+msgHrefUrl+"'>"+response.result.attachment[msl]['name']+"</a></span><br>";
                    }
                    concatarchStr +='</div></div>';
                    frmPostData['description']=frmPostData['description']+concatarchStr;
                    frmPostData['description_html']=frmPostData['description_html']+concatarchStr;
                }
                frmPostData['raw_source']=archiveDivFlag;
                ginipkg.request({
                    path: '/crm.php?',
                    server: 'crm',    
                    //jsonp: 'true',
                    data:{
                        data:frmPostData,
                        email: ginipkg.found_user_email,
                        archiveFlag:archiveDivFlag,
                        archiveType :archiveType,
                        fromArchive :1,
                        requestType:'CRM',
                        moduleName:'Emails',
                        has_crm_premium: (ginipkg.has_crm_premium !== undefined) ? ginipkg.has_crm_premium : false,
                        _method: 'post',
                        subType:'save',
                        parent_type:frmPostData['parent_type'],
                        parent_id:frmPostData['parent_id'],
                    },
                    success: function (response) {
                        var respStatus = response.result.status; 
                        if(archiveType!='automaticArchive') {
                            if(respStatus === 'success') {
                                $("#chkArchAjxrequest").val('0');
                                if(modulename != undefined) {
                                    $.giniAlert(modulename +' saved successfully.Email Also archived successfully.');
                                    ginipkg.clearCacheThoroughly();
                                } else {
                                    $.giniAlert('Email archived successfully');
                                }
                            } else {
                                //alert('Sorry, something broke! Please try again later');
                            }
                        } else {
                            $("#chkArchAjxrequest").val('0');
                            //alert(' Email automatic archived successfully');
                        }
                    },
                    error: function (data, text_status, xhr) {
                        //alert('Sorry, something broke! Please try again later');
                    }
                });
            } else {
               //alert("Google authentication is required for accessing emails, attachments & meetings");
               $.giniAlert("Google authentication is required for accessing emails, attachments & meetings");
            }
                            
        }
        ,error: function(xhr,strError,errorThrown){
            var text = "Please try again later.";
            $.giniAlert(text);
        }
    });
    
    $(".gini-dropdown").hide();
}

/* author: mahesh
  * purpose : common functionality for archive always  and this mail only
  * added on : 21 nov 2013
  * */
function archiveThisMailOnly(archiveType,selectorDetails,modulename) {
    var activityName = 'emails';
    if(selectorDetails!='' || selectorDetails!='undefined')
    {
      var email_body=$(selectorDetails).parents('div.gs').find('div.ii.gt')[0];
    }
    else
    {
        var email_body = ginipkg.conversation_content.body;
    }
    var email_subject = ginipkg.conversation_content.subject;
    var sent_date = ginipkg.conversation_content.sent_date;
    var conversation_content = ginipkg.conversation_content;
    var email_from = '';
    var email_to = '';
    var email_cc = '';
    if(conversation_content.to_addrs && conversation_content.to_addrs.length > 0)
    {
        jQuery.each(conversation_content.to_addrs, function(){
            email_to += this.name + ' <' + this.email + '>;';
        });
        email_to = jQuery.trimLeftRight(email_to, ';');
    }
            
    if(conversation_content.from_addr  && conversation_content.from_addr.length > 0)
    {
        jQuery.each(conversation_content.from_addr, function(){
            email_from += this.name + ' <' + this.email + '>;';
        });
        
        email_from = jQuery.trimLeftRight(email_from, ';');
    }
            
    if(conversation_content.cc_addr && conversation_content.cc_addr.length > 0)
    {
        jQuery.each(conversation_content.cc_addrs, function(){
            email_cc += this.name + ' <' + this.email + '>;';
        });
        
        email_cc = jQuery.trimLeftRight(email_cc, ';');
    }

    var frmPostData={};
    frmPostData['parent_type']= 'Emails';
    frmPostData['moduleName']= 'Emails';
    frmPostData['parent_id']= '';
    frmPostData['date_sent']= sent_date;
    frmPostData['from_addr']= email_from;
    frmPostData['to_addrs'] = email_to;
    frmPostData['cc_addrs']= email_cc;
    frmPostData['name']= email_subject;
    frmPostData['description']=jQuery(email_body).text();
    frmPostData['description_html']=jQuery(email_body).html();
    
    // check that archive already added or not
    console.log("modulename");
    console.log(modulename);
    if(modulename != undefined) {
          checkArchiveExist(frmPostData,archiveType,selectorDetails,modulename);
    }
    else {
          checkArchiveExist(frmPostData,archiveType,selectorDetails);
    }
    
 }

/*****************************archive functionality end**************************************/
    components.crmBasicsSection = function (ginipkg, contact_data, section_element, group) {
        fsLog('####Inside basic CRM section ...............................18494');
        var _public = {}, _protected = {};
        var context_data =  {};
        if(ginipkg.sugar_config !== undefined) {
            context_data.configured_modules =   ginipkg.sugar_config.configured_modules;
        }
        context_data.company_name =     contact_data.company.name;
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'crm-basics',
            display_element: section_element
        });
        
        _protected.renderFixedTemplate({
            template: 'crm/basics',
            contact_data: ginipkg,
            context: context_data
         });
        
        section_element.find('#add-crm-module').bind('click', function(e){
            
            console.log("-----------");
            console.log("contact data");
            console.log(contact_data);
            console.log("row data");
            console.log(row_data);
            console.log("-----------");
            
            var moduleName = section_element.find("#module-dropdown-menu :selected").text();
            e.stopImmediatePropagation();
            var row_data = {};
            var options = {
                template: 'crm/sugar',
                module: _.camelize(moduleName),
                mode: 'add',
                sugar_config : ginipkg.sugar_config,
                contact_data: contact_data,
                context_data: row_data,
                email: ginipkg.found_user_email,
                company_name: (contact_data.company.name !== undefined ) ? contact_data.company.name : '',
                site_name: 'sugarCRM'
            };
            _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
            _public.crm_forms.edit(moduleName);
        
            return false;
        });


        _public.refresh = function () {
            _public.measureSection();
        };
       
        return _public;
    };


    components.crmListingSection = function (ginipkg, contact_data, section_element, group) {
    
        fsLog('####Inside Listing CRM section ...............................18605');
        var _public = {}, _protected = {};
       
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'crm-listing',
            display_element: section_element
        });
        
         _protected.renderFixedTemplate({
            template: 'crm/listing',
            contact_data: ginipkg,
            context: contact_data
        });
        
        function listRecords(data){
            var i = 1; 
            var strs = "<section class=\"ac-container\"> <ul>";   
            var sort;
            var str=new Array();
            jQuery.each(data, function (module, records) { 
              
                if(records.record.length > 0 &&( module.toLowerCase() == 'leads'
                || module.toLowerCase() == 'opportunities' || module.toLowerCase() == 'cases'))
                { 
                    if(module.toLowerCase() == 'leads')
                        {
                        sort=0;
                        }
                    else if(module.toLowerCase() == 'opportunities'){
                        sort=1;
                    }
                    else{
                        sort=2;
                    }
                    str[sort]='';
                    str[sort] = str[sort] + "\n                    <li>\n                        <input id=\"ac-"+i+"\" name=\"accordion-"+i+"\" type=\"radio\" checked/>\n                        <label><span>"+module+"</span></label>\n                    <ul class=\"drop\">";
                    var configured_fields  = ginipkg.sugar_config.module_configuration[module].fieldName.listView;
                    var rows  = records.record;
                    // console.log("records");
                    fsLog(rows);
                    var related_modules  = records.sub_modules;
                    related_modules = jQuery.parseJSON(related_modules);
                    var related_modules_str  = jQuery.selectOptions(related_modules , '<option value=\"\">Action</option>');
                    jQuery.each(rows, function (i, row) {
                        var editRowData = {'parent_module':module.toLowerCase(), 'data':row };
                        var rowTitle = '';      
                        if(module.toLowerCase() == 'leads') {   
                            rowTitle = (row.title != '' && row.title != null) ? row.title : ((row.first_name != null) ?  row.first_name : '') + ' ' + ((row.last_name != null ) ? row.last_name : '');
                        }
                        else if(module.toLowerCase() == 'opportunities') {
                            rowTitle = row.name;
                        }
                        else if(module.toLowerCase() == 'cases') {
                            rowTitle = row.name;
                        }
                        else if(module.toLowerCase() == 'contacts') {
                            rowTitle = row.last_name + ' ' + row.first_name;
                        }
                        rowTitleShow = $.unescapeHtml(rowTitle);
                        rowTitleHtml = $.removeDoubleQuotes(rowTitleShow);

                        str[sort] = str[sort] + "<li title=\""+rowTitleHtml+"\">"+jQuery.truncateText(rowTitleShow,15)+"\n                            <a href=\"javascript:void(0)\" class=\"dropdown-toggle\" >View</a>\n                            <div class=\"crm_content_box dropdown-menu\">";
                        str[sort] = str[sort] + "\n                            <p style=\"text-align:right;\">\n                                <select class=\"recordActivity\" name=\"recordActivity\" > "+related_modules_str+"</select>\n                            </p>";
                        jQuery.each(configured_fields, function (i, field) {
                            var fieldValue = "";
                            if(!_.isNull(row[field.field_name]) )
                            {
                               fieldValue = (field.field_type !== undefined && field.field_type == 'date') ? jQuery.setDateFormat(row[field.field_name]) : row[field.field_name];   

                                fieldValue = $.unescapeHtml(fieldValue);

                            }
                            if(field.field_label == "Assigned User:" || field.field_label == "Assigned User") {
                                if(fieldValue == 1 ) {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "Administrator" +"</p>";
                                }else {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ fieldValue +"</p>";
                                }
                            } else if(field.field_label == "Do Not Call:" || field.field_label == "Do Not Call" ) {
                                if(fieldValue == 1 ) {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "Yes" +"</p>";
                                }else if(fieldValue == 0 ) {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "No" +"</p>";
                                } else {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ fieldValue +"</p>";
                                }
                            } else if(field.field_label == "Priority:" || field.field_label == "Priority" ){
                                if(fieldValue == 'P1' ) {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "High" +"</p>";
                                }else if(fieldValue == 'P2' ) {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "Medium" +"</p>";
                                } else if(fieldValue == 'P3') {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "Low" +"</p>";
                                } else {
                                 str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ fieldValue +"</p>";
                                }
                            } else  if(field.field_label == "Assigned To:" || field.field_label == "Assigned To") {
                                if(fieldValue == 1 ) {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ "Administrator" +"</p>";
                                }else {
                                    str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ fieldValue +"</p>";
                                }
                            }  
                            else {
                                str[sort] = str[sort] + "<p title=\""+jQuery.trimChars(field.field_label)+"\"><strong>"+jQuery.truncateText(jQuery.trimChars(field.field_label), 14)+":</strong> "+ fieldValue +"</p>";
                            } 
                        });
                        var flavor = (ginipkg.sugar_config.current_crm_version).split("#")[0];
                        var version = ((ginipkg.sugar_config.current_crm_version).split("#")[1]).split(".")[0];
                        if(version >= 7){
                            var rowUrl = ginipkg.sugar_config.crm_url + "/#"+module+"/"+ row.id;
                        }else{
                            var rowUrl = ginipkg.sugar_config.crm_url + "/index.php?action=index.php&module="+module+"&action=DetailView&record=" + row.id;
                        }
                        
                        if((module == 'Opportunities')&&(version >= 7)&&(flavor != 'PRO')) {
                            for (var key in row.rl_items.record) {
                                var editRowData1 = {'parent_module':'revenuelineitems', 'data':row.rl_items.record[key] };
                                var revenue_number = parseInt(key)+1;
                                str[sort] = str[sort] + "<p style=\"display:none;\" class=\"rl_edit"+key+"\">"+JSON.stringify(editRowData1)+"</p>";
                                str[sort] = str[sort] + "<p class=\"rl_edit\" title=\"Edit This Revenue Line Item\"><strong>Revenue Item"+revenue_number+"</strong>"+row.rl_items.record[key].name+" <a class=\"revenue_edit\" style=\"float:right;color:transparent;\" href=\"javascript:void(0)\" flag=\""+key+"\">Edit</a></p>";   
                            }
                            str[sort] = str[sort] + "<p class=\"rl_creation\" ><strong>&nbsp;</strong><a style=\"float:right;\" href=\"javascript:void(0)\">Add Revenue Line Item</a></p>";
                        }
                        //var rowUrl = ginipkg.sugar_config.crm_url +"/index.php?action=DetailView&module="+module+"&record="+row.id;
                        str[sort] = str[sort] + "<p id =\" no-bottom-border\" class=\"no-bottom-border\" ><strong>&nbsp;</strong><a style=\"float:right;\" href=\""+rowUrl+"\" target=\"_blank\" >Show in SugarCRM</a></p>";
                        editRowData.parent_name=rowTitle; 
                        str[sort] = str[sort] + "<div style=\"display:none;\" class=\"row_identifier\">"+JSON.stringify(editRowData)+"</div>";
            
                        str[sort] = str[sort] +"\n                            </div>\n                            </li>";
                    });
                    str[sort] = str[sort] + "\n                    </ul>";
    
                    i++;
                }
                else  if(records.record.length <= 0 &&( module.toLowerCase() == 'leads'
                || module.toLowerCase() == 'opportunities' || module.toLowerCase() == 'cases')) { 
                    if(module.toLowerCase() == 'leads')
                        {
                        sort=0;
                        }
                    else if(module.toLowerCase() == 'opportunities'){
                        sort=1;
                    }
                    else{
                        sort=2;
                    }
                    str[sort]='';
                    str[sort] = str[sort] + "\n                        <li>\n                        <input id=\"ac-"+i+"\" name=\"accordion-"+i+"\" type=\"radio\" checked/>\n                        <label><span>"+module+"</span></label>\n                        <ul class=\"drop\"><li title=\"\" style=\"display: list-item;color:rgb(92, 83, 83)\">                        No related "+module.toLowerCase()+" found . </li></ul></li>";
                    i++;
                }
                
            });
            var listCount=0;
            for(i=0;i<3;i++){
               if(str[i]!==undefined){
                    strs += str[i];
                    listCount++;
               }
            }
            strs+= "</section>";
            if(listCount == 0 ) {
                strs = fncNoRecordFound("list records strs part");
            }
            section_element.html(strs);
            section_element.find('a.dropdown-toggle').bind('click', function(e){
                e.stopImmediatePropagation();
                jQuery(this).next().slideToggle();
                hideBubblesCrm(e);
            });
            
            section_element.find('ul.drop > li > div > p.rl_creation a').bind('click', function(e){
                e.stopImmediatePropagation();
                var row_data = jQuery(this).parent().siblings('.row_identifier').text();
                row_data = jQuery.parseJSON(row_data);
                var moduleName = 'RevenueLineItems';
                var options = {
                    template: 'crm/sugar',
                    module: _.camelize(moduleName),
                    mode: 'add',
                    sugar_config : ginipkg.sugar_config,
                    contact_data: contact_data,
                    context_data: row_data,
                    flag:1,
                    company_name: row_data.data.account_name,
                    opportunity_name:row_data.data.name,
                    site_name: 'sugarCRM'
                };
                _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                _public.crm_forms.edit(moduleName);
                return false;
            });
            
            section_element.find('ul.drop > li > div > p.rl_edit a').bind('click', function(e){
                e.stopImmediatePropagation();
                var flag = jQuery(this).attr('flag');
                var moduleName = 'RevenueLineItems';
                var row_data = jQuery(this).parent().siblings('.rl_edit'+flag).text();
                row_data = jQuery.parseJSON(row_data);
                var options = {
                    template: 'crm/sugar',
                    module:_.camelize(moduleName),
                    mode: 'edit',
                    flag:2,
                    sugar_config : ginipkg.sugar_config,
                    contact_data: contact_data,
                    context_data: row_data,
                    company_name: row_data.data.account_name,
                    opportunity_name:row_data.data.opportunity_name,
                    site_name: 'sugarCRM'
                };
                _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                _public.crm_forms.edit(moduleName);
                return false;
            });
            
            
            
            var target_element =    jQuery(this).parent().find('ul.dropdown-menu');
                section_element.find('ul.drop > li > div > p > select').bind('change', function(){
                    $(this).parent().parent().hide();
                    var activityName = jQuery.trim(jQuery(this).val()).toLowerCase();
                    var row_data = jQuery(this).parent().siblings('.row_identifier').text();

                    //code added by siddarth on 23 May 2014 - occurs for some leads
                    row_data = jQuery.parseJSON(row_data);
                    if(activityName == 'edit') {
                        var options = {
                            template: 'crm/sugar',
                            module: _.camelize(row_data.parent_module),
                            mode: 'edit',
                            sugar_config : ginipkg.sugar_config,
                            contact_data: contact_data,
                            context_data: row_data,
                            email: ginipkg.found_user_email,
                            company_name: (contact_data.company.name !== undefined ) ? contact_data.company.name : '',
                            site_name: 'sugarCRM'
                        };
                    
                        _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                        _public.crm_forms.edit(row_data.parent_module);
                    }
                    else if(activityName != "") {
                        var activity_data = {
                            'parent_id':row_data.data.id,
                            'parent_type':_.camelize(row_data.parent_module),
                        };
                         if(activityName == "tasks") {
                            activity_data.parent_name=row_data.parent_name;
                        }
                        
                        if(activityName == 'emails') {
                            //Read Email Contents 
                            var email_body = ginipkg.conversation_content.body;
                            var email_subject = ginipkg.conversation_content.subject;
                            var sent_date = ginipkg.conversation_content.sent_date;
                            var conversation_content = ginipkg.conversation_content;
                            var email_from = '';
                            var email_to = '';
                            var email_cc = '';
                            
                            
                            //added by siddarth on 23 May 2014 
                            //uncomment the commented two lines and comment the email = line
                            if(conversation_content.to_addrs && conversation_content.to_addrs.length > 0) {
                                jQuery.each(conversation_content.to_addrs, function(){
                                    email_to = this.name + ' <' + this.email + '>';
                                });
                            }
                            
                            if(conversation_content.from_addr  && conversation_content.from_addr.length > 0) {
                                jQuery.each(conversation_content.from_addr, function(){
                                    email_from = this.name + ' <' + this.email + '>';
                                });
                            }
                            
                            if(conversation_content.cc_addr && conversation_content.cc_addr.length > 0) {
                                jQuery.each(conversation_content.cc_addrs, function(){
                                    email_cc = this.name + ' <' + this.email + '>';
                                });
                            }
                            
                            activity_data.from_addr = email_from;
                            activity_data.to_addrs = email_to;
                            activity_data.cc_addrs = email_cc;
                            activity_data.name = email_subject;
                            activity_data.description = jQuery(email_body).text();
                            activity_data.description_html = jQuery(email_body).html();
                            activity_data.date_sent = sent_date;
                        }
                        
                        var options = {
                            template: 'crm/sugar_activity',
                            module: activityName,
                            mode: 'add',
                            sugar_config : ginipkg.sugar_config,
                            contact_data: contact_data,
                            context_data: activity_data,
                            site_name: 'sugarCRM'
                        };
                    
                        _public.crm_activities = _public.chainedDestroyable(components.crm_activities(ginipkg, options));
                        _public.crm_activities.edit(activityName);
                        
                    }
                    $(this).attr('selectedIndex', '0').find("option:selected").removeAttr("selected");
                    
                    return false;
            });
            $('.ac-container ul li ul li').slideDown();
            $('.ac-container ul li label span').click(function(e){
                var toggle = $(this).parent().parent();
                if(toggle.find('input[type="radio"]').first().attr('checked')===true) {
                    $(this).css("background" ,"url("+img_base_url+"/sprites.png) 180px -1012px no-repeat");
                    toggle.find('input[type="radio"]').first().attr('checked',false);
                } else  {
                    $(this).css("background" ,"url("+img_base_url+"/sprites.png) 180px -968px no-repeat");
                    toggle.find('input[type="radio"]').first().attr('checked',true);
                }
                toggle.children('ul').children('li').slideToggle("fast");
            });
       }
       
       /*
       * listRecords(data) ends here
       */
        
        function fncNoRecordFound(input) {
            str = '                <div class=\"call-record-desc\">\n                    <div class=\"accordion\" id=\"accordion2\">\n                        <div class="accordion-group">\n                            <div class="accordion-heading no-data">\n                            <div class="new-leads-detail">Related Records not available.</div>\n                        </div>\n                    </div>\n            </div>\n            ';
            return str;
        }
        _public.pollIfNecessary = function (recheck_after, poll_path) {
            if (poll_path) {
                window.setTimeout(function () {
                    if(recheck === true && requestCounter <= 3 ) {
                        ginipkg.request({
                            path: poll_path,
                            data: {
                                has_crm_premium: (ginipkg.has_crm_premium !== undefined) ? ginipkg.has_crm_premium : false,
                            },
                            // jsonp: true,
                            server: 'crm',
                            success: function (response) {
                                requestCounter = requestCounter+1;  
                                if(response.errCode == "0") {
                                    recheck === false;
                                    listRecords(response.result);
                                } else {
                                    recheck === true;
                                    _public.pollIfNecessary(contact_data.crm.recheck_after, contact_data.crm.poll_path);
                                }
                            },
                            error: function (data, text_status, xhr) {
                                 if(text_status !== 'network_failure') {
                                    requestCounter = requestCounter+1;
                                     if(recheck === true && requestCounter <=3 ){   
                                        _public.pollIfNecessary(contact_data.crm.recheck_after, contact_data.crm.poll_path);
                                     }else{
                                        var str = fncNoRecordFound("poll if necessary from error");                       
                                        section_element.html(str);
                                     }   
                                 } 
                            }
                        });
                    } else {
                        var str = fncNoRecordFound("poll if necessary from else part");
                        section_element.html(str);
                    }
                },1000);
            }
         };

        if(contact_data.crm.poll_path !== undefined && contact_data.crm.poll_path != "")
        {
            var requestCounter = 1;
            var recheck        = true;  
            _public.pollIfNecessary(contact_data.crm.recheck_after, contact_data.crm.poll_path);
        }
        
        _public.refresh = function () {
            _public.measureSection();
        };
        return _public;
    };

     components.engagingContainer = function (ginipkg, container, click_target) {
        var _public = {}, _protected = {}, parentDocument = container[0].ownerDocument;
        lib.showable(_public, _protected);
        lib.hasEvent(_public, _protected, 'disengage');
        _public.container = container.hide();
        
        function mousedownHandler(e) {
            if (!jQuery.contains((click_target || container)[0], e.target)) {
                _public.triggerDisengage(e, {
                });
            }
        }

        function keydownHandler(e) {
            if (e.keyCode === jQuery.ui.keyCode.ESCAPE) {
                _public.triggerDisengage(e, {
                    reason: 'escape'
                });
            }
        }
        
        _public.onVisibleChange(function (visible) {
            if (visible) {
                container.show();
                parentDocument.addEventListener('mousedown', mousedownHandler, true);
                parentDocument.addEventListener('keydown', keydownHandler, true);
            } else {
                container.hide();
                parentDocument.removeEventListener('mousedown', mousedownHandler, true);
                parentDocument.removeEventListener('keydown', keydownHandler, true);
            }
        });
        return _public;
    };

    components.character_counter = function (ginipkg, limit, textarea, display) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'length', 'value', 'error');
        _public.onValueChange(function (value) {
            if (textarea.val() !== value) {
                textarea.val(value);
            }
            _public.length = value.length;
        });
        _public.onLengthChange(function (length) {
            display.text(limit - length);
            _public.error = limit < length;
        });
        _public.onErrorChange(function (error) {
            if (error) {
                display.addClass('error');
            } else {
                display.removeClass('error');
            }
        });
        _public.update = function () {
            _public.value = textarea.val();
            _public.triggerLengthChange(_public.length);
        };
        _public.isValid = function () {
            return _public.length <= limit;
        };
        textarea.keyup(_public.update).mouseup(_public.update).change(_public.update);
        _public.update();
        return _public;
    };

    components.comment_dialog = function (ginipkg, options) {
        var _public = {}, _protected = jQuery.extend({}, options);
        lib.destroyable(_public, _protected);
        var input, counter, dialog, key , form_fields;

        function status(text, spin) {
            dialog.find('.status-text').text(text).show();
            dialog.find('.comment-status').show().find('img').toggle( !! spin);
        }

        function flash(message) {
            var flashed = message;
            status(message);
            window.setTimeout(function () {
                if (dialog.find('.status-text').text() === flashed) {
                    dialog.find('.status-text').fadeOut('fast');
                }
            }, 3500);
        }
        function postComment() {
            if (!counter.isValid()) {
                flash("Comments must be " + _protected.character_limit + " characters or less.");
                return;
            }
            if (input.val().length < 5) {
                flash("Please enter a comment before posting, thanks!");
                return;
            }
            status("Saving comments...", true);
            return false;
        }
        _public.close = function () {
            dialog.dialog("close");
        };
        _public.edit = function (data_id) {
            dialog = _public.destroyableDiv();
            ginipkg.renderTemplate(_protected.template, _protected.contact_data, _protected.membership, dialog);
            dialog.dialog({
                title: "Reply with a comment on " + _protected.site_name,
                modal: true,
                autoOpen: false,
                width: 380,
                height: 244
            });
            input = dialog.find('textarea');
            key = data_id;
            input.val('');
            status('');
            dialog.dialog("option", "buttons", {
                "Post": postComment,
                "Cancel": _public.close
            });
            dialog.dialog("open");
            window.setTimeout(function () {
                input.focus();
            }, 1);
        };
        return _public;
    };

  

    components.crm_forms = function (ginipkg, options,selector) {
        console.log('components.crm_forms');
        console.log(options);
        
        var _public = {}, _protected = jQuery.extend({}, options);
        var nicDescription = null;
        lib.destroyable(_public, _protected);
        var input, form_fields, counter, dialog, key, form_data,activity_data;
        function status(text, spin) {
            dialog.find('.status-text').text(text).show();
            dialog.find('.comment-status').show().find('img').toggle( !! spin);
        }

        function flash(message) {
            var flashed = message;
            dialog.find('.status-text').addClass("error_msgOnForms");
            status(message);
            window.setTimeout(function () {
                if (dialog.find('.status-text').text() === flashed) {
                    dialog.find('.status-text').fadeOut('fast');
                    dialog.find('.status-text').removeClass("error_msgOnForms");
                }
            }, 3500);
        }

        //Function to validate Email
        function ValidateEmailByValue(emailId) {
            var reg = /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
            if (reg.test(emailId)){
                return true; }
            else{
                return false;
            }
        }

        function validateFormData(form_fields) {
            var nicDescriptionContainer = dialog.find('div.nicEdit-main');
            if(nicDescriptionContainer.length > 0 ){
                dialog.find('textarea#description').val(nicDescriptionContainer.html());
            }
            var form_fields = form_fields[0];
            jQuery('#general-form-container').find(':input').removeClass('error');
            jQuery('#general-form-container').find(':input').parent().find('.error-msg').remove();
          
            var error       = false;
            jQuery.each(form_fields, function(index, field) { 
                var estimatedStartDate     = ''; 
                var estimatedEndDate      = '';
                id=jQuery(this).attr('id');
                if(id != 'description') {
                    this.value=$.stripHTMLS(this.value);   
                }
                if((jQuery(this).val() == '') && (jQuery(this).hasClass('required') === true) )
                {
                    error = true;
                    var errMsg = '';
                    jQuery(this).addClass('error');
                    jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                }
                //validating email
                else if(((id).indexOf('email')!=-1) && jQuery(this).val() != '')
                {
                    if(ValidateEmailByValue(jQuery(this).val()) == false)
                    {
                        var fieldName;
                        fieldName=$(this).parent().parent().find("label div").text();
                        fieldName=fieldName.replace(':','.');
                        fieldName=fieldName.replace('*','');
                     
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter valid '+fieldName;
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }
                }
                else if(((id).indexOf('phone')!=-1) && jQuery(this).val() != '') {
                    if($.validatePhoneField(jQuery(this).val()) == false) {
                        var fieldName;
                        fieldName=$(this).parent().parent().find("label div").text();
                        fieldName=fieldName.replace(':','.');
                        fieldName=fieldName.replace('*','');
                     
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter valid '+fieldName;
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }
                }
                else if(id.indexOf('probability')!=-1) {
                    var amount = jQuery(this).val();     
                    if($.validateAmountField(amount)=== false ) {
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter integer value for Probability.';
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');   
                    }
                    else if(amount.indexOf('.') > -1) {
                            error = true;
                            jQuery(this).addClass('error');
                            var errMsg = 'Please enter integer value for Probability.';
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }        
                    else if(amount < 0 || amount > 100) {
                            error = true;
                            jQuery(this).addClass('error');
                            var errMsg = 'Please enter value in range (0-100).';
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }
                }
                else if(((id).indexOf('amount')!=-1 || (id).indexOf('revenue')!=-1) && jQuery(this).val() != '') {
                    if($.validateAmountField(jQuery(this).val()) == false) {
                        var fieldName;
                        fieldName=$(this).parent().parent().find("label div").text();
                        fieldName=fieldName.replace(':','.');
                        fieldName=fieldName.replace('*','');
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter valid '+fieldName;
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }
                }
                if(id == "company_name" && (jQuery(this).val() != '')) {
                    if(/^[a-zA-Z0-9-._\(\)\[\]' ]*$/.test(jQuery(this).val()) === false) {   
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter valid Account Name.';
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }   
                }
            });
      
            if(error == false ){
                return true;
            }else{
                return false;
            }  
        }     

       //function to validate forms:-Leads,Opportunities,Cases,Contacts,Accounts
        function postCrmData() {
            var statusError = '';
            var frmPostData = {};
            var dialogContainer = dialog[0];
            statusError = validateFormData(form_fields);
            if(statusError === true) {
                $.each(jQuery(form_fields).serializeArray(), function(index,value) { 
                    frmPostData[value.name] = value.value;
                    frmPostData['moduleName'] = _protected.module;
                });
                status("Saving data ...", true);
                jQuery(dialogContainer).parent().find( "form div.form-fields" ).each(function(){
                    $(this).children().attr("disabled",true);
                    $(this).children("a").hide();
                });
                jQuery(dialogContainer).parent().find('.submit-box').hide();
                
                
                /*
                 * @date - 19 June 2014
                 * @author - Siddarth Chowdhary
                 * @desc - Modified For contact creation option from sidebar.
                 * */
                if(_protected.crm_contact_flag === true) {
                  ginipkg.request({
                      server      : 'profiles',    
                      // jsonp       : 'true',
                      path        : '/sync.php?',
                      beforeSend  :function(){
                                      console.log("Request send for contacts update from sidebar , with form data :");
                                      console.log(frmPostData);
                                   },
                      data        :{
                                      email           : ginipkg.found_user_email,
                                      data            : (frmPostData),
                                      skipThis        : true,
                                      requestType     : 'syncSingleContactGlobal',
                                      crmAvailable    : ginipkg.has_crm,
                                      _method         : 'POST',
                                  },
                      success     : function (response) {
                                       console.log("Response Recieved for contacts update from sidebar");
                                       console.log(response);
                                       if(response.result == 'success') {
                                           ginipkg.isProfileUpdated = true;
                                       }
                                       jQuery(dialogContainer).parent().find('.submit-box').show();
                                       fsLog(response);
                                       dialog.dialog("option", "buttons", {
                                         
                                       });
                                       status('Profile updated successfully.');
                                       jQuery(dialogContainer).parent().find("img").remove();
                                       $("div.top-legends").html("");
                                       jQuery(dialogContainer).parent().find( "form input:text" ).closest("div").each(function(){
                                           $(this).css("width","60%");
                                           $(this).css("word-break","break-all");
                                           $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("input").val()+"</label>");
                                      
                                       });
                                      
                                      
                                       jQuery(dialogContainer).parent().find( "form select" ).closest("div").each(function(){
                                           $(this).css("width","60%");
                                           $(this).css("word-break","break-all");
                                           $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("select").val()+"</label>")
                                       });
                                       jQuery(dialogContainer).parent().find( "form textarea" ).closest("div").each(function(){
                                           $(this).css("width","60%");
                                           $(this).css("word-break","break-all");
                                           $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("textarea").val()+"</label>")
                                       });
                                      
                                      
                                       ginipkg.sidebar.clearContents();                 
                                       ginipkg.sidebar.updateSidebarFromEmail(ginipkg.found_user_email,{
                                           display_name:"Search User",
                                           force:true
                                       });
                                      
                                  },
                      error       :function (data, text_status, xhr) {    
                                        console.log("::::error::::;")
                                        console.log(data);
                                        console.log(text_status);
                                        console.log(xhr);
                                        jQuery(dialogContainer).parent().find( "form div.form-fields" ).each(function(){
                                          $(this).children().removeAttr("disabled");
                                          $(this).children("a").show();
                                        });
                                        jQuery(dialogContainer).parent().find('.submit-box').show();
                                        flash('Sorry, something broke! Please try again later');
                                  }
                  });
                } else {
                ginipkg.request({
                    path: '/crm.php?',
                    server: 'crm',    
                    data: {
                        data:frmPostData,
                        email: ginipkg.found_user_email,
                        requestType:'CRM',
                        moduleName:_protected.module,
                        has_crm_premium: (ginipkg.has_crm_premium !== undefined) ? ginipkg.has_crm_premium : false,
                        subType:'save',
                        _method: 'post',
                        skipThis :true,
                    },
                    success: function (response) {
                        var respStatus = '';
                        if(_protected.module == 'Opportunities')
                        {
                            respStatus =  response.result.status.split("#")[0];
                        }else{
                            
                            respStatus = response.result.status;
                        }
                        jQuery(dialogContainer).parent().find('.submit-box').show();
                        if(response.result.errMsgDetail == "CRM authentication failed." ||
                            response.result.errMSg == "Login attempt failed please check the username and password" || 
                            response.result.error == "Login attempt failed please check the username and password") {
                            flash("CRM authentication failed. Saved UserName and Password no longer match with the CRM credentials.");
                            dialog.dialog("option", "buttons", { 
                            });
                        }else if(respStatus === 'permissionfailed') {     
                            flash("You do not have permission to create "+_protected.module+' .');
                            dialog.dialog("option", "buttons", {    
                                
                            });
                        }else if(respStatus === 'success') {
                            
                            if(selector != undefined) {
                                dialog.dialog("close");
                                archiveThisMailOnly('',selector,_protected.module);
                            } else {
                                dialog.dialog("option", "buttons", {
                                });
                                if(_protected.module === 'RevenueLineItems')
                                {
                                    status('Revenue Line Item saved successfully.');
                                }else
                                {
                                    status(jQuery.singularizeModule(_protected.module)+' saved successfully.');
                                }
                                jQuery(dialogContainer).parent().find( "img").remove();
                                                    
                               
                                
                                $("div.top-legends").html("");
                                var crmVersion=ginipkg.sugar_config.current_crm_version;
                                crmVersion=crmVersion.split("#");
                                crmVersion=crmVersion[1];
                                crmVersion=crmVersion.split(".");
                                crmVersion=crmVersion[0];
                                if(_protected.module === 'Opportunities' && crmVersion>6) {
                                    $("div.info-dialog.crm-dialog.crm-leads-dialog").html("");
                                    $("div.info-dialog.crm-dialog.crm-leads-dialog").append('<div style="margin-top: 50px;margin-bottom: 22px;"><a href="javascript:void(0)" style="text-align:center;font-size: 12px;"> Create a Revenue Line Item for Opportunity.</a></div>');
                                    $("div.info-dialog.crm-dialog.crm-leads-dialog").find("a").bind('click', function(e){
                                        e.stopImmediatePropagation();
                                        var moduleName = 'RevenueLineItems';
                                        var row_data = {};
                                        var options = {
                                            template: 'crm/sugar',
                                            module: _.camelize(moduleName),
                                            mode: 'add',
                                            sugar_config : ginipkg.sugar_config,
                                            contact_data: contact_data,
                                            context_data: row_data,
                                            values:response.result.status.split("#")[1],
                                            company_name: frmPostData['company_name'],
                                            opportunity_name:frmPostData['name'],
                                            site_name: 'sugarCRM'
                                        };
                                        _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                                        _public.crm_forms.edit(moduleName);
                                        return false;
                                    });
                                } else {
                                    jQuery(dialogContainer).parent().find( "form input:text" ).closest("div").each(function(){
                                        $(this).siblings().find("span").remove();
                                        $(this).css("width","60%");
                                        $(this).css("word-break","break-all");
                                        $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("input").val()+"</label>");
                                    
                                    });
                                    
                                    
                                    jQuery(dialogContainer).parent().find( "form select" ).closest("div").each(function(){
                                        $(this).siblings().find("span").remove();
                                        $(this).css("width","60%");
                                        $(this).css("word-break","break-all");
                                        $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("select :selected").text()+"</label>")
                                    });
                                    // nicDescription.removeInstance('description');
                                    jQuery(dialogContainer).parent().find( "form textarea" ).closest("div").each(function(){
                                        $(this).siblings().find("span").remove();
                                        $(this).css("width","60%");
                                        $(this).css("word-break","break-all");
                                        $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("textarea").val()+"</label>")
                                    });
                                
                                    var contact_data = {};
                                    
                                    if(_protected.contact_data.contact !== undefined ) {
                                        contact_data = _protected.contact_data;
                                    } else {
                                        contact_data = {'crm':{'recheck_after':response.result.pollable.recheck_after, 'poll_path':response.result.pollable.poll_path}};
                                    }
                                    _public.crmListingSection = components.crmListingSection(ginipkg, contact_data, jQuery(document).find('.crm-listing-section'), '');
                                }
                            }
                        } else {
                            flash('Sorry, something broke! Please try again later');
                        }
                    },
                    error: function (data, text_status, xhr) {
                        jQuery(dialogContainer).parent().find( "form div.form-fields" ).each(function(){
                        $(this).children().removeAttr("disabled");
                        $(this).children("a").show();
                    });
                    jQuery(dialogContainer).parent().find('.submit-box').show();
                        flash('Sorry, something broke! Please try again later');
                    }
                });
                }
            return false;
          } 
        }

        _public.close = function () {
            dialog.dialog("close");
            if(selector !='' || selector !='undefined')
            {
                archiveThisMailOnly('',selector);
            }
        };

        _public.edit = function (module_name) {
            
            if (!dialog) {
                console.log(_protected.sugar_config.module_configuration);
                
                var module_configuration = _.toArray(_protected.sugar_config.module_configuration[_.camelize(_protected.module)].fieldName.editView);
                
                var module_data = _protected.context_data.data;
    
                var isCompanyRequired = false;  
                var isEmailRequired = true; 
                    
                if(_protected.module == 'Contacts' || _protected.module == 'Opportunities' 
                    || _protected.module == 'Cases')
                {
                    isCompanyRequired = true;
                    if(_protected.company_name == "") {

                        if(_protected.email) {
                            email_chunk= _protected.email.split("@")[1];
                            company_name=email_chunk.substring(0,email_chunk.indexOf("."));
                            if(company_exceptions.indexOf(company_name) != -1 ) {
                                company_name="";
                            }
                            _protected.company_name =company_name;
                        }
                        
                    }
                }

                if(_protected.module == 'Leads' || _protected.module == 'Contacts' || _protected.module == 'Accounts')
                {
                    jQuery.each(module_configuration, function(i, field){
                        if(field.field_name !== undefined && field.field_name == 'email1')
                        {
                            delete module_configuration[i];
                        }
                    });

                }
                
                //Code added by mohit gupta for Revenue Line Item
                if((_protected.module == 'RevenueLineItems')&&(_protected.flag))
                {
                    if(_protected.flag == 2)
                    {
                        var opportunity_id = _protected.context_data.data.opportunity_id;
                    }
                    else
                    {
                        var opportunity_id = _protected.context_data.data.id;
                    }
                    var account_id = _protected.context_data.data.account_id;
                    module_configuration.push({"field_name":"opportunity_id","field_type": "hidden","required": "true", "field_value": opportunity_id});
                    module_configuration.push({"field_name":"account_id","field_type": "hidden","required": "true", "field_value": account_id});    
                    module_configuration.push({"field_name":"opportunity","field_label": "Opportunity Name","field_type": "text","required": "true", "field_value":_protected.opportunity_name});   
                }
                else if(_protected.module == 'RevenueLineItems')
                {
                    var opportunity_id = _protected.values.split("@")[0];
                    var account_id = _protected.values.split("@")[1];
                    module_configuration.push({"field_name":"opportunity_id","field_type": "hidden","required": "true", "field_value": opportunity_id});
                    module_configuration.push({"field_name":"account_id","field_type": "hidden","required": "true", "field_value": account_id});    
                    module_configuration.push({"field_name":"opportunity","field_label": "Opportunity Name","field_type": "text","required": "true", "field_value":_protected.opportunity_name});
                }
                
                
                
                //Parent module for Sub Activities rest of  Edit
                module_configuration.push({"field_name":"parent_module","field_type": "hidden","required": "true", "field_value": _protected.module});

                //Additional email1 field
                if((_protected.mode === 'edit')&&(_protected.module != 'Leads')&&(_protected.module != 'RevenueLineItems')){
                    module_configuration.push({"field_name":"email1", "field_label": "Email Address","field_type": "text", "field_value":'', "field_length": "","field_order": "", "required":isEmailRequired});
                }
                else if(_protected.module != 'RevenueLineItems'){
                    module_configuration.push({"field_name":"email1", "field_label": "Email Address","field_type": "text", "field_value":_protected.email, "field_length": "","field_order": "", "required":isEmailRequired});
                }
                
                //Additional company_name field
                if(_protected.module != 'Leads' && _protected.module != 'Accounts' && _protected.module != 'RevenueLineItems')
                {
                    module_configuration.push({"field_name":"company_name", "field_label": "Account Name","field_type":"text", "field_value":_protected.company_name, "field_length": "","field_order": "","required": isCompanyRequired});
                }else if(_protected.module == 'RevenueLineItems'){
                    module_configuration.push({"field_name":"company", "field_label": "Account Name","field_type":"text", "field_value":_protected.company_name, "field_length": "","field_order": "","required": isCompanyRequired});
                }
                
                if(_protected.mode === 'edit')
                {
                    module_configuration.push({"field_name": "id","field_type": "hidden","required": "true"});
                }
                
                // Pushing CRM record data into fields
                jQuery.each(module_configuration, function(i, field){
                            
                    if((module_data) && ((module_data[this.field_name] !== undefined)||(this.field_name == 'company_name')))
                    {
                        if(this.field_name == 'company_name')
                        {
                            this.field_value =  module_data['account_name'];
                        }
                        else
                        {
                            this.field_value =  module_data[this.field_name];
                        }
                    }
                    else
                    {
                        this.field_value =  (this.field_value == "" || this.field_value == null) ? '' : this.field_value;
                    }
                    
                    this.required =  (this.required === "true" || this.required === true) ? true : false;
                    module_configuration[i] = this;

                });
                form_data = {'mode':_protected.mode, 'module':_protected.module, 'module_config':module_configuration};
                
                activity_data = _protected.content;
                dialog = _public.destroyableDiv();
                
                ginipkg.renderTemplate(_protected.template, '', form_data, dialog);
                
                dialog.dialog({
                    
                    title: ((_protected.module === 'RevenueLineItems')?((_protected.mode === 'edit') ? "Update  " : "Create ") + "Revenue Line Item" :((_protected.mode === 'edit') ? "Update  " : "Create ") + jQuery.singularizeModule(_protected.module)),
                    modal: true,
                    autoOpen: false,
                    width: 580,
                    height: 'auto',
                });
                //Binds Datepicker
                $.addDatePicker(dialog.find('.date_picker'));
             
                //by default blank all form fields 
                form_fields = dialog.find('form').first();
                
                if(_protected.mode === 'add')
                {
                    dialog.find(':input').not(':input[name=company]').not(':input[name=opportunity]').not(':input[name=email1]').not(':input[name=opportunity_id]').not(':input[name=account_id]').not(':input[name=company_name]').not(':input[type=radio]').val('');
                }
            }
            key = module_name;
            status('');
            dialog.dialog("option", "buttons", {
                "Save": postCrmData,
                "Cancel": _public.close
            });
            dialog.find('.status-text').hide();
            dialog.dialog("open");
            /*
            * Code added By Rahul
            * Date : 11 Dec 2013
            * Last Modified : 12 Dec 2013
            * To add event handler on enter press on the crm_forms dialog box opened.
            */
            dialog.find('div.form-fields').first().children().first().focus();
            dialog.parent().keydown(function (event){
                if(event.keyCode == 13) {
                    if(($(':focus').is("input:text") || $(':focus').is("input:button")|| $(':focus').is("button"))){
                        if( !( ($(':focus').is("button") || $(':focus').is("input:button")) 
                        && ($(':focus').val() == 'Cancel' || $(':focus').val() == 'Close'
                        || $(':focus').text() == 'Cancel' || $(':focus').text() == 'Close' ) ) ) {
                            postCrmData();
                        }
                    }
                }
            });
            /*
            * End of code
            */

           //Code added by Mohit Gupta for dropdown options of assigned User
            if(dialog.find( "#assigned_user_id" )!=undefined){
            
                dialog.find( 'div[title~="Assigned User"] div.form-fields ,div[title~="Assigned To"] div.form-fields ').prepend( '<input type="text" name="assigned_user" id="assigned_user" value="" maxlength="25" class="">' );
                dialog.find( 'div[title~="Assigned User"] div.form-fields').prev().find("div#data_labels").html("Assigned To:");
                dialog.find("#assigned_user_id" ).attr("size","4");
                dialog.find("#assigned_user_id" ).css( "height", "96px" );
                dialog.find("#assigned_user_id" ).hide();
                users=ginipkg.sugar_config.user_list;
                dialog.find( "#assigned_user" ).keyup(function() {
                
                    var search=$('#assigned_user').val();
                    $(this).parent().find('#assigned_user_id').html("");
                    count=0;
                    for(var i in users){
                    
                        users[i]=users[i].split("(");
                        users[i] =users[i][0];
                        if(users[i].toLowerCase().match('^'+search.toLowerCase())){
                            count++;
                            console.log($(this));
                            console.log($(this).parent().find("select #assigned_user_id"));
                            $(this).parent().find("select#assigned_user_id").append($("<option value ='"+i+"'>" + users[i] + "</option>"));
                        }   
                    }
                    
                    var dropdown_value =$(this).parent().find('select#assigned_user_id').text();
                    if(dropdown_value.length > 0)
                    {
                        $(this).parent().find('#assigned_user_id').show();
                    }else{
                        $(this).parent().find('#assigned_user_id').hide();
                    }
                });
                
                dialog.find('#assigned_user').parent().find("select#assigned_user_id").change(function(){
                    $(this).parent().find("select#assigned_user_id").hide('slow');
                    dialog.find('#assigned_user').val($(this).parent().find("select#assigned_user_id").children(':selected').text());
                });
                    
                dialog.find('#assigned_user').focusout(function(){
                    var currentvalue=$('#assigned_user').val();
                    var count=0;
                    for(var i in users){
                        users[i]=users[i].split("(");
                        users[i] =users[i][0];
                        if(users[i].toLowerCase() === currentvalue.toLowerCase()){
                            count++;
                            dialog.find('#assigned_user_id').val($(this).val());
                            dialog.find('#assigned_user').val(currentvalue);
                        }   
                    }
                    if(count == 0){
                        
                        dialog.find('#assigned_user').val("");
                        dialog.find('#assigned_user_id').val("");
                    }
                    $(this).parent().find("select#assigned_user_id").hide('slow'); 
                });
              }  
            /*
            * End of code
            */
            
            //dropdown options of account name 
            if(dialog.find( "#company_name" )!=undefined){
                dialog.find( "#company_name" ).keyup(function() {
                    select = $(this).parent().find('#slide-div select');
                    var search=$('#company_name').val();
                    if(search=='')
                        $(this).parent().find('#slide-div').hide();
                    else
                        $(this).parent().find('#slide-div').show();
                    account=ginipkg.account;
                    select.html('');
                    count=0;
                    for(var i in account){
                        if(account[i].toLowerCase().match('^'+search.toLowerCase())){
                            count++;
                            $(select).append($("<option>" + account[i] + "</option>"));
                        }   
                    }
                    if(count==0)
                        $(this).parent().find('#slide-div').hide();
                    else if(count<=4)
                    {
                        $(this).parent().find('#slide-div select').css({"width":"320px","height":"auto"});
                    }
                    else{
                        $(this).parent().find('#slide-div select').css({"width":"307px","height":"100px"});
                    }
                    select.change(function(){
                        $(this).parent().hide('slow');
                        dialog.find('#company_name').val($(this).val());
                    });
                });
                dialog.mouseup(function (e)
                {
                    e.stopImmediatePropagation();
                    var container = dialog.find('#company_name');
                    var container2=dialog.find("div#slide-div select");
                    if (e.target.id=="companyNameSelect" || e.target.parentNode.className=="block") // ... nor a descendant of the container
                    {
                           
                    }
                    else{
                        dialog.find('#slide-div').hide('slow'); 
                    }
                });
            }  
            
            //Code added by mohit gupta for making opportunity name and account name readonly.
            if(_protected.module == 'RevenueLineItems')
            {
                    dialog.find( "#opportunity" ).attr('readonly','readonly');
                    dialog.find( "#company" ).attr('readonly','readonly');
            }
            
            
              
            var inputFields=dialog.find(":input");
            $(inputFields).each(function (){
                var id = this.id;
                if(id.indexOf('phone') != -1) {
                    $(this).attr('maxLength','25');
                }
            });
            if(dialog.find("div.info-dialog").attr('title')=='Cases'){
                dialog.find("div.info-dialog").find("select").each(function(){
                    $(this).find("option").first().remove();
                });
            }
            //Code to put default value 10 in probability field.
            if(dialog.find("div.info-dialog").attr('title')=='Opportunities'){
                dialog.find("input#probability").val('10');
            }
            
            /*
             * @date - 20 June 2014
             * @author - Siddarth
             * @desc - This condition works when the contact crm form is opened from the right sidebar to autofill the form.
             * */
            if(_protected.crm_contact_flag === true) {
                console.log("end : ginipkg.personal_info_of_current_user ");
                console.log(ginipkg.personal_info_of_current_user);
                dialog.find("input#first_name").val(ginipkg.personal_info_of_current_user.current_contact_info.first_name);
                dialog.find("input#last_name").val(ginipkg.personal_info_of_current_user.current_contact_info.last_name);
                dialog.find("input#phone_mobile").val(ginipkg.personal_info_of_current_user.current_contact_info.phone_number);
                dialog.find("textarea#description").val(ginipkg.personal_info_of_current_user.current_contact_info.description);
                dialog.find("input#email1").val(ginipkg.personal_info_of_current_user.current_contact_info.email);
                dialog.find("input#title").val(ginipkg.personal_info_of_current_user.current_contact_info.title);
                dialog.find("input#company_name").val(ginipkg.personal_info_of_current_user.current_contact_info.company);
                dialog.find("select#salutation option:contains(" + ginipkg.personal_info_of_current_user.current_contact_info.salutation + ")").attr('selected', 'selected');
                /*
                 * @desc - Set the title of overlay
                 * */
                dialog.dialog({
                    title: 'Contact'
                });
            }
            
            //code to set auto fill form data added on 30 october '13 , last modified on 1 nov
            if ((ginipkg.personal_info_of_current_user !== undefined ) && (_protected.mode !== 'edit') && (_protected.module != 'RevenueLineItems') && (_protected.crm_contact_flag !== true)){
                if ((activity_data !== undefined) && (activity_data.email !== undefined) && (_protected.crm_option_flag === true)) {
                    dialog.find("input#email1").val(activity_data.email);
                }
                if (dialog.find("input#email1").val() != "") {
                    //for getting the title of current overlay opened
                    var title_of_current_overlay = dialog.find("div.info-dialog").attr("title");
                    if ((title_of_current_overlay !== undefined) && (title_of_current_overlay != "")) {    
                        //for last name
                        console.log("for last name");
                        if(_protected.crm_option_flag === true)
                        {
                             dialog.find("input#last_name").val(activity_data.last_name);
                        }else if ((ginipkg.personal_info_of_current_user.current_contact_info.last_name !== undefined) && (ginipkg.personal_info_of_current_user.current_contact_info.last_name != "")) {
                            dialog.find("input#last_name").val(ginipkg.personal_info_of_current_user.current_contact_info.last_name);
                        }
                        //for first name
                        if(_protected.crm_option_flag === true)
                        {
                             dialog.find("input#first_name").val(activity_data.first_name);
                        }else if ((ginipkg.personal_info_of_current_user.current_contact_info.first_name !== undefined) && (ginipkg.personal_info_of_current_user.current_contact_info.first_name != "")) {
                            dialog.find("input#first_name").val(ginipkg.personal_info_of_current_user.current_contact_info.first_name);
                        }
                        //for name
                        if(_protected.crm_option_flag === true)
                        {
                             dialog.find("input#name").val(activity_data.first_name+" "+activity_data.last_name);
                        }else if ((ginipkg.personal_info_of_current_user.current_contact_info.name !== undefined) && (ginipkg.personal_info_of_current_user.current_contact_info.name != "")) {
                            // if ((title_of_current_overlay != "Cases") && (title_of_current_overlay != "Opportunities")) {
                                dialog.find("input#name").val(ginipkg.personal_info_of_current_user.current_contact_info.name);
                            // }
                        }
                        //for phone number
                        if(_protected.crm_option_flag === true)
                        {
                             if(ginipkg.found_user_email === activity_data.email){
                                dialog.find("input#phone_number").val(ginipkg.personal_info_of_current_user.current_contact_info.phone_number);
                            }else{
                                dialog.find("input#phone_number").val("");
                            }
                        }else if ((ginipkg.personal_info_of_current_user.current_contact_info.phone_number !== undefined) && (ginipkg.personal_info_of_current_user.current_contact_info.phone_number != "")){
                            dialog.find("input#phone_number").val(ginipkg.personal_info_of_current_user.current_contact_info.phone_number);
                        }
                        //for summary/description
                        if(_protected.crm_option_flag === true)
                        {
                             dialog.find("textarea#description").val(activity_data.description);
                        }
                        //for leads from posts
                        else if((ginipkg.source_from_post!=='') && (ginipkg.source_from_post!==undefined)){
                            if(ginipkg.link_from_post==''){
                                var post_description = "Source: "+_.camelize(ginipkg.source_from_post)+" ,Created at: "+ginipkg.time_of_post+"\n"+ginipkg.description_from_post;
                            }else{
                                var post_description = "Source: "+_.camelize(ginipkg.source_from_post)+" ,Link: "+ginipkg.link_from_post+" Created at: "+ginipkg.time_of_post+"\n"+ginipkg.description_from_post;
                            }
                            dialog.find("textarea#description").val(post_description);
                            ginipkg.source_from_post='';
                        }else if ((ginipkg.personal_info_of_current_user.current_contact_info.description !== undefined) && (ginipkg.personal_info_of_current_user.current_contact_info.description != "")){
                            if ((title_of_current_overlay != "Cases") && (title_of_current_overlay != "Opportunities")) {
                                dialog.find("textarea#description").val(ginipkg.personal_info_of_current_user.current_contact_info.description);
                            }     
                        }
                    } else {
                        // console.log("can't set autofill , cant't find the title of the overlay!")
                    }
                }
            }
            nicDescription = new nicEditor({iconsPath : img_base_url+'/nicEditorIcons.gif',maxHeight:90}).panelInstance("description");
            window.setTimeout(function () {
                //input.focus();
            }, 1);
        };
        return _public;
    };

    components.crm_activities = function (ginipkg, options) {

         var _public = {}, _protected = jQuery.extend({}, options);
        lib.destroyable(_public, _protected);
        var input, form_fields, dialog, key, form_data;
        var strDateStart = '';
        var strDateDue   = '';
        
        function status(text, spin) {
            dialog.find('.status-text').text(text).show();
            dialog.find('.comment-status').show().find('img').toggle( !! spin);
        }

        function flash(message) {
            var flashed = message;
            dialog.find('.status-text').addClass("error_msgOnForms");
            status(message);
            window.setTimeout(function () {
                if (dialog.find('.status-text').text() === flashed) {
                    dialog.find('.status-text').fadeOut('fast');
                    dialog.find('.status-text').removeClass("error_msgOnForms");
                }
            }, 3500);
        }
        
        function validateDateFormat(date) {
            var dateRegEx = /^(0[1-9]|1[012]|[1-9])[- /.](0[1-9]|[12][0-9]|3[01]|[1-9])[- /.](19|20)\d\d$/
            return (date.match(dateRegEx) !== null);
        }
        
        function validateDueDate(objFormContainer,startDate,dueDate){
            var errStatus = false;
            if( (typeof startDate != 'undefined') && (typeof startDate != 'undefined') && (startDate != "") && (dueDate != ""))
            {
                var objDateStart = objFormContainer.find(':input[name=date_start]');
                var objDateDue   = objFormContainer.find(':input[name=date_due]');
                var objStart     = new Date(startDate);
                var objDue       = new Date(dueDate);
                fsLog(objDateStart); fsLog(objDateDue);
                if(objStart!='Invalid Date'){ 
                    if(objDue!='Invalid Date'){ 
                        if(objStart>objDue){ 
                            objDateDue.addClass('error');
                            objDateDue.parent().append('<div class="error-msg">Due date and time should be greater than start date and time.</div>');
                            errStatus = true;               
                        }       
                    }else{  
                        objDateDue.addClass('error');
                        objDateDue.parent().append('<div class="error-msg">'+objDue+'</div>');
                        errStatus = true;
                    }       
                }else{
                    objDateStart.addClass('error');
                    objDateStart.parent().append('<div class="error-msg">'+objStart+'</div>');  
                    errStatus = true;       
                }   
            }
            return errStatus;
        }

        function validateFormData(form_fields)
        { 
            var error            = false;
            var form_fields      = form_fields[0];
            var objFormContainer = jQuery('#general-form-container');
            objFormContainer.find(':input').removeClass('error');
            objFormContainer.find(':input').parent().find('.error-msg').remove();

            //fsLog('Inside validateFormData ...');   fsLog(objFormContainer);
            
            jQuery.each(form_fields, function(index, field) { 
                if(objFormContainer.find("div.info-dialog").attr("title")=='emails'){
                    id=jQuery(this).attr('id');
                    if(((id).indexOf('name')!=-1)){
                        id=jQuery(this).attr('id');
                        this.value=$.stripHTMLS(this.value);
                        if((jQuery(this).val() == '') && (jQuery(this).hasClass('required') === true) )
                        {
                            error = true;
                            var errMsg = '';
                            jQuery(this).addClass('error');
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                        }
                    }
           
                } else{
                    id=jQuery(this).attr('id');
                    this.value=$.stripHTMLS(this.value);
                    this.value=(this.value).replace(/\"/g,"'");
                    if((jQuery(this).val() == '') && (jQuery(this).hasClass('required') === true) ) {
                        error = true;
                        var errMsg = '';
                        jQuery(this).addClass('error');
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    } else if(((id).indexOf('email')!=-1) && jQuery(this).val() != '') { //validating email
                        if(ValidateEmailByValue(jQuery(this).val()) == false) {
                            var fieldName;
                            fieldName=$(this).parent().parent().find("label div").text();
                            fieldName=fieldName.replace(':','.');
                            fieldName=fieldName.replace('*','');
                            error = true;
                            jQuery(this).addClass('error');
                            var errMsg = 'Please enter valid '+fieldName;
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                        }
                    } else if(((id).indexOf('phone')!=-1) && jQuery(this).val() != '') {
                        if($.validatePhoneField(jQuery(this).val()) == false) {
                            var fieldName;
                            fieldName=$(this).parent().parent().find("label div").text();
                            fieldName=fieldName.replace(':','.');
                            fieldName=fieldName.replace('*','');
                            error = true;
                            jQuery(this).addClass('error');
                            var errMsg = 'Please enter valid '+fieldName;
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                        }
                    } else if(((id).indexOf('amount')!=-1 || (id).indexOf('revenue')!=-1) && jQuery(this).val() != '') {
                        if($.validateAmountField(jQuery(this).val()) == false) {
                            var fieldName;
                            fieldName=$(this).parent().parent().find("label div").text();
                            fieldName=fieldName.replace(':','.');
                            fieldName=fieldName.replace('*','');
                            error = true;
                            jQuery(this).addClass('error');
                            var errMsg = 'Please enter valid '+fieldName;
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                        }
                    } else  if(((id).indexOf('hours')!=-1) && jQuery(this).val() != '') {
                        if($.validateTimeInHoursField(jQuery(this).val()) == false) {
                            var fieldName;
                            fieldName=$(this).parent().parent().find("label div").text();
                            fieldName=fieldName.replace(':','.');
                            fieldName=fieldName.replace('*','');
                            error = true;
                            jQuery(this).addClass('error');
                            var errMsg = 'Please enter valid '+fieldName;
                            jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                        }
                    }
                    else
                    {

                    }
                 
                } 
                
            });

            if( _protected.module == 'tasks' && error == false ){
                var strDateStart    =   objFormContainer.find(':input[name=date_start]').val();
                var strDateDue      =   objFormContainer.find(':input[name=date_due]').val();
                var dateStartHour   =   (objFormContainer.find(':input[name=time_hours]').val() == '')      ? '00' : objFormContainer.find(':input[name=time_hours]').val();
                var dateStartMinute =   (objFormContainer.find(':input[name=time_minutes]').val() == '')    ? '00' : objFormContainer.find(':input[name=time_minutes]').val();
                var dateStartFormat =   (objFormContainer.find(':input[name=time_format]').val() == '')     ? 'AM' : objFormContainer.find(':input[name=time_format]').val();
                var dateDueHour     =   (objFormContainer.find(':input[name=due_time_hours]').val() == '')  ? '00' : objFormContainer.find(':input[name=due_time_hours]').val();
                var dateDueMinutes  =   (objFormContainer.find(':input[name=due_time_minutes]').val() == '')? '00' : objFormContainer.find(':input[name=due_time_minutes]').val();
                var dateDueFormat   =   (objFormContainer.find(':input[name=due_time_format]').val() == '') ? 'AM' : objFormContainer.find(':input[name=due_time_format]').val();
                var startDate   = strDateStart + ' ' + dateStartHour +':' + dateStartMinute +':' +'00' +' '+ dateStartFormat;
                var dueDate     = strDateDue + ' ' + dateDueHour +':' + dateDueMinutes +':' +'00' +' '+ dateDueFormat;
                error = validateDueDate(objFormContainer,startDate,dueDate);
            }
            if(error == false ){
                return true;
            }else{
                return false;
            }  
        }

       //function to validate forms:-Tasks,Calls,Meetings,Notes
        function postActivityData() {
            var statusError = '';
            var frmPostData = {};
            var dialogContainer = dialog[0];
            statusError = validateFormData(form_fields);
            if(statusError === true) {
                $.each(jQuery(form_fields).serializeArray(), function(index,value) { 
                    frmPostData[value.name] = value.value;
                    frmPostData['moduleName'] = _protected.module;
                });
                status("Saving data ...", true);
                jQuery(dialogContainer).parent().find( "form div.form-fields" ).each(function(){
                    $(this).children().attr("disabled",true);
                    $(this).children("a").hide();
                });
                jQuery(dialogContainer).parent().find('.submit-box').hide();
                
                ginipkg.request({
                    path: '/crm.php?',
                    server: 'crm',    
                    //jsonp: 'true',
                    data: {
                        data:frmPostData,
                        email: ginipkg.found_user_email,
                        requestType:'CRM',
                        moduleName:_.capitalize(_protected.module),
                         mode:_protected.mode =='add'?'insert':'update',
                        has_crm_premium: (ginipkg.has_crm_premium !== undefined) ? ginipkg.has_crm_premium : false,
                        _method: 'post',
                        subType:'save',
                        parent_type:frmPostData['parent_type'],
                        parent_id:frmPostData['parent_id'],
                        skipThis :true,
                        userName : ginipkg.sugar_config.crm_user,
                    },
                    success: function (response) {
                        console.log("archive mail response successfull");
                        var respStatus = response.result.status;
                        if(respStatus === 'success' && _protected.module== "tasks") {
                            ginipkg.task_bar.addEditTasks(response.result.recordData,frmPostData,_protected.mode);
                        }
                        jQuery(dialogContainer).parent().find('.submit-box').show();
                         
                        if(respStatus === 'success') {
                            dialog.dialog("option", "buttons", {
                               
                            });
                            if(_protected.module === 'RevenueLineItems') {
                                status('Revenue Line Item saved successfully.');
                            } else {
                                status(jQuery.singularizeModule(_protected.module)+' saved successfully.');
                            }
                            jQuery(dialogContainer).parent().find( "img").remove();
                            $("div.top-legends").html("");
                            jQuery(dialogContainer).parent().find( "form input:text" ).closest("div").each(function(){
                                $(this).siblings().find("span").remove()
                                $(this).css("width","60%");
                                $(this).css("word-break","break-all");
                                var str=$(this).find("input").val();
                                $(this).find("input").remove();
                                $(this).find("a").remove();
                                if(dialog.find("div.info-dialog").attr('title')=='emails'){
                                    str=str.replace(/</g,"&lt;").replace(/>/g,"&gt;");
                                    $(this).append("<label style='line-height: 2;font-size: 14px;'></label>");
                                    $(this).find("label").text(str);
                                }else{
                                    $(this).append("<label style='line-height: 2;font-size: 14px;'></label>");
                                    $(this).find("label").text(str);
                                }
                            });
                            
                            
                            jQuery(dialogContainer).parent().find( "form select" ).closest("div").each(function(){
                                $(this).siblings().find("span").remove()
                                var parent=$(this);
                                $(this).css("width","60%");
                                $(this).css("word-break","break-all");
                                var str;
                                $(this).find("select").each(function(){
                                    if(($(this).attr('id')).indexOf('minute')!=-1){
                                        str=": &nbsp;&nbsp;";
                                        str+=$(this).val();
                                    }
                                    /*
                                    * Code added By Gaurav
                                    * Date : 23 Jan 2014
                                    * for not showing this select content.
                                    */
                                    else if($(this).attr("id")==""){
                                        str='';
                                    }
                                    else
                                        str=$(this).val();
                                    $(this).remove();
                                    if(dialog.find("div.info-dialog").attr('title')=='emails'){
                                        str=str.replace(/</g,"&lt;").replace(/>/g,"&gt;");
                                        parent.append("<label style='line-height: 2;font-size: 14px;'>"+str+"</label>");
                                    } else
                                        parent.append("<label style='line-height: 2;font-size: 14px;'>"+str+"</label>")
                                });
                            });
                            jQuery(dialogContainer).parent().find( "form textarea" ).closest("div").each(function(){
                                $(this).siblings().find("span").remove()
                                $(this).css("width","60%");
                                $(this).css("word-break","break-all");
                                    var str=$(this).find("textarea").val();
                                    $(this).find("textarea").remove();
                                if(dialog.find("div.info-dialog").attr('title')=='emails'){
                                        str=str.replace(/</g,"&lt;").replace(/>/g,"&gt;");
                                        $(this).append("<label style='line-height: 2;font-size: 14px;'>"+str+"</label>");
                                       }else
                                $(this).append("<label style='line-height: 2;font-size: 14px;'>"+str+"</label>")
                            });
                        } else {
                            flash('Sorry, something broke! Please try again later');
                        }
                    },
                    error: function (data, text_status, xhr) {
                        jQuery(dialogContainer).parent().find( "form div.form-fields" ).each(function(){
                        $(this).children().removeAttr("disabled");
                        $(this).children("a").show();
                         });
                        jQuery(dialogContainer).parent().find('.submit-box').show();
                        flash('Sorry, something broke! Please try again later');
                    }
                });
            return false;
            } 
        }

        _public.close = function () {
            dialog.dialog("close");
        };

        _public.edit = function () {
            
            if (!dialog) {
                var activity_configuration = _.toArray(_protected.sugar_config.configured_module_forms[_.camelize(_protected.module)].fieldName.editView);
                var activity_data = _protected.context_data;
                // Pushing CRM Activities record data into fields
                jQuery.each(activity_configuration, function(i, field){
                    if(activity_data && activity_data[this.field_name] !== undefined) {
                        this.field_value =  (activity_data[this.field_name]).replace(/\\/g, "");
                    } else {
                        this.field_value =  (this.field_value == "" || this.field_value == null) ? '' : this.field_value;
                    }
                    
                    if( (this.field_type == 'date' || this.field_type == 'text' || this.field_type == 'select') &&  this.dependency !== undefined )
                    {
                        var dependency = _.toArray(this.dependency);
                        this.dependency=dependency;
                        if(_protected.mode === 'edit' && _protected.module !== 'emails' ){
                            jQuery.each(this.dependency, function(j, dField){
                                this.field_value =  activity_data[this.field_name];
                            });
                        }
                        if(_protected.mode === 'add' && _protected.module === 'tasks' ){
                            jQuery.each(this.dependency, function(j, dField){
                                this.field_value =  activity_data[this.field_name];
                            });
                        }
                    }
                    this.required =  (this.required === "true" || this.required === true) ? true : false;
                    activity_configuration[i] = this;

                });
                
                
                form_data = {'mode':_protected.mode, 'module':_protected.module, 'module_config':activity_configuration};
                
                dialog = _public.destroyableDiv();
                
                ginipkg.renderTemplate(_protected.template, '', form_data, dialog);
                dialog.dialog({
                    title: ((_protected.module === 'RevenueLineItems')?((_protected.mode === 'edit') ? "Update  " : "Create ") +"Revenue Line Item" :((_protected.mode === 'edit') ? "Update  " : "Create ") + jQuery.singularizeModule(_protected.module)),
                    modal: true,
                    autoOpen: false,
                    width: 580,
                    height: 'auto',
                });
                
               if(_protected.mode === 'add' && _protected.module !== 'emails' )
               {
                    $.addDatePicker(dialog.find('.date_picker'));
                    dialog.find(':input').not(':input[name=parent_id]').not(':input[name=parent_type]').not(':input[name=parent_name]').val('');
               }else{
                   $.addDatePicker(dialog.find('.date_picker'));
               }
                /*
                * code added by siddarth on 23 May 2014
                * @desc - hide the body html field from the archive mail form opened from the crm section 
                */
                if (_protected.module == "emails") {
                    dialog.find("div[title='Body HTML']").hide();
                }
               form_fields = dialog.find('form').first();
            }
            
            status('');
            dialog.dialog("option", "buttons", {
                "Save": postActivityData,
                "Cancel": _public.close
            });
            dialog.find('.status-text').hide();
            dialog.dialog("open");
            /*
            * Code added By Gaurav
            * Date : 23 Jan 2014
            */

            // showing related records on key up in task bar.
            if($("select#parent_type").val()=='' || ($("select#parent_type").val()===undefined)){
                  $("select#parent_type").parent().find("#parent_name").attr("disabled","true");
            }
              else{
                  $("select#parent_type").parent().find("#parent_name").removeAttr("disabled");
            }
            $("select#parent_type").parent().append("<div class='relatedrecords' ><select size='4' style='display:none'></select></div>");
            $("select#parent_type").change(function(){
                if($(this).val()=='' || ($(this).val()===undefined)){
                    $(this).parent().find("#parent_name").attr("disabled","true");
                } else{
                  $(this).parent().find("#parent_name").removeAttr("disabled");
                }
            });

            dialog.find( "#parent_name" ).keyup(function() {
                select = $(this).parent().find("div.relatedrecords select");
                var parentType='';
                parentType=$(this).parent().find("select#parent_type").val();
                if(parentType!='' && parentType!==undefined){
                    var search=$('#parent_name').val();
                    if(search=='')
                        $(this).parent().find('div.relatedrecords select').css("display","none");
                    else
                        $(this).parent().find('div.relatedrecords select').css("display","block");
                    var records='';
                    var flag=0;
                    console.log(ginipkg.account);
                    if(parentType=='Accounts'){
                        records=ginipkg.accounts_name;
                    } else if(parentType=='Leads'){
                        records=ginipkg.leads_name;
                        flag=1;
                    } else if(parentType=='Contacts'){
                        records= ginipkg.contacts_name;
                        flag=1;
                    } else if(parentType=='Opportunities'){
                        records=ginipkg.opportunities_name;
                    } else if(parentType=='Cases'){
                        records=ginipkg.cases_name
                    }
                    select.html('');
                    count=0;
                    for(var i in records){
                        var name='';
                        if(flag==1)
                            name=records[i].first_name+" "+records[i].last_name;
                        else
                            name=records[i].name;
                        if((name.toLowerCase()).match("^"+(search.toLowerCase()))){
                            count++;
                            $(select).append($("<option value="+records[i].id+">" + name +"</span></option>"));
                        }
                    }
                    if(count==0)
                        $(this).parent().find('div.relatedrecords select').css("display","none");
                    else if(count<=4) {
                        $(this).parent().find('div.relatedrecords select').css({"height":"auto"});
                        $(this).parent().find('div.relatedrecords').css({"height":"57px;"});
                    } else{
                        $(this).parent().find('div.relatedrecords select').css({"width":"307px","height":"100px"});
                    }
                    select.change(function(){
                        dialog.find('#parent_name').val( $(this).parent().parent().find('div.relatedrecords select option:selected').html());
                        dialog.find('#parent_id').val($(this).val());
                    });
                    dialog.mouseup(function (e) {
                        e.stopImmediatePropagation();
                        var container = dialog.find('div.relatedrecords select');
                        var container2=dialog.find("div.relatedrecords select");
                       
                        if (e.target.id=="parent_name" || e.target.parentNode.className=="relatedrecords") // ... nor a descendant of the container
                        {
                            //Nothing to do.
                        }
                        else{
                            $(container2).hide();
                        }
                    });
                    dialog.find('#parent_name').focusout(function(){
                        var recordName='';
                        var recordId='';
                        for(var i in records){
                            var name='';
                            if(flag==1)
                                name=records[i].last_name+" "+records[i].first_name
                            else
                                name=records[i].name;
                            if(name==$(this).val()){
                                recordName=name;
                                recordId=records[i].id;
                            }
                        }
                        if(recordName!=''){
                            dialog.find('#parent_id').val(records[i].id);
                        } else {
                            dialog.find('#parent_name').val("");
                        }
                    });
                }
            });
            var tempUsersList=ginipkg.sugar_config.user_list;
            var usersList=new Array;
            var arrayIndex=0;
            $.each(tempUsersList,function(key,value){
                usersList[arrayIndex]={};
                usersList[arrayIndex].userId=key;
                var dName=value.split("(");
                var uName=dName[1].split(")");
                uName=uName[0];
                dName=dName[0];
                usersList[arrayIndex].displayName=dName;
                usersList[arrayIndex].userName=uName;
                arrayIndex++;
            });
            $("#assigned_user_name").parent().append("<div class='assignedUsers' ><select size='4' style='display:none'></select></div>");
              
            dialog.find("#assigned_user_name").keyup(function(){
                var search=$(this).val();
                var selectbox=$(this).parent().find("div.assignedUsers select");
                selectbox.html('');
                var foundFlag=0;
                $.each(usersList,function(key,value){
                   if(((value.displayName).toLowerCase()).match("^"+(search.toLowerCase())))
                    {
                        $(selectbox).append($("<option value="+value.userId+">" + value.displayName +"</option>"));
                        foundFlag=1;
                    }
                });
                if(foundFlag==1)
                {
                    $(this).parent().find('div.assignedUsers select').css({"height":"auto"});
                    $(this).parent().find('div.assignedUsers').css({"height":"57px;"});
                    $(this).parent().find('div.assignedUsers select').show();
                } else {
                     $(this).parent().find('div.assignedUsers select').hide();
                }
            });
            dialog.find("#assigned_user_name").parent().find('div.assignedUsers select').change(function(){
                dialog.find('#assigned_user_name').val( $(this).parent().parent().find('div.assignedUsers select option:selected').html());
                dialog.find('#assigned_user_id').val($(this).val());
                $(this).hide();
            });
            dialog.mouseup(function (e) {
                e.stopImmediatePropagation();
                var container = dialog.find('div.assignedUsers select');
                if (e.target.id=="assigned_user_name" || e.target.parentNode.className=="assignedUsers") // ... nor a descendant of the container
                {
                    //Nothing to do.
                }
                else
                {
                   $(container).hide(); 
                }
                 var container2=dialog.find("div.relatedrecords select");
               
                if (e.target.id=="parent_name" || e.target.parentNode.className=="relatedrecords") // ... nor a descendant of the container
                {
                    //Nothing to do.   
                }
                else{
                    $(container2).hide();
                }
            });
            
            /*
            * Code added By Rahul
            * Date : 11 Dec 2013
            * Last Modified : 12 Dec 2013
            * To add event handler on enter press on the crm_forms_activity dialog box opened.
            */

            dialog.find('div.form-fields').first().children().first().focus();
            dialog.parent().keydown(function (event){
                if(event.keyCode == 13) {
                    if(!($(':focus').is("select") || $(':focus').is("textarea"))){
                        if( !( ($(':focus').is("button") || $(':focus').is("input:button")) 
                        && ($(':focus').val() == 'Cancel' || $(':focus').val() == 'Close'
                        || $(':focus').text() == 'Cancel' || $(':focus').text() == 'Close' ) ) ) {
                            postActivityData();
                        }
                    }
                }
            });
            /*
            * End of code.
            */

            if(dialog.find("div.info-dialog").attr('title')=='emails'){
                $("div.form-row").each(function() {
                    if(!($(this).find("div.form-fields").children().attr('id')=='name'))
                    $(this).find("div.form-fields").children().attr('readonly','true');
                });
            }
            if(dialog.find("div.info-dialog").attr('title')=='Cases'){
                dialog.find("div.info-dialog").find("select").each(function(){
                    $(this).find("option").first().remove();
                });
            }
            $(".form-data-container ui-dialog-content ui-widget-content").css({'min-height': '31px','height': 'auto','max-height':'650px', 'overflow-y':'auto'});
            window.setTimeout(function () {
                //input.focus();
            }, 1);
        };
        return _public;
    };

    function present(value) {
        if (typeof value === 'object') {
            for (var property in value) {
                if (value.hasOwnProperty(property)) {
                    return true;
                }
            }
            return false;
        } else {
            return !!value;
        }
    }

    helpers.format_location = function (params, location) {
        if (present(location)) {
            return helpers.tracked_link.call(this, params, 'http://maps.google.com/maps?q=' + encodeURIComponent(location), 'Location link clicked', 'location', function () {
                return location.replace(/^([^,]*,[^,]*),.*/, '$1');
            });
        } else {
            return '';
        }
    };

    client.logRequestErrors = function (ginipkg) {
        function logError(data, params, error_info) {
            var message = app_name + ' error: request ';
            if (params && (params.url || params.path)) {
                message += 'to ' + (params.url || params.path) + ' ';
            }
            try {
                message += 'failed ' + JSON.stringify(error_info);
            } catch (e) {
                message += 'failed for an unserialisable reason';
            }
            fsLog(message);
        }
        ginipkg.request.onError(logError).onFailure(logError);
    };


    client.request = function (ginipkg) {

        ginipkg.request = function (original_params) {
            var params = _(original_params).clone(),
                success_callback = params.success && loggily('request.success.' + (params.log_name || params.success.name), params.success),
                error_callback = params.error && loggily('request.error.' + (params.log_name || params.error.name), params.error),
                complete_callback = params.complete && loggily('request.complete.' + (params.log_name || params.complete.name), params.complete);
            delete params.success;
            delete params.error;
            delete params.complete;
            if (params.path) {
                
                var server = "";
                if(params.server === 'profiles'){
                    server = 'profiles_base_url';
                }
                else if(params.server === 'crm'){ 
                    server = 'crm_base_url';
                }
                else if(params.server === 'services'){ 
                    server = 'services_base_url';
                }
                else{
                    server = 'ginipkg_base_url';
                }
                
                params.url = ginipkg[server] + params.path;
                delete params.path;
                delete params.server;
            }
            if (!params.data) {
                params.data = {};
            } else if (typeof params.data !== 'object') {
                throw 'ginipkg.request unsupported data type: ' + typeof (params.data);
            }
            params.data.userEmail = ginipkg.user_email;
            params.data.userDomain = ginipkg.user_domain;             
            params.data.clientVersion = ginipkg.clientVersion();
            params.data.clientSource = ginipkg.client_source;
            
            //params.data.client_stamp = ginipkg.clientCodeTimestamp;
            params.error = function (xhr, textstatus, error) {
                var data = {}, xhr_status = xhr.readyState === 4 ? xhr.status : 0,
                    xhr_status_text = xhr.readyState === 4 ? xhr.textStatus : 'undefined';
                if (xhr && xhr.response && xhr.getResponseHeader && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("json") >= 0) {
                    try {
                        data = jQuery.parseJSON(xhr.response);
                    } catch (err) {
                        fsLog('Response declared as ' + xhr.getResponseHeader("Content-Type") + ' but failed to parse: ' + err);
                    }
                }
                var error_info = {
                    textstatus: textstatus,
                    error: error,
                    xhr_status: xhr_status,
                    xhr_status_text: xhr_status_text,
                    error_code: data.error_code
                };
                if (xhr_status === 0) {
                    ginipkg.request.triggerFailure(data, original_params, error_info);
                } else {
                    ginipkg.request.triggerError(data, original_params, error_info);
                }
                if (_.isFunction(error_callback)) {
                    error_callback.apply(this, [data, textstatus, xhr, error]);
                }
                if (_.isFunction(complete_callback)) {
                    complete_callback.apply(this, [data, textstatus, xhr, error]);
                }
            };
            if (params.jsonp) {
                  
                delete params.jsonp;
                params.success = function (data) {
                    if (data && typeof (data.status) === 'number' && data.status >= 400) {
                        ginipkg.request.triggerError(data, original_params, {
                            status: data.status,
                            error_code: data.error_code
                        });
                        if (_.isFunction(error_callback)) {
                            error_callback.apply(this, arguments);
                        }
                    } else {
                        ginipkg.request.triggerSuccess(data, original_params);
                        if (_.isFunction(success_callback)) {
                            success_callback.apply(this, arguments);
                        }
                    }
                    if (_.isFunction(complete_callback)) {
                        complete_callback.apply(this, arguments);
                    }
                };
                jQuery.jsonp(params);
            } else {
                params.url = params.url.replace(/([?&])_method=(\w+)/i, function (match, separator, method) {
                    params.data._method = method;
                    return separator;
                });
                if (params.data._method && params.data._method.toLowerCase() !== 'get') {
                    params.type = 'POST';
                }
                if (ginipkg.request_mechanism === 'post_only') {
                
                    if (!params.type || params.type.toUpperCase() === 'GET') {
                        params.data._method = 'GET';
                        params.type = 'POST';
                    }
                    if (ginipkg.session_token) {
                        params.data.session_token = ginipkg.session_token;
                    }
                    params.data.authenticity_token = ginipkg.authenticity_token;
                    params.beforeSend = function (xhr) {
                        xhr.withCredentials = true;
                    };
                } else {
                    //Nothing to do.
                }
                params.success = function (data, textstatus, xhr) {
                    var position = $.inArray(request, ginipkg.requestQueue);
                    if ( ~position ) {
                        ginipkg.requestQueue.splice(position, 1);
                    }
                    if (xhr.readyState !== 4 || xhr.status === 0) {
                        params.error(xhr, 'network_failure');
                    } else {
                        ginipkg.request.triggerSuccess(data, original_params);
                        if (success_callback) {
                            success_callback.apply(this, arguments);
                        }
                        if (complete_callback) {
                            complete_callback.apply(this, arguments);
                        }
                    }
                };
                try {
                    if(ginipkg.requestQueue === undefined){
                        ginipkg.requestQueue = new Array();
                    }
                    if(ginipkg.exceptionQueue === undefined){
                       ginipkg.exceptionQueue = new Array();
                    }
                    if(ginipkg.attachmentQueue === undefined){
                       ginipkg.attachmentQueue = new Array();
                    }
                    var request = jQuery.ajax(params);
                    if(params.data.skipThis !== true) {
                        if(params.data.subType == 'contact_exist_multiple'){
                            ginipkg.exceptionQueue.push(request);
                        } else if(params.data.fetchingAttachment == '1'){
                            ginipkg.attachmentQueue.push(request);
                        } else {
                            ginipkg.requestQueue.push(request);
                        }
                    }
                } catch (e) {
                    if (e && e.result === 0x805e0006) {
                        var data = {
                            error_code: 'blocked_locally'
                        }, error_info = {
                                textstatus: '',
                                error: e,
                                xhr_status: 0,
                                xhr_status_text: 'undefined',
                                error_code: data.error_code
                            };
                        ginipkg.request.triggerFailure(data, original_params, error_info);
                        if (_.isFunction(error_callback)) {
                            error_callback.apply(this, [data, error_info.textstatus, {},
                                error_info.error
                            ]);
                        }
                        if (_.isFunction(complete_callback)) {
                            complete_callback.apply(this, [data, error_info.textstatus, {},
                                error_info.error
                            ]);
                        }
                    } else {
                        throw e;
                    }
                }
            }
        };
        lib.hasEvent(ginipkg.request, {}, 'success', 'error', 'failure');
        ginipkg.request.onSuccess(loggily("request.success.authk", function (response) {
            if (response && response.authenticated_as !== undefined) {
                response.user_preferences = ginipkg.user_preferences.updateFromServer(response.user_preferences);
                ginipkg.claimed_emails = response.claimed_emails;
                ginipkg.authorizations.setActive(response.active_auths);
                ginipkg.has_ads = response.has_ads;
            }
        }));
    };


    client.version = function (ginipkg) {
        ginipkg.isGmail = function () {
            return false;
        };
        ginipkg.isMailplane = function () {
            return !!window.top.MailplaneGmailInitialized;
        };
        ginipkg.isFirefox = function () {
            return !!(navigator.userAgent && navigator.userAgent.match(/Firefox|Iceweasel|Shiretoko|Namoroka|Minefield/));
        };

        function mailplaneVersion() {
            return window.top.MailplaneVersion || 0;
        }
        ginipkg.clientVersion = function () {
            return ginipkg.client_version_base + (ginipkg.isMailplane() ? " (mailplane " + (mailplaneVersion()) + ")" : "");
        };

        function isOldMailplane() {
            return ginipkg.isGmail() && ginipkg.isMailplane() && (mailplaneVersion() < 1544);
        }
        ginipkg.supports = function (functionality) {
            switch (functionality) {
            case 'authorizing':
                return !isOldMailplane();
            case 'people_widget':
                return ginipkg.isGmail();
            case 'overflow_ellipsis':
                return !ginipkg.isFirefox();
            default:
                return false;
            }
        };
    };

    
    components.activeView = function (view_type, active_view_element, ginipkg) {

        var _public = {}, _protected = {};
        _public.element = active_view_element;
        _public.viewType = function () {
            return view_type;
        };
        _public.isComposeView = function () {
            return view_type === 'co';
        };
        _public.isConversationView = function () {
            return view_type === 'cv';
        };
        _public.isThreadListView = function () {
            return view_type === 'tl';
        };
        _public.isShowingConversation = function () {
            return _public.isConversationView() || (_public.isThreadListView() && ginipkg.host_environment.isPreviewPaneActive() && !_public.showingPlaceholderMessage());
        };
        _public.showingPlaceholderMessage = function () {
            return !!jQuery("div.nH.Pj", active_view_element).length;
        };
        _public.isComposePopout = function () {
            return jQuery(window.top.document).find('iframe').length === 1 || jQuery.parseQuery(window.top.location.search).view === "cm";
        };
        _public.topMenu = function () {
            return jQuery('div.iI.D.E > div.iH > div', active_view_element);
        };
        _public.bottomMenu = function () {
            return jQuery('div.iE.D.E > div.iH > div', active_view_element);
        };
        _public.__defineGetter__('subject', function () {
            return jQuery('h1.ha .hP', active_view_element).text();
        });
        _public.messages = function () {
            return jQuery('.Bk', active_view_element).filter(':visible');
        };
        return _public;
    };


    client.preferences = function (ginipkg) {
        var _public = {}, _protected = {}, preferences_from_server = {};

        function preferenceType(preference_value) {
            var map = {
                "number": "integer",
                "string": "string",
                "boolean": "bool"
            };
            return map[typeof preference_value];
        }
        ginipkg.inBeta = function (beta_name) {
            return !!_public[beta_name + "_private_beta_member"];
        };
        ginipkg.payingFor = function (feature_name) {
            return _public['paying_for_' + feature_name];
        };
        ginipkg.getPreference = function (preference_name) {
            return _public[preference_name];
        };
        ginipkg.setPreference = function (params_or_name, undefined_or_value) {
            var params, preference_name, preference_value, preference_type;
            (loggily("preferences.set", function () {
                if ("object" === typeof params_or_name) {
                    params = params_or_name;
                    preference_name = params.preference_name;
                    preference_value = params.preference_value;
                    delete params.preference_name;
                    delete params.preference_value;
                } else {
                    params = {};
                    preference_name = params_or_name;
                    preference_value = undefined_or_value;
                }
                if (preferences_from_server[preference_name] === preference_value) {
                    return;
                }
                if (undefined === preference_name) {
                    throw "Must specify preference_name";
                }
                if (undefined === preference_value) {
                    throw "Must specify preference_value";
                }
                preference_type = preferenceType(preference_value);
                if (undefined === preference_type) {
                    throw "Unrecognised typeof preference_value: must be number, string, or boolean.";
                }
                params.path = "/preferences/set/" + preference_name;
                params.data = {
                    _method: 'post',
                    value: preference_type + ":" + preference_value
                };
                ginipkg.request(params);
            })());
        };

        function syncAutomaticPreferences() {
            if (_protected.synced_automatic_preferences) {
                return;
            }
            _protected.synced_automatic_preferences = true;
        }
        _public.updateFromServer = function (user_preferences) {
            if (user_preferences) {
                preferences_from_server = user_preferences;
                _(user_preferences).each(function (value, pref) {
                    if (!_public.__lookupGetter__(pref)) {
                        _public.__defineGetter__(pref, function () {
                            return preferences_from_server[pref];
                        });
                    }
                });
                syncAutomaticPreferences();
                return _public;
            } else {
                return user_preferences;
            }
        };
        _public.__defineGetter__('locale', function () {
            return ginipkg.host_environment.guessLocale();
        });
        _public.__defineGetter__('utc_offset', function () {
            return ginipkg.host_environment.utc_offset || 0;
        });
        return _public;
    };

    client.utils = function (ginipkg) {
        ginipkg.jQuery = jQuery;
        ginipkg.RE_TWITTER_PROFILE_LINK = /^https?:\/\/twitter\.com\/(?:#!\/)?([a-z0-9_]+)(\?.*)?$/i;
        ginipkg.RE_REMINDER_EMAIL = new RegExp('(?:"?Remind ([^"]+)"? <)?([^\\s@<>]+@(?:' + _(ginipkg.reminder_hosts).map(_.regexpEscape).join('|') + '))\\b>?', 'i');
        ginipkg.RE_REMINDER_SENDER = new RegExp("reminders@(?:" + _(ginipkg.reminder_hosts).map(_.regexpEscape).join('|') + ")");
        ginipkg.cors_compatible = (XMLHttpRequest && (new XMLHttpRequest()).withCredentials !== undefined);
        ginipkg.templates = client.templates;
        ginipkg.template_helpers = helpers;
        ginipkg.sidebar_callbacks = client.sidebar_callbacks;

        ginipkg.renderTemplate = function (template_name, contact_data, context_data, target_element, section) {
            return components.templateRenderer(ginipkg, template_name, contact_data, context_data || contact_data, target_element, section);
        };
        ginipkg.reloadSideBar = function () {
           var display_name = 'Reload SideBar'  
           ginipkg.sidebar.clearContents();
           ginipkg.sidebar.updateSidebarFromEmail(ginipkg.found_user_email,{display_name:display_name,force:true});
        };
        ginipkg.clearCacheThoroughly = function () {
            ginipkg.lookup_service.clearCache();
            ginipkg.refreshLoginStatus(ginipkg.sidebar.refreshSidebar);
        };
        ginipkg.twitterUsernameFromURL = function (url) {
            var matches = url && url.match(ginipkg.RE_TWITTER_PROFILE_LINK),
                bogus_user_re = /about|account|blog|business|devices|direct_messages|download|help|home|jobs|log(out|in)|messages|privacy|search|share|settings|suspended|who_to_follow/;
            if (matches && !matches[1].match(bogus_user_re)) {
                return matches[1];
            }
        };
        ginipkg.showLogs = function (e) {
            jQuery('<div/>').html(jQuery('<textarea/>').css({
                width: 770,
                height: 450
            }).text(navigator.userAgent + '\n' + ginipkg.log_history.join('\n')).click(function () {
                this.focus();
                this.select();
            })).dialog({
                modal: false,
                width: 800,
                height: 500,
                title: 'Please click, copy and paste into an email to support@sugargini.com'
            });
        };
    };

    client.utils.addGiniMethodsToJQuery = function (ginipkg, jQuery) {
        jQuery.proxyURL = function (url) {
            if (url && url.match(/^http:\/\/a[0-5]\.twimg\.com\//)) {
                return url.replace("http://a", "https://si");
            } else {
                return ginipkg.ginipkg_proxy_url + '?url=' + encodeURIComponent(url);
            }
        };
        jQuery.wrapMailplaneURL = function (url) {
            return ginipkg.redirect_url + '?url=' + encodeURIComponent(url);
        };
        jQuery.ginipkg_base_url = function () {  //Extension server URL
            return ginipkg.ginipkg_base_url;
        };
        jQuery.image_url = function (relative_path) {   //Extension server URL + Image Path
            if (relative_path === null) {
                return null;
            }
            var image_path = relative_path;
            if (relative_path.indexOf('/images/') === -1) {
                image_path = "/images/" + relative_path;
            }
            return ginipkg.ginipkg_base_url + image_path;
        };
        jQuery.fn.useErrorImage = function (backup_image_path) {
            return this.error(function () {
                jQuery(this).attr('src', jQuery.image_url(backup_image_path)).unbind('error');
            });
        };
        jQuery.fn.textNodes = function () {
            return this.contents().filter(function () {
                return this.nodeType === 3;
            });
        };
        jQuery.jQueryFor = function (context, isolated) {
            if (!jQuery.isArray(context)) {
                context = [context];
            }
            var jq_object = isolated ? freshJQuery() : jQuery;
            if (isolated) {
                client.utils.addGiniMethodsToJQuery(ginipkg, jq_object);
            }

            function jQueryScoped(selector, user_context) {
                if (typeof selector === 'string' && !/<[\w\W]+>/.test(selector) && typeof user_context === 'undefined') {
                    var newJQ = new jq_object.fn.init(jq_object.concatMap(context, function (context_item) {
                        return jq_object(selector, context_item).toArray();
                    }));
                    newJQ.selector = selector;
                    newJQ.context = context;
                    return newJQ;
                } else {
                    return new jq_object.fn.init(selector, user_context);
                }
            }
            for (var attr in jq_object) {
                if (jq_object.hasOwnProperty(attr)) {
                    jQueryScoped[attr] = jq_object[attr];
                }
            }
            jQueryScoped.ginipkgContainer = jq_object(context);
            jQueryScoped.isReady = true;
            return jQueryScoped;
        };
    };

    client.previewPane = function (ginipkg, _public) {
        _public.__defineGetter__('preview_pane_container', loggily("gmail.preview_pane_container", function () {
            var found = jQuery(".dGpsQd, .Bs", ginipkg.active_view_element).closest(".lKgBkb").not(":hidden");
            if (found[0]) {
                return found;
            }
            found = jQuery('.ZNV2Fe', ginipkg.active_view_element).not(':hidden').first();
            return found;
        }));
        _public.__defineGetter__('preview_pane_element', function () {
            return _public.preview_pane_container.find("table.Bs.nH").first();
        });
        _public.__defineGetter__('previewed_email', function () {
            return _public.preview_pane_element.find("tr td.Bu div.nH").first();
        });
        _public.isPreviewPaneActive = function () {
            return _public.preview_pane_container.length > 0;
        };
        return _public;
    };


    //Navigation bar Menu Starts here
    client.navigationBar = function (ginipkg) {

        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'found');
        lib.destroyable(_public, _protected);
        _public.found = false;
        function requireLoginFor(reason, code_to_run) {
            if (ginipkg.authenticated_as) {
                code_to_run();
            }
        }

        _protected.addLinkHandlers = function (menu) {
            var logout_link = menu.find('.logout');
            logout_link.click(loggily("gmail.main_menu.signup", function () {
                _protected.template.find('div#ginipkg-navigation-menu').hide();

                ginipkg.createRemoteDialog(ginipkg, {
                    title: ginipkg.signupTitle || "Sign Out",
                    url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=logout&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                    width: 650,
                    height: 250,
                    reason_for_authentication: "connect-signout",
                    close: ginipkg.refreshLoginStatus,
                    css: {
                        width: "500px",
                        padding: 0
                    }
                }).show();
                return false;
            }));
            

            ginipkg.signupTitle = "";
            if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                ginipkg.signupTitle = "Sign up";
            }
            //Signup
            var signup_link = menu.find('.login_required');
            signup_link.click(loggily("gmail.main_menu.signup", function () {
                _protected.template.find('div#ginipkg-navigation-menu').hide();
                ginipkg.createRemoteDialog(ginipkg, {
                    title: ginipkg.signupTitle || "Sign up",
                    url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=signup&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                    width: 650,
                    height: 250,
                    reason_for_authentication: "connect-signup",
                    close: ginipkg.refreshLoginStatus,
                    css: {
                        width: "500px",
                        padding: 0
                    }
                }).show();
                return false;
            }));
            //Signup Wizard
            var signupwizard_link = menu.find('.signup_required');
            signupwizard_link.click(loggily("gmail.main_menu.signup", function () {
               ginipkg.signupwizard = true;
                ginipkg.navigation_bar.refreshNavigationBar(ginipkg);
            }));
            
            //Social Connect
            var social_link = menu.find('.networks');
            social_link.click(loggily("gmail.main_menu.sugarcrm", function () {
                if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                ginipkg.last_click_nav = '.networks';
            }
            _protected.template.find('div#ginipkg-navigation-menu').hide();
            ginipkg.createRemoteDialog(ginipkg, {
                id : 'social-connect-iframe',
                title: ginipkg.signupTitle || "Social Connect",
                url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=social&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                width: 650,
                height: 420,
                reason_for_authentication: "connect-social-networks",
                close: ginipkg.clearCacheThoroughly,
                css: {
                    width: "500px",
                    padding: 0
                }
            }).show();
            return false;
        }));

        //Configure sugar CRM 
        var configure_sugarcrm_link = menu.find('.sugarcrm');
        configure_sugarcrm_link.click(loggily("gmail.main_menu.sugarcrm", function () {
             if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                ginipkg.last_click_nav = '.sugarcrm';
             }
            // _protected.menu.hide();
            _protected.template.find('div#ginipkg-navigation-menu').hide();
            ginipkg.createRemoteDialog(ginipkg, {
            id : 'configure-crm-iframe',
            title: ginipkg.signupTitle || "Configure SugarCRM",
            url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=sugarCrm&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source + '&invalidCRM=' + ginipkg.has_crm_but_not_valid,
            width: 650,
            height: 380,
            reason_for_authentication: "connect-social-networks",
            close: ginipkg.clearCacheThoroughly
            }).show();
            return false;
        }));

        //Sync Contact and Calendar 
        var sync_link = menu.find('.sync');
        sync_link.click(loggily("gmail.main_menu.sync", function () {
            if (ginipkg.active_auths.has_sugar === false) {
                   $(this).parent().find('li.crm_not_available').toggle('slow');
            } else {
                    $(this).parent().find('li.sync1').toggle('slow');    
            } 
            return false;
        }));

        //About GiniCube
        var about_link = menu.find('.about-ginicube');
        about_link.click(loggily("gmail.main_menu.about-ginicube", function () {

                $(this).parent().find('div.about-ginicube-toggle').toggle('slow');    
        }));

        //Call Setup 
        var callsetup_link = menu.find('.callsetup');
        callsetup_link.click(loggily("gmail.main_menu.callsetup", function () {
            if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                ginipkg.last_click_nav = '.callsetup';
            }
            _protected.template.find('div#ginipkg-navigation-menu').hide();
            ginipkg.createRemoteDialog(ginipkg, {
            title: ginipkg.signupTitle || "Call Setup",
            url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=callSetup&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
            width: 650,
            height: 450,
            reason_for_authentication: "connect-social-networks",
            close: ginipkg.clearCacheThoroughly
            }).show();
            return false;
        }));

        //Settings
            var settings_link = menu.find('.settings');
            settings_link.click(loggily("gmail.main_menu.settings", function () {
                 if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                    ginipkg.last_click_nav = '.settings';
                 }
                _protected.template.find('div#ginipkg-navigation-menu').hide();
                ginipkg.createRemoteDialog(ginipkg, {
                    id : 'manage-settings-iframe',
                    title: ginipkg.signupTitle || "Manage Your Settings",
                    url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=settings&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source+ '&invalidCRM=' + ginipkg.has_crm_but_not_valid,
                    width: 750,
                    height: 649,
                    //close: ginipkg.refreshLoginStatus,
                    reason_for_authentication: "connect-settings",
                    close: ginipkg.clearCacheThoroughly
                }).show();
                return false;
            }));

            //Billing Link
            var billing_link = menu.find('.billing');
            billing_link.click(loggily("gmail.main_menu.billing", function () {
                if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                    ginipkg.last_click_nav = '.billing';
                }
                _protected.template.find('div#ginipkg-navigation-menu').hide();
                ginipkg.createRemoteDialog(ginipkg, {
                    title: ginipkg.signupTitle || "Billing",
                    url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=billing&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                    width: 650,
                    height: 450,
                    reason_for_authentication: "connect-billing",
                    close: ginipkg.clearCacheThoroughly
                }).show();
                return false;
            }));

        };
    //AddLink Handler ends here

        function setPosition(){
            var navMenuHeight = ginipkg.host_environment.gmail_navigationbar_height;
            _protected.menu_dropdown.css('top', navMenuHeight);
        }

        function menuAppearanceChanged(isVisible) {
            if (isVisible) {
                setPosition();
            } 
        }
        _protected.preloadImage = function (image) {
            jQuery('<img />').attr('src', image);
        };
        _protected.preloadImage(ginipkg.ginipkg_base_url + '/images/ginicube_50px.png');
        _protected.updateLoginSection = function (section) {
            if (ginipkg.authenticated_as) {
                section.find('.authenticated-as').text(ginipkg.authenticated_as || 'an unknown user');
                section.find('.authenticated').show();
                section.find('.not-authenticated').hide();
            } else {
                section.find('.authenticated').hide();
                section.find('.not-authenticated').show();
            }
        };
        
        _public.refreshNavigationBar = function (ginipkg){
            var status_element; //

            delayedConditionalExecute({
                condition: function () {
                    //Navigation Element
                    status_element = jQuery("#ginipkg-navigation");
                    if (status_element[0]) {
                        jQuery("#ginipkg-navigation").remove();
                    } else {
                        // console.log('not found Navigation bar');
                    
                    }
                    status_element = jQuery('<div id="ginipkg-navigation" class="gbt gini-top"/>');

                    ginipkg.install_process = false;
                    var reminder_timestamp = Math.round(Number(new Date())/1000);
                    if((ginipkg.signup_required === true)) {
                        if(ginipkg.signupwizard === true) {
                          $( ".aAU" ).find( "div.overlay_login_steps").remove();
                           ginipkg.signupwizard = false;
                        }
                        if( $( ".aAU" ).find( "div.overlay_login_steps").length <= 0 )
                        {
                            ginipkg.install_process = true;
                            var url = ginipkg.proxy_base_url +'/googleapi/ext/installsignUp.php?userEmail='+ginipkg.user_email+'&userDomain='+ginipkg.user_domain+'&domain='+ginipkg.user_domain+'&source='+ ginipkg.client_source+'&version='+ginipkg.client_version_base +'&sId='+ginipkg.session_token+'&origin=popup';                  
                            $( ".aAU" ).prepend( '<div class="overlay_login_steps">                                <div class="login_steps">                                <div class="header">                                  <img src="'+ginipkg.ginipkg_base_url+'/images/v_3/ginicube_50px.png">                                  <div class="header_msg">                                      <div class="thankuscreen" style="top:312px;left:108px;z-index:1;position:absolute;">                                      </div>                                      </div>                                  <a href="#" class="close_login">Close</a>                                </div>                                <div class="content">                                    <iframe id="myiframe" scrolling="no" src="'+url+'" style="width: 422px;border: 0;height: 345px;margin-left: -1px;position: absolute;background: white;"></iframe>                                 </div>                            </div></div>');
                             
                             /*
                             * @desc - this line will empty the html of remind me after 15 days after 12 seconds.
                             */
                            setTimeout(function(){$('div.thankuscreen').fadeOut("slow").html("")},12000);
                            $(function(){
                                $('.overlay_login_steps .close_login').click(function(){
                                    $('.overlay_login_steps').fadeOut('slow');
                                    ginipkg.clearCacheThoroughly();
                                });
                            });
                        }
                    } 
                    
                    if(ginipkg.install_process !== true) {
                        if (ginipkg.host_environment.gmail_navigationbar) {
                            ginipkg.host_environment.gmail_navigationbar.prepend(status_element);
                        }
                    }    
                    return true;
                },
                failure_message: "Couldn't set "+app_name+" status in user bar",
                log_category: 'gmail.main_menu.insert',
                log_level_on_failure: "info",
                continuation: function () {
                    _protected.template = jQuery('<div id="ginipkg-navigation" class="gbt gini-top"/>');
                    components.templateRenderer(ginipkg, 'navigation_menu/navigation_menu', ginipkg, ginipkg, _protected.template);
                    _protected.menu_button = _protected.template;
                    _protected.menu_dropdown = _protected.template.find('#ginipkg-navigation-menu');
                    _protected.menu = components.engagingContainer(ginipkg, _protected.menu_dropdown, _protected.template);
                    status_element.replaceWith(_protected.template);
                    _public.found = true;
                    _protected.menu_button.find(".gini-top-link").click(function (){
                        _protected.template.find('div#ginipkg-navigation-menu').toggle();
                    });
                    //gksh
                    if(ginipkg.login_required === true) {
                        _protected.menu_dropdown.find('li.login_required').show();
                        _protected.menu_dropdown.find('li.already_login').hide();
                        _protected.menu_dropdown.find('li.logout').hide();
                        if(ginipkg.signup_required === true) {
                            _protected.menu_dropdown.find('li.signup_required').show();
                            _protected.menu_dropdown.find('li.login_required').hide();
                        } else {
                            _protected.menu_dropdown.find('li.signup_required').hide();
                        }
                    } else {
                        _protected.menu_dropdown.find('.login_required').hide();
                        _protected.menu_dropdown.find('.already_login').show().css({"font-weight":"bold","font-style":"italic"});
                        _protected.menu_dropdown.find('li.logout').show();
                        _protected.menu_dropdown.find('li.signup_required').hide();
                    }
                    //Add links to main Menu
                    _protected.addLinkHandlers(_protected.menu_dropdown);
                    _protected.menu.onDisengage(_protected.menu.hide);
                }
            });
        };
        return _public;
    };
    //Navigation bar Menu Ends here


//function for writing template in message body
    var messageBody;
    var cursorPosition=0;
    var range=0;
    var sel=0;
    var node=0;
    var frag=0;
    var node=0;
    var lastNode=0;
    var el=0; 
    var messageBodyClass;
function pasteHtmlAtCaret(html) {
    messageBodyClass=html;
    //var sel, range;
    cursorPosition=1;
    if (window.getSelection) {
        // IE9 and non-IE
        sel = window.getSelection();
        if (sel.getRangeAt && sel.rangeCount) {
            range = sel.getRangeAt(0);
            // Range.createContextualFragment() would be useful here but is
            // non-standard and not supported in all browsers (IE9, for one)
            el = document.createElement("div");
        }
    } else if (document.selection && document.selection.type != "Control") {
        // IE < 9
        document.selection.createRange().pasteHTML(html);
    }
}


// if prob uncomment if and else
function paste1(html,html1){
    cursorPosition=0;
    el.innerHTML = html;
    frag = document.createDocumentFragment(), node, lastNode;
    while ((node = el.firstChild)) {
        lastNode = frag.appendChild(node);
    }
    range.insertNode(frag);

    // Preserve the selection
    if (lastNode) {
        range = range.cloneRange();
        range.setStartAfter(lastNode);
        range.collapse(true);
        sel.removeAllRanges();
        sel.addRange(range);
    }   
}
//siddarth
client.templateBar = function (ginipkg) {

        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'found');
        _public.found = false;
        function requireLoginFor(reason, code_to_run) {
            if (ginipkg.authenticated_as) {
                code_to_run();
            } 
        }
        _protected.addLinkHandlers = function (menu) {
            var logout_link = menu.find('.logout');
            logout_link.click({
                //menu.find('#template-container').show();
            });
            
            ginipkg.signupTitle = "";
            if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                ginipkg.signupTitle = "Sign up";
            }
        };
        //AddLink Handler ends here

        function setPosition(){
            var navMenuHeight = ginipkg.host_environment.gmail_navigationbar_height;
            _protected.menu_dropdown.css('top', navMenuHeight);
        }

        function menuAppearanceChanged(isVisible) {
            if (isVisible) {
                setPosition();
            }
        }
        _protected.preloadImage = function (image) {
            jQuery('<img />').attr('src', image);
        };
        _protected.preloadImage(ginipkg.ginipkg_base_url + '/images/ginicube_50px.png');
        
        _protected.updateLoginSection = function (section) {
            if (ginipkg.authenticated_as) {
                section.find('.authenticated-as').text(ginipkg.authenticated_as || 'an unknown user');
                section.find('.authenticated').show();
                section.find('.not-authenticated').hide();
            } else {
                section.find('.authenticated').hide();
                section.find('.not-authenticated').show();
            }
        };
        //fun to process the data retrieved from ajax response
        /* @modified by - GAURAV SHARMA 
         * @date - 07 july 2014
         * @desc - This function is modified for implementing searching,mostused and favourite functionality
         * some functions are changed from bind to live for dynamicall binding function.
         * */
        //For maintaing last opened tab in case of template searching.
        var tabNo = 0;
        function processTemplate(ginipkgTemplatePosition,templatesInfo){
            var nCategories     =   0;
            var nTemplates      =   0;
            var nFavourites     =   0;
            var nShared         =   0; 
            var idCat           =   '';
            var idTpl           =   '';
            var idFav           =   '';
            var idShared        =   '';
            if (templatesInfo !== undefined){
                if (templatesInfo.categories !== undefined) {
                    var nCategories     =   templatesInfo.categories.length;
                    var idCat           =   templatesInfo.categories;
                }
                if (templatesInfo.templates !== undefined) {
                    var idTpl           =   templatesInfo.templates;
                    var nTemplates      =   templatesInfo.templates.length;
                    
                }
                if (templatesInfo.favourites !== undefined) {
                    var idFav           =   templatesInfo.favourites;
                    var nFavourites     =   templatesInfo.favourites.length;
                }
                if (templatesInfo.shared !== undefined) {
                    var idShared        =   templatesInfo.shared;
                    var nShared         =   templatesInfo.shared.length;
                }
            }
            /*@modified by - GUARAV SHARMA
             *@date - 7 july 2014
             *@desc - These modifications are done for rendering searched templates*/
            if(templatesInfo.search ===undefined) {
                // line is modified for some UI Changes.
                _protected.template = jQuery('<div class="ginipkg-templatebar" style="display:none;position:absolute;bottom:83px;right:0px;width:250px;height:335px;/* overflow-y:auto; */"/>');
                components.templateRenderer(ginipkg, 'tracking/classic_compose_bar', ginipkg, templatesInfo, _protected.template);
                ginipkgTemplatePosition.find('div.ginipkg-templatebar').html(_protected.template);
            } else {
                _protected.template = ginipkgTemplatePosition.find(".gini_fav").parent().parent().find("div#tpl_searchedTemplates");
                components.templateRenderer(ginipkg, 'tracking/classic_template_search', ginipkg, templatesInfo, _protected.template);
            }
            //For removing strong tag if added in any template name comes from CRM
            ginipkgTemplatePosition.find("span.make_tpl_fav_unfav").parent().each(function(e){
                if ($(this).is("strong")) {
                    $(this).replaceWith(function() { return $(this).html(); });
                }
            });
            
            var templateTextBox=_protected.template.find(".template-text");

            //click on a particular category toogled it if it was visible else shown
            ginipkgTemplatePosition.find(".template-button").bind('click', function(e){
                var categoryId=this.getAttribute('cId'); // id of the button clicked
                if (ginipkgTemplatePosition.find(".gini-templates-category-"+categoryId).is(':visible')){                    
                    ginipkgTemplatePosition.find(".gini-templates-category-"+categoryId).toggle(500);
                    var checkForScroll = $(this).parent().parent().find("li.containNewCat").last().prev();
                    var checkToConfirm = 0;
                    if (checkForScroll[0].innerHTML == ($(this).parent()[0].innerHTML) ) {
                        checkToConfirm = 1;
                    }
                    if (checkToConfirm == 1) {
                        var offset = $( this ).offset();
                        ginipkgTemplatePosition.find(".fav_list").animate({
                            scrollTop: ((offset.top)+40),        
                        });
                    }
                }else {
                    //loop to hide all template divs initially
                    for(var i=0;i<nCategories;i++){
                        var temp = '';
                        var temp = idCat[i].cId;
                        ginipkgTemplatePosition.find(".gini-templates-category-"+temp).hide();
                    }   
                    //show only 1 button whose id is fetched above
                    ginipkgTemplatePosition.find(".gini-templates-category-"+categoryId).show(500);
                    var checkForScroll = $(this).parent().parent().find("li.containNewCat").last().prev();
                    var checkToConfirm = 0;
                    if (checkForScroll[0].innerHTML == ($(this).parent()[0].innerHTML) ) {
                        checkToConfirm = 1;
                    }
                    if (checkToConfirm == 1) {
                        var offset = $( this ).offset();
                        ginipkgTemplatePosition.find(".fav_list").animate({
                            scrollTop: ((offset.top)+40),        
                        });
                    }
                }
                e.stopImmediatePropagation();
            });
            
            //code for cancel on creating new category click
            ginipkgTemplatePosition.find(".btnCancelTemplateCategory").bind('click', function(e){
                ginipkgTemplatePosition.find(".new-category").hide();
                
            });
            

            
            //code for use template click
            /* @modified by - GAURAV SHARMA
             * @date - 07 july 2014
             * @desc - This function is modified for  setting usability on template use.
             * */
            ginipkgTemplatePosition.find(".template-used").live('click', function(e){
                console.log( ":: template used ::");
                var templateId=this.getAttribute('tId'); // id of the button clicked
                var templateText='';
                
                var mostUsed = $(this).parent().parent().parent().siblings("span.most_used");
                var mostUsedId=mostUsed.attr("tid");
                var mostUsedText = mostUsed.text();
                mostUsedText=parseInt(mostUsedText);
                var mostUsedCounter = mostUsedText+1;
                //usability counter is set here.
                ginipkgTemplatePosition.find("span.most_used_"+mostUsedId).text(mostUsedCounter);
                var uls = ginipkgTemplatePosition.find("div.tpl_cat").find("ul.gini_uls_avoid_crm_uls_tag");
                //reordering on the basis of usability is done here.
                $.each(uls,function(key,value){
                   $(value).html($(value).find("li.gini_lis_avoid_crm_lis_cat").sort(function(a,b){
                          return parseInt($(a).find("span.most_used").text()) < parseInt($(b).find("span.most_used").text()) ? 1 : -1;        
                       })     
                   );
                    
                });
                // some new classes are added.
                uls = ginipkgTemplatePosition.find("div.tpl_fav").find("ul.gini_uls_avoid_crm_uls_fav");
                uls.html($(uls).find("li.gini_lis_avoid_crm_lis_fav").sort(function(a,b){
                                          return parseInt($(a).find("span.most_used").text()) < parseInt($(b).find("span.most_used").text()) ? 1 : -1;        
                                       })     
                                    );
                var tempCats = ginipkg.template_details.categories;
                var tempsInCat   = '';
                var pkgCatIndex  = ''; 
                var pkgTempIndex = '';
                //Changed counter is also stored in ginipkg for caching.
                for (var catIndex in tempCats) {
                   pkgCatIndex = catIndex;
                   tempsInCat = tempCats[catIndex].templates;
                   for (var tempIndex in tempsInCat) {
                               if (tempsInCat[tempIndex].id == templateId ) {
                                pkgTempIndex = tempIndex; 
                                break;
                               }
                   }
                   // For breaking out from outer loop if index found.
                   if (pkgTempIndex!=='') {
                       break;
                   }
                }
                ginipkg.template_details.categories[pkgCatIndex].templates[pkgTempIndex].usability = mostUsedCounter;

                var favTemps =  ginipkg.template_details.favourites;
                for(var favIndex in favTemps) {
                    if(favTemps[favIndex].id == templateId ) {
                        ginipkg.template_details.favourites[favIndex].usability = mostUsedCounter;
                        break;
                    }
                }
                //Here changed counter is stored in DB. 
                ginipkg.request({
                    server      : 'profiles',    
                    jsonp       : 'true',
                    path        : '/dbRequest.php?',
                    beforeSend  :function(){
                                
                                },
                    data        :{
                                    requestType : 'template',
                                    userAction:"mostUsedTemplate",  
                                    email    :ginipkg.found_user_email,
                                    templateId: templateId,
                                    usedCounter : mostUsedCounter,
                                    _method:'post'
                                },
                    success     : function (response) {

                                },
                    error       : function (data, text_status, xhr) {    
                                    // console.log('testing db error..................');
                                }
                });
            
                console.log($(this).parent().parent().prev().prev().find("a.template-button").html());

                //code commented by siddarth on 30 May 2014 to disable the template share feature
                //also the template for this modified below to hide the template share button and category
                //case added for share template case.
                // if ($(this).parent().parent().prev().prev().find("a.template-button").html() == "Shared") {
                //     for(var i=0;i<nShared;i++) {
                //         if(idShared[i].id==templateId){        
                //             templateText = idShared[i].description.replace(/\%/g, '%25');
                //             templateText = decodeURIComponent(templateText);
                //             templateText = templateText.replace(/\%25/g, '%');
                //             templateText = unescape(templateText);
                //             if(templateText.indexOf('&lt;body&gt;')>0) {
                //                 templateText=templateText.substring(templateText.indexOf('&lt;body&gt;')+12,templateText.indexOf("&lt;/body&gt;"))
                //                 templateText= $('<div/>').html(templateText).text();
                //             }
                //             //code to add attachments if present in the body of email , google drive style.        
                //             if ((idShared[i].attachment_details !== null) && (idShared[i].attachment_details !== '') && (idShared[i].attachment_details.length > 0)) {
                //                 var tempAttachmentDetails = '';
                //                 tempAttachmentDetails = $.parseJSON(idShared[i].attachment_details);
                //                 if ((tempAttachmentDetails.attachmentInformation != '') && (tempAttachmentDetails.attachmentInformation != null)) {
                //                     for (var t=0;t<tempAttachmentDetails.attachmentInformation.length;t++) {
                //                         templateText += '<div contenteditable="false" class="gmail_chip gmail_drive_chip" style="width: 396px; height: 18px; max-height: 18px; background-color: rgb(245, 245, 245); padding: 5px; color: rgb(34, 34, 34); font-family: arial; font-style: normal; font-weight: bold; font-size: 13px; cursor: default; border: 1px solid rgb(221, 221, 221);"><a href="'+tempAttachmentDetails.attachmentInformation[t].attachment_link+'" target="_blank" style=" display:inline-block; max-width: 366px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; text-decoration: none; cursor: pointer; padding: 1px 0; border: none; "><img style="vertical-align: bottom; border: none;" src="'+tempAttachmentDetails.attachmentInformation[t].icon_link+'">&nbsp;<span dir="ltr" style="color: rgb(17, 85, 204); text-decoration: none; vertical-align: bottom;">'+tempAttachmentDetails.attachmentInformation[t].name_of_attachment+'</span></a><img src="//ssl.gstatic.com/ui/v1/icons/common/x_8px.png" style="opacity: 0.55; cursor: pointer; float: right; position: relative; top: -1px; display: none;"></div><br/>';
                //                     }
                //                 }    
                //             }
                //         }
                //     }
                // } else {
                    //loop to find description corresponding to the template id
                    for(var i=0;i<nTemplates;i++) {
                        if(idTpl[i].id==templateId){        
                            templateText = idTpl[i].description.replace(/\%/g, '%25');
                            templateText = decodeURIComponent(templateText);
                            templateText = templateText.replace(/\%25/g, '%');
                            templateText = unescape(templateText);
                            if(templateText.indexOf('&lt;body&gt;')>0) {
                                templateText=templateText.substring(templateText.indexOf('&lt;body&gt;')+12,templateText.indexOf("&lt;/body&gt;"))
                                templateText= $('<div/>').html(templateText).text();
                            }
                            //case when sync templates is done anad problem of html tag persist.
                            if (templateText.indexOf('&lt;') == 0) {
                                templateText= $('<div/>').html(templateText).text();
                            }
                            //code to add attachments if present in the body of email , google drive style.        
                            if ((idTpl[i].attachment_details !== null) && (idTpl[i].attachment_details !== '') && (idTpl[i].attachment_details.length > 0)) {
                                var tempAttachmentDetails = '';
                                tempAttachmentDetails = $.parseJSON(idTpl[i].attachment_details);
                                if ((tempAttachmentDetails.attachmentInformation != '') && (tempAttachmentDetails.attachmentInformation != null)) {
                                    for (var t=0;t<tempAttachmentDetails.attachmentInformation.length;t++) {
                                        templateText += '<div contenteditable="false" class="gmail_chip gmail_drive_chip" style="width: 396px; height: 18px; max-height: 18px; background-color: rgb(245, 245, 245); padding: 5px; color: rgb(34, 34, 34); font-family: arial; font-style: normal; font-weight: bold; font-size: 13px; cursor: default; border: 1px solid rgb(221, 221, 221);"><a href="'+tempAttachmentDetails.attachmentInformation[t].attachment_link+'" target="_blank" style=" display:inline-block; max-width: 366px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap; text-decoration: none; cursor: pointer; padding: 1px 0; border: none; "><img style="vertical-align: bottom; border: none;" src="'+tempAttachmentDetails.attachmentInformation[t].icon_link+'">&nbsp;<span dir="ltr" style="color: rgb(17, 85, 204); text-decoration: none; vertical-align: bottom;">'+tempAttachmentDetails.attachmentInformation[t].name_of_attachment+'</span></a><img src="//ssl.gstatic.com/ui/v1/icons/common/x_8px.png" style="opacity: 0.55; cursor: pointer; float: right; position: relative; top: -1px; display: none;"></div><br/>';
                                    }
                                }    
                            }
                        }
                    }
                    console.log(":::: template desc ::::");
                    console.log(templateText);
                // } 
                templateText=$('<div/>').html(templateText).html();
                console.log(templateText);
                if(cursorPosition==0){
                    console.log("if part");
                    console.log(ginipkgTemplatePosition.parents().find("div.LW-avf"));
                    ginipkgTemplatePosition.parents().find("div.LW-avf").first().prepend(templateText);
                }
                else{
                    console.log("else part");
                    console.log(ginipkgTemplatePosition.parents().find("div.LW-avf"));
                    ginipkgTemplatePosition.parents().find("div.LW-avf").first().prepend(templateText);
                }
                // ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav input[type='checkbox']").focus();
                e.stopImmediatePropagation();
                return false;
            });
 
            //code for fav use template click
            ginipkgTemplatePosition.find(".fav-use").live('click', function(e){
                var templateId=this.getAttribute('tId'); // id of the button clicked
                var templateText='';
                    //loop to find description corresponding to the template id
                    for(var i=0;i<nFavourites;i++){
                        if(idFav[i].id==templateId){
                            templateText=idFav[i].description;
                        }
                    } 
                    if(cursorPosition==0){
                        ginipkgTemplatePosition.find("div.LW-avf").prepend(templateText);
                    }
                    else{
                        msgBody=ginipkgTemplatePosition.find("div.LW-avf");
                        paste1(templateText,msgBody[0]);
                    }
                    
            });
            
            //code for creating new template click
            ginipkgTemplatePosition.find(".newTemplate").live('click', function(e){
                var btnNewTemplate = ginipkgTemplatePosition.find(".newTemplate");
                var domain_name = ginipkg.domain_from_url;
                var user_email  = ginipkg.found_user_email;
                var client_source = ginipkg.client_source;
                var cat_id = btnNewTemplate.attr('cat_id');
                ginipkg.createRemoteDialog(ginipkg, {
                   id : 'new-template-iframe',
                   title: "Add New Template",
                   url  : ginipkg.services_base_url + '/../../googleapi/ext/addTemplate.php?clientSource='+client_source+'&domain_name='+domain_name+'&found_user_email='+ user_email+ "&cat_id="+cat_id,
                   width : 850,
                   height: 600,
                   reason_for_authentication: "Update Profile Picture",
                   close: function () {
                                ginipkg.refreshLoginStatus();
                                refreshTemplateSection(ginipkgTemplatePosition);
                                jQuery(this).dialog("close");
                            },
                 }).show();
                e.stopImmediatePropagation();
                 return false;
            });

            //code for save as template functionality
            ginipkgTemplatePosition.find(".save_template").live('click', function(e){
                console.log("::::::::::::::::: save_as_template :::::::::::::::::");
                e.stopImmediatePropagation();
                
                var attachmentsLinks = '';
                var getParentMsgId=window.top.location.href;
                var finalParentMsgId = getParentMsgId.substring(getParentMsgId.lastIndexOf('/') + 1);
                var ultimateParentMsgId = finalParentMsgId.substr(0,finalParentMsgId.lastIndexOf('?compose=new'));
                finalParentMsgId = ((typeof ultimateParentMsgId == "undefined") || (ultimateParentMsgId === '') ) ? finalParentMsgId : ultimateParentMsgId; 
                console.log("::::::: msg_id ::::::::");
                console.log(finalParentMsgId);

                var mail_body = {}; //will hold the html of the mail content
                mail_body = $(this).parents('table.iN').find('div.Am.Al.editable.LW-avf').html();
                var domain_name = ginipkg.domain_from_url;
                var user_email  = ginipkg.found_user_email;
                var client_source = ginipkg.client_source;

                mail_body       = encodeURIComponent(mail_body);
                
                ginipkg.createRemoteDialog(ginipkg, {
                   id: 'save-template-iframe',
                   title: "Save as Template",
                   url  : ginipkg.services_base_url + '/../../googleapi/ext/addTemplate.php?clientSource='+client_source+'&domain_name='+domain_name+'&found_user_email='+ user_email,
                   width : 850,
                   height: 600,
                   reason_for_authentication: "Update Profile Picture",
                   close: function () {
                                ginipkg.refreshLoginStatus();
                                jQuery(this).dialog("close");
                            },
                 }).show();

                var url = '';               //url of the addTemplate page
                var nameOfIframe = '';      //name of the iframe
                
                url = ginipkgTemplatePosition.parents().find("body.aAU div#general-form-container iframe").attr("src");
                nameOfIframe     = ginipkgTemplatePosition.parents().find("body.aAU div#general-form-container iframe").attr("name");

                /* appending form , it will post data to iframe*/
                ginipkgTemplatePosition.find(".save_template").prepend( '<form action="'+url+'" id="frmSaveAsTemplate" enctype="multipart/form-data" target = "'+nameOfIframe+'" method = "post">                    <input type="hidden" value="'+mail_body+'" name="mail_body" id="mail_body">                    <input type="hidden" value="'+finalParentMsgId+'" name="finalParentMsgId" id="finalParentMsgId">                    <input type="submit" style="display:none;">                </form>');
                
                ginipkgTemplatePosition.find("#frmSaveAsTemplate").trigger('submit'); 
                return false;    
            });            

            //code for creating edit template click
            ginipkgTemplatePosition.find(".editTemplate").live('click', function(e){
                var domain_name = ginipkg.domain_from_url;
                var user_email  = ginipkg.found_user_email;
                var client_source = ginipkg.client_source;
                var template_id = this.getAttribute('tId');
                
                /*
                * added on 24 april 2014 to indicate whether the template is a sugar crm template.
                */
                var booleanCrmTemplate = false;
                if ($(this).parent().parent().prev().prev().find("a.template-button").html() == "SugarCRM Templa…") {
                    booleanCrmTemplate = true;
                }

                ginipkg.createRemoteDialog(ginipkg, {
                   id : 'edit-template-iframe',
                   title: "Edit Template",
                   url  : ginipkg.services_base_url + '/../../googleapi/ext/addTemplate.php?clientSource='+client_source+'&domain_name='+domain_name+'&found_user_email='+user_email+"&template_id="+template_id+"&booleanCrmTemplate="+booleanCrmTemplate,
                   width : 850,
                   height: 600,
                   reason_for_authentication: "Update Profile Picture",
                   close:   function () {
                        ginipkg.refreshLoginStatus();
                        refreshTemplateSection(ginipkgTemplatePosition);
                        jQuery(this).dialog("close");
                    },
                }).show();
                e.stopImmediatePropagation();
                return false; 
            });
            ginipkgTemplatePosition.find(".shareTemplate").live('click', function(e){
                var domain_name = ginipkg.domain_from_url;
                var user_email  = ginipkg.found_user_email;
                var client_source = ginipkg.client_source;
                var template_id = this.getAttribute('tId');
                ginipkg.request({
                    server      : 'profiles',    
                    jsonp       : 'true',
                    path        : '/dbRequest.php?',
                    beforeSend  :function(){
                                
                                },
                    data        :{
                                    requestType : 'template',
                                    userAction:"shareTemplate",  
                                    email    :ginipkg.found_user_email,
                                    templateId: template_id,
                                    _method:'post'
                                },
                    success     : function (response) {

                                },
                    error       : function (data, text_status, xhr) {    
                                    // console.log('testing db error..................');
                                }
                });
            });
            
            ginipkgTemplatePosition.find('div.Gini_templates span.template-use').mouseover(function(event){

                $(this).parent().find('.innerTemplateText').show().mouseover(function(){
                    $(this).show();
                });
                $(this).parent().find('.innerTemplateText').show().mouseout(function(){
                    $(this).hide();
                });
            });
           
            ginipkgTemplatePosition.find('div.Gini_templates span.template-use').mouseout(function(){
               $(this).parent().parent().find('.innerTemplateText').hide();
            });
            
            //code for delete template click
            // For avoiding bubbling.
            ginipkgTemplatePosition.find(".deleteTemplate").bind('click', function(e){
                var nChecked=0;
                nChecked = ginipkgTemplatePosition.find(".chkFav:checked").length;
                var tId='';
                ginipkgTemplatePosition.find(".chkFav:checked").each(function(){
                    var temp =$(this).parent().parent().find('span.discard').attr('tid');
                    tId+=temp+","; 
                });
                var r=confirm("Are You Sure You Want To Delete Template(s) ?");
                if (r==true){
                    ginipkg.request({
                        server      : 'profiles',    
                        jsonp       : 'true',
                        path        : '/dbRequest.php?',
                        beforeSend  :function(){
                                        // console.log(":::: request for delete template send :::::");           
                                    },
                        data        :{
                                        requestType : 'template',
                                        userAction : 'deleteCategory',  
                                        email    :ginipkg.found_user_email,
                                        template_id: tId,
                                        _method:'post'
                                    },
                        success     : function (response) {
                                        ginipkg.refreshLoginStatus();
                                        //to refresh deleleted templates
                                        refreshTemplateSection(ginipkgTemplatePosition);
                                    },
                        error       : function (data, text_status, xhr) {    
                                    }
                    });
                }
                //to refresh deleleted templates
                refreshTemplateSection(ginipkgTemplatePosition);
                e.stopImmediatePropagation();
            });
            
            //for delete on templates in categories
            ginipkgTemplatePosition.find(".deleteTemplateCategory").live('click', function(e){
                var nChecked=0;
                nChecked = ginipkgTemplatePosition.find(".chkTpl:checked").length;
                var tId='';
                ginipkgTemplatePosition.find(".chkTpl:checked").each(function(){
                    var temp =$(this).parent().parent().find('span.discard').attr('tid');
                    tId+=temp+",";
                });
                var r=confirm("Are You Sure You Want To Delete Template(s) ?");
                if (r==true){
                  ginipkg.request({
                        server      : 'profiles',    
                        jsonp       : 'true',
                        path        : '/dbRequest.php?',
                        beforeSend  :function(){       
                                    },
                        data        :{
                                        requestType : 'template',
                                        userAction : 'deleteCategory',  
                                        email    :ginipkg.found_user_email,
                                        template_id: tId,
                                        _method:'post',
                                    },
                        success     : function (response) {
                                        ginipkg.refreshLoginStatus();
                                        //to refresh deleleted templates
                                        refreshTemplateSection(ginipkgTemplatePosition);
                                    },
                        error       : function (data, text_status, xhr) {    
                                        // console.log('testing db error..................');
                                    }
                    });
                
                }
                e.stopImmediatePropagation();      
            });

             //for click on fav on top bar
            ginipkgTemplatePosition.find(".gini_fav").bind('click', function(e){
                //For maintaing last opened tab in case of template searching.
                if(tabNo !== 3) {
                    tabNo = 0;
                }
                ginipkgTemplatePosition.find(".tpl_cat").hide().prev().css({"border-bottom":"1px solid #E2E2E2","background":"#FEFEFE"});
                ginipkgTemplatePosition.find(".tpl_fav").show().prev().css({"border-bottom":"1px solid #fff","background":"#FFFFFF"});
                //added for hiding searched templates.
                if (ginipkgTemplatePosition.find("div#tpl_searchedTemplates div") !== undefined) {
                    ginipkgTemplatePosition.find("div#tpl_searchedTemplates div").hide();
                }
                //hide delete of category templates selected 
                if (ginipkgTemplatePosition.find(".chkTpl:checked").length > 0){
                    ginipkgTemplatePosition.find(".deleteTemplateCategory").hide();
                    ginipkgTemplatePosition.find(".save_template").show();
                }
                //show delete of this fav templates
                if (ginipkgTemplatePosition.find(".chkFav:checked").length > 0){
                    ginipkgTemplatePosition.find(".deleteTemplate").show();
                    ginipkgTemplatePosition.find(".save_template").hide();
                } 
                //e.returnValue = false;
                e.stopImmediatePropagation();
                return false;
            });
            /*Added by - GAURAV SHARMA.
             *@date - 07 july 2014.
             *@desc - for showing searched templates and if any template is not found then no template found message is shown.
             * */
            if(templatesInfo.search == 1) {
                ginipkgTemplatePosition.find(".gini_fav").trigger('click');
                 ginipkgTemplatePosition.find(".tpl_fav").hide().prev().css({"border-bottom":"1px solid #E2E2E2","background":"#FEFEFE"});
                ginipkgTemplatePosition.find("div#tpl_searchedTemplates div").show();
                if (nCategories <=0) {
                    ginipkgTemplatePosition.find("#tpl_searchedTemplates").html('<div id="tab-content1" style="z-index: 1;" class="tab-content animated fadeIn tpl_search"><span><p style="font-size:12px;text-align: center;margin-top: 20%;">No such template found.</p></span></div>');
                }
            }
            
            //for click on category on top bar
            ginipkgTemplatePosition.find(".gini_category").bind('click', function(e){
                //For maintaing last opened tab in case of template searching.
                tabNo = 1;
                //removing searched template screen after other tab is click.
                ginipkgTemplatePosition.find("div#tpl_searchedTemplates div").remove();
                ginipkgTemplatePosition.find(".tpl_fav").hide().prev().css({"border-bottom":"1px solid #E2E2E2","background":"#FEFEFE"});
                ginipkgTemplatePosition.find(".tpl_cat").show().prev().css({"border-bottom":"1px solid #fff","background":"#FFFFFF"}); 
                //hide delete of fav templates selected 
                if (ginipkgTemplatePosition.find(".chkFav:checked").length > 0){
                    ginipkgTemplatePosition.find(".deleteTemplate").hide();
                    ginipkgTemplatePosition.find(".save_template").show();

                }
                //show delete of this fav templates
                if (ginipkgTemplatePosition.find(".chkTpl:checked").length > 0){
                    ginipkgTemplatePosition.find(".deleteTemplateCategory").show();
                    ginipkgTemplatePosition.find(".save_template").hide();
                }
                //e.returnValue = false;   
                return false;
            });

            ginipkgTemplatePosition.find(".editTemplateTextButton").live('click', function(e){
                $(this).parent().next().hide();     
                $(this).parent().hide();
                $(this).parent().next().show();                
            });

            //on click of outside edit template text box and inside the li only
            ginipkgTemplatePosition.find("li.containNewCat").live('click', function(e){
                if (e.target.className != "editTemplateTextBox"){
                    $(this).hide();
                    $(this).prev().show();
                }
            });          
            ginipkgTemplatePosition.find(".editTemplateTextBox").focusout(function() {
                
                $(this).css("border","1px solid #5FC4FA");
                var category='';
                category = $(this).val();
                category = category.replace(/(<script>|<\/script>|<embed>|<\/embed>|<\?php | \?>)/g,'')
                category = category.replace(/ +(?= )/g,'');
                category = category.replace(/(^\s+|\s+$)/g, '');
                var cid='';
                cid=$(this).attr('cId');
                fsLog("info about this new category \n cid: " +cid+" value: "+category);
                var check = 0; //if 0 go ahead with ajax request , if 1 dont do ajax request
                var i;
                var lengthOfCategories=ginipkg.template_details.categories.length;
                var orignalNameOfCid ='';
                for (i=0;i<lengthOfCategories;i++){
                    if (cid == ginipkg.template_details.categories[i].cId){
                        orignalNameOfCid = ginipkg.template_details.categories[i].cName;
                    }
                }
                if (orignalNameOfCid == ginipkgTemplatePosition.find(".editTemplateTextBox").val()){
                    check =1;
                }
                fsLog("check: "+check);
                //making an ajax request to save this category if its not null else border red
                if((category != '') && (check == 0)){
                    var parentErrCase = '';
                    parentErrCase = $(this).parent();
                    $(this).parent().hide();
                    $(this).parent().prev().show();
                    var oldHtml = ''; //used in case of error only
                    oldHtml = $(this).parent().prev().find('a').html();
                    var categoryWithEscapeHtml='';
                    categoryWithEscapeHtml = $.escapeHTML(category);
                    $(this).parent().prev().find('a').html($.truncateText(categoryWithEscapeHtml,16)).attr("title","Category "+category);                   
                    //orignal state preserved
                    ginipkg.request({
                        server      : 'profiles',    
                        // jsonp       : 'true',
                        path        : '/dbRequest.php?',
                        beforeSend  :function(){
                        },
                        data        :{
                            requestType     :   'template',
                            userAction      :   'saveCategory',    
                            email           :   ginipkg.found_user_email,
                            categoryName    :   category,
                            cId             :   cid,
                            _method         :  'post',
                        },
                        success     : function (response) {
                            //to click on template
                            if(response.errMsg=="Please Insert Category Name."){
                                $.giniAlert("Your entered "+category+" Category already exists ! Please Choose Some other Name !");
                                parentErrCase.prev().find('a').html(oldHtml).attr("title","Category "+oldHtml);
                            } else {
                                //success case
                                refreshTemplateSection(ginipkgTemplatePosition);
                                $(this).prev().show();
                            }
                        },
                        error       : function (data, text_status, xhr) {
                            $.giniAlert("Your entered "+category+" category could not be updated !");
                            $(this).parent().prev().find('a').html(oldHtml);
                        }
                    });     
                } else if (check == 1){ //do nothing , entered name is same as existing name
                }else {          //border red coz its empty
                    $(this).css("border","1px solid red");
                }
            });
                
            //for checkboxes--favorites(delete selected checkboxes)
            ginipkgTemplatePosition.find(".chkFav").live('change',function(e){
                var nChecked=0;var nTotal=0;
                nChecked = ginipkgTemplatePosition.find(".chkFav:checked").length;
                nTotal = ginipkgTemplatePosition.find(".chkFav").length;
                if(this.checked) {
                    ginipkgTemplatePosition.find("div.futter_bar .deleteTemplate").show();
                    ginipkgTemplatePosition.find("div.futter_bar .save_template").hide();
                } else{
                    if (nChecked == 0){
                        ginipkgTemplatePosition.find("div.futter_bar .deleteTemplate").hide();
                        ginipkgTemplatePosition.find("div.futter_bar .save_template").show();
                    }
                }
            });

            //for checkboxes--template(delete selected checkboxes)  
            ginipkgTemplatePosition.find(".chkTpl").live('change',function(e){
                var nChecked=0;var nTotal=0;
                nChecked = ginipkgTemplatePosition.find(".chkTpl:checked").length;
                nTotal = ginipkgTemplatePosition.find(".chkTpl").length;
                if(this.checked) {
                    ginipkgTemplatePosition.find("div.futter_bar .deleteTemplateCategory").show();
                    ginipkgTemplatePosition.find("div.futter_bar .save_template").hide();
                } else{
                    if (nChecked == 0){
                        ginipkgTemplatePosition.find("div.futter_bar .deleteTemplateCategory").hide();
                        ginipkgTemplatePosition.find("div.futter_bar .save_template").show();
                    }
                }
            });
            /*@author- GAURAV SHRAMA
             *@date - 07 july 2014
             *@desc - This function is added for tempalte searching.
             *In this funcion templates are find per user search and auto suggestion is added on key up.
             *And after selecting a template from auto suggestion or entering enter key in search bar 
             *or click on search button searched template are shown using function showSearchedTemplates().
             **/
            ginipkgTemplatePosition.find("#search_email").keyup(function(e){
                //For maintaing last opened tab in case of template searching.
                tabNo = 3;
                search = $(this).val();
                search = $.trim(search);
                var suggestions=$(this).parent().find("select");
                if (!(search == '' || search == ' ')) {
                    var searchBar = $(this);
                    var categories = ginipkg.template_details.categories;
                    var templates='';
                    suggestions.html("");
                    var templateCount = 0;
                    for (var tagIndex in categories ) {
                        templates = categories[tagIndex].templates;
                        // sTemplates = new Array();
                        for (var tempIndex in templates) {
                            name = templates[tempIndex].name;
                            if((name.toLowerCase()).match("^"+(search.toLowerCase()))) {
                                suggestions.append("<option value='"+name+"' style = 'margin-top:5px' >"+name+"</option>");
                                templateCount=1;
                            }
                        }
                                            
                    }
                    if(templateCount > 0) {
                        suggestions.show();
                    } else {
                        suggestions.hide();
                    }
                    // If user enters enter key searched templates are shown.
                    if(e.keyCode == 13){
                        suggestions.hide();
                        showSearchedTemplates(search,ginipkgTemplatePosition);
                    }
                 // If user selects a suggestion  searched templates are shown.
                    suggestions.change(function(e){
                        searchBar.val($(this).val());
                        $(this).hide();
                        showSearchedTemplates($(this).val(),ginipkgTemplatePosition);
                        e.stopImmediatePropagation();
                    });
                 // If user clicks on search button searched templates are shown.
                    $(this).parent().find(".search_email_button").click(function(e){
                        suggestions.hide();
                        //For checking as search box is not empty.
                        search = searchBar.val();
                        search = $.trim(search);
                        if (!(search == '' || search == ' ')) {
                            showSearchedTemplates(search,ginipkgTemplatePosition);
                        }
                        e.stopImmediatePropagation();   
                    });

                    ginipkgTemplatePosition.click(function(e){
                        if (e.target.id=="search_email" || e.target.parentNode.className=="tpl_search_select" ||e.target.className=="tpl_search_select") {
                            //do nothing.
                        } else {
                            suggestions.hide();
                            
                        }
                    });
                } else {
                    suggestions.hide();
                    //For maintaing last opened tab in case of template searching.
                    if (tabNo === 0) {
                        ginipkgTemplatePosition.find(".gini_fav").trigger('click');
                    } else {
                        ginipkgTemplatePosition.find(".gini_category").trigger('click');
                    }
                }


                e.stopImmediatePropagation();
                    
            });
            /* @modified by - GAURAV SHARMA
             * @date - 08 july 2014
             * @desc - This function is added for implementing making template favourite functionality.
             * */
            ginipkgTemplatePosition.find("span.make_tpl_fav_unfav").live("click",function(e){
                // added for avoiding propagation.
                if(e.isPropagationStopped()) {
                    return;
                }
                var template =$(this).parent();
                var catArray=template.parent().attr('class').split("-");
                var templateId=$(this).siblings("span.template-use").attr('tid');
                var catId =catArray[catArray.length-1];
                var tempCats = ginipkg.template_details.categories;
                var templateStatus=0;
                template=template.html();
                templateId=$(this).siblings("span.template-use").attr('tid');
                var status=$(this).attr("status");
                /*If template is favourite.*/
                if(status == "fav") {
                    templateStatus = 1;
                    /*Template in all category is make to favourite.*/
                    //Some new classes are added.
                    ginipkgTemplatePosition.find("div.tpl_cat").find("ul.gini_uls_avoid_crm_uls_tag li.gini_lis_avoid_crm_lis_cat span.make_tpl_fav_unfav_"+templateId).attr("status","unfav");
                    ginipkgTemplatePosition.find("div.tpl_cat").find("ul.gini_uls_avoid_crm_uls_tag li.gini_lis_avoid_crm_lis_cat span.make_tpl_fav_unfav_"+templateId).css("opacity","1");
                    /*Template is also displayed in Favourite tab .*/
                    ginipkgTemplatePosition.find("div.tpl_fav").find("ul.gini_uls_avoid_crm_uls_fav").append("<li class='gini_lis_avoid_crm_lis_fav'>"+template+"</li>");
                    ginipkgTemplatePosition.find("div.tpl_fav").find("ul.gini_uls_avoid_crm_uls_fav li.gini_lis_avoid_crm_lis_fav span.make_tpl_fav_unfav_"+templateId).remove();
                    uls = ginipkgTemplatePosition.find("div.tpl_fav").find("ul.gini_uls_avoid_crm_uls_fav");
                    /*Templates are sorted.*/
                    uls.html($(uls).find("li.gini_lis_avoid_crm_lis_fav").sort(function(a,b){
                                          return parseInt($(a).find("span.most_used").text()) < parseInt($(b).find("span.most_used").text()) ? 1 : -1;        
                                       })     
                                    );
                } else {
                    /*Template in all category is make to un favourite.*/
                    ginipkgTemplatePosition.find("div.tpl_cat").find("ul li span.make_tpl_fav_unfav_"+templateId).attr("status","fav");
                    ginipkgTemplatePosition.find("div.tpl_cat").find("ul li span.make_tpl_fav_unfav_"+templateId).css("opacity",".2");
                    console.log( ginipkgTemplatePosition.find("div.tpl_fav").find("ul li span[tid="+templateId+"]"));
                    /*Template is removed from Favourite tab.*/
                    ginipkgTemplatePosition.find("div.tpl_fav").find("ul li span[tid="+templateId+"]").parent().remove();
                }
                /*changes are also done in ginipkg for caching.*/
                var pkgCatIndex='';
                var pkgTempIndex ='';
                for(var catIndex in tempCats) {
                   tempsInCat = tempCats[catIndex].templates;
                   for (var tempIndex in tempsInCat) {
                               if(tempsInCat[tempIndex].id == templateId ) {
                                pkgTempIndex = tempIndex;
                                pkgCatIndex = catIndex;
                                break;
                               }
                   }
                   //If category and template found break the loop.
                   if(pkgCatIndex !== "") {
                       break;
                   }
                }
                ginipkg.template_details.categories[pkgCatIndex].templates[pkgTempIndex].favourite=templateStatus;
                if(templateStatus==1) {
                    ginipkg.template_details.favourites[ginipkg.template_details.favourites.length] = ginipkg.template_details.categories[pkgCatIndex].templates[pkgTempIndex];
                } else {
                    var favTemps =  ginipkg.template_details.favourites;
                    for(var favIndex in favTemps) {
                        if(favTemps[favIndex].id == templateId ) {
                            ginipkg.template_details.favourites.splice(favIndex,1);
                            break;
                        }
                    }
                }
                /* Sorting is also done in ginipkg .*/
                ginipkg.template_details.favourites.sort(function(a,b){

                    return (a.usability < b.usability ? 1 : -1);
                });
                /* Changes are store in DB.*/
                ginipkg.request({
                    server      : 'profiles',    
                    jsonp       : 'true',
                    path        : '/dbRequest.php?',
                    beforeSend  :function(){
                                
                                },
                    data        :{
                                    requestType : 'template',
                                    userAction:"makeFavourite",  
                                    email    :ginipkg.found_user_email,
                                    templateId: templateId,
                                    favouriteStatus : templateStatus,
                                    _method:'post'
                                },
                    success     : function (response) {

                                },
                    error       : function (data, text_status, xhr) {    
                                    // console.log('testing db error..................');
                                }
                });
                // for avoiding propagation.
                e.stopPropagation();
            });
            ginipkgTemplatePosition.find('div.ginipkg-templatebar div.ginipkg-templatebar').keydown( function(e) {
                            $this = ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.active");
                                       
                            
                            if (e.which == 40) { 
                            $this.siblings().find("span.template-use").find(".innerTemplateText").hide();
                                        $this = $this.next();
                                        if($this.length <=0)
                                        $this = ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav").first();
                                        
                                        $this.addClass('active').siblings().removeClass('active').css("background-color","white");
                                        $this.css("background-color","green");
                                        $this.closest("div.fav_list").scrollTop($this.index() * $this.outerHeight());
                                $(this).focus();
                                return false;
                            } else if (e.which == 38) { 
                            $this.siblings().find("span.template-use").find(".innerTemplateText").hide();
                                $this = $this.prev();
//                                         $this = ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.active").prev();
                                       if($this.length <=0)
                                        $this = ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav").first();
                                        
                                        $this.addClass('active').siblings().removeClass('active').css("background-color","white");
                                        $this.css("background-color","green");
                                        $this.closest("div.fav_list").scrollTop($this.index() * $this.outerHeight());
                                $(this).focus();
                                return false;
                            } else if(e.which == 13) {
                                        $this.siblings().find("span.template-use").find(".innerTemplateText").hide();
                                if($this.length <=0)
                                        $this = ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav").first();
                                    $this.find("input.template-used").trigger('click');
                            } else if(e.which == 37) {

                                if($this.length <=0)
                                       $this = ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav").first();
                                        $this.siblings().find('.showTemplateText').hide();
                                        console.log($this.find('.showTemplateText'))
                                        $this.trigger("hover");
                                        $this.siblings().find("span.template-use").find(".innerTemplateText").hide();
                                        $this.find("span.template-use").trigger('mouseover').find(".innerTemplateText").css({"left": "-246px","top": "-83px","width": "239px","z-index": "9999999","min-height": "258px","height":" 293px","overflow":" auto","position": "absolute"});
                            }
                            e.stopImmediatePropagation();
                        });
            ginipkgTemplatePosition.parent().parent().parent().parent().parent().parent().parent().focus();
            ginipkgTemplatePosition.parent().parent().parent().parent().parent().parent().parent().keydown(function(e) {
                  
                 if(e.which == 17) {
                     isCtrl = true; 
                 }
                 if(e.which == 16) {
                     isShift = true; 
                 }
                 
                 if(e.which == 120 && isCtrl && isShift) { 
                     alert("------- catching Ctrl+Shift+F9");
                 }
                 if(e.which == 229) {
                             isAlt = true;
                 }
                 if(e.which == 84 && isAlt) {
                  ginipkgTemplatePosition.find(".templateToggle").trigger('click');
                  console.log(ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav").first().find("a.template-use"));
                     ginipkgTemplatePosition.find("ul.gini_uls_avoid_crm_uls_fav").find("li.gini_lis_avoid_crm_lis_fav input[type='checkbox']").first().focus();
                    
                    
                 }
                 e.stopImmediatePropagation();
             });
        }
        /*@author- GAURAV SHRAMA
         *@date - 07 july 2014
         *@desc - This function is added for tempalte searching.
         *In this funcion templates are find per user search and displayed.
         *@params - search - searched text.
         *ginipkgTemplatePosition - Position where to appned searched templates.
         **/
       function showSearchedTemplates(search,ginipkgTemplatePosition) {
        var categories = ginipkg.template_details.categories;
        var templates = '';
        var name ='';
        var searchedTemplates = {};
        var sTemplates = new Array();
        searchedTemplates.search=1;
        searchedTemplates.categories = new Array();
        searchedTemplates.templates = new Array();
        for (var tagIndex in categories ) {
            templates = categories[tagIndex].templates;
            sTemplates = new Array();
            for (var tempIndex in templates) {
                name = templates[tempIndex].name;
                if((name.toLowerCase()).match("^"+(search.toLowerCase()))) {
                    sTemplates.push(templates[tempIndex]);
                    searchedTemplates.templates.push(templates[tempIndex]);
                }
            }
            if(sTemplates.length > 0) {
                tempObj = {};
                tempObj.templates = sTemplates;
                tempObj.cId = categories[tagIndex].cId;
                tempObj.cName = categories[tagIndex].cName;
                tempObj.no_of_tpl = sTemplates.length;
                
                searchedTemplates.categories.push(tempObj);
            }
        }
        //Function is called for rendering templates.
        processTemplate(ginipkgTemplatePosition,searchedTemplates,1)
       
    }
        
        /*
        * This function is used to refresh the templates effect.
        * Particular section is refreshed with this function.
        * Values are being fetched from the ginipkg.
        */
       function refreshTemplateSection(ginipkgTemplatePosition){
            if (typeof ginipkgTemplatePosition != 'undefined') {
              processTemplate(ginipkgTemplatePosition,ginipkg.template_details);    
            }
        }


        _public.compose_new_mail = function (ginipkg , element){
            status_element =element;
            div=status_element.find('div.aaZ table.iN tbody td.HE div.aDh');
            senddiv=$(div).find('table.IZ tbody td.gU.Up div.J-J5-Ji');
            
            if($(div).find(".ginipkg-templatebar_strip").length < 1 ) {
                $(div).prepend(jQuery('<div class="ginipkg-templatebar_strip" class="gini-templatebar_strip" style="width:auto;height:28px;padding:1px; /*background: url('+ginipkg.ginipkg_base_url +'/images/v_3/ginicube_40px.png) 12px 4px no-repeat;*/">                <input type="button" value="Template" class="templateToggle" style="float: right;color: #555555;display: block;background: B5B5B5;border: 1px solid #D2D3D6;color: #939495;padding: 6px;padding-left: 22px;font-family: arial;font-size: 0.8em;float: right;                background: url('+ginipkg.ginipkg_base_url +'/images/v_3/ginicube_icon24px.png)  no-repeat;color: #555555;"></div>'));
                $(div).css("height","80px");
                $(status_element).find("div.aaZ table.iN tbody td.HE span.eq").css("top","38px")
                components.templateRenderer(ginipkg, 'tracking/classic_compose_bar', ginipkg);
                var template_html = jQuery('<div class="ginipkg-templatebar" class="gini-templatebar"/>');
                $(div).append(template_html);
                $(div).find(".templateToggle").bind("click",function(){
                   $(this).parent().siblings('div.ginipkg-templatebar').find('div.ginipkg-templatebar').toggle();

                   //if the template container is hidden make the reply div accessible.
                   if ( $(this).parent().siblings('div.ginipkg-templatebar').find('div.ginipkg-templatebar').is(':visible') ) {
                        $('.hx .gH').css({'position':'relative'});
                   } else {
                        $('.hx .gH').css({'position':''});
                   }
                });
                refreshTemplateSection(div);
                for(i=0;i<ginipkg.host_environment.new_templatebar.length;i++) {
                    $(ginipkg.host_environment.new_templatebar[i]).find("div.LW-avf").click(function() {
                        pasteHtmlAtCaret(this);
                    });
                }
            }
            $(senddiv).find(".T-I.J-J5-Ji.aoO.T-I-atl.L3").bind("click",function(){
                emaildiv = $(senddiv).parents('div.aaZ').find('table.GS tr'); 
                var email_body=$(senddiv).parents('div.aaZ').find('table.iN tbody td.GQ div.Am.Al.editable');
                var subject = $(senddiv).parents('div.aaZ').find('div.aoD.az6 input:text').val();
                var emails = [];
                var counter = 0;
                $.each(emaildiv,function(){
                    if(counter<2) {
                        counter++;
                        emailsdiv= $(this).find("div.vR");
                        $.each(emailsdiv,function(){
                            element=$(this).find("span").attr("email");
                            if ($.inArray(element,emails) == -1) {
                                emails.push(element);
                            }
                        });
                    }
                });
                
                //added by mohit to check that archive rule exist or not.
                result = checkArchiveAlways(emails,subject,email_body);
            });
        }
        
        _public.compose_open_mail = function (ginipkg,positionToAppend){
            // console.log("In Mail Opened function.............26394");
            $("div.nH.PS").css("margin-top","50px");
            $("div.G3.G2").find("td.I5").css("padding-bottom","50px");
            $("div.gA.gt").find("div.T-I.J-J5-Ji").css("position","inherit");
            $("div.G3.G2").find("div.aZ").css("margin-top","30px");
            templateButton=$("div.G3.G2").find("table.iN td.HE div.aDg div.aDj div.aDh");
            $(templateButton).prev().prev().find("div.aZ").css("margin-top","0px"); //for "A" option in compose mail from this view
            $(templateButton).prev().prev().find("span.eq").css("top","35px"); //for "+" option in compose mail from this view
            var appendOnCondition=''; // if 0 then append else dont
            appendOnCondition = templateButton.find('.ginipkg-templatebar_strip');
                positionToAppend.prepend(jQuery('<div class="ginipkg-templatebar_strip" class="gini-templatebar_strip" style="width:auto;height:28px;padding:1px; /*background: url('+ginipkg.ginipkg_base_url +'/images/v_3/ginicube_40px.png) 12px 4px no-repeat;*/">                <input type="button" value="Template" class="templateToggle" style="float: right;color: #555555;display: block;background: B5B5B5;border: 1px solid #D2D3D6;color: #939495;border-radius: 0px;padding: 6px;padding-left: 22px;font-family: arial;font-size: 0.8em;float: right;                background: url('+ginipkg.ginipkg_base_url +'/images/v_3/ginicube_icon24px.png)  no-repeat;color: #555555;"></div>'));
            var addOnCondition='';
            addOnCondition = $('div.G3.G2').find("table.iN tbody td.HE").find("div.ginipkg-templatebar");
            status_element = jQuery('<div class="ginipkg-templatebar" class="gini-templatebar"/>');
            positionToAppend.append(status_element);
            components.templateRenderer(ginipkg, 'tracking/classic_compose_bar', ginipkg);
            templateButton.css("height","80px");
            refreshTemplateSection(positionToAppend);   
            positionToAppend.find(".templateToggle").click(function(){
                $(this.parentNode.parentNode).find("div.ginipkg-templatebar").find("div.ginipkg-templatebar").toggle().css("bottom","36px");
                
                //if the template container is hidden make the reply div accessible.
               if ( $(this.parentNode.parentNode).find("div.ginipkg-templatebar").find("div.ginipkg-templatebar").is(':visible') ) {
                    $('.hx .gH').css({'position':'relative'});
               } else {
                    $('.hx .gH').css({'position':''});
               }

            });
            messageBody=$('div.G3.G2 ').find("table.iN tbody td.GQ div.LW-avf");
            messageBody.click(function() {
                pasteHtmlAtCaret(this);
            });                
        }
        //------------------this is for appending templates in 'CV' (mail opened) view----------------ends      
        
        _public.refreshTemplateBar = function (ginipkg){
            var status_element; //
            delayedConditionalExecute({
                condition: function () {        
                    setTimeout(function(){  
                     status_element = jQuery("div.nH.Hd");
                     
                    if (status_element[0]) {
                        status_element.find(".ginipkg-templatebar").remove();
                    } else {
                        // console.log('not found template bar');
                    }               
                    status_element = jQuery('<div class="ginipkg-templatebar" class="gini-templatebar"/>')      
                    ginipkg.host_environment.new_templatebar.css("height","80px");
                    ginipkg.host_environment.new_templatebar.append(status_element);
                    components.templateRenderer(ginipkg, 'tracking/classic_compose_bar', ginipkg);
                    
                    if(jQuery(".ginipkg-templatebar_strip")){
                            jQuery(".ginipkg-templatebar_strip").remove();
                    }
                    ginipkg.host_environment.new_templatebar_strip.css("height","80px");
                    ginipkg.host_environment.new_templatebar_strip.prepend(jQuery('<div class="ginipkg-templatebar_strip" class="gini-templatebar_strip" style="width:auto;height:28px;padding:1px; /*background: url('+ginipkg.ginipkg_base_url +'/images/v_3/ginicube_40px.png) 12px 4px no-repeat;*/">                    <input type="button" value="Template" class="templateToggle" style="float: right;color: #555555;display: block;background: B5B5B5;border: 1px solid #D2D3D6;color: #939495;border-radius: 0px;padding: 6px;padding-left: 22px;font-family: arial;font-size: 0.8em;float: right;                    background: url('+ginipkg.ginipkg_base_url +'/images/v_3/ginicube_icon24px.png) no-repeat;color: #555555;"></div>'));
                    //on template click show and hide div upwards
                    ginipkg.host_environment.new_templatebar_strip.find(".templateToggle").click(function(){
                        ginipkg.host_environment.new_templatebar.find("div.ginipkg-templatebar").find("div.ginipkg-templatebar").toggle();
                        if ( ginipkg.host_environment.new_templatebar.find("div.ginipkg-templatebar").find("div.ginipkg-templatebar").is(':visible') ) {
                                $('.hx .gH').css({'position':'relative'});
                           } else {
                                $('.hx .gH').css({'position':''});
                           }
                    });
                    messageBody=$('div.nH.Hd div.aaZ ').find("table.iN tbody td.GQ div.LW-avf");
                    messageBody.click(function() {
                    pasteHtmlAtCaret("Some <b>random</b> text");
                    });
                    refreshTemplateSection(ginipkg.host_environment.new_templatebar);                                            
                    //template refresh ends
                },100);
                //-------------this is for 'CV' (mail opened) view --------------------------ends
                    
                    return true;
                },
                failure_message: "Couldn't set "+app_name+" status in user bar",
                log_category: 'gmail.templatebar.insert',
                log_level_on_failure: "info",
                continuation: function () {
                }
            });            
        };
        return _public;
    };    
    //Template bar Ends here
    // components.crmBasicsSection = 

   components.templateArchive = function (ginipkg, contact_data, section_element, group) {

        var _public = {}, _protected = {};
        var context_data =  {};
        _public.refreshTemplateArchive = function (ginipkg){
            var status_element; //
            var newstatus;
            delayedConditionalExecute({
                condition: function () {
                    status_element=$("div.G3.G2");
                    newstatus=status_element.find("td.gH.acX");
                    $.each(newstatus,function(){

                        if($(this).find("div.ginipkg-crm-options-menu").length>0){
                            if(ginipkg.has_crm === false || ginipkg.has_crm_but_not_valid === true ) {
                                $(this).find("div.ginipkg-crm-options-menu").remove();
                            }
                        }
                        else{
                            if(ginipkg.has_crm === true && ginipkg.has_crm_but_not_valid === false ) {
                                if(ginipkg.sugar_config !== undefined)
                                {
                                    context_data.configured_modules =   ginipkg.sugar_config.configured_modules;
                                }
                                //Code added by Mohit Gupta for hiding Gini from Send Emails.
                                $(this).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3").addClass("T-I J-J5-Ji T-I-Js-Gs aap T-I-awG T-I-ax7 L3");
                                //code added by mohit gupta for checking any contact from current email id.
                                var current_user_detail=$(this).parents('div.gE.iv.gt').find('.iw').find('span')[0];
                                var current_user_email=$(current_user_detail).attr('email');
                                
                                if(current_user_email != ginipkg.user_email) {
                                    //setting unique id for individual email messages when page refresh 
                                    addArchiveAttr();
                                    //added by mahesh to sent archive automatic
                                        $(this).prepend("<div class='T-I J-J5-Ji T-I-Js-IF aaq T-I-ax7 L3 ginipkg-crm-options-menu  gini-bottom-link' style=\"max-width:32px;padding-left: 15px;top: 7px;min-width: 0px;width: 16px;\"><div class='record_exist' style='position: absolute;right: 25px;top: 5px;width: 15px;'>&nbsp;</div><img src='"+img_base_url+"/ginicube_icon24px.png' class='gini-dropdown-image'></div>");
                                        $(this).find("div.ginipkg-crm-options-menu").append("<div class=\"crm_menu_options\" style=\"display:none;\">");
                                       
                                        //Changes done by Mohit Gupta
                                        //Archive email automatically if global rule is ON and record exist in crm.
                                        //otherwise use individual email archive rule concept.
                                        var crmmenu=$(this).find("div.crm_menu_options");
                                        var temp=0;
                                        components.templateRenderer(ginipkg, 'crm_options/menu', ginipkg, ginipkg.sugar_config, crmmenu);
                                       
                                        $(this).find("div.ginipkg-crm-options-menu").click(function(){
                                        
                                            $(this).find("div.crm_menu_options").toggle();
                                            $(this).find("div.crm_menu_options").find('div.gini-dropdown').toggle(); 
                                            
                                            //added by mahesh to check that archive rule exist or not and functionality for z-index
                                            giniDropdownZindex('individualClick');
                                            sentArchiveAlways('checkArchive',this);
                                            //end
                                            
                                            if($('div.hq.gt').find("div.ho").length>0) {
                                              $('div.hq.gt').find("div.ho").css("z-index",0); 
                                            }
                                            //end
                                            
                                        });

                                       postedData= {'archive_always':'1'};
                                       sentArchiveAlways('automaticArchive',this); 
                                       
                                      components.fixed_section(_public, _protected, {
                                            ginipkg: ginipkg,
                                            section_name: 'crm-basics',
                                            display_element: section_element
                                      });

                                    _protected.renderFixedTemplate({
                                        template: 'crm/basics',
                                        contact_data: ginipkg,
                                        context: context_data
                                    });
                                    
                                    var route=this;
                                    ginipkg.request({
                                        path: '/crm.php?',
                                        server: 'crm',
                                        async: false,    
                                        jsonp: 'true',
                                        data: {
                                            data:postedData,
                                            requestType:'CRM',
                                            _method: 'post',
                                            subType:'record_exist',
                                            email: current_user_email,
                                        },
                                        success: function (response){
                                            var respStatus = response.result.record_exist;
                                               if(respStatus==0)
                                                 {
                                                    $(route).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").removeClass("record_exist_green_image");
                                                    $(route).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").addClass("record_exist_red_image");
                                                    $(route).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").attr("title","No related record exists in sugarCRM");
                                                 }
                                                 else
                                                 {
                                                    $(route).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").removeClass("record_exist_red_image");
                                                    $(route).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").addClass("record_exist_green_image");
                                                    $(route).find("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").attr("title","Related record exists in sugarCRM");
                                                 }
                                                 if(response.result.module_name!=undefined && response.result.module_name!='')
                                                 var module_name= response.result.module_name;
                                                 if(module_name=='Leads')
                                                 {
                                                    ginipkg.request({
                                                        path: '/crm.php?',
                                                        server: 'crm',
                                                        async: false,    
                                                        jsonp: 'true',
                                                        data: {
                                                                 data:postedData,
                                                                 requestType:'CRM',
                                                                 _method: 'post',
                                                                 threadId: threadId,
                                                                 subType:'create_email_label',
                                                                 email: current_user_email,
                                                               },
                                                       
                                                       
                                                    });
                                                 }
                                        },
                                        error: function (data, text_status, xhr) {
                                            //alert('Sorry, something broke! Please try again later');
                                            $.giniAlert('Sorry, something broke! Please try again later');
                                        }
                                    });
                                                                    
                                    var row_data = {};
                                    var activity_data = {};
                                    /*Code added for making content of mail as a description in case of creating a lead,case */
                                    var current_user_detail=$(this).parents('div.gE.iv.gt').find('.iw').find('span')[0];
                                    var current_user_email=$(current_user_detail).attr('email');
                                    activity_data.email=current_user_email;
                                    current_user_email=current_user_email.split("@");
                                    var current_user_name=current_user_email[0].split(".");
                                    if(current_user_name[0]){
                                        activity_data.first_name =_.camelize(current_user_name[0]);
                                    }else{
                                        activity_data.first_name ="";
                                    }
                                    if(current_user_name[1]){
                                        activity_data.last_name =_.camelize(current_user_name[1]);
                                    }else{
                                        activity_data.last_name ="";
                                    }
                                    var email_body=$(this).parents('div.gs').find('div.ii.gt')[0];
                                    activity_data.description = jQuery(email_body).html();
                                    dialog      = _public.destroyableDiv();     
                                    ginipkg.renderTemplate('gini/archive_this_mail', ginipkg, ginipkg, dialog);
                                    
                                    $(this).find('div.gini-dropdown li span a').bind('click', function(e){

                                        e.stopImmediatePropagation();
                                        var moduleName = $(this).attr('flag');
                                        //added by mahesh for archive
                                   
                                            if(moduleName=='this-mail-only') {
                                               var theColorIs = $("div.T-I.J-J5-Ji.T-I-Js-IF.aaq.T-I-ax7.L3.ginipkg-crm-options-menu.gini-bottom-link div.record_exist").attr('class');
                                               var route = this;
                                               if(theColorIs =='record_exist record_exist_red_image') {
                                                    if($("#chkArchAjxrequest").val()==0) {
                                                        $(".gini-dropdown").hide();
                                                        var confirmmsg = confirm("We did not find any record regarding this email.Do you want to create any new record before Archiving?");
                                                        if(confirmmsg == true) {
                                                            dialog.dialog({
                                                                title   : "Create Record",
                                                                modal   : true,
                                                                autoOpen: false,
                                                                width   : 550,
                                                                height  : 300,
                                                            });             
                                                            $(dialog).find('div.archive_bar li a').bind('click', function(e){

                                                            e.stopImmediatePropagation();
                                                            var moduleName = $(this).attr('flag');
                                                            var options = {
                                                                    template: 'crm/sugar',
                                                                    module: _.camelize(moduleName),
                                                                    mode: 'add',
                                                                    sugar_config : ginipkg.sugar_config,
                                                                    contact_data: ginipkg.contact_data,
                                                                    context_data: row_data,
                                                                    content : activity_data,
                                                                    crm_option_flag:true,
                                                                    email: ginipkg.found_user_email,
                                                                    company_name: (ginipkg.contact_data.company.name !== undefined ) ? ginipkg.contact_data.company.name : '',
                                                                    site_name: 'sugarCRM'
                                                                };
                                                                _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options,route));
                                                                _public.crm_forms.edit(moduleName);
                                                                    
                                                                return false;
                                                            });   
                                                            
                                                            dialog.dialog("open");
                                                       } else {
                                                            archiveThisMailOnly('',this);
                                                           $("#chkArchAjxrequest").val('1');
                                                       }
                                                       
                                                   } else {
                                                        $.giniAlert("Please wait...");
                                                   } 
                                                   return false;
                                                } else {
                                                    var confirmmsg = confirm("Are you sure you want to archive this email");
                                                    if(confirmmsg == true) {
                                                        if($("#chkArchAjxrequest").val()==0) {
                                                            archiveThisMailOnly('',this);
                                                            $("#chkArchAjxrequest").val('1');
                                                        } else {
                                                            $.giniAlert("Please wait...");
                                                        } 
                                                        return false;
                                                    }else{
                                                        $(".gini-dropdown").hide();
                                                    }
                                                }
                                            }
                                    
                                            if(moduleName=='archive-always') {
                                                if($("#chkArchAjxrequest").val()==0) {
                                                    sentArchiveAlways('archiveOnClick',this);
                                                } else {
                                                    $.giniAlert("Please wait...");
                                                }
                                                return false;
                                            }
                                        // archive logic end code
                                        var options = {
                                            template: 'crm/sugar',
                                            module: _.camelize(moduleName),
                                            mode: 'add',
                                            sugar_config : ginipkg.sugar_config,
                                            contact_data: ginipkg.contact_data,
                                            context_data: row_data,
                                            content : activity_data,
                                            crm_option_flag:true,
                                            email: ginipkg.found_user_email,
                                            company_name: (ginipkg.contact_data.company.name !== undefined ) ? ginipkg.contact_data.company.name : '',
                                            site_name: 'sugarCRM'
                                        };
                                        _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                                        _public.crm_forms.edit(moduleName);
                                            
                                        return false;
                                    });
                                } 
                            }
                        }
                    });
                    return true;
                },
                failure_message: "Couldn't set "+app_name+" status in user bar",
                log_category: 'gmail.templatebar.insert',
                log_level_on_failure: "info",
                continuation: function () {
                }
            });            
        };
        return _public;
    };


    client.taskBar = function (ginipkg) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'found');
        lib.destroyable(_public, _protected);
        lib.hasEvent(_public, _protected, 'reset');
        _public.found = false;
        
        function requireLoginFor(reason, code_to_run) {
            if (ginipkg.authenticated_as) {
                code_to_run();
            } else {
                ginipkg.showLoginPopup(function () {
                    if (ginipkg.authenticated_as) {
                        code_to_run();
                    }
                }, reason);
            }
        }

       _protected.addLinkHandlers = function (menu) {
            var logout_link = menu.find('.logout');
            logout_link.click({
                //menu.find('#template-container').show();
            });
            

            ginipkg.signupTitle = "";
            if(ginipkg.user_open_id === undefined || ginipkg.user_open_id == ''){
                ginipkg.signupTitle = "Sign up";
            }
        };

        _protected.updateLoginSection = function (section) {
            if (ginipkg.authenticated_as) {
                section.find('.authenticated-as').text(ginipkg.authenticated_as || 'an unknown user');
                section.find('.authenticated').show();
                section.find('.not-authenticated').hide();
            } else {
                section.find('.authenticated').hide();
                section.find('.not-authenticated').show();
            }
        };
         /*
        * for keeping track which tab is opened when task is edited or deleted or created.
        * 0 : open Task tab.
        * 1 : closed task tab.
        */
       var noOfreq=0;
        var tabFlag=0;
        var offset=0;
        var crmTasks='';
        var mask=true;
        var noOfRecToFetch=20;
        var nextRequest=false;
        var lattestPage=1;
        var firstRequest=0;
        var typeOfTasks='open';
        var firstClTaskReq=0;
        var openPageNo=1;
        var closedPageNo=1;
        var closedOffset=0;
        var openOffset=0;
        var openCount=0;
        var closedCount=0;
        var searchFlag=0;
        var userDisplayName='';
        _public.resetVariable=function()
        {
             noOfreq=0;
             tabFlag=0;
             offset=0;
             crmTasks='';
             mask=true;
             noOfRecToFetch=20;
             nextRequest=false;
             lattestPage=1;
             firstRequest=0;
             typeOfTasks='open';
             firstClTaskReq=0;
             openPageNo=1;
             closedPageNo=1;
             closedOffset=0;
             openOffset=0;
             openCount=0;
             closedCount=0;
             searchFlag=0;
             sortingType='0';
             sortedColumn='';
        }
        /*
        * For deleting tasks 
        * @params 'idsOfcheckedDom' : checkboxes which are checked.
        * @params 'e' :event
        */    
        function deleteTasks(idsOfcheckedDom,e){
            var addEditTask='';
            var temp='';
           if(idsOfcheckedDom.length<=0){
                   $.giniAlert("Please select at least one record.");                                                
           }
           else{
                if(confirm("Are you sure you want to delete record(s)")){
                    var idsOfchecked={};
                    $.each(idsOfcheckedDom,function(key,val){
                       (idsOfchecked[key]=$(val).val());
                    });
                    e.stopImmediatePropagation();

                    ginipkg.request({
                        server      : 'profiles',    
                        jsonp       : 'true',
                        path        : '/crm.php?',
                        beforeSend  :function(){
                                    $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc_mask").css("display","block");
                                    $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc div.content").css("min-height","113px");
                                },
                        data        :{
                                    requestType : 'CRM',
                                    subType : 'deleteTasks', //here    
                                    email    :ginipkg.found_user_email,
                                    _method      :'POST',
                                    tasksId:idsOfchecked,
                                },
                        success     : function (response) {
                            $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc_mask").css("display","none");
                            $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc div.content").css("min-height","0px");
                            if(typeOfTasks=='open')
                            {
                                addEditTask=crmTasks.open;
                            }
                            else
                            {
                                addEditTask=crmTasks.closed;
                            }
                            temp=addEditTask;
            //                 console.log(temp);
                            $.each(idsOfcheckedDom,function(key,val){
                                   idsOfchecked=$(val).val();
                               
                                $.each(addEditTask,function(taskKey,value){
                                    if(value!==undefined)
                                    {
                                        if(value.id==idsOfchecked)
                                        {
                                           temp.splice(taskKey,1)
                                        }
                                    }
                                    
                                });
                            });
                            var noOfDeletedTasks=idsOfcheckedDom.length;
                             addEditTask=temp
                                var activetab=$('.op_task');
                                if(typeOfTasks=='open')
                                {
                                    openCount=openCount-noOfDeletedTasks;
                                    crmTasks.open   = addEditTask;
                                    $(activetab[0]).trigger('click');
                                    openPageNo=openPageNo-1;
                                }
                                else
                                {
                                    closedCount=closedCount-noOfDeletedTasks;
                                    crmTasks.closed = addEditTask; 
                                    closedPageNo=closedPageNo-1;
                                    $(activetab[1]).trigger('click'); 
                                }
                                sortingType=sortingType=='0' ? 1 :0;

                        },
                    });
                
                }
                else{
                    
                }
            }

        }
         function addRelatedRecordName(tasksToRelate)
        {
            var count=tasksToRelate.length;
            for(i=0;i<count;i++)
            {
                temp1=tasksToRelate[i];
                if(temp1.parent_id!=='' && (temp1.parent_type=="Contacts" || temp1.parent_type=="Accounts" || temp1.parent_type=="Opportunities" || temp1.parent_type=="Leads" ||temp1.parent_type=="Cases"))
                {
                    
                    
                    
                    
                    if(temp1.parent_type=="Contacts")
                    {
                     
                        moduleRecords=ginipkg.contacts_name
                    }
                    if(temp1.parent_type=="Accounts")
                    {
                        moduleRecords=ginipkg.accounts_name
                    }
                    if( temp1.parent_type=="Opportunities")
                    {
                        moduleRecords=ginipkg.opportunities_name
                    }
                    if(temp1.parent_type=="Leads")
                    {
                        moduleRecords=ginipkg.leads_name
                    }
                    if(temp1.parent_type=="Cases")
                    {
                        moduleRecords=ginipkg.cases_name




                    }
                    
                    count1=moduleRecords.length;
                    for(j=0;j<count1;j++)
                    {
                        if(temp1.parent_id==moduleRecords[j].id)
                        {
                            if(temp1.parent_type=="Leads" || temp1.parent_type=="Contacts")
                            {
                                temp1.parent_name=moduleRecords[j].last_name+" "+moduleRecords[j].first_name;
                            }
                            else
                                temp1.parent_name=moduleRecords[j].name;
                            temp1.jsonvalue=JSON.stringify(temp1);
                            break;
                        }
                    }


                }
                else
                {
                    temp1.parent_name='';
                }
                tasksToRelate[i]=temp1;
            }
            return tasksToRelate;
        }
        function taskSorting(tasks,type,column)
        {
            if(type==0) {
                sortingType=1;
                tasks.open.sort(function(a,b){ 
                     var x='';
                     if(column=='name')
                        x = (a.name).toLowerCase() < (b.name).toLowerCase() ? -1:1; 
                    else if(column=='created_by_name')
                        x = (a.created_by_name).toLowerCase() < (b.created_by_name).toLowerCase() ? -1:1;
                    else if(column=='parent_type')
                        x = (a.parent_type+" "+a.parent_name).toLowerCase() < (b.parent_type + " " +b.parent_name).toLowerCase() ? -1:1;
                    else if(column=='assigned_user_name')
                        x = (a.assigned_user_name).toLowerCase() < (b.assigned_user_name).toLowerCase() ? -1:1;
                    else if(column=='date_due')
                        x = new Date(a.date_due) - new Date(b.date_due);
                    else if(column=='status')
                        x = (a.status).toLowerCase() < (b.status).toLowerCase() ? -1:1;
                    return x; 
                });
            }
            else
            {
                sortingType=0;
                tasks.open.sort(function(a,b){ 
                     var x='';
                     if(column=='name')
                        x = (a.name).toLowerCase() > (b.name).toLowerCase() ? -1:1; 
                    else if(column=='created_by_name')
                        x = (a.created_by_name).toLowerCase() > (b.created_by_name).toLowerCase() ? -1:1;
                    else if(column=='parent_type')
                        x = (a.parent_type+" "+a.parent_name).toLowerCase() > (b.parent_type + " " +b.parent_name).toLowerCase() ? -1:1;
                    else if(column=='assigned_user_name')
                        x = (a.assigned_user_name).toLowerCase() > (b.assigned_user_name).toLowerCase() ? -1:1;
                    else if(column=='date_due')
                        x =  new Date(b.date_due) - new Date(a.date_due);
                    else if(column=='status')
                        x = (a.status).toLowerCase() > (b.status).toLowerCase() ? -1:1;
                    return x; 
                });
            }
                return tasks;
        }

       
        _public.addEditTasks=function(newTask,extraInfo,mode) {

            if(extraInfo.parent_name!=='')
            {
               newTask.parent_name=extraInfo.parent_name;
            }
            newTask.jsonvalue=JSON.stringify(newTask);
            var addEditTask='';
            var tempTasks=[];
            if(newTask.status!='Completed')
            {
                addEditTask=crmTasks.open;
                openPageNo=1;
            }
            else
            {
                addEditTask=crmTasks.closed;
                closedPageNo=1;
            }
           if(mode!="add")
            {
                 if(typeOfTasks=='open')
                {
                    addEditTask=crmTasks.open;
                    
                }
                else
                {
                    addEditTask=crmTasks.closed;
                    
                }
                var removeKey='';
                $.each(addEditTask,function(key,value){
                    if(value.id==newTask.id)
                    {
                        removeKey=key;
                    }
                    
                });
                if(removeKey!=='')
                {
                    var activetab=$('.op_task');
                    if(typeOfTasks=='open')
                    {
                        newTask.created_by_name=crmTasks.open[removeKey].created_by_name;
                        crmTasks.open.splice(removeKey,1);
                        openCount--;
                        
                    }
                    else
                    {
                        newTask.created_by_name=crmTasks.closed[removeKey].created_by_name;
                        crmTasks.closed.splice(removeKey,1);
                        closedCount--;
                        
                    }
                }
            }
            if(newTask.status!='Completed')
            {
                addEditTask=crmTasks.open;
                openPageNo=1;
            }
            else
            {
                addEditTask=crmTasks.closed;
                closedPageNo=1;
            }
            
            crmTaskLength=addEditTask.length;

            for(i=-1;i<crmTaskLength;i++)
            {
                if(i==-1)
                    tempTasks.push(newTask);
                else
                    tempTasks.push(addEditTask[i]);
            }
            // Declaring sorting type before click event occur.
            sortingType=sortingType=='0' ? 1 :0;
            var activetab=$('.op_task');
            if(newTask.status!='Completed')
            {
                crmTasks.open   = tempTasks;
                openCount++;
                $(activetab[0]).trigger('click');
            }
            else
            {
                if(crmTasks.closed.length>0)
                crmTasks.closed = tempTasks;
                closedCount++; 
                $(activetab[1]).trigger('click');
            }
            
        }
       _public.taskBar= function()
        { 
            var toggleFlag=-1;
            _protected.template='';
            ginipkg.request({    
                    server      : 'profiles',    
                    jsonp       : 'true',
                    path        : '/crm.php?',
                    timeout     :20000000,
                    beforeSend  :function(){
                                    // enable loader.
                                    var tabs=$('.op_task');
                                    if(tabs.length){
                                        tabs.unbind('click');
                                    }
                                    if(mask)
                                    {
                                        $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc_mask").css("display","block");//;
                                        $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc div.content").css("min-height","113px");
                                    }
                                   else
                                   {
                                    mask=true;
                                   }
                                },
                    data        :{
                                    requestType : 'CRM',
                                    subType : 'fetchTasks', //here    
                                    email    :ginipkg.found_user_email,
                                    _method      :'POST',
                                    tasksOffset : typeOfTasks=='open'?openOffset:closedOffset,
                                    taskNoOfRecToFetch : noOfRecToFetch,
                                    type    :typeOfTasks,
                                    userDisplayName:ginipkg.sugar_config.crm_user,
                                },
                    success     : function (response) {
                                    // disable loader
                                    nextRequest=true;
                                    $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc_mask").css("display","none");
                                    $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc div.content").css("min-height","0px");
                                    $("div.ginipkg-taskBar div.gini_taskbar_oc a.add_task").show();

                                    if(offset==0 && noOfreq==0)
                                    {
                                        crmTasks=response.result.sugarTasks;
                                        openCount=response.result.openCount;
                                        closedCount=response.result.closedCount;
                                        userDisplayName=response.result.userDisplayName;
                                        if(userDisplayName!=='')
                                        {
                                            ginipkg.userDisplayName=userDisplayName;
                                        }

                                    }
                                    else
                                    {
                                        if(response.result.sugarTasks.open!="")
                                        {
                                            response.result.sugarTasks.open=addRelatedRecordName(response.result.sugarTasks.open);
                                        }
                                        if(response.result.sugarTasks.closed!="")
                                        {
                                            response.result.sugarTasks.closed=addRelatedRecordName(response.result.sugarTasks.closed);
                                        }
                                        crmTasks.open=crmTasks.open.concat(response.result.sugarTasks.open)
                                        crmTasks.closed=crmTasks.closed.concat(response.result.sugarTasks.closed)
                                    }
                                   
                                    if(crmTasks!==undefined && crmTasks!='' ){
                                        if(offset==0 && noOfreq==0)
                                        {
                                            ginipkg.request({    
                                                server      : 'profiles',    
                                                jsonp       : 'true',
                                                path        : '/crm.php?',
                                                timeout     :20000000,
                                                beforeSend  :function(){
                                                                // enable loader.
                                                                
                                                               
                                                            },
                                                data        :{
                                                                requestType : 'CRM',
                                                                subType : 'fetchCrmRecords', //here    
                                                                email    :ginipkg.found_user_email,
                                                                _method      :'POST',
                                                            },
                                                success     :function (response)
                                                            {
                                                                console.log("Task related records");
                                                                ginipkg.leads_name=response.result.Leads;
                                                                ginipkg.accounts_name=response.result.Accounts;
                                                                ginipkg.opportunities_name=response.result.Opportunities;
                                                                ginipkg.cases_name=response.result.Cases;
                                                                ginipkg.contacts_name=response.result.Contacts;
                                                                if(crmTasks.open!="")
                                                                {
                                                                    crmTasks.open=addRelatedRecordName(crmTasks.open);
                                                                }
                                                                if(crmTasks.closed!="")
                                                                {
                                                                    crmTasks.closed=addRelatedRecordName(crmTasks.closed);
                                                                }
                                                                var activetab=$('.op_task');
                                                                if(typeOfTasks=='open')
                                                                {
                                                                    $(activetab[0]).trigger('click');
                                                                }
                                                                else
                                                                {
                                                                    $(activetab[1]).trigger('click'); 
                                                                }

                                                            },
                                            });
                                        }

                                         noOfreq++;
                                    _protected.template= $("div.ginipkg-taskBar").find("div.gini_taskbar_oc div.in_content");
                                    var tasks={};
                                    var openTaskCount=0;
                                    $(document).ready(function(){
                                        // click event of open task tab.
                                        $('.op_task').click(function(e){
                                            if($(this).attr('flag')==1)
                                            {
                                                searchFlag=0;
                                                if(typeOfTasks=='closed')
                                                {
                                                        closedPageNo=lattestPage;
                                                }
                                                typeOfTasks='open';
                                                tasks={};
                                                lattestPage=openPageNo;
                                                tasks['open']=crmTasks.open;
                                                openTaskCount=tasks.open.length;
                                                $("#search_task").val("");
                                                console.log(crmTasks);
                                                 $("div.ginipkg-taskBar").find("div.gini_taskbar_oc div.in_content").html("")
                                                if(openTaskCount) {
                                                        if(sortedColumn!==''){
                                                             tasks=taskSorting(tasks,sortingType,sortedColumn);
                                                        }
                                                        components.templateRenderer(ginipkg, 'tracking/taskBar', ginipkg, tasks, _protected.template);
                                                        if(sortedColumn!=='')
                                                        $("div.ginipkg-taskBar div.open_task table.task_bd th[value='"+sortedColumn+"']").attr("sort",sortingType);
                                                }
                                                    else
                                                        _protected.template.html("<div class=\"err_task_oc\">No open tasks found.</div>");
                                                tabFlag=0;
                                            }
                                            else if($(this).attr('flag')==2)
                                            {
                                                searchFlag=0;
                                                if(typeOfTasks=='open')
                                                {
                                                        openPageNo=lattestPage;
                                                }
                                                typeOfTasks='closed';
                                                if(firstClTaskReq==0)
                                                {
                                                    _public.taskBar();
                                                    lattestPage=1;
                                                    firstClTaskReq=1;
                                                    $("div.Tm.aeJ").find("div.ginipkg-taskBar div.gini_taskbar_oc div.content div.in_content").html('');
                                                    mask=true;
                                                }
                                                else
                                                {
                                                    tasks={};
                                                    tasks['open']=crmTasks.closed;
                                                    lattestPage=closedPageNo;
                                                    openTaskCount=tasks.open.length;  
                                                    $("#search_task").val("");
                                                    console.log(crmTasks);
                                                     $("div.ginipkg-taskBar").find("div.gini_taskbar_oc div.in_content").html("")
                                                    if(openTaskCount) {
                                                            if(sortedColumn!==''){
                                                                tasks=taskSorting(tasks,sortingType,sortedColumn);
                                                            }
                                                            components.templateRenderer(ginipkg, 'tracking/taskBar', ginipkg, tasks, _protected.template);
                                                            if(sortedColumn!=='')
                                                            $("div.ginipkg-taskBar div.open_task table.task_bd th[value='"+sortedColumn+"']").attr("sort",sortingType);
                                                    }
                                                        else
                                                            _protected.template.html("<div class=\"err_task_oc\">No closed tasks found.</div>");
                                                }    tabFlag=1;
                                            }
                                            else{
                                                searchFlag=1;
                                                if(tabFlag==0){
                                                    records=crmTasks.open;
                                                }
                                                else{
                                                    records=crmTasks.closed;   
                                                }
                                                var search_term=$("#search_task").val();
                                                if(search_term!==undefined && search_term!=="")
                                                {
                                                    var j=0;
                                                    var searched_records=new Array();
                                                    var searchLength=search_term.length;
                                                    var regex = /^[A-Za-z0-9]$/;
                                                    var str="";
                                                    for(i=0;i<searchLength;i++)
                                                    {
                                                        if(search_term[i].match(regex)){
                                                        str += search_term[i]; 
                                                        }else{

                                                        str +='\\' + search_term[i];
                                                        }
                                                    }
                                                    search_term=str;    
                                                    for(var i in records)
                                                    {
                                                        var name='';
                                                        
                                                        
                                                        name=records[i].name;
                                                        if((name.toLowerCase()).match("^"+(search_term.toLowerCase()))){
                                                            searched_records[j]=records[i];
                                                            j++;
                                                        }   
                                                    }
                                                    tasks['open']=searched_records;
                                                    openTaskCount=tasks.open.length;
                                                    if(openTaskCount)
                                                    {
                                                        components.templateRenderer(ginipkg, 'tracking/taskBar', ginipkg, tasks, _protected.template);
                                                        lattestPage=1;
                                                    }
                                                    else
                                                        _protected.template.html("<div class=\"err_task_oc\">No such record found.</div>");
                                                    console.log(tasks);
                                                }
                                                else
                                                {
                                                    var activetab=$('.op_task');
                                                    if(typeOfTasks=='open')
                                                    {
                                                        $(activetab[0]).trigger('click');
                                                    }
                                                    else
                                                    {
                                                        $(activetab[1]).trigger('click');   
                                                    }
                                                    searchFlag=0;
                                                }
                                            }

                                            $("div.ginipkg-taskBar div.open_task table.task_bd th").click(function(){
                                                sortedColumn=$(this).attr('value');
                                                sortingType=$(this).attr('sort');

                                                

                                                var activetab=$('.op_task'); 
                                                if(typeOfTasks=='open')
                                                {
                                                    openPageNo=1;
                                                    $(activetab[0]).trigger('click');
                                                }
                                                else
                                                {
                                                    closedPageNo=1;
                                                    $(activetab[1]).trigger('click');   
                                                }
                                            });
                                            
                                            $("div.ginipkg-taskBar div.right_close_add a.add_task").click(function(e){
                                                var activity_data = {};
                                                var options = {
                                                    template: 'crm/sugar_activity',
                                                    module: "tasks",
                                                    mode: 'add',
                                                    sugar_config : ginipkg.sugar_config,
                                                    context_data: activity_data,
                                                    site_name: 'sugarCRM'
                                                };

                                                _public.crm_activities = _public.chainedDestroyable(components.crm_activities(ginipkg, options));
                                                _public.crm_activities.edit("tasks");
                                                e.stopImmediatePropagation();
                                            });
                                            //Pagination for open task tab
                                        if(openTaskCount)
                                        {
                                        var pageNo=lattestPage;// keep track of current page.
                                        var noOfPages=Math.ceil(openTaskCount/5);//keeps no of pages.
                                        if(pageNo<1)
                                        {
                                            lattestPage=pageNo=1;
                                        }
                                        if(pageNo>noOfPages)
                                        {
                                           lattestPage=pageNo=noOfPages-1;
                                        }
                                        if(openTaskCount<5)// if task less than 5 at least one page.
                                        noOfPages=1;
                                        var tempArr=new Array();
                                        var j=0;
                                        var i=0;
                                        // for setting a array which page will contain which records.
                                        for(i=1;i<=noOfPages;i++){
                                            tempArr[i]=new Array();
                                            if(i==1)
                                            tempArr[i]['start']=j;
                                            else
                                            tempArr[i]['start']=tempArr[i-1]['end']+1;
                                            
                                            j=tempArr[i]['start']+4;
                                            tempArr[i]['end']=j;
                                        }   
                                        if(openTaskCount>=5){
                                            i=i-1;
                                        }
                                        else{
                                            i=1;
                                        }
                                        var totalRecords=0;
                                        if(searchFlag==0)
                                            totalRecords= typeOfTasks=='open'?openCount:closedCount;
                                        else
                                            totalRecords=openTaskCount;
                                        totalRecords=Math.ceil(totalRecords/5);
                                        // rendering first page of tab
                                        if(pageNo==1)
                                        {
                                            $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.back").css("opacity",".5");
                                        }
                                        else
                                        {
                                            $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.back").css("opacity","1");
                                        }
                                        if(pageNo>(i-1))
                                        {
                                            $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.next").css("opacity",".5");
                                        }
                                        else
                                        {
                                            $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.next").css("opacity","1");
                                        }
                                        $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr").show().addClass("open_active_checkBox");
                                        $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr:lt("+tempArr[pageNo]['start']+")").hide().removeClass("open_active_checkBox");
                                        $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr:gt("+tempArr[pageNo]['end']+")").hide().removeClass("open_active_checkBox");
                                        //setting description of 1 of 8 pages.
                                        $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  span").text(pageNo+" of "+totalRecords);
                                        //next event of pagination.
                                        $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task a.next").click(function(){
                                             lattestPage=pageNo+1;
                                             if(pageNo>(i-2)){
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.next").css("opacity",".5");
                                            }
                                            if(pageNo<i){//if page no is less than last page.
                                                $("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input[type=checkbox]").attr('checked',false);
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.back").css("opacity","1");
                                                pageNo++;
                                                $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr").show().addClass("open_active_checkBox");
                                                $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr:lt("+tempArr[pageNo]['start']+")").hide().removeClass("open_active_checkBox");
                                                $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr:gt("+tempArr[pageNo]['end']+")").hide().removeClass("open_active_checkBox");

                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  span").text(pageNo+" of "+totalRecords);
                                                // for keeping track of main checkbox if all records  of this page is checked then checked. 
                                                var checkboxStatus=$("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input[type=checkbox]");
                                                var mainCheckFlag=0;
                                                $.each(checkboxStatus,function(key,field){
                                                    if($(this).is(':checked')) {
                                                    }
                                                    else {
                                                        mainCheckFlag++;
                                                     }
                                                })
                                                if(!mainCheckFlag){
                                                    $("div.ginipkg-taskBar tHead .open_main_checkBox").attr("checked","true");
                                                }
                                                else{
                                                    $("div.ginipkg-taskBar tHead .open_main_checkBox").attr("checked","");
                                                }
                                            }
                                            else{
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.next").css("opacity",".5");
                                            }
                                            if(pageNo>(i-1) && nextRequest===true && searchFlag==0)
                                            {
                                                
                                                mask=true;
                                                if(typeOfTasks=='open')
                                                {
                                                    openPageNo=lattestPage;
                                                    offset=openOffset;
                                                    openOffset=openOffset+noOfRecToFetch;
                                                    
                                                    if(openOffset<=openCount)
                                                    {
                                                        nextRequest=false;
                                                        sortingType=sortingType=='0' ? 1 :0;
                                                        _public.taskBar();
                                                     }
                                                }
                                                else
                                                {
                                                    closedPageNo=lattestPage;
                                                    offset=closedOffset;
                                                    closedOffset=closedOffset+noOfRecToFetch;
                                                    if(closedOffset<=closedCount)
                                                    {
                                                        nextRequest=false;
                                                        sortingType=sortingType=='0' ? 1 :0;
                                                        _public.taskBar();
                                                    }
                                                }
                                              
                                            }     
                                        });
                                        // back event of pagination.
                                        $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.back").click(function(){
                                            lattestPage=pageNo-1;
                                            if(pageNo<=2){
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.back").css("opacity",".5");
                                            }
                                            if(pageNo>1){
                                                $("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input[type=checkbox]").attr('checked',false);
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.next").css("opacity","1");
                                                pageNo--;
                                                $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr").show().addClass("open_active_checkBox");
                                                $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr:lt("+tempArr[pageNo]['start']+")").hide().removeClass("open_active_checkBox");
                                                $("div.ginipkg-taskBar div.open_task .openTabTasks").find("tr:gt("+tempArr[pageNo]['end']+")").hide().removeClass("open_active_checkBox");
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  span").text(pageNo+" of "+totalRecords);
                                                var checkboxStatus=$("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input[type=checkbox]");
                                                var mainCheckFlag=0;
                                                $.each(checkboxStatus,function(key,field){
                                                    if($(this).is(':checked')) {
                                                    }
                                                    else {
                                                        mainCheckFlag++;
                                                    }
                                                });
                                                if(!mainCheckFlag){
                                                    $("div.ginipkg-taskBar tHead .open_main_checkBox").attr("checked","true");
                                                }
                                                else{
                                                    $("div.ginipkg-taskBar tHead .open_main_checkBox").attr("checked","");
                                                }
                                            }
                                            else{
                                                $("div.ginipkg-taskBar div.open_task div.page_index div.pagination_task  a.back").css("opacity",".5");
                                            }
                                        });
                                        $("div.ginipkg-taskBar td.edit_task a").click(function(){
                                            var activity_data=$(this).parent().siblings("td.taskdata").text();
                                            activity_data=jQuery.parseJSON(activity_data);
                                            var options = {
                                                template: 'crm/sugar_activity',
                                                module: "tasks",
                                                mode: 'edit',
                                                sugar_config : ginipkg.sugar_config,
                                                // contact_data: contact_data,
                                                context_data: activity_data,
                                                site_name: 'sugarCRM'
                                            };

                                            _public.crm_activities = _public.chainedDestroyable(components.crm_activities(ginipkg, options));
                                            _public.crm_activities.edit("tasks");
                                            
                                        }); 
                                        
                                        var openTasksMain_checkBox=($("div.ginipkg-taskBar tHead .open_main_checkBox"));
                                        var openTaskschildCheckboxes=$("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input[type=checkbox]");
                                        //function which do the functionality  of checking all checkboxes.
                                        
                                        $("div.ginipkg-taskBar div.open_task div.page_index a.del").click(function(e){
                                            var idsOfcheckedDom=$("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input:checked");
                                            if(typeOfTasks=='open')
                                            {
                                               openPageNo=lattestPage;
                                            }
                                            else
                                            {
                                                closedPageNo=lattestPage;
                                            }
                                            deleteTasks(idsOfcheckedDom,e);
                                        });
                                        massChecked(openTasksMain_checkBox,"open");
                                        }   
                                            $('.op_task').removeClass('active');
                                            if($(this).attr('flag')=='3'){
                                                $(this).addClass('active');
                                                var searchedTab=$('.op_task');;
                                                if(tabFlag==0){
                                                $(searchedTab[0]).addClass('active');
                                                }else{
                                                 $(searchedTab[1]).addClass('active');   
                                                }
                                            }
                                            $(this).addClass('active');
                                            $(".open_task").show();
                                            $(".close_task").hide();
                                            $('#cl_task').removeClass('active');
                                            if($('.collapse').attr("class")=="collapse"){
                                            }
                                            else{
                                            $('.content').show('slow');
                                            $('.collapse').addClass('collapsetoggle');
                                            }
                                          
                                        });
                                    function massChecked(main_checkBox,childs){
                                            $(main_checkBox).click(function(){
                                                if(childs=="open")
                                                    var child_checkBox=$("div.ginipkg-taskBar tbody.openTabTasks .open_active_checkBox input[type=checkbox]");
                                                else
                                                    var child_checkBox=$("div.ginipkg-taskBar tbody.closedTabTasks .closed_active_checkBox input[type=checkbox]");                   
                                                if ($(this).is(':checked')) {
                                                    child_checkBox.attr('checked', 'true');
                                                }
                                                else {
                                                    child_checkBox.attr('checked', '');
                                                }
                                                $(child_checkBox).click(function() {
                                                    if($(this).is(':checked')) {
                                                    } else {
                                                        $(main_checkBox).attr('checked', '');
                                                    }
                                                }); 
                                                
                                            });
                                        }

                                        var activetab=$('.op_task');
                                        if(typeOfTasks=='open')
                                        {
                                            $(activetab[0]).trigger('click');
                                        }
                                        else
                                        {
                                            $(activetab[1]).trigger('click');   
                                        }
                                        $("#search_task").keyup(function (event) {
                                                
                                                   $(activetab[2]).trigger('click');
                                               
                                        });
                                });
                        }
                    },error: function(xhr,strError,errorThrown){
                        if(tabs.length){
                                        tabs.bind('click');
                                    }
                    }
            });                                         
        }
           
        _public.refreshTaskBar = function (ginipkg){
            var status_element; //
            
            delayedConditionalExecute({
                condition: function () {
                    if(!(ginipkg.authenticated_as === false || ginipkg.login_required === true || (ginipkg.user_settings!==undefined && ginipkg.user_settings.ENABLE_TASKBAR=='N')))
                    {
                        var config_crm="<div class=\"crm_not_found\" style=\"margin-top: 4%; \">                        <span id=\"crm_not_found_error_span\" style=\"margin-left: 30%;float: left;\">You have not configured your SugarCRM.<br></span>                        <span style=\"float:left;\"><input type=\"button\" class=\"config-sugarcrm\" value=\"Configure CRM\" style=\"margin-left: 45%;margin-top: 0px;float:left;\"></span></div>";
                        _protected.template='';  
                        var status=$("div.Tm.aeJ").find("div.ginipkg-taskBar");
                if(status.length)
                {
                    
                    if (ginipkg.has_crm === false || ginipkg.has_crm_but_not_valid === true){
                        _protected.template= jQuery("div.ginipkg-taskBar");
                        components.templateRenderer(ginipkg, 'tracking/taskbar_structure', ginipkg, ginipkg, _protected.template);
                        $("div.ginipkg-taskBar .in_content").html(config_crm);
                    }
                    
                }
                else{
                _protected.template= jQuery("<div class='ginipkg-taskBar'\"></div>");
                $("div.Tm.aeJ").prepend(_protected.template);
                components.templateRenderer(ginipkg, 'tracking/taskbar_structure', ginipkg, ginipkg, _protected.template);
                }
                $('.content').css('display','none');
                $('.collapse').click(function(e){
                    $('.content').toggle('fast');
                    if(firstRequest==0)
                    {
                        _public.taskBar();
                        firstRequest=1;
                         if(typeOfTasks=='open')
                        {
                            openPageNo=1;
                        }
                        else
                        {
                            closedPageNo=1;
                        }
                    }
                    if($('.collapse').attr("class")=="collapse")
                    {
                        $(this).attr("title","Collapse");
                    }
                    else
                    {
                        $(this).attr("title","Expand");
                    }
                    $(this).toggleClass('collapsetoggle');
                    e.stopImmediatePropagation();
                });
                if($('.collapse').attr("class")=="collapse")
                {
                    $('.collapse').attr("title","Expand");
                }
                else
                {
                 $('.collapse').attr("title","Collapse");   
                }
                
                if (ginipkg.has_crm === false || ginipkg.has_crm_but_not_valid === true){
                    $("div.ginipkg-taskBar .in_content").html(config_crm);
                    $("div.ginipkg-taskBar .in_content div.crm_not_found input.config-sugarcrm").click(function(){
                    ginipkg.createRemoteDialog(ginipkg, {
                        id : 'configure-crm-iframe',
                        title: ginipkg.signupTitle || "Configure SugarCRM",
                        url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=sugarCrm&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source+ '&invalidCRM=' + ginipkg.has_crm_but_not_valid,
                         width: 650,
                        height: 450,
                        reason_for_authentication: "connect-social-networks",
                        close: ginipkg.clearCacheThoroughly
                    }).show();
                });
                }
                }
                else{
                    $("div.ginipkg-taskBar").remove();
                }
                    return true;
                },
                failure_message: "Couldn't set "+app_name+" status in user bar",
                log_category: 'gmail.main_menu.insert',
                log_level_on_failure: "info",
                continuation: function () {
                }
            });
        }
           

        return _public;
    };

    //Toolbar bar Menu Starts here
    client.toolBar = function (ginipkg) {
        var sugar_config = ginipkg.sugar_config;
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'found');
        lib.destroyable(_public, _protected);
        lib.hasEvent(_public, _protected, 'reset');
        _public.found = false;
        function requireLoginFor(reason, code_to_run) {
            if (ginipkg.authenticated_as) {
                code_to_run();
            } else {
                ginipkg.showLoginPopup(function () {
                    if (ginipkg.authenticated_as) {
                        code_to_run();
                    }
                }, reason);
            }
        }
        _protected.addLinkHandlers = function (menu) {

            //Leads Link
            var form_link = menu.find('.crm-module');
            form_link.click(loggily("gmail.toolbar_menu.crm-module", function () {
                var moduleName = jQuery(this).text();
                _protected.menu.hide();
                var row_data = {};
                var contact_data = {};
                var options = {
                    template: 'crm/sugar',
                    module: _.camelize(moduleName),
                    mode: 'add',
                    sugar_config : ginipkg.sugar_config,
                    contact_data: contact_data,
                    context_data: row_data,
                    email: '',
                    company_name: '',
                    site_name: 'sugarCRM'
                };
                _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));

                requireLoginFor("Create " + moduleName, function () {
                    _public.crm_forms.edit(moduleName);
                });
                return false;
            }));

        };
        _protected.preloadImage = function (image) {
            jQuery('<img />').attr('src', image);
        };
        _protected.preloadImage(ginipkg.ginipkg_base_url + '/images/ginicube_50px.png');
        _protected.updateLoginSection = function (section) {
            if (ginipkg.authenticated_as) {
                section.find('.authenticated-as').text(ginipkg.authenticated_as || 'an unknown user');
                section.find('.authenticated').show();
                section.find('.not-authenticated').hide();
            } else {
                section.find('.authenticated').hide();
                section.find('.not-authenticated').show();
            }
        };
        
        _public.refreshToolbar = function (ginipkg){
            if(ginipkg.active_view_type == "tl"){
                var status_element; //
                delayedConditionalExecute({
                    condition: function () {
                        //Navigation Element
                        status_element = jQuery("#ginipkg-toolbar-menu");
                        if (status_element[0]) {
                            jQuery("#ginipkg-toolbar-menu").remove();
                            // console.log('found toolbar');
                        } else {
                            // console.log('not found toolbar');
                        }
                        status_element = jQuery("#ginipkg-toolbar-menu");
                        if (ginipkg.host_environment.gmail_toolbar) {

                            status_element = jQuery('<div id="ginipkg-toolbar-menu" class="G-Ni J-J5-Ji gini-toolbar-menu">');
                            ginipkg.host_environment.gmail_toolbar.find('div.G-Ni.J-J5-Ji').parent().append(status_element);
                        }
                        return true;
                    },
                    failure_message: "Couldn't set "+app_name+" status in user bar",
                    log_category: 'gmail.main_menu.insert',
                    log_level_on_failure: "info",
                    continuation: function () {
                        
                        _protected.template = jQuery('<div id="ginipkg-toolbar-menu" class="G-Ni J-J5-Ji gini-toolbar-menu">');
                        if(ginipkg.has_crm === true && ginipkg.has_crm_but_not_valid === false ) {
                            var configured_modules = {"configured_modules":_.toArray(ginipkg.sugar_config.configured_modules)};
                            components.templateRenderer(ginipkg, 'toolbar_menu/toolbar_menu', ginipkg, ginipkg.sugar_config, _protected.template);
                            _protected.menu_button = _protected.template;
                            _protected.menu_dropdown = _protected.template.find('#gini-toolbar-items');
                            _protected.menu = components.engagingContainer(ginipkg, _protected.menu_dropdown, _protected.template);
                            status_element.replaceWith(_protected.template);
                            _public.found = true;
                            _protected.menu_button.find("div.T-I.J-J5-Ji.ar7").click(_protected.menu.toggle);
                            //Add links to main Menu
                            _protected.addLinkHandlers(_protected.menu_dropdown);
                            _protected.menu.onDisengage(_protected.menu.hide);
                        }
                    }
                });
            }
        }

        return _public;
    };
    //Toolbar bar Menu Ends here

    client.session = function (ginipkg, when_user_email_found) {
        function userEmailDomain() {
            var reEmail = /\s*\S*@(\S*)\s*/;
            return ginipkg.user_email.match(reEmail)[1].toLowerCase();
        }

        function userDomain() {
            return ginipkg.user_domain || userEmailDomain();
        }

        function userLanguage() {
            try {
                return jQuery("html", window.top.document).attr('lang') || "en";
            } catch (e) {
                fsLog("Failed to read a language out of the DOM:" + e);
                return "en";
            }
        }

        function authUser() {
            var match = window.location.href.match(new RegExp('/mail(?:/b/[0-9]+)?/u/([0-9]+)'));
            return match && match[1] || "";
        }
        ginipkg.addSessionParams = function (url, more_params) {
            var params = jQuery.extend({
                userEmail: ginipkg.user_email,
                userDomain: ginipkg.user_domain,
                hl: userLanguage(),
                authuser: authUser(),
                client_stamp: ginipkg.clientCodeTimestamp
            }, more_params || {});
            if (ginipkg.cookies_available === false) {
                params.no_cookies = true;
            }
            return jQuery.addParams(url, params);
        };
        ginipkg.loginUrl = function (return_to, why) {
        
              
            var login_url = ginipkg.services_base_url + '/login.php?requestType=config&subType=login&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source;
            if(ginipkg.signup_required === true){
                login_url  += "&signup_required=true";
            }
            var params = {};
            if (return_to) {
                params.return_to = return_to;
            }
            if (why) {
                params.why = why;
            }
            return ginipkg.addSessionParams(jQuery.addParams(login_url, params));
        };

        ginipkg.refreshLoginStatus = function (callback_or_opts) {
            
            var opts = _.isFunction(callback_or_opts) ? {
                callback: callback_or_opts
            } : callback_or_opts || {}; 
            ginipkg.request({
                path: '/login.php?requestType=config&subType=login&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                server: 'services',
                jsonp: 'true',
                data:{
                    _method:'post',
                    skipThis : true,
                },
                success: function (data) {
                    var response = data.result;
                    ginipkg.has_crm = false;
                    ginipkg.has_crm_but_not_valid = false;
                    ginipkg.has_crm_premium = false;
                    ginipkg.dataCache ={};
                    delete ginipkg.user_domain;
                    delete ginipkg.session_token;
                    delete ginipkg.active_auths;
                    delete ginipkg.hasmemberships;

                    if (response.user_domain) {
                        ginipkg.user_domain = response.user_domain;
                    }
                    
                    ginipkg.session_token = response.session_token;
                    ginipkg.authenticity_token = response.authenticity_token;
                    ginipkg.login_required = response.login_required;
                    ginipkg.account = response.account;
                    ginipkg.signup_required = response.signup_required;
                    if(ginipkg.login_required === true || ginipkg.signup_required === true) {
                       ginipkg.errors = {"error_code":(response.errCode !== undefined && response.errCode != "") ?response.errCode : 'login_required' , "error_message":(response.errMsg !== undefined && response.errMsg != "" ) ? response.errMsg : 'Login is required.'}; 
                    }
                    if(response.has_crm) {
                        ginipkg.has_crm = response.has_crm;
                    }
                    if(response.has_crm_but_not_valid) {
                        ginipkg.has_crm_but_not_valid = response.has_crm_but_not_valid;
                    }
                    if(response.has_crm_premium) {
                        ginipkg.has_crm_premium = response.has_crm_premium;
                    }
                    if(response.template_details) {
                        ginipkg.template_details = response.template_details;
                    }
                    
                    if(response.active_auths) {
                        ginipkg.active_auths = response.active_auths;
                    }

                    if(response.hasmemberships) {
                        ginipkg.hasmemberships = response.hasmemberships;
                    }
                    ginipkg.user_open_id = response.user_open_id;
                    if (response.sugar_config) {
                        ginipkg.sugar_config = response.sugar_config;
                    }
                    
                    /*
                    * Code added by siddarth on 25 april 2014 for sync time through application.js
                    */
                    if (response.features) {
                        ginipkg.features = response.features;
                    }
                    if(response.user_settings) {
                        ginipkg.user_settings={};
                        $.each(response.user_settings,function(key,value){
                            temp=value.setting_key;
                             ginipkg.user_settings[temp]=value.status;
                        });
                    } else {
                        ginipkg.user_settings={};
                        ginipkg.user_settings.SYNC_CONTCT='Y';
                        ginipkg.user_settings.SYNC_CALNDR='Y';
                        ginipkg.user_settings.ENABLE_TASKBAR='Y';
                        ginipkg.user_settings.ENABLE_TEMPLATES='Y';
                        ginipkg.user_settings.ENABLE_EMAIL_LISTING='Y';
                        ginipkg.user_settings.ENABLE_ATTACHMENT_LI='Y';
                        //ginipkg.user_settings.ARCHIVE_ATTACHMENTS='Y';
                        //ginipkg.user_settings.GLOBAL_EMAIL_ARCHIVE='Y';
                    }

                    if (ginipkg.authenticated_as !== response.authenticated_as) {
                        ginipkg.authenticated_as = response.authenticated_as;
                        ginipkg.lookup_service.clearCache();
                        if (opts.refresh_sidebar_on_user_change !== false) {
                            ginipkg.sidebar.refreshSidebar();
                        }
                    }
                    
                    if(ginipkg.last_click_nav !== undefined && response.session_token){
                        delete ginipkg.signupTitle;
                        $(ginipkg.last_click_nav).trigger("click");
                        delete ginipkg.last_click_nav;
                    }
                    if(ginipkg.authenticated_as === false || ginipkg.login_required === true) {
                        ginipkg.task_bar.refreshTaskBar(ginipkg);
                    } else if (ginipkg.has_crm === false || ginipkg.has_crm_but_not_valid === true){
                        ginipkg.task_bar.refreshTaskBar(ginipkg);
                    } else{
                        ginipkg.task_bar.refreshTaskBar(ginipkg);
                        ginipkg.task_bar.resetVariable();
                    }
                    //Refresh Top Navigation bar after login
                    ginipkg.navigation_bar.refreshNavigationBar(ginipkg);
                    $("div.ginipkg-crm-options-menu").remove();
                    ginipkg.template_archive.refreshTemplateArchive(ginipkg);
                    if (ginipkg.template_bar !== undefined) {
                        ginipkg.template_bar.refreshTemplateBar(ginipkg);
                   }
                    //Edited by sanchit to split db login and crm task call (Start)
                    if(ginipkg.login_required === false) {
                        ginipkg.request({
                                    path: '/getSugarConfig.php?',
                                    server: 'services',
                                    async: false,
                                    jsonp: 'true',
                                    data: {
                                        _method:'post',
                                        openId: response.user_open_id,
                                        lastFieldsUpdate: response.lastFieldsUpdate,
                                        hasCRMPremiumMembership: ginipkg.has_crm_premium,
                                    },
                            success: function (data){
                                var crmResponse = data.result;
                                // need to update the result value in ginipkg
                                ginipkg.account = crmResponse.account;
                                if(crmResponse.has_crm) {
                                    ginipkg.has_crm = crmResponse.has_crm;
                                }
                                if(crmResponse.has_crm_but_not_valid) {
                                    ginipkg.has_crm_but_not_valid = crmResponse.has_crm_but_not_valid;
                                }
                                if(crmResponse.has_crm_premium) {
                                    ginipkg.has_crm_premium = crmResponse.has_crm_premium;
                                }
                                if(crmResponse.active_auths) {
                                    ginipkg.active_auths = crmResponse.active_auths;
                                }

                                if(crmResponse.hasmemberships) {
                                    ginipkg.hasmemberships = crmResponse.hasmemberships;
                                }
                                if (crmResponse.sugar_config) {
                                    ginipkg.sugar_config = crmResponse.sugar_config;
                                }
                            }
                        });
                    }
                    //End to split DBlogin and crm task call
                    
                   // ginipkg.tool_bar.refreshToolbar(ginipkg);
                   //label creation request
                    postedData= {};
                    // edited by sanchit to stop this call after logout from ginicube (suggested by nancy)
                    if(ginipkg.login_required === false) {
                        ginipkg.request({
                                    path: '/crm.php?',
                                            server: 'crm',
                                            async: false,    
                                            jsonp: 'true',
                                            data: {
                                                data:postedData,
                                                requestType:'CRM',
                                                _method: 'post',
                                                subType:'findUserLabelTime',
                                                email: response.authenticated_as,
                                                domain : ginipkg.user_domain,
                                            },
                                    success: function (response){
                                        if(response.result.last_label_creation_time!='0000-00-00 00:00:00')
                                        {
                                            ginipkg.request({
                                                path: '/crm.php?',
                                                server: 'crm',
                                                data: {
                                                    data:postedData,
                                                    requestType:'CRM',
                                                    _method: 'post',
                                                    subType:'create_email_label',
                                                    email: response.authenticated_as,
                                                    domain : ginipkg.user_domain,
                                                },
                                                success: function (response){
                                                }
                                            });
                                        }
                                    }
                        });
                    }
                },
                complete: function (response) {
                    var callback = opts.callback || opts.complete;
                    if (callback) {
                        callback(response);
                    }
                }
            });
        };
        ginipkg.performImplicitLogin = function (callback, attempt_number) {
            attempt_number = attempt_number || 0;
            if (attempt_number < 5) {
                window.setTimeout(function () {
                    if (!ginipkg.session_token) {
                        ginipkg.performImplicitLogin(callback, attempt_number + 1);
                    }
                }, 60000 * Math.pow(2, attempt_number));
            }
            
            //changes done by Mohit gupta on 24-04-2014
            ginipkg.refreshLoginStatus(function (response) {
                ginipkg.cookies_available = response.cookies_available;
                if (callback) {
                    callback();
                }
            });
        };
        ginipkg.showLoginPopup = function (continuation, why, return_to) {
            var popup = components.popupManager(ginipkg);
            popup.popup(ginipkg.loginUrl(return_to, why), 600, 500, function () {
                ginipkg.refreshLoginStatus(continuation);
            }, false);
            return false;
        };

        function getRootURL() {
            fsLog("Looking for the root url...");
            var href = window.location.href;
            var regex = new RegExp("https?://mail\\.google\\.com(?::443)?/(a/(.+?)/|(mail/))");
            var matches = href.match(regex);
            if (matches) {
                ginipkg.root_url = matches[0];
                ginipkg.domain_from_url = matches[2];
                if (ginipkg.domain_from_url) {
                    ginipkg.domain_from_url = ginipkg.domain_from_url.toLowerCase();
                }
                fsLog("Your root url is: " + ginipkg.root_url);
            } else {
                var whiteLabels = {
                    "mail.blueyonder.co.uk": 1,
                    "mail.ntlworld.com": 1,
                    "mail.tools.sky.com": 1,
                    "mail.virginmedia.com": 1,
                    "mail.virgin.net": 1,
                    "webmail.clear.net": 1,
                    "webmail.clearwire.net": 1,
                    "webmail.sify.com": 1
                };
                if ((!whiteLabels[window.location.host]) && /https?:/.test(window.location.protocol)) {
                    fsLog("Could not find the root url from " + window.location.href + "; has Google changed their url structure?", "gmail.session.root_url", "warning");
                }
            }
        }

        function getUserEmail() {
            var found_email, page_title;
            delayedConditionalExecute({
                condition: function () {
                    var title_emails;
                    page_title = jQuery('title', window.top.document).text();
                    if (page_title) {
                        found_email = _(_.extractEmails(page_title)).last();
                    }
                    found_email = found_email || _(jQuery(['#guser nobr b', '#gbmpc', '.gbpc', '#gbg6', '#gbg4'].join(', ')).find('*').andSelf().contents()).firstMap(function (node) {
                        return node.nodeType === 3 && _.cleanEmail(node.data);
                    });
                    return !!found_email;
                },
                retry_message: "Scheduling another attempt to get user email...",
                failure_message: "Ran out of attempts to get user email; cannot continue.",
                log_category: "gmail.session.user_email",
                continuation: function () {
                    var email = found_email,
                        switched_account = false;
                    fsLog("Found user email: " + email);
                    
                    ginipkg.user_email = email;
                    ginipkg.found_user_email = found_email;
                    ginipkg.domain_from_url = userEmailDomain();
                    fsLog("domain from email: " + userEmailDomain());
                    fsLog("domain from URL: " + ginipkg.domain_from_url);
                    if (!switched_account && ginipkg.domain_from_url && ginipkg.domain_from_url !== userEmailDomain()) {
                        fsLog("Google Apps domain mismatch!  Got " + ginipkg.domain_from_url + " from URL but " +
                            userEmailDomain() + " from email!", "gmail.session.user_email", "warning");
                    }
                    when_user_email_found();
                },
                error_continuation: function () {
                    fsLog("Failed to determine user_email, [title: " + page_title + "]", "gmail.session.user_email", "info");
                }
            });
        }
        getRootURL();
        getUserEmail();
    };
    
    client.peopleWidgetHandler = function (ginipkg) {
        var _public = {}, _protected = {}, nodes;
        _public.hide = function () {
            if (_public.container) {
                _public.container.hide();
            }
        };
        lib.model(_public, _protected, 'container', 'refreshing', 'requested_email', 'displayed_email', 'displayed_div');
        
        _public.refresh = function () {
            if (_public.refreshing) {
                return;
            }
            _public.refreshing = true;
            window.setTimeout(loggily("people_widget.refresh", function () {
                var new_container;
                _public.hide();
                _public.container = null;
                _public.requested_email = null;

                function findContainer() {
                    new_container = jQuery(".yX5eO", ginipkg.active_view_element).closest('.nH').parent();
                    return !!new_container[0];
                }
                delayedConditionalExecute({
                    poll_delay: 50,
                    max_poll_attempts: 200,
                    log_category: "people_widget.force_hide",
                    failure_message: "Didn't find people widget",
                    log_level_on_failure: "debug",
                    condition: findContainer,
                    continuation: function () {
                        if (new_container.length > 1) {
                            new_container.hide();
                            fsLog("Hiding people widget, found multiple containers");
                            return;
                        }
                        _public.container = new_container;
                        _public.hide();
                        _public.refreshing = false;
                    },
                    error_continuation: function () {
                        _public.refreshing = false;
                        fsLog("no people widget container found");
                    }
                });
            }));
        };
        
        _public.onContainerChange(function (container) {
            _public.nodes = nodes = {};
            if (!container) {
                return;
            }
            nodes.footer = _public.container.find("div.nH:last-child div:empty:first-child:last-child");
            nodes.footer_container = nodes.footer.parent();
            nodes.footer_container.addClass('ginipkg-forced-hidden');
            var potential_non_footers = _public.container.find("div.nH").not(nodes.footer_container),
                nodes_with_menu = _(potential_non_footers).select(function (el) {
                    return jQuery(el).children().length === 2;
                });
            if (nodes_with_menu.length === 1) {
                nodes.back_to_chooser = jQuery(nodes_with_menu[0]).find("> div:first-child > *:last-child[role=link]:not(img)");
                nodes.back_to_chooser_container = nodes.back_to_chooser.parent();
                nodes.back_to_chooser_container.addClass('ginipkg-forced-hidden');
            }
        });
        _public.__defineGetter__('mode', function () {
            return 'single';
        });
        _public.__defineGetter__('visible_person', function () {
            if (_public.mode === 'chooser') {
                return null;
            }
            var visible_person = _public.container.find("> .nH > div");
            if (nodes.back_to_chooser_container) {
                visible_person = visible_person.not(nodes.back_to_chooser_container);
            }
            if (nodes.footer) {
                visible_person = visible_person.not(nodes.footer);
            }
            visible_person = visible_person.filter(function () {
                return !(/display.*none/).test(jQuery(this).attr('style'));
            });
            if (visible_person.length === 1) {
                return visible_person;
            } else {
                return null;
            }
        });

        function selectMatchingSingleton() {
            var image = _public.container.find("[jid]"),
                emails, email;
            switch (image && image.length) {
            case 0:
                emails = jQuery("span.gD[email]", ginipkg.active_view_element).map(function () {
                    return jQuery(this).attr('email').replace(/\+.*@/, "@");
                });
                if (_(emails).uniq().length === 1) {
                    email = emails[0];
                }
                break;
            case 1:
                email = image.attr('jid');
                break;
            }
            if (email && email === _public.requested_email && _public.visible_person) {
                _public.displayed_email = _public.requested_email;
                _public.displayed_div = _public.visible_person;
            }
        }

        function chooseRequestedEmail() {

            var clear_dots = _public.container.find("img[name=upi][jid]");
            clear_dots.each(function () {
                if (jQuery(this).attr('jid') === _public.requested_email) {
                    ginipkg.simulate.click(jQuery(this).closest('tr').children('td').eq(1));
                    delayedConditionalExecute({
                        poll_delay: 50,
                        max_poll_attempts: 20,
                        log_category: "people_widget.choose_person",
                        failure_message: "Couldn't choose person: " + _public.requested_email,
                        log_level_on_failure: "debug",
                        condition: function () {
                            return _public.mode === 'person';
                        },
                        continuation: function () {
                            if (_public.visible_person) {
                                _public.displayed_email = _public.requested_email;
                                _public.displayed_div = _public.visible_person;
                            }
                        }
                    });
                    return false;
                }
            });
        }

        function returnToChooser() {
        

            ginipkg.simulate.click(nodes.back_to_chooser);
            delayedConditionalExecute({
                poll_delay: 50,
                max_poll_attempts: 20,
                log_category: "people_widget.back_to_chooser",
                failure_message: "Couldn't get back to chooser",
                log_level_on_failure: "debug",
                condition: function () {
                    return _public.mode === 'chooser';
                },
                continuation: chooseRequestedEmail
            });
        }

        function loadPerson() {
            window.setTimeout(loggily("ginipkg.load_person", function () {
                _public.displayed_email = _public.displayed_div = null;
                if (!_public.container || !_public.requested_email) {
                    return;
                }
                switch (_public.mode) {
                case 'single':
                    selectMatchingSingleton();
                    break;
                case 'person':
                    returnToChooser();
                    break;
                case 'chooser':
                    chooseRequestedEmail();
                    break;
                }
            }));
        }
        _public.onContainerChange(loadPerson);
        
        _public.onRequestedEmailChange(loadPerson);
        
        ginipkg.sidebar.onDisplayedKeyChange(function (displayed_key) {
            if (displayed_key && displayed_key.point_type === 'email') {
                _public.requested_email = displayed_key.identifier.replace(/\+.*@/, '@');
            } else {
                _public.requested_email = null;
            }
        });
        
        ginipkg.sidebar.onProcessingKeyChange(function (processing_key) {
            
            if(ginipkg.signup_required === undefined){
            
                $("div#ginipkg-collapse-button").attr('class', 'ginipkg-collapse-closed');
                $("div#ginipkg-sidebar").hide();
                $("div#ginipkg-collapse-button").hide();
                $("div#collapse-div-state").css("visibility","hidden");
                $("div#ginipkg-sidebar").parent().parent().find('div.anT').css("display","block");
                $("div#ginipkg-sidebar").parent().parent().find('div.u5').css("display","block");
                $("div#ginipkg-collapse-button").css("left", "218px");
            }
            
           if (processing_key) {
                _public.requested_email = null;
                _public.refresh();
            }
        });
        
        ginipkg.host_environment.onActiveViewChange(_public.refresh);
        ginipkg.sidebar.onReset(_public.refresh);
        components.peopleWidgetPerson(_public, _protected, ginipkg);
        return _public;
    };

    client.hostEnvironmentEvents = function (ginipkg, _public, _protected) {
        function identifierForNotification(visible_notification_area) {
            var thread_id = visible_notification_area.find('#link_vsm').attr('param'),
                message_id = visible_notification_area.find('#link_undo').attr('param');
            if (message_id) {
                message_id = message_id.split('_')[1];
            }
            if (!thread_id) {
                thread_id = _public.last_compose_thread_id || _public.conversation_id;
            }
            message_id = message_id || thread_id;
            thread_id = thread_id || message_id;
            return {
                thread_id: thread_id,
                message_id: message_id
            };
        }
        lib.hasEvent(_public, _protected, 'sent_notification_appearance');
        var last_visible_notification = null,
            last_had_undo = false;
        ginipkg.metronome.onTick(function () {
            if (!(ginipkg.reminders && ginipkg.reminders.inPrivateBeta())) {
                return;
            }
            var visible_notification_area = jQuery('.vh:visible').filter(function () {
                var $this = jQuery(this);
                return $this.width() > 0 && $this.height() > 0 && $this.closest(".b8.UC").css("visibility") !== "hidden" && !$this.parent().is(".ginipkg-notifier") && ($this.find("#link_vsm[param], #link_undo[param]").length || $this.text().match(/Your message has been sent/));
            });
            if (visible_notification_area.length) {
                var identifier = identifierForNotification(visible_notification_area),
                    undo_link = visible_notification_area.find('#link_undo'),
                    has_undo = undo_link.is(':visible') && undo_link.css('visibility') !== 'hidden';
                if (identifier.thread_id && (visible_notification_area[0] !== last_visible_notification || last_had_undo && !has_undo)) {
                    _public.triggerSentNotificationAppearance(visible_notification_area, identifier);
                }
                last_visible_notification = visible_notification_area[0];
                last_had_undo = has_undo;
            }else {
                last_visible_notification = null;
                last_had_undo = false;
            }
        });
    };

    
    client.hostEnvironment = function (ginipkg) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'active_view', 'overlay_compose_view', 'last_compose_thread_id', 'last_sent_message_id');
        lib.model(ginipkg, {}, 'active_view_element', 'active_view_type');

        function getViewType(active_view_element) {
            if (jQuery("table.Bs.nH.iY", active_view_element)[0]) {
                return "cv";

            } else if (jQuery("table.aoP.aoC", active_view_element)[0]) {
                return "tl-co";
            
            }
            else if (jQuery("div.Cq.RdSZF", active_view_element)[0] || jQuery("div.A1.D.E", active_view_element)[0] || jQuery('div[gh=tl]', active_view_element)[0]) {
                return "tl";

            } else if (jQuery("div.fN", active_view_element)[0]) {
                return "co";
            }
            else {
                return null;
            }
        }
        ginipkg.metronome.onTick(function () {
            ginipkg.transaction(function () {
            /*
            * check for templates , when the user is logged in only then show the templates.
            */
            if(ginipkg.authenticated_as === false || ginipkg.login_required === true)
            {
                ginipkg.template_bar = undefined;
            } else {
                if (ginipkg.user_settings !== undefined && ginipkg.user_settings.ENABLE_TEMPLATES !== undefined 
                    &&  ginipkg.user_settings.ENABLE_TEMPLATES == "Y") {
                    ginipkg.template_bar = client.templateBar(ginipkg);
                } else {
                    ginipkg.template_bar = undefined;
                }
            }

                var old_gmail_design = jQuery("div.nH.q0CeU div.diLZtc > div.nH > div.nH > div.nH > div.nH").not(":hidden")[0],
                    new_gmail_design = jQuery("div[role=main]").not(":hidden")[0],
                    new_gmail_compose = jQuery("div[role=dialog]").not(":hidden")[0];

        var status=$("div.Tm.aeJ").parent().closest("div.nH").find("div.f2");
                if(status.length){
                    $("div.Tm.aeJ").find("div.ginipkg-taskBar").hide();
                }
                else{
                    $("div.Tm.aeJ").find("div.ginipkg-taskBar").show();
                }

                ginipkg.active_view_element = new_gmail_design || old_gmail_design || new_gmail_compose;
                
                    var status=$("div.gb_cb.gb_yb div.gb_ba.gb_yb.gb_g.gb_xb");
                    if(status.length>0){
                        if(status.find("#ginipkg-navigation").length>0){

                        }
                        else{
                            ginipkg.navigation_bar.refreshNavigationBar(ginipkg);
                        }
                    }
                divToAppendArray=$("div.nH.Hd");
                divToAppendArray.each(function (index,element){
                    if($(element).find('div.aYF').text() == "New Message") { // Note refine this find
                        divToAppend=element;
                        divTemplate = $(divToAppend).find("div.ginipkg-templatebar");
                        if(divTemplate.length < 1) {
                            if ((ginipkg.template_bar !== undefined)&&(ginipkg.signup_required === false)) {
                                ginipkg.template_bar.compose_new_mail(ginipkg,$(divToAppend));
                            }
                        }
                    }
                });
                
                //new reply code
                status=$("div.G3.G2");
                if(ginipkg.active_view_type=="cv"){
                    newstatus=status.find("td.gH.acX");
                    $.each(newstatus,function(){
                        if($(this).find("div.newButton").length>0){
                        } else{
                            ginipkg.template_archive.refreshTemplateArchive(ginipkg);     
                        }
                    });
                    var templateButton;
                    var templateButton1;
                    if(status.length){
                        templateButton=$("div.G3.G2").find("table.iN td.HE div.aDg div.aDj div.aDh");
                        for(i=0;i<templateButton.length;i++){     
                            templateButton1= $(templateButton[i]).find("div.ginipkg-templatebar_strip");
                            if((templateButton1.length)>0){
                                //do nothing    
                            } else{
                                ginipkg.host_environment.new_templatebar2=(templateButton[i])[2];
                                if ((ginipkg.template_bar !== undefined)&&(ginipkg.signup_required === false)) {
                                    ginipkg.template_bar.compose_open_mail(ginipkg,$(templateButton[i]));
                                }
                            }
                        }
                    }
                }                
                ginipkg.active_view_type = getViewType(ginipkg.active_view_element);
                /*
                * Added by Rahul.
                * Date : 22 May 2014
                * clearing requestQueue on view change.
                */
                if(ginipkg.active_view_type == 'tl') {
                    $.killAllRequestQueue(true , true , true);
                }
            });
        });
        ginipkg.onActiveViewElementChange(function (active_view_element) {
            _public.active_view = components.activeView(ginipkg.active_view_type, active_view_element, ginipkg);
        });
        _public.active_view = components.activeView(ginipkg.active_view_type, ginipkg.active_view_element, ginipkg);

        function gmailNavigationContainer() {
            return jQuery('div[role=navigation]').first();
        }
        function gmailToolbarContainer() {
            return jQuery('.qHPm7d, div[gh=tm]').first();
        }
        _public.__defineGetter__('search_form', function () {
            return jQuery('form#gbqf');
        });

        function allInOneMailMenu() {
            return jQuery('.s8A0qe, div[gh=pb]').first();
        }

        function getNavigationMenuHeight(){
            var navElement = gmailNavigationContainer().find('div#gbx3').first();
            return navElement.height();
        }


        _public.__defineGetter__('gmail_toolbar', function () {
            return gmailToolbarContainer().find('div.iH > div, div[gh=mtb] > div').first();
        });

        /*for gini button on the top , shows setting of gini*/
        _public.__defineGetter__('gmail_navigationbar', function () {
            var topBarDiv = $('div[role="banner"]').first().find('div:first').find('div:first').find('div:first');
            return topBarDiv;
        });
        _public.__defineGetter__('new_ui_navigationbar', function (){
            return $('div.gb_o.gb_p[role=list]').find('ul.gb_q.gb_t');
        });
        _public.__defineGetter__('gmail_navigationbar_height', function () {
            return getNavigationMenuHeight();
        });
        _public.__defineGetter__('new_gmail_design', function () {
            return !!allInOneMailMenu()[0] || !! gmailToolbarContainer()[0];
        });

        _public.__defineGetter__('gmail_templatebar', function () {
            return $(ginipkg.active_view_element).find('div.eJ').first();
        });
         _public.__defineGetter__('gmail_editor', function () {
            var editor = $(ginipkg.active_view_element).find('form table iframe');
            var editorBody = $(editor).contents().find("body");
            return editorBody;
        });

         _public.__defineGetter__('new_templatebar', function () {
           return $('div.nH.Hd div.aaZ ').find("table.iN tbody td.GQ");
        });
        _public.__defineGetter__('new_templatebar_reply', function () {
           return $('div.G3.G2').find('div.gE.iv.gt');
        });
         _public.__defineGetter__('new_templatebar_strip', function () {
           return $('div.nH.Hd div.aaZ ').find("table.iN tbody td.HE div.aDh");//first was here
        });
        
        _public.__defineGetter__('gmail_compose', function () {
           return $('div.z0').first();
        });
        function topMenuInfo() {
            var menus = [{
                    name: 'old',
                    selector: "#guser nobr"
                }, {
                    name: 'new',
                    selector: "#gb #gbg ol.gbtc"
                }, {
                    name: 'dec2011',
                    selector: "#gbu #gbvg ol.gbtc"
                }
            ];
            for (var i = 0; i < menus.length; i++) {
                var dom = jQuery(menus[i].selector);
                if (dom[0]) {
                    return menus[i];
                }
            }
            return null;
        }
        _public.__defineGetter__('top_menu_bar', function () {
            return jQuery(_(topMenuInfo()).andand().selector);
        });
        _public.__defineGetter__('main_menu_version', function () {
            return _(topMenuInfo()).andand().name;
        });
        _public.guessLocale = function () {
            var locale = jQuery('html', window.top.document).attr('lang');
            return locale || 'en-US';
        };
        _public.__defineGetter__('utc_offset', function () {
            return (new Date()).getTimezoneOffset();
        });
        _public.__defineGetter__('conversation_id', function () {
            var hash = window.top.location.hash;
            if (!ginipkg.host_environment.active_view.isConversationView()) {
                return null;
            }
            var match = hash.match(/^#(?:[^\/]+\/)+([0-9a-f]+)$/i);
            if (match) {
                return match[1];
            } else if (hash.match(/^#(sent|drafts)/)) {
                return _public.last_sent_message_id;
            } else {
                return null;
            }
        });
        ginipkg.metronome.onTick(function () {
            var compose_forms = jQuery("div.fN > form", _public.active_view.element);
            if (compose_forms.length > 0) {
                _public.last_compose_thread_id = _public.conversation_id;
            }
        });
        ginipkg.metronome.onTick(function () {
            _public.overlay_compose_view = jQuery('div.dw div.aQK div.M9:visible').last()[0];
        });
        client.hostEnvironmentEvents(ginipkg, _public, _protected);
        return _public;
    };


    client.dynamicDialog = function (ginipkg, options) {
        var _public = {}, _protected = {};
        var jQuery = ginipkg.jQuery;
        var width = options.width || 525;
        var id = options.id;
        var iframe;
        if(id !== '' && id !== undefined){
             iframe= jQuery('<iframe src="about:blank" name="iframeGini" id="'+id+'"/>');    
        } else {
            iframe= jQuery('<iframe src="about:blank" name="iframeGini" />');
        }
        
        var spinner = jQuery('<div class="spinner" style="display:none;"><img src="' + jQuery.image_url('ajax-loader-64x64.gif') + '" style="float:right; margin-right: 10px; position: relative; top: 14px"/></div>');
        var currentUrl;

        function currentOrigin() {
            return (currentUrl || "about:blank").replace(/^(https?:\/\/[^\/]*).*/, "$1");
        }
        iframe.dialog({
            "title": options.titleWhileLoading || "Loading...",
            "modal": true,
            "width": width+30,
            "autoOpen": false,
            "height": options.height +10 || 375+10,
            "open": function (event, ui) {
                jQuery(this).load(function () {
                    iframe.dialog("option", "title", options.title || "");
                    if (options && options.loaded) {
                        options.loaded();
                    }
                });
                _public.setUrl(ginipkg.addSessionParams(options.url));
                var obj = {
                    _ifram_width:width
                }
                _public.setProperties(obj);
            },
            "close": function () {
                _public.setUrl('about:blank');
                if (options.close) {
                    options.close();
                }
            }
        });
        if (options.css) {
            iframe.css(options.css);
        }
        iframe.find('~ .ui-dialog-buttonpane').append(spinner);
        
        lib.postMessageShim(_public, _protected, {
            name: 'dynamic_dialog_' + (options.reason_for_authentication || 'generic'),
            iframe: iframe,
            receive: ['close', 'title', 'button', 'load'],
            send: ['button_pushed', 'continue'],
            model: ['spinning'],
            remote_base_url: currentOrigin
        });
        
        function refreshSize() {
            iframe.css({
                "width": width + "px",
                "padding": 0,
                "margin": "15px",
            });
        }
        _public.show = function () {
            if (options.skip_authentication || ginipkg.authenticated_as) {
                _public.open();
            } else {
             _public.open();
            }
        };
        _public.setButtonsEnabled = function (enabled) {
            var buts = jQuery(".ui-dialog-buttonpane button").attr("disabled", !enabled);
            if (enabled) {
                buts.removeClass("ui-state-disabled");
            } else {
                buts.addClass("ui-state-disabled");
            }
        };
        _public.onClose(function () {
            _public.close(); ///
        });
        _public.onTitle(function (message) {
            iframe.dialog("option", "title", message.value);
        });
        _public.onButton(function (message) {
            var buttons = {};
            buttons[message.value] = function () {
                if (message.response === 'close') {
                    _public.close();
                } else {
                    _public.triggerButtonPushed({
                        value: message.value
                    });
                }
            };
            _public.buttons(buttons);
            _public.spinning = false;
            refreshSize();
        });
        _public.onSpinningChange(function () {
            if (_public.spinning) {
                spinner.show();
                _public.setButtonsEnabled(false);
            } else {
                spinner.hide();
                _public.setButtonsEnabled(true);
            }
        });
        _public.open = function () {
            iframe.dialog("open");
            refreshSize();
        };
        _public.close = function () {
            iframe.dialog("close");
        };
        _public.setUrl = function (newUrl) {
            currentUrl = newUrl;
            iframe.attr('src', newUrl);
        };
        _public.setProperties = function (obj) {
            iframe.attr('frameborder', '0');
            iframe.attr('width', obj._ifram_width);
        };
        _public.buttons = function (newButtons) {
            iframe.dialog("option", "buttons", newButtons);
            iframe.find('~ .ui-dialog-buttonpane').append(spinner);
        };
        return _public;
    };
    
    client.overlayComposeViewHandler = function (ginipkg) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'sidebar_visible');
        _public.__defineGetter__('overlay_compose_container', function () {
            return jQuery(".dw > div > .nH > .nH > .no");
        });

        function fixupButtonPositions() {
            window.setTimeout(function () {
                var compose_buttons = jQuery(ginipkg.host_environment.overlay_compose_view).find(".aDj"),
                    buttons_offset = compose_buttons.offset(),
                    overlay_offset = jQuery(ginipkg.host_environment.overlay_compose_view).offset();
                if (compose_buttons.css('left') === 'auto') {
                    return;
                }
                if (buttons_offset && overlay_offset && buttons_offset.left !== overlay_offset.left) {
                    compose_buttons.css('left', overlay_offset.left + 'px');
                }
            }, 50);
        }

        function moveOverlay(shouldMove) {
            if (shouldMove) {
                var sidebar_offset = ginipkg.getAdsColumnOffset(),
                    right_margin = 243;
                if (sidebar_offset) {
                    right_margin = window.innerWidth - sidebar_offset;
                }
                if (right_margin > 0 && right_margin < 300) {
                    _public.overlay_compose_container.css('margin-right', right_margin + 'px');
                    fixupButtonPositions();
                }
            } else {
                _public.overlay_compose_container.css('margin-right', '0px');
                fixupButtonPositions();
            }
        }

        function firstRecipient(compose) {
            return jQuery(compose).find("form [email]:visible").first().attr('email');
        }
        _public.onSidebarVisibleChange(function (visible) {
            moveOverlay(visible);
        });
        ginipkg.view_change_handler.onPreviewedEmailChange(function (email) {
            if (email) {
                _public.sidebar_visible = true;
            }
        });
        ginipkg.host_environment.onOverlayComposeViewChange(function (compose) {
            if (ginipkg.active_view_type === 'tl' && compose) {
                _public.sidebar_visible = true;
                var email = firstRecipient(compose);
                if (email) {
                    ginipkg.sidebar.updateSidebarFromEmail(email);
                }
            }
            moveOverlay(compose && _public.sidebar_visible);
        });
        ginipkg.onActiveViewTypeChange(function (type) {
            if (type === 'cv') {
                _public.sidebar_visible = true;
            } else if (type === 'tl' && ginipkg.host_environment.overlay_compose_view) {
                _public.sidebar_visible = true;
                var email = firstRecipient(ginipkg.host_environment.overlay_compose_view);
                if (email) {
                    ginipkg.sidebar.updateSidebarFromEmail(email);
                }
            } else {
                _public.sidebar_visible = false;
            }
        });
        return _public;
    };

    client.sidebarActions = function (ginipkg) {
        var _public = {}, _protected = {};
        lib.model(_public, _protected, 'icons_width');
        ginipkg.getAdsColumnWidth = function () {
            return Math.max(jQuery("table td.Bu:last-child > div.nH", ginipkg.active_view_element).width(), 195);
        };
        ginipkg.getAdsColumnOffset = function () {
            var offset = jQuery("table td.Bu:last-child > div.nH", ginipkg.active_view_element).offset();
            return offset && offset.left;
        };

        function moveSidebarActions() {
            var css = "";
            if (!jQuery("div.hj").closest(".Bu").is(":last-child")) {
                css += "div.hk {" + "padding: 0 3px 0 8px !important;" + "position: relative !important;" + "top: -1px !important;" + "}";
            } else {
                css += "table td.Bu:last-child > div.nH {" + "position: relative !important;" + "}";
                css += "div.hj {" + "position: absolute !important;" + "width: 500px !important;" + "top: 12px !important;" + "right: 240px;" + "}";
                css += "div.hk {" + "padding: 0px !important;" + "float: right !important;" + "margin-left: 15px !important;" + "}";
                css += "div.hk img {" + "vertical-align: baseline;" + "}";
                css += "div.hk u {" + "display: none !important;" + "}";
                css += "h1.ha {" + "margin-right: 100px !important;" + "position: relative;" + "z-index: 2;" + "}";
                jQuery("div.hk").live("mouseover", loggily("sidebar_actions.mouseover", function () {
                    var image = jQuery("img", this);
                    if (!image.attr("title")) {
                        image.attr("title", jQuery("u", this).text());
                    }
                }));
            }
            jQuery("<style id='actionLinksChanger' type='text/css'>").text(css).appendTo("head");
        }
        ginipkg.onDisplaceSidebarChange(function (displaced) {
            if (displaced) {
                jQuery('#actionLinksChanger').remove();
            }
        });
        ginipkg.recalculateActionLinksWidth = function () {
            if (ginipkg.displace_sidebar) {
                return;
            }
            var icon_width = 30,
                num_of_icons = jQuery('div.hk:visible').length;
            _public.icons_width = icon_width * num_of_icons;
            jQuery("div.hj").css("right", ginipkg.getAdsColumnWidth() + 15);
            jQuery("div.nH.if").css("min-height","790px"); //code by siddarth to solve bug SUG-1646
        };
        return _public;
    };

    client.metronome = function (ginipkg) {
        var _public = {}, _protected = {}, duration = 10000,
        interval = 2000,
        end = null,
        id = null;
        lib.hasEvent(_public, _protected, 'tick');

        function startOrLengthenSpinner() {
            var now = (new Date()).getTime();
            if (now > end) {
                id = window.setInterval(loggily("metronome", function () {
                    if ((new Date()).getTime() > end) {
                        window.clearInterval(id);
                    } else {
                        _public.triggerTick();
                    }
                }), interval);
            }
            end = now + duration;
        }
        _public.start = function () {
            window.addEventListener("mousemove", startOrLengthenSpinner, true);
            window.addEventListener("keydown", startOrLengthenSpinner, true);
            window.top.addEventListener("popstate", startOrLengthenSpinner, false);
            startOrLengthenSpinner();
        };
        return _public;
    };

    client.viewChangeHandler = function (ginipkg) {
        var _public = {}, _protected = {}, email_parser = client.emailParser(ginipkg);
        lib.model(_public, _protected, 'previewed_email');
        ginipkg.metronome.onTick(function () {
            if (ginipkg.host_environment.isPreviewPaneActive()) {
                _public.previewed_email = ginipkg.host_environment.previewed_email[0];
            }
        });
        function spansToPeople(spans) {
            return jQuery.map(spans, function (span) {
                return {
                    email: _.cleanEmail(jQuery(span).attr("email")),
                    name: _.nameFromEmail(jQuery(span).textNodes().first().text())
                };
            });
        }
        function composeFormRecipient(extractor_function) {
            var draft_recipients = _(['to', 'cc', 'bcc']).map(function (field_name) {
                return extractor_function(jQuery("textarea[name=" + field_name + "]:visible", ginipkg.active_view_element).val());
            });
            return _(draft_recipients).compact()[0];
        }
        function composeFormRecipientEmail() {
            return composeFormRecipient(_.cleanEmail);
        }
        function composeFormRecipientName() {
            return composeFormRecipient(_.nameFromEmail);
        }
        function composeFormSenderEmail() {
            return _.cleanEmail(jQuery("select[name='from']:visible", ginipkg.active_view_element).val());
        }
        function composeFormSenderName() {
            return _.nameFromEmail(jQuery("select[name='from']:visible option:selected", ginipkg.active_view_element).text());
        }
        function getConversationViewPeople() {
            /* Triggering Gmail's show details link to get the name of all emails at runtime. */
            $('.ajz').trigger('click');
            $('.ajA.SK').hide();
            var people = [{
                    email: composeFormRecipientEmail(),
                    name: composeFormRecipientName()
                }
            ].concat(spansToPeople(jQuery('.hG:visible', ginipkg.active_view_element).closest(".G2.G3").find(".iw span[email], span.gD[email], span.g2[email]"))).concat(spansToPeople(jQuery(".iw span[email]", ginipkg.active_view_element))).concat(spansToPeople(jQuery("span.gD[email]", ginipkg.active_view_element)).reverse()).concat(spansToPeople(jQuery("span.g2[email]", ginipkg.active_view_element))).concat([{
                    email: _.cleanEmail(ginipkg.user_email),
                    name: ginipkg.user.name
                }
            ]);
            ginipkg.allEmails = people;
            var users_emails = _((ginipkg.claimed_emails || []).concat([ginipkg.user_email])).map(_.cleanEmail);
            people = _.reject(people, function (person) {

                return !person || !person.email || person.email.match(ginipkg.RE_REMINDER_EMAIL) || person.email.match(ginipkg.RE_REMINDER_SENDER);
            });
            ginipkg.emailDetailView = false;
            var iterator = _.detect(people, function (person) {
                return !_.include(users_emails, person.email.toLowerCase());
            }) || people[1];
            return iterator;
        }
        
        
        function getContentFromConversation(active_view_element) {
            var body = jQuery(".ii.gt", active_view_element);
            
            if (!body.length) {
                throw "Couldn't find email body!";
            }
            return body[0];
        }
        
        function setConversationContent() {
            var conversation_content = {};
            //subject related element changed by siddarth on 23 May 2014
            conversation_content.subject                = jQuery(".hP", ginipkg.active_view_element).text();
            conversation_content.body                   = getContentFromConversation(ginipkg.active_view_element);      
            conversation_content.sent_date          = jQuery("span.g3[title]", ginipkg.active_view_element).attr('title');
            conversation_content.from_addr      = spansToPeople(jQuery("span.gD[email]", ginipkg.active_view_element));
            conversation_content.to_addrs           = spansToPeople(jQuery("span.g2[email]", ginipkg.active_view_element));
            conversation_content.cc_addrs           = '';
            ginipkg.conversation_content = conversation_content;
            //added by siddarth on 23 May 2014
        }
        function setConversationEmails() {
            ginipkg.conversation_list = _.conversationEmails(ginipkg.active_view_element);      
        }
        function getConversationViewEmail() {
            return _(getConversationViewPeople()).andand().email;
        }
        function getConversationViewName() {
            return _(getConversationViewPeople()).andand().name;
        }
        function updateFromConversationView(conversation_view) {
            setConversationEmails();
            setConversationContent();
            var point = email_parser.getPointFromNotificationEmail(getConversationViewEmail(), conversation_view);
            switch (point && point.point_type) {
            case 'twitter':
                ginipkg.sidebar.updateSidebarFromTwitter(point.identifier, {
                    force: true
                });
                break;
            case 'email':
                ginipkg.sidebar.updateSidebarFromEmail(point.identifier, {
                    force: true,
                    display_name: getConversationViewName()
                });
                break;
            default:
                ginipkg.sidebar.updateSidebarFromEmail(getConversationViewEmail(), {
                    force: true,
                    display_name: getConversationViewName()
                });
                break;
            }
        }

        function updateFromComposeView(compose_view) {
            jQuery('select[name="from"]', compose_view.element).css('width', 'auto');
            ginipkg.sidebar.updateSidebarFromEmail(composeFormRecipientEmail() || composeFormSenderEmail() || ginipkg.user_email, {
                display_name: (composeFormRecipientName() || composeFormSenderName() || ginipkg.user.name),
                force: true
            });
        }
        _public.onPreviewedEmailChange(function (previewed_email) {
            previewed_email = jQuery(previewed_email);
            ginipkg.sidebar.triggerReset();
            ginipkg.sidebar.updateSidebarFromEmail(getConversationViewEmail());
        });
        ginipkg.host_environment.onActiveViewChange(function (active_view) {
            ginipkg.emailDetailView = false;
            if (ginipkg.template_bar !== undefined) {    
                ginipkg.template_bar.refreshTemplateBar(ginipkg);   
            }

            if (_protected.keyboard_listener) {
                _protected.keyboard_listener.triggerDestroy();
            }
            ginipkg.sidebar.triggerReset();
            delayedConditionalExecute({
                condition: function () {
                    return jQuery('#xobni_frame')[0];
                },
                log_category: 'gmail.handlers.view_change.displace',
                retry_message: null,
                failure_message: null,
                poll_delay: 2000,
                max_poll_attempts: 5,
                continuation: function () {
                    ginipkg.displace_sidebar = true;
                }
            });

            if (active_view.isShowingConversation()) {
                delayedConditionalExecute({
                    condition: getConversationViewEmail,
                    retry_message: "Scheduling another attempt to find the loaded email... 17317",
                    failure_message: "Ran out of attempts to find the loaded email; cannot continue....17318",
                    log_category: 'gmail.handlers.view_change.conversation',
                    continuation: function () {
                        if (active_view.isShowingConversation()) {
                            updateFromConversationView(active_view);
                            ginipkg.recalculateActionLinksWidth();
                        }
                    }
                });
            } else if (active_view.isComposeView()) {
                updateFromComposeView(active_view);
            }
        });
        return _public;
    };

    client.emailParser = function (ginipkg) {
        var _public = {}, _protected = {}, RE_TWITTER_CAPTURE = /https?:\/\/twitter\.com\/([a-z0-9_]+)(\?.*)?/i,
            RE_ANYTHING = /(.*)/;
        _protected.special_sidebars = [{
                "point_type": 'twitter',
                "from": /.*@postmaster.twitter.com/i,
                "subject": /(.*) is.* following .* Twitter/,
                "containers": ['p', 'h1', 'h2'],
                "text_match": /is now following you/,
                "capture": RE_TWITTER_CAPTURE
            }, {
                "point_type": 'twitter',
                "from": /.*@postmaster.twitter.com/i,
                "subject": /(.*) retweeted one of your Tweets!/,
                "containers": ['p', 'h1', 'h2'],
                "text_match": /retweeted to ([0-9,]+) followers/,
                "capture": RE_TWITTER_CAPTURE
            }, {
                "point_type": 'twitter',
                "from": /.*@postmaster.twitter.com/i,
                "subject": /\(@(.+)\) has sent you a direct message/
            }, {
                "point_type": 'twitter',
                "from": /.*@postmaster.twitter.com/i,
                "subject": /(.* mentioned you on Twitter)|(.* replied to one of your Tweets)/,
                "containers": ['h1'],
                "text_match": /(mentioned you)|(replied to you)/i,
                "capture": RE_TWITTER_CAPTURE
            }, {
                "point_type": 'twitter',
                "from": /.*@postmaster.twitter.com/i,
                "subject": /(.*) favorited one of your Tweets/,
                "containers": ['h1'],
                "text_match": /favorited your Tweet/i,
                "capture": RE_TWITTER_CAPTURE
            }, {
                "point_type": 'twitter',
                "from": /.*@postmaster.twitter.com/i,
                "subject": /Reset your twitter password/i,
                "containers": ['h2'],
                "text_match": /Forgot your password/i,
                "capture": RE_TWITTER_CAPTURE
            }, {
                "point_type": 'highrise notification',
                "from": /system@highrisehq.com/i,
                "subject": /(.*)/,
                "containers": ['div'],
                "text_match": /(.*)/i,
                "capture": _.RE_EMAIL,
                "mixpanel": true
            }, {
                "point_type": 'highrise newsletter',
                "from": /newsletter@highrisehq.com/i,
                "subject": RE_ANYTHING,
                "containers": ['div'],
                "text_match": RE_ANYTHING,
                "capture": RE_ANYTHING,
                "mixpanel": true
            }, {
                "point_type": 'salesforce',
                "from": /.*(in|chatter|workflow).salesforce.com/,
                "subject": RE_ANYTHING,
                "containers": ['div'],
                "text_match": RE_ANYTHING,
                "capture": RE_ANYTHING,
                "mixpanel": true
            }
        ];

        function getMatchInContainerFromEmail(containers, expression, active_view_element) {
            var body = jQuery(".ii.gt", active_view_element);
            if (!body.length) {
                throw "Couldn't find email body!";
            }
            var found_containers = body.find(containers.toString()).filter(function () {
                return !!jQuery(this).text().match(expression);
            });
            if (!found_containers.length) {
                throw "Couldn't find any " + containers.toString() + " elements that " + "match the expression: " + expression;
            }
            var needle = found_containers.filter(function () {
                return !!jQuery(this).html().match(expression);
            }).first();
            if (!needle.length) {
                throw "Couldn't find any matches for expression " + expression + " in " + "any " + containers.toString() + " containers.";
            }
            return needle.html();
        }
        
        _protected.setPreferenceFromLookup = function (email_address, special_sidebar) {
            var pref = 'seen_' + special_sidebar.point_type.replace(' ', '_');
            if (!(pref.match(/highrise|salesforce/i))) {
                return false;
            }
            if (!ginipkg.authenticated_as) {
                return false;
            }
            return false;
        };
        _public.getPointFromNotificationEmail = function (email_address, active_view) {
            var user = null;
            if (!active_view.isShowingConversation()) {
                return false;
            }
            if (!active_view.subject) {
                fsLog("Couldn't find email subject!", "email.detect", "warning");
                return false;
            }
            return _(_protected.special_sidebars).firstMap(function (special_sidebar) {
                var subject_match = active_view.subject.match(special_sidebar.subject);
                if (email_address.match(special_sidebar.from) && subject_match) {
                    if (!special_sidebar.containers || !special_sidebar.text_match) {
                        user = subject_match[1];
                    } else {
                        try {
                            var container_content = getMatchInContainerFromEmail(special_sidebar.containers, special_sidebar.text_match, active_view.element);
                            var identifier_match = container_content.match(special_sidebar.capture);
                            if (identifier_match) {
                                user = identifier_match[1];
                            }
                        } catch (error) {
                            fsLog("error getting username from notification: " + error, "email.detect." + special_sidebar.point_type, "warning");
                        }
                    }
                    if (user) {
                        if (special_sidebar.mixpanel) {
                            ginipkgLogger.track(special_sidebar.point_type.replace(/^\w/, function ($0) {
                                return $0.toUpperCase();
                            }) + ": Lookup");
                        }
                        _protected.setPreferenceFromLookup(email_address, special_sidebar);
                        return {
                            identifier: user,
                            point_type: special_sidebar.point_type
                        };
                    }
                }
            });
        };
        return _public;
    };
    
    components.peopleWidgetPerson = function (_public, _protected, ginipkg) {

        lib.model(_public, _protected, 'recent_mails', 'recent_docs', 'chat_icon', 'google_plus_link', 'add_to_circles', 'add_to_circles_placeholder');
        _public.onDisplayedDivChange(function () {
            _public.recent_mails = null;
            _public.recent_docs = null;
            _public.chat_icon = null;
            _public.google_plus_link = null;
            if (_public.add_to_circles) {
                _public.add_to_circles_placeholder.replaceWith(_public.add_to_circles);
                _public.add_to_circles = _public.add_to_circles_placeholder = null;
            }
            if (!_public.container || !_public.displayed_div) {
                _public.hide();
                return;
            }
            _public.clickMoreDetails(_public.displayed_div);
            
        });
        
        _public.clickMoreDetails = function (displayed_div) {
            var show_details_container, show_details_link;
            
            delayedConditionalExecute({
                poll_delay: 50,
                max_poll_attempts: 20,
                log_category: "people_widget.click_details",
                failure_message: "Couldn't find show-details link",
                log_level_on_failure: "debug",
                condition: function () {
                    if (_public.displayed_div !== displayed_div) {
                        return true;
                    }
                    show_details_container = _public.displayed_div.find("> div:last-child");
                    show_details_link = show_details_container.find("[role=link]:first-child:last-child");
                    return !!show_details_link[0];
                },
                continuation: function () {
                    if (_public.displayed_div !== displayed_div) {
                        return true;
                    }
                    
                    if (!show_details_container.attr('data-ginipkg-clicked') && show_details_link.length === 1 && displayed_div === _public.displayed_div) {
                        show_details_container.attr('data-ginipkg-clicked', true);
                        window.setTimeout(function () {
                            _public.waitForMoreDetails(displayed_div);
                        }, 10);
                    }
                },
                error_continuation: function () {
                    _public.waitForMoreDetails(displayed_div);
                }
            });
        };

        _public.waitForMoreDetails = function (displayed_div) {
          
            delayedConditionalExecute({
                poll_delay: 100,
                max_poll_attempts: 100,
                log_category: "people_widget.await_details",
                log_level_on_failure: "debug",
                condition: function () {
                    if (_public.displayed_div !== displayed_div) {
                        return true;
                    }
                    return ! /^Loading/.test(_public.displayed_div.find("> div:last-child").text());
                },
                continuation: function () {
                    if (_public.displayed_div === displayed_div) {
                        _public.extractDetails();
                    }
                }
            });
        };

        function extractDetailsFromTableSection(section) {
            var table = section.find("table"),
            title = table.prev().text(),
            data = _(table.find("tr")).map(function (tr) {
                var td = jQuery(tr).find("td").last();
                return {
                    click: function () {
                        ginipkg.simulate.click(td);
                    },
                    hash: Math.random().toString(16).substr(2),
                    title: td.text()
                };
            });
                
            if (/^Mail/.test(title)) {
                _public.recent_mails = data;
            } else if (/^Docs/.test(title)) {
                _public.recent_docs = data;
            }
        }
        _public.extractDetails = function () {
            _public.displayed_div.find("> div").each(function () {
                var section = jQuery(this);
                extractDetailsFromTableSection(section);
            });
        };
        return _public;
    };

    jQuery.isReady = true;

    client.initialize = loggily("gmail.initialize", function (config) {

        var log_history = [];
        window.ginipkgLogger = giniLogger(config.ginipkg_base_url, config.min_log_level, {
            log_history: log_history
        });
        fsLog = window.ginipkgLogger.consoleLog;
        try {
            window.top.ginipkgLogger = window.ginipkgLogger;
        } catch (e) {
            fsLog("Could not set window.top.ginipkgLogger");
        }

        function shouldContinue() {
            if (window.location.host !== 'mail.google.com') {
                fsLog("Booted "+app_name+" on the wrong domain (" + window.location.host + ")", "gmail.initialize", "info");
                return;
            }
            try {
                if (window.top.location.host !== 'mail.google.com') {
                    fsLog("Booted "+app_name+" in foreign iframe (" + window.top.location.host + ")", "gmail.initialize", "info");
                    return;
                }
            } catch (e) {
                fsLog("Not loading "+app_name+"; window.top.location is unknowable...");
                return;
            }
            if (/ContactChooser/.test(window.location.pathname)) {
                fsLog("Not loading "+app_name+"; unsupported on Contact Chooser");
                return;
            }
            if (/\/mail\/mu/.test(window.location.pathname)) {
                fsLog("Not loading "+app_name+"; unsupported on mobile/offline gmail.");
                return;
            }
            if (/view=btop/.test(window.top.location.search)) {
                fsLog("Not loading "+app_name+". unsupported on popped-out views.");
                return;
            }
            return true;
        }

        if (!shouldContinue()) {
            jQuery('html').attr('ext-gini-loaded', 'true');
            return;
        } else {
        }

        jQuery(window).bind('error', function (event) {
            var error = event && event.originalEvent && event.originalEvent.message;
            window.top.ginipkgLogger.silentLog('Uncaught exception: ' + error);
        });

        var ginipkg = jQuery.extend({
            active_view_element: null,
            active_view_type: null,
            user_email: null,
            found_user_email: null,
            root_url: null,
            domain_from_url: null,
            handlers: null,
            lookup_service: null,
            sidebar: null,
            main_menu: null,
            authenticated_as: null,
            session_token: null,
            user_preferences: null,
            claimed_emails: null,
            maps_ready: null,
            cookies_available: null,
            //log_history: log_history,
            sugar_config: null, 
        }, config);

        var _protected = {};
        lib.model(ginipkg, _protected, 'displace_sidebar');
        lib.hasEvent(ginipkg, _protected, 'login_completed');
        jQuery('<style type="text/css"/>').text(client.stylesheet).appendTo('head');
        client.version(ginipkg);
        client.request(ginipkg);
        client.utils(ginipkg);
        client.utils.addGiniMethodsToJQuery(ginipkg, jQuery);
        ginipkg.user = models.user(ginipkg);
        ginipkg.user_preferences = client.preferences(ginipkg);
        ginipkg.metronome = client.metronome(ginipkg);
        ginipkg.host_environment = client.hostEnvironment(ginipkg);
        client.previewPane(ginipkg, ginipkg.host_environment);
        //client.flagger(ginipkg);
    
        if (ginipkg.cors_compatible) {
            client.session(ginipkg, function () {
                ginipkg.performImplicitLogin(function () {
                    ginipkg.triggerLoginCompleted();
                });
            });
        } else {
            client.session(ginipkg, function () {
                ginipkg.triggerLoginCompleted();
            });
        }
        //ginipkg.main_menu = client.mainMenu(ginipkg);
        ginipkg.navigation_bar = client.navigationBar(ginipkg);
        // ginipkg.tool_bar = client.toolBar(ginipkg);

        ginipkg.template_archive = components.templateArchive(ginipkg);
        
        // Remove this comment for task Bar functionality Gaurav.
        ginipkg.task_bar = client.taskBar(ginipkg);

        ginipkg.sidebar_actions = client.sidebarActions(ginipkg);
        //ginipkg.share_button = client.shareButton(ginipkg);
        ginipkg.lookup_service = models.lookupService(ginipkg);
        ginipkg.authorizations = models.authorizationTracker(ginipkg);
        //ginipkg.ad_proxy = client.adProxy(ginipkg);

        ginipkg.onceOn('login_completed', function () {
            //ginipkg.ad_proxy.rotateAd();
        });

        ginipkg.sidebar = models.sidebar(ginipkg);

        //ginipkg.handlers = client.handlers(ginipkg);
        //ginipkg.handlers.addHandlers();
        components.sidebar(ginipkg, ginipkg.sidebar);
        ginipkg.people_widget = client.peopleWidgetHandler(ginipkg);
        ginipkg.view_change_handler = client.viewChangeHandler(ginipkg);
        ginipkg.overlay_compose_view = client.overlayComposeViewHandler(ginipkg);
        //client.reminders(ginipkg);
        ginipkg.createRemoteDialog = client.dynamicDialog;
        //ginipkg.settings_dialog = client.settingsDialog(ginipkg);
        //ginipkg.simulate = client.simulate;

        ginipkg.isGmail = function () {
            return true;
        };

        ginipkg.openComposeWindow = function (recipient) {
            var gmail_base_url = window.top.location.toString().replace(/[^\/]*(\?.*|#.*|$)/, ''),
                win = window.open(jQuery.addParams(gmail_base_url, {
                    view: 'cm',
                    to: recipient,
                    fs: 1,
                    tf: 0
                }), "", "width=600,height=700");
            window.setTimeout(function () {
                win.resizeBy(0, 1);
            }, 1000);
        };
        
        window.top.ginipkg = ginipkg;
        jQuery('html').attr('ext-gini-loaded', 'true');
        ginipkg.onceOn('login_completed', function () {
            ginipkg.metronome.start();
        });
    
        return ginipkg;
    });


    components.actionButton = function (ginipkg, container) {
        var _public = {}, _protected = {};
        lib.hasEvent(_public, _protected, 'click');

        function withCurrentInfoBubble(element, something_to_do) {
            if (_protected.forced_bubble) {
                return something_to_do(jQuery(container).find(_protected.forced_bubble));
            }
            var classes = jQuery(element).attr("class"),
                matches, bubble;
            if (classes && (matches = classes.match(/(?:^|\s)oneline\-(?:status|action)\-([a-z\-]+)/))) {
                bubble = container.find("." + matches[1] + "-bubble");
                if (bubble.length > 0) {
                    something_to_do(bubble);
                }
            }
        }

        function hideShownBubble() {
            if (_protected.shown_bubble && !_protected.forced_bubble) {
                _protected.shown_bubble.fadeOut(250);
            }
        }

        function showThisBubble() {
            withCurrentInfoBubble(this, function (bubble) {
                if (_protected.shown_bubble && _protected.shown_bubble[0] !== bubble[0]) {
                    _protected.shown_bubble.hide();
                }
                _protected.shown_bubble = bubble;
                bubble.fadeIn(50);
            });
        }

        function addHandlers() {
            {
                container.find(".oneline-action[href='#login'], .oneline-action[href='#authorize']").hide();
            }
            container.find(".oneline-action").click(function (e) {
                _public.triggerClick(jQuery(this).attr("href"), e);
                return false;
            });
            container.find(".oneline-action, .oneline-status").hoverIntent({
                over: showThisBubble,
                out: hideShownBubble
            });
        }
        
        addHandlers();
        _public.update = function (new_button) {
            if (_protected.shown_bubble) {
                _protected.shown_bubble.fadeOut(250);
            }
            container.find(".oneline-action, .oneline-status").replaceWith(new_button);
            addHandlers();
        };
        
        _public.hide = function () {
            container.find(".oneline-action, .oneline-status").hide();
        };
        _public.onClick(hideShownBubble);
        _public.forceBubble = function (class_name) {
            _protected.forced_bubble = class_name;
            showThisBubble();
        };
        _public.unforceBubble = function () {
            _protected.forced_bubble = null;
            hideShownBubble();
        };
        return _public;
    };


    components.popupManager = function (ginipkg) {
        var _public = {};

        function refreshSidebar(preserveContent) {
            ginipkg.lookup_service.clearCache();
            ginipkg.sidebar.refreshSidebar(preserveContent);
        }
        _public.popup = function (url, width, height, callback, preserveContent) {
            fsLog("Attempting to popup window to: " + url);
            jQuery.centeredPopup({
                url: url,
                modal: true,
                width: width,
                height: height,
                callback: loggily("popup.callback", function () {
                    refreshSidebar(preserveContent);
                    if (callback) {
                        callback();
                    }
                })
            });
        };
        return _public;
    };

(function () {

    function watchDOM(elements, callback) {
        var _public = {}, delay = 1000,
            timeout;

        function handler() {
            timeout = timeout || window.setTimeout(function () {
                try {
                    callback();
                } finally {
                    timeout = null;
                }
            }, delay);
        }
        if (!jQuery.isArray(elements)) {
            elements = [elements];
        }
        _(elements).each(function (element) {
            element.addEventListener('keydown', handler, true);
            element.addEventListener('keyup', handler, true);
            element.addEventListener('click', handler, true);
        });
        _public.destroy = function () {
            _(elements).each(function (element) {
                element.removeEventListener('keydown', handler, true);
                element.removeEventListener('keyup', handler, true);
                element.removeEventListener('click', handler, true);
            });
        };
        return _public;
    }

    function measureHeight(element, vertical_padding, precalculated_height) {
        vertical_padding = (vertical_padding !== undefined) ? vertical_padding : 0;
        element.css({
            'padding-top': vertical_padding,
            'padding-bottom': vertical_padding
        });
        var height = precalculated_height || element.outerHeight();
        if (height < 2 * vertical_padding + 0.5) {
            element.css('padding', 0);
            return 0;
        } else {
            return height;
        }
    }

    var rigid_section_heights = {};

    components.fixed_section = function (_public, _protected, opts) {

        var ginipkg = opts.ginipkg,
            sidebar_model = ginipkg.sidebar;
        _public.section_model = models.section(opts.section_name);
        _public.section_model.scrollable = false;
        lib.destroyable(_public, _protected);
        _public.measureSection = function () {
            var height = measureHeight(opts.display_element, undefined, opts.rigid ? rigid_section_heights[opts.section_name] : undefined);
            _public.section_model.collapsed_height = height;
            _public.section_model.expanded_height = height;
            sidebar_model.sections.layout('content-changed');
            if (opts.rigid && !rigid_section_heights[opts.section_name]) {
                rigid_section_heights[opts.section_name] = height;
            }
        };
        _public.section_model.onMeasure(_public.measureSection);
        if (!opts.rigid) {
            //var watcher = watchDOM(opts.display_element[0], _public.measureSection);
            //_public.onDestroy(watcher.destroy);
        }
        var current_offset, previous_offset;
        _public.section_model.onLayout(function () {
            previous_offset = current_offset;
            current_offset = _public.section_model.offset;
        });
        _public.isLayoutChanging = function () {
            return Math.abs(previous_offset - current_offset) > 0.5;
        };
        _public.animatedLayoutChange = function () {
            opts.display_element.css({
                position: 'absolute',
                height: _public.section_model.limited_height,
                width: sidebar_model.width
            });
        };
        _public.animationStep = function (progress) {
            opts.display_element.css('top', (1 - progress) * previous_offset + progress * current_offset);
        };
        _public.animationFinished = function () {
            opts.display_element.css({
                position: 'relative',
                top: 0,
                height: 'auto',
                width: null
            });
        };
        _protected.renderFixedTemplate = function (render_opts) {
            return components.templateRenderer(ginipkg, render_opts.template, render_opts.contact_data, render_opts.context || render_opts.contact_data, opts.display_element, _public);
        };
    };

}());


    components.initialSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {
        var _public          = {}, _protected = {}, loading_image, real_image;
        var jQuery           = ginipkg.jQuery;
        var strEmail         = "";
        var conversationList = ginipkg.conversation_list;
        var context_data     = contact_data;
        var ajaxInputArray   = new Array();
        var ajaxExclude      = {};

        function unsetIndexes() {
            ginipkg.attachments = undefined;
            ginipkg.mails = undefined;
            $.killAllRequestQueue(true , false , true);
        }
        function setToCcMails(){
            var emails;
            var allEmails = $('.ajA.SK').find('span[email]');
            if(allEmails.length > 1 ){
                emails = new Array();
                $(allEmails).each(function (entry){
                    var currentEntry        = new Array();
                    currentEntry['email']   = $(allEmails[entry]).attr('email').toLowerCase().trim();
                    currentEntry['name']    = $(allEmails[entry]).text().toLowerCase();
                    currentEntry['name']    = currentEntry['name'].replace('<'+currentEntry['email']+'>','')
                                              .toLowerCase().replace(currentEntry['email'],'')
                                              .replace(/\"/g,'').replace(/\./g,' ');
                    currentEntry['name']    = currentEntry['name'].trim();
                    if(currentEntry['name'] === undefined || currentEntry['name'] == '') {
                        currentEntry['name'] = $.nameFromEmail(currentEntry['email']);
                    }
                    emails.push(currentEntry);
                });
            } else {
                emails = ginipkg.allEmails;
            }
            var result = new Array();
            var emailException = new Array();
            
            /*Setting up array of email to fetch if the corresponding contact exists in crm*/
            if(ginipkg.dataCache[ginipkg.found_user_email] === undefined){
                ajaxInputArray.push(ginipkg.found_user_email);
            } else if(ginipkg.dataCache[ginipkg.found_user_email]['crm_contact_exists'] === undefined ) {
                ajaxInputArray.push(ginipkg.found_user_email);
            } else{         //corresponding contact exists value exists in cache
                ajaxExclude[ginipkg.found_user_email] = ginipkg.dataCache[ginipkg.found_user_email]['crm_contact_exists'];
            }
            
            /*Cleaning any repeated emails and excluding any exceptions*/
            for(var key in emails) {
                var currentEmail = emails[key].email;
                var currentName  = emails[key].name;
                if( currentEmail !== undefined && currentEmail != '' && currentEmail != ginipkg.user_email
                    && currentEmail != ginipkg.found_user_email) {
                    if($.inArray(currentEmail,emailException) == -1) {
                        if(currentName !== undefined && currentName != ''){
                            var singleTempEmail      = new Array();
                            singleTempEmail['email'] = currentEmail;
                            singleTempEmail['name']  = currentName;
                            if(ginipkg.dataCache[currentEmail] !== undefined
                                && ginipkg.dataCache[currentEmail]['personData'] !== undefined) {
                                singleTempEmail['image']  = ginipkg.dataCache[currentEmail]['personData']['contact']['image_url_raw'];
                            } else {
                                singleTempEmail['image']  = proxy_base_url+"/images/avatar.jpg";
                            }
                            if(ginipkg.dataCache[currentEmail] === undefined){
                                ajaxInputArray.push(currentEmail);
                            } else if(ginipkg.dataCache[currentEmail]['crm_contact_exists'] === undefined ) {
                                ajaxInputArray.push(currentEmail);
                            } else{
                                ajaxExclude[currentEmail] = ginipkg.dataCache[currentEmail]['crm_contact_exists'];
                            }
                            result.push(singleTempEmail);
                            emailException.push(currentEmail);
                        }
                    }
                }
            }
            return result;
        }

        
        context_data.emails  = setToCcMails();
        if(context_data.emails.length < 1){
            if(section_element.parent().find('div.data-section').length < 1 ) {
                section_element.parent().append('<div class="data-section" />');
            }
            unsetIndexes();
            _public.dataRenderer = components.dataRenderer(ginipkg, contact_data, jQuery(document).find('.data-section'), '');
            return _public;
        }
        if(contact_data !== undefined && contact_data['contact'] !== undefined
         && contact_data['contact']['email'] !== undefined){
            var emailIndex = contact_data['contact']['email'];
            if(ginipkg.dataCache[emailIndex] === undefined) {
                ginipkg.dataCache[emailIndex] = {};
            }
            
            ginipkg.dataCache[emailIndex]['personData'] = contact_data;
        }
        
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'initial-section',
            display_element: section_element
        });
        _protected.renderFixedTemplate({
            template: 'layout/initial',
            contact_data: ginipkg,
            context: context_data
        });
        _public.measureSection();
        
        Object.keys(ajaxExclude).forEach(function(key) {
            var contactExistClass = '';
            if(ajaxExclude[key] == 1) {
                contactExistClass = 'active';
                section_element.find('div.contact_exist_container[contactemail='+key+']').attr('title','Contact Exists In CRM.');
            } else {
                contactExistClass = 'inactive';
                section_element.find('div.contact_exist_container[contactemail='+key+']').attr('title','Contact Does Not Exist In CRM');
            }
            section_element.find('div.contact_exist_container[contactemail='+key+']').addClass(contactExistClass);
        });
        if(ajaxInputArray.length > 0){
            ginipkg.request({
                path: '/crm.php?',
                server: 'crm',
                // jsonp: 'true',
                data: {
                    requestType:'CRM',
                    _method: 'post',
                    subType:'contact_exist_multiple',
                    email: ginipkg.found_user_email,
                    contactEmail:ajaxInputArray,
                },
                success: function (response){
                    var contactExistObject = response.result.contact_exist;
                    var contactExistClass = '';
                    ajaxInputArray.forEach(function (entry){
                        if(ginipkg.dataCache[entry] === undefined){
                            ginipkg.dataCache[entry] = {};
                        }
                        if(contactExistObject !== undefined) {
                            ginipkg.dataCache[entry]['crm_contact_exists'] = contactExistObject[entry];
                            if(contactExistObject[entry] == 1) {
                                contactExistClass = 'active';
                                section_element.find('div.contact_exist_container[contactemail='+entry+']').attr('title','Contact Exists In CRM.');
                            } else {
                                contactExistClass = 'inactive';
                                section_element.find('div.contact_exist_container[contactemail='+entry+']').attr('title','Contact Does Not Exist In CRM');
                            }
                            section_element.find('div.contact_exist_container[contactemail='+entry+']').addClass(contactExistClass);    
                        }
                        
                    });

                },
               error: function (data, text_status, xhr) {
                }
            });
        }
        
        var mainLogo = section_element.parent().find('.header-section .logo');
        var backToggle = section_element.parent().find('div.inactive-back-button');
        mainLogo.click(function (){
            if($(this).hasClass('main-logo-back')){
                $('div#ginipkg-sidebar').find('.top_header #search_email').val('');
                ginipkg.emailDetailView = false;
                section_element.show();
                mainLogo.removeClass('main-logo-back');
                mainLogo.attr('title','');
                section_element.parent().find('.data-section').remove();
                backToggle.removeClass('back-toggle');
                backToggle.attr('title','');
                $.killAllRequestQueue(true, false , true);
            }
        });
        backToggle.click(function (){
            if($(this).hasClass('back-toggle')){
                $('div#ginipkg-sidebar').find('.top_header #search_email').val('');
                ginipkg.emailDetailView = false;
                mainLogo.removeClass('main-logo-back');
                mainLogo.attr('title','');
                section_element.show();
                section_element.parent().find('.data-section').remove();
                backToggle.removeClass('back-toggle');
                backToggle.attr('title','');
                $.killAllRequestQueue(true, false , true);
            }
        });
        
        section_element.find('.open-profile').click(function (){
            var path  = '/person.php';
            var email = $(this).attr('initialemail');
            var name  = $(this).attr('username');
            ginipkg.emailDetailView = true;
            ginipkg.found_user_email = email;
            if(ginipkg.dataCache[email] !== undefined && ginipkg.dataCache[email]['personData']!== undefined){
                section_element.parent().find('div.data-section-loader').hide();
                if(section_element.parent().find('div.data-section').length < 1 ) {
                    section_element.parent().append('<div class="data-section" />');
                }
                var contact_data = ginipkg.dataCache[email]['personData'];
                section_element.hide();
                unsetIndexes();
                _public.dataRenderer = components.dataRenderer(ginipkg, contact_data, jQuery(document).find('.data-section'), '');
                backToggle.addClass('back-toggle');
                backToggle.attr('title','Back To Email Listing');
                mainLogo.addClass('main-logo-back');
                mainLogo.attr('title','Ginicube Home');
            } else {

                ginipkg.request({
                    path: path,
                    data: {
                        viewport_height: jQuery(window).height(),
                        view_type: ginipkg.host_environment.active_view.viewType(),
                        source: 'ext',
                        client: 'chromium',
                        requestType : 'personal',
                        email : email,
                        name  : name,
                        isProfileUpdated : ginipkg.isProfileUpdated === true? true :false ,
                        // profileFullFetch : (ginipkg.profileFullFetch) ? true : false
                        profileFullFetch : true
                    },
                    beforeSend :function (){
                        unsetIndexes();
                        section_element.hide();
                        if(section_element.parent().find('div.data-section-loader').length < 1 ) {
                            var loaderHtml = '<div class="data-section-loader"><img src="'+img_base_url+'/loader.gif" height="32" width="32"/></div>';
                            section_element.parent().append(loaderHtml);
                        }
                        if(section_element.parent().find('div.data-section').length < 1 ) {
                            section_element.parent().append('<div class="data-section" />');
                        }
                        section_element.parent().find('div.data-section-loader').show();
                    },
                    server: 'profiles',
                    //_method:'POST',
                    // jsonp: 'true',
                    success: function (response){
                        ginipkg.found_user_email = email;
                        if(ginipkg.dataCache[email] === undefined) {
                            ginipkg.dataCache[email] = {};
                        }
                        ginipkg.dataCache[email]['personData'] = response;
                        section_element.parent().find('div.data-section-loader').hide();
                        var contact_data = response;
                        unsetIndexes();
                        if(response !== undefined && response.contact !== undefined && response.contact.image_url_raw !== undefined ){
                            section_element.find('.open-profile[initialemail='+email+'] img').attr('src',response.contact.image_url_raw);
                        }
                        _public.dataRenderer = components.dataRenderer(ginipkg, contact_data, jQuery(document).find('.data-section'), '');
                        backToggle.addClass('back-toggle');
                        backToggle.attr('title','Back To Email Listing');
                        mainLogo.addClass('main-logo-back');
                        mainLogo.attr('title','Ginicube Home');
                    },
                    error: function (data, text_status, xhr){
                        console.log('errorsection of initial section ajax request..........');
                        console.log(section_element);
                        ginipkg.emailDetailView = false;
                        section_element.show();
                        section_element.parent().find('div.data-section-loader').hide();
                        section_element.parent().find('.data-section').remove();
                        mainLogo.removeClass('main-logo-back');
                        mainLogo.attr('title','');
                        backToggle.removeClass('back-toggle');
                        backToggle.attr('title','');
                        $.giniAlert('Sorry Something Broke!');
                    }
                });
            }
            
        });
        if(ginipkg.emailDetailView === true) {

            section_element.hide();
            backToggle.addClass('back-toggle');
            backToggle.attr('title','Back To Email Listing');
            mainLogo.addClass('main-logo-back');
            mainLogo.attr('title','Ginicube Home');
            section_element.parent().find('div.data-section-loader').hide();
            if(section_element.parent().find('div.data-section').length < 1 ) {
                section_element.parent().append('<div class="data-section" />');
            }
            unsetIndexes();
            _public.dataRenderer = components.dataRenderer(ginipkg, contact_data, jQuery(document).find('.data-section'), '');
            return _public;
        }
        return _public;
    };

    //Header Section 
    components.headerSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {

        var _public          = {}, _protected = {}, loading_image, real_image;
        var jQuery           = ginipkg.jQuery;
        var strEmail         = "";  
        var conversationList = ginipkg.conversation_list;
        var context_data =  {};
        if(ginipkg.has_crm === true && ginipkg.has_crm_but_not_valid === false )
        {
            context_data.configured_modules =   ginipkg.sugar_config.configured_modules;
        }
        
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'header-section',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'layout/header',
            contact_data: ginipkg,
            context: context_data
        });

        _public.measureSection();
        _protected.expanded_container = section_element.first();
        headerContainer = section_element.first();


        var searchInputBox = _protected.expanded_container.find('input');
        searchInputBox = searchInputBox.first();
        searchInputBox.val('Email');
        searchInputBox.addClass('text-label');
        
        searchInputBox.focus(function(){
            if($(this).val() == 'Email') {
                $(this).val('');
                $(this).removeClass('text-label');   
            }
        }).blur(function() {

            if($(this).val() == '') {
                $(this).val('Email');
                $(this).addClass('text-label');
            }
        });
        headerContainer.find('#search_email').keyup(function (e) {
            if(e.keyCode == 13) {
                ginipkg.backToInitial = false;
                e.stopImmediatePropagation();
                e.preventDefault();
                updateSideBar();
            }
        });

        headerContainer.find('.search_email_button').click(function(e){
            e.stopImmediatePropagation();
            e.preventDefault();
            ginipkg.backToInitial = false;
            updateSideBar();
        });
        function flash_err_msg(input) {
            headerContainer.find('.err_msg').html(input).show();
            window.setTimeout(function () {
                headerContainer.find('.err_msg').hide();
            }, 4000)();
        }
        function updateSideBar()
        {
            headerContainer.find('.err_msg').html("");
            var email = headerContainer.find('input[name=search_email]').attr('value');
            email = $.trim(email);
            if(email == ""){
                fsLog("Please enter email id");
                flash_err_msg("Please enter an email id");

            }else if(!jQuery.validateEmail(email)){
                fsLog("Please enter valid email id");   
                flash_err_msg("Please enter a valid email id");
            }else{
                display_name = "Search User";
                ginipkg.sidebar.updateSidebarFromEmail(email, { display_name: display_name });
            }
        }
        function requireLoginFor(reason, code_to_run) {
            if (ginipkg.authenticated_as) {
                code_to_run();
            } else {
                ginipkg.showLoginPopup(function () {
                    if (ginipkg.authenticated_as) {
                        code_to_run();
                    }
                }, reason);
            }
        }
        _protected.addLinkHandlers = function (menu) {

            //Leads Link
            var form_link = menu.find('.crm-module');
            form_link.click(loggily("gmail.toolbar_menu.crm-module", function () {
                var moduleName = jQuery(this).text();    
                menu.hide();
                var row_data = {};
                var contact_data = {};
                
                var options = {
                    template: 'crm/sugar',
                    module: _.camelize(moduleName),
                    mode: 'add',
                    sugar_config : ginipkg.sugar_config,
                    contact_data: contact_data,
                    context_data: row_data,
                    email: '',
                    company_name: '',
                    site_name: 'sugarCRM'
                };
                _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                requireLoginFor("Create " + moduleName, function () {
                    _public.crm_forms.edit(moduleName);
                });
                return false;
            }));

        };
   
        if(ginipkg.has_crm === true && ginipkg.has_crm_but_not_valid === false ) {
            $("div#ginipkg-sidebar div.header-section div.header_dropdown").append('<div id="ginipkg-toolbar">');
            _protected.template=$("div#ginipkg-sidebar div.header-section div.header_dropdown div#ginipkg-toolbar");
            components.templateRenderer(ginipkg, 'toolbar_menu/toolbar_menu', ginipkg, ginipkg.sugar_config, _protected.template);
            _protected.menu_button = _protected.template;
            _protected.menu_dropdown = _protected.template.find('#gini-toolbar-items');
            _protected.menu = components.engagingContainer(ginipkg, _protected.menu_dropdown, _protected.template);
            _protected.menu_dropdown.css({
                'left': '-104px',
                'line-height': 'normal' 
            });
            _protected.menu_dropdown.find("div.J-N").css("padding-right", "19px");
            _protected.template.find("div.T-I.J-J5-Ji.ar7.nf.T-I-ax7").css("display","none");
            _protected.menu_button.find("div.T-I.J-J5-Ji.ar7").click(_protected.menu.toggle);
            _protected.addLinkHandlers(_protected.menu_dropdown);
            headerContainer.find('#crmModule').click(function(e){
                headerContainer.find("div#gini-toolbar-items").toggle();
                e.stopImmediatePropagation();
                hideBubbles(e);
                headerContainer.find('.dropdown-menu').show('fast');           
            });
            _protected.menu.onDisengage(_protected.menu.hide);
            $(document).mouseup(function(e){
                var items;
                var button;
                items=$(e.target).parent().parent().attr('id');
                button=$(e.target).attr('id');
                if(button=='crmModule' || items=='gini-toolbar-items'){

                } else {
                    $("div#ginipkg-sidebar div.header-section div.header_dropdown div#ginipkg-toolbar").find("div#gini-toolbar-items").hide();
                }
                  e.stopImmediatePropagation();
            });
        } else {
            $("div#ginipkg-sidebar div.header-section div.header_dropdown").find("a#crmModule").css('background-position','-27px -3497px');
            $("div#ginipkg-sidebar div.header-section div.header_dropdown").find("a#crmModule").attr('title','CRM Not Configured');
        }
        headerContainer.find('.load_profile').click(function(e){
            e.stopImmediatePropagation();        
            var email = jQuery(this).attr('emailId');
            display_name = "Search User";
            ginipkg.sidebar.updateSidebarFromEmail(email,{ display_name: display_name });
            //jQuery.find('.wip-spinner').show();
            return false;
        });

        return _public;
    };
    
    
    components.personalInfoSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {
        
        var _public = {}, _protected = {}, loading_image, real_image;
        var jQuery  = ginipkg.jQuery;
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'personal-profile',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'personal_profile/profile',
            contact_data: ginipkg,
            context: contact_data
        });

        _public.measureSection();
        var sourceSection = section_element.find(".cntnt .source");
        var source=contact_data.company.source;
        var css_class="";
        if(source=="linkedin") {
            css_class="in";
        } else if(source=="google+") {
            css_class="googleplus";
        }
        sourceSection.html("<p title=\""+source+"\" class='"+css_class+"'></p>");
        
        var objMoreLink = section_element.find('.more-link');

        objMoreLink.click(function(e) {
            e.stopImmediatePropagation();
            
            section_element.find(".profile-description").toggleClass("reveal-open");
            var strMoreLink = objMoreLink.text();
            if(strMoreLink == '[+ More]')
            {
                objMoreLink.text('[- Less]');
            }
            else if(strMoreLink == '[- Less]')
            {
                section_element.find(".profile-description").scrollTop(0);
                setTimeout(function() {
                    objMoreLink.text('[+ More]');
                }, 500);                
            }
            return false;
        });
        return _public;
    };

    components.personalSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {
        
        var _public = {}, _protected = {}, loading_image, real_image;
        var jQuery  = ginipkg.jQuery;

        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'personal-section',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'layout/personal',
            contact_data: ginipkg,
            context: ginipkg
        });

        _public.measureSection();
        $('#ginipkg-sidebar').find("input#search_email").val(ginipkg.found_user_email).css("color","#4D4B4B");
        
        _protected.expanded_container = section_element.first();
        
        _protected.expanded_container.find('div.person').click(function(){
            $("ul.sections.tabs .tab-content").hide();
            section_element.find(".tab-content").show();
        });
        
        //By Default hide section
        _protected.expanded_container.find(".tab-content").show();
        return _public;
    };

    components.crmSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {

        var _public = {}, _protected = {}, loading_image, real_image;
        
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'crm-section',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'layout/crm',
            contact_data: ginipkg,
            context: contact_data
        });

        _public.measureSection();
        _protected.expanded_container = section_element.first();
        _protected.expanded_container.find('div.crm').click(function(){
            $("ul.sections.tabs .tab-content").hide();
            section_element.find(".tab-content").show();
        });
        
        //By Default hide section
        _protected.expanded_container.find(".tab-content").hide();
        return _public;
    };

    components.crmNotFoundSection = function (ginipkg, contact_data, section_element, image_should_crossfade) { 
        var _public = {}, _protected = {}, loading_image, real_image;

        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'crm-not-found-section',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'crm/crm-not-found',
            contact_data: ginipkg,
            context: contact_data
        });
        section_element.find(".config-sugarcrm").click(function () {
            ginipkg.createRemoteDialog(ginipkg, {
                id : 'configure-crm-iframe',
                title: ginipkg.signupTitle || "Configure SugarCRM",
                url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=sugarCrm&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source+ '&invalidCRM=' + ginipkg.has_crm_but_not_valid,
                 width: 650,
                height: 450,
                reason_for_authentication: "connect-social-networks",
                close: ginipkg.clearCacheThoroughly
                }).show();
            
        });
        _public.measureSection();
        
        return _public;
    }
    components.companySection = function (ginipkg, contact_data, section_element, image_should_crossfade) {

        var _public = {}, _protected = {}, loading_image, real_image;
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'company-section',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'layout/company',
            contact_data: ginipkg,
            context: contact_data
        });
        
        _public.measureSection();
        _protected.expanded_container = section_element.first();
        _protected.expanded_container.find('div.company').click(function(){
            $("ul.sections.tabs .tab-content").hide();
            section_element.find(".tab-content").show();
        });
        _protected.expanded_container.find('.tab-content').hide();
        return _public;
    };

    components.emailSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {
        var _public = {}, _protected = {}, loading_image, real_image;
        var jQuery  = ginipkg.jQuery;

        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'email-section',
            display_element: section_element
        });
        _protected.renderFixedTemplate({
            template: 'layout/email',
            contact_data: ginipkg,
            context: contact_data
        });
        _public.measureSection();
        _protected.expanded_container = section_element.first();
        section_element.find('div.mails').click(function(){
            $("ul.sections.tabs .tab-content").hide();
            section_element.find(".tab-content").show();
        });
        
        //By Default hide section
        section_element.find(".tab-content").hide();
        section_element.find('.mails').click(function(event){
            event.stopImmediatePropagation();
            var objMailDetail = section_element.find('.email_body_tab_cls');
            fetchMail();
        });
        fetchMail();
        function fetchMail(){
            var mails = {};
            if(ginipkg.mails === undefined) {
                mails.recordParPage = 10;
                mails.currentPageNumber = 1;
                mails.maxEmailIndex = 0;
                mails.reachedEmailIndex = 0;
                mails.reachedEmailIndexStatus = 1; //1== mail traversing left , 0== alll mail traversed 
                mails.emailIndexList = '';
                mails.masterList = '';
                mails.displayList = '';
                mails.requestInQue = false;
                mails.noRecords = false;
                ginipkg.mails = mails;
            }
            else {
                mails = ginipkg.mails;  
            }
        
            //firsttime fetching
            var currentPageNumber = mails.currentPageNumber; 
            var masterList = (mails.masterList!== undefined)? mails.masterList: "";
            var noRecords =  mails.noRecords;
            var numFetechedMails = 0;
            if(mails.masterList != "" && mails.masterList !== undefined)
            {
                numFetechedMails = parseInt(Object.keys(mails.masterList).length);
            }
            var reachedEmailIndexStatus = (mails.reachedEmailIndexStatus == 0) ? false : true; 


            if(currentPageNumber <= 1 && (masterList == "" || masterList === undefined)) // First time fetching initiated 
            {
                section_element.find('.email_err_box').html("<p>Loading Emails! Please Wait...                    <img src=\""+img_base_url+"/loader.gif\" height=\"16\" width=\"16\" />                    </p>");
                fetchMailsFromRemoteServer();
            } else {
                var endIndex = parseInt(mails.currentPageNumber) * parseInt(mails.recordParPage);
                if(reachedEmailIndexStatus === false || numFetechedMails >= endIndex ) //search from local array
                {
                    getMailHTML();
                    section_element.find('.email_loader').hide();
                    section_element.find('.mask').hide();
                } else {
                   fetchMailsFromRemoteServer();
                }
            }
        }
    
        function setMailsMasterList(result) {
            var mails = ginipkg.mails;    
            var masterIndex =  0;
            if(mails.masterList === undefined || mails.masterList == '') {
                var masterList = {};
            } else {
                var masterList = mails.masterList;
                var maxIndexofMasterList = parseInt(Object.keys(masterList).length);
                masterIndex = (maxIndexofMasterList > 0) ? maxIndexofMasterList : 0;
            }
           
            if(mails !== undefined && result.mail != "") {
                var arrMails  = result.mail;
                $.each(arrMails , function (i,mail){
                    masterList[masterIndex] = mail;
                    masterIndex++;
                });

                mails.maxEmailIndex           = parseInt(result.mailIndex.length) -1;
                mails.reachedEmailIndex       = result.msgCounter;
                mails.reachedEmailIndexStatus = result.moreMail; //1== mail traversing left , 0== alll mail traversed 
                mails.emailIndexList          = result.mailIndex;
                mails.masterList              = masterList;
                mails.displayList             = masterList;
                ginipkg.mails = mails;
          }
        }

    
        function fetchMailsFromRemoteServer() {
            var mails = ginipkg.mails;
            //Previous request already in Que
            var statusRequest = checkRequestQue(mails);

            if(statusRequest === false) {
                return false;
            }
            var reachedEmailIndexStatus = (mails.reachedEmailIndexStatus == 0) ? false : true;
            if( reachedEmailIndexStatus === true ) {
                var mailIndex = (mails.emailIndexList !== undefined) ? mails.emailIndexList : "";
                ginipkg.request({
                    server: 'profiles',
                    path  : '/dbRequest.php?',
                    // jsonp : true,
                    data  : {
                        email           : ginipkg.found_user_email,
                        requestType     :'DB',
                        userAction      :'getMailAttachmentList',
                        fetchEmail      :'1',
                        recordsPerRequest: mails.recordParPage,
                        mailIndex       :'',
                        startCounter    :mails.reachedEmailIndex,
                        _method         :  'post',
                    },
                    beforeSend:function(){
                        mails.requestInQue = true;
                        ginipkg.mails = mails;
                    },
                    success: function (response) {
                        section_element.find('.email_err_box').html('');
                        section_element.find('.email_err_box').hide();
                        section_element.find('.email_loader').hide();
                        section_element.find('.mask').hide();
                        if(response.errCode == 0)
                        {
                            setMailsMasterList(response.result[ginipkg.found_user_email]);
                            getMailHTML();
                            mails.requestInQue = false;
                            ginipkg.mails = mails;
                            if(response.result[ginipkg.found_user_email].moreMail == '1'){
                                fetchMailsFromRemoteServer();
                            }
                        }else{
                            if(response.errCode == 34 || response.errMsg === "Google authentication is required for accessing emails, attachments & meetings.") {
                                section_element.find('.email_err_box').html("<p>"+response.errMsg+"<br/><br/><input type=\"button\" id=\"get-email-auth\" value=\"Authenticate Google\" /></p>").show();
                                section_element.find('.mail-comment-status').show().find('img').toggle(!! 0);
                                $("#get-email-auth").bind("click",function(){
                                    ginipkg.createRemoteDialog(ginipkg, {
                                        id : 'social-connect-iframe',
                                        title: ginipkg.signupTitle || "Social Connect",
                                        url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=social&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                                        width: 650,
                                        height: 450,
                                        reason_for_authentication: "connect-social-networks",
                                        close: ginipkg.clearCacheThoroughly,
                                        css: {
                                            width: "500px",
                                            padding: 0
                                        }
                                    }).show();
                                });

                            } else {
                                section_element.find('.email_err_box').html("<p>"+response.errMsg+"</p>").show();
                            }
                            mails.requestInQue = false;
                            ginipkg.mails = mails;
                        }
                        
                        
                    }
                    ,error: function(xhr,strError,errorThrown){
                        var html = "<p>"+app_name+" could not connect to Google's server. Please try again later.</p>";
                        section_element.find('.email_err_box').html(html).show();
                        setTimeout(function() {
                            // hide error message after 30 seconds.
                            section_element.find('.email_err_box').hide();
                        }, 30000);
                        section_element.find('.email_loader').hide();
                        section_element.find('.mask').hide();
                        if(mails.currentPageNumber > 1){
                            mails.currentPageNumber = parseInt(mails.currentPageNumber - 1);
                        }
                        mails.requestInQue = false;
                        ginipkg.mails = mails;
                    }
                });
            } else {
                console.log('fetched all emails from server.');
            }
        }
    
    
        function getMailHTML() {   
            var objMail     = $('.email_body_tab_cls');
            var mails = ginipkg.mails; 

            if(mails.masterList !== undefined) {
                var displayListTemp = {};
                var masterList = mails.masterList;
                var displayList = mails.displayList;

                var currentPageNumber   = parseInt(mails.currentPageNumber);
                var recordParPage       = parseInt(mails.recordParPage);

                var startIndex =  parseInt(currentPageNumber-1)*recordParPage;
                var endIndex =  parseInt(currentPageNumber)*recordParPage;

                for(var i=startIndex; i < endIndex; i++) {
                    if(displayList[i] !== undefined) {
                        displayListTemp[i] = displayList[i];
                    }
                }
            }
            arrMail = displayListTemp;
            var rows = '';
            var htmlMail = "";
            if(Object.keys(arrMail).length > 0) {
                ginipkg.mails.noRecords = false;
                //table header
                htmlMail = "\n                    <table class=\"email_body_tab\">                    <thead>                        <tr>                            <th style='font-size:13px;'>Subject</th>                            <th style='font-size:13px;'>Date</th>                        </tr>                    </thead>                    <tbody></tbody>                    </table>                    <div class=\"page_index\">                    </div>                    ";
                objMail.html(htmlMail);
                
                $.each(arrMail , function (i,mail){
                    var body = (mail.html)?mail.html:'0';
                    body = body.replace(/=\n/g,'')
                                .replace(/=A0/g,' ')
                                .replace(/=20/g,'')
                                .replace(/=92/g,'\'')
                                .replace(/=85/g,'...');
                    if($(body).text() == '') {
                        body = '0';
                    }   
                    if(body == '0') {
                        body = mail.text;
                        body = $.trim(body);
                        if(body !='' && body !=' '){
                            body = body.replace(/=\n/g,'')
                                        .replace(/\n/g,'<br/>')
                                        .replace(/=A0/g,' ')
                                        .replace(/=20/g,'')
                                        .replace(/=92/g,'\'')
                                        .replace(/=85/g,'...');  
                        } else {
                            body = 'No Email Body Found.';
                        }
                    }

                    rows += "<tr class=\"hasTooltip\">";
                    rows += "<td >"+$.truncateText($.escapeHtmls(mail.subject),20)+"</td>";
                    rows += "<td >"+mail.sentDate+"<span class=\"mail_pop_up_box\">                                    <div class=\"arrow\"></div>                                    <div class=\"title_mail\" title=\""+$.escapeHtmls(mail.subject)+"\">"+$.truncateText($.escapeHtmls(mail.subject),30)+"</div>                                    <article class=\"title_cntnt\">"+body+"</article>                                </span>                            </td>";
                    rows += "</tr>";


                });
                //Paginator html
                var htmlPaginator = renderMailPaginator();

                objMail.find('table.email_body_tab tbody').html(rows);
                objMail.parent().find('.page_index').html(htmlPaginator);
                
                section_element.find('.next').click(function(e){
                    var mails = ginipkg.mails;
                    var statusRequest = checkRequestQue(mails);
                    mails.currentPageNumber = parseInt(mails.currentPageNumber + 1);
                    ginipkg.mails = mails;
                    section_element.find('.mask').show();
                    section_element.find('.email_loader').show();
                    fetchMail();    
                });

                section_element.find('.back').click(function(e){
                    var mails = ginipkg.mails;
                    var statusRequest = checkRequestQue(mails);
                    mails.currentPageNumber = parseInt(mails.currentPageNumber - 1);
                    ginipkg.mails = mails;
                    section_element.find('.email_loader').show();
                    section_element.find('.mask').show();
                    fetchMail();
                });
                //added table sorter
                $(".email_body_tab").tablesorter();
               
            }else{  
                ginipkg.mails.noRecords = true;
                htmlMail += "<span class = 'no-record'; style='width:100%;align:center;'>No Emails found.</span>";
                objMail.html(htmlMail);
            }
        }

        function renderMailPaginator(){
            
            var mails = ginipkg.mails; 
            var reachedEmailIndexStatus = (mails.reachedEmailIndexStatus == 0) ? false : true; 
            var maxEmailIndex = parseInt(mails.maxEmailIndex)+1;
            var startIndex = (parseInt(mails.currentPageNumber) - 1) * parseInt(mails.recordParPage);
            var endIndex = parseInt(mails.currentPageNumber) * parseInt(mails.recordParPage);
           
            var showEndIndex = Math.min(maxEmailIndex,endIndex);
           
            fsLog(reachedEmailIndexStatus +"====="+maxEmailIndex+"====="+endIndex);
            var htmlString = "";

            var htmlString = "";

            /*
            * Paginator for New Email Lising UI.
            * Date : 16 Jan 2014
            */
            if(mails.currentPageNumber <= 1){
                htmlString += "<a href=\"javascript:void(0)\" class=\"no-back\" ></a>";
            }else{
                htmlString += "<a href=\"javascript:void(0)\" class=\"back\">back</a>";
            }

            htmlString += "<span class=\"counting\">" +(startIndex + 1) + "-" + showEndIndex + " of " + maxEmailIndex+"</span>";
            
            if(reachedEmailIndexStatus === false && maxEmailIndex <= endIndex){
                htmlString += "<a href=\"javascript:void(0)\" class=\"no-next\" ></a>";
            }else{
                htmlString += "<a href=\"javascript:void(0)\" class=\"next\">next</a>";
            }

            return  htmlString;
        }
        
        function checkRequestQue(mails) {
            if(mails.requestInQue === true){
                return false;
            }
        }
        return _public;
    }
    
    components.attachmentSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {
        
        var _public = {}, _protected = {}, loading_image, real_image;
        var jQuery  = ginipkg.jQuery;
        ginipkg.attachmentBody = new Array();

        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'attachment-section',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'layout/attachment',
            contact_data: ginipkg,
            context: contact_data
        });

        _public.measureSection();
        _protected.expanded_container = section_element.first();
        //By Default hide section
        section_element.find(".tab-content").hide();
        section_element.find('div.attachments').click(function(event){
            console.log('from attachmentsection' , ginipkg.requestQueue);
            event.stopImmediatePropagation();
            $("ul.sections.tabs .tab-content").hide();
            section_element.find(".tab-content").show();
            searchAttachments();
        });
        searchAttachments();
        function status(text, spin) {
                section_element.find('.status-text').text(text).show();
                section_element.find('.comment-status').show().find('img').toggle( !! spin);
        }

        function flash(message) {
            var flashed = message;
            status(message);
            window.setTimeout(function () {
                if (section_element.find('.status-text').text() === flashed) {
                    section_element.find('.status-text').fadeOut('fast');
                    section_element.find('.comment-status').hide();
                }
            }, 7000);
        }

        function getAttachmentHTML()
        {   
            fsLog("In Case 3");
            var objAttachment   = section_element.find('.atchment_body_tab_cls');
            var attachments     = ginipkg.attachments; 
            if(attachments!="" && attachments!=undefined){
                if(attachments.masterList !== undefined) {
                    var displayListTemp = {};
                    var masterList = attachments.masterList;
                    var displayList = attachments.displayList;

                    var currentPageNumber   = parseInt(attachments.currentPageNumber);
                    var recordParPage       = parseInt(attachments.recordParPage);

                    var startIndex =  parseInt(currentPageNumber-1)*recordParPage;
                    var endIndex =  parseInt(currentPageNumber)*recordParPage;

                    for(var i=startIndex; i < endIndex; i++) {
                        if(displayList[i] !== undefined) {
                            displayListTemp[i] = displayList[i];
                        }
                    }
                    ginipkg.attachments = attachments;
                }

                arrAttachment = displayListTemp;
                if(Object.keys(arrAttachment).length > 0) {
                    var rows = '';
                    var htmlAttachment = "";
                    htmlAttachment="\n                        <table class=\"atchment_body_tab\">                        </table>                        <div class=\"page_index\">                        </div>                        <iframe id=\"download-iframe\" style=\"border:none;width:0px;height:0px;\"></iframe>                        <iframe id=\"single-download-iframe\" style=\"border:none;width:0px;height:0px;\"></iframe>                    ";
                    objAttachment.html(htmlAttachment);
                    
                    rows +="                        <thead>                            <tr>                            <td id=\"download-td-check\" style=\"border: 1px solid #e1e1e1;text-align:center; background-color:#ededed;\"><input id=\"download-check\" type=\"checkbox\"/></th>                                <th colSpan=\"2\" style=\"font-size:13px;\">Name<div class=\"attach_search\"></div>\</th>                            </tr>                        </thead>                        <tbody>                    ";
                    $.each(arrAttachment , function (i,attachment){
                    
                        var URLOpenAttachment = ginipkg.services_base_url+"/dbRequest.php?clientVersion="+ginipkg.clientVersion()+"&clientSource="+ginipkg.client_source+"&userEmail="+ginipkg.user_email+"&userDomain="+ginipkg.user_domain+"&email="+ginipkg.found_user_email+"&requestType=DB&userAction=openAttachment&imageName="+attachment.name+"&threadId="+attachment.id+"&msgNo="+attachment.messageNum;
                    
                        var ext ="";
                        switch(attachment.ext){
                            case ('pdf'):   
                                ext = "file_type_pdf";
                                break;
                            case ("doc"):
                            case ("odt"):
                            case ("docx"): 
                                ext = "file_type_word";
                                break;
                            case ("ppt"): 
                            case ("pptx"): 
                                ext = "file_type_ppt";
                                break;
                            case ("xl"):
                            case ("xlsx"):
                            case ("xls"):
                                ext = "file_type_xl";
                                break;
                            case ('js'):
                            case ('html'):
                            case ('php'):
                            case ('css'):
                            case ('txt'):
                                ext = "file_type_file";
                                break;
                            case ('zip'):
                                ext = "file_type_zip";
                                break;
                            case ('rar'):
                                ext = "file_type_rar";
                                break;
                            case ('png'):
                            case ('bmp'):
                            case ('jpg'):
                            case ('jpeg'):
                            case ('gif'):
                                ext = "file_type_image";
                                break;
                            default :
                                ext = "file_type_none";
                                break;
                        }
                        var attachmentMailBody    = ginipkg.attachmentBody[attachment.messageNum].html;
                        var attachmentMailSubject = ginipkg.attachmentBody[attachment.messageNum].subject;

                        attachmentMailBody = (attachmentMailBody)?attachmentMailBody:'0';

                        attachmentMailBody = attachmentMailBody.replace(/=\n/g,'')
                                                .replace(/=A0/g,' ')
                                                .replace(/=20/g,'')
                                                .replace(/=92/g,'\'')
                                                .replace(/=85/g,'...');
                        if($(attachmentMailBody).text() == '') {
                            attachmentMailBody = '0';
                        }   

                        if(attachmentMailBody == '0') {
                            attachmentMailBody = ginipkg.attachmentBody[attachment.messageNum].text;
                            attachmentMailBody = $.trim(attachmentMailBody);
                            if(attachmentMailBody !='' && attachmentMailBody !=' '){
                                attachmentMailBody = attachmentMailBody.replace(/=\n/g,'')
                                                        .replace(/\n/g,'<br/>')
                                                        .replace(/=A0/g,' ')
                                                        .replace(/=20/g,'')
                                                        .replace(/=92/g,'\'')
                                                        .replace(/=85/g,'...');
                            } else {
                                attachmentMailBody = 'No Email Body Found.';
                            }
                        }
                        rows += "<tr class=\"hasTooltip\">                                <td style=\"text-align:center;\">                                    <input type=\"checkbox\" class=\"to_be_downloaded\" imageName="+attachment.name+" threadId="+attachment.id+" msgNo="+attachment.messageNum+" />                                    <span class=\"mail_pop_up_box\">                                        <div class=\"arrow\"></div>                                        <div class=\"title_mail\" title=\""+$.escapeHtmls(attachmentMailSubject)+"\">"+$.truncateText($.escapeHtmls(attachmentMailSubject),30)+"</div>                                        <article class=\"title_cntnt\">"+attachmentMailBody+"</article>                                    </span>                                </td>                                <td><div class="+ext+"></div></td>                                <td class=\"singleDownload\" title='Download : "+$.escapeHtmls(attachment.name)+" | "+attachment.sentDate+"' downloadLink='"+URLOpenAttachment+"' >                                    <span>"+$.truncateText($.escapeHtmls(attachment.name),20)+"</span>                                </td>                            </tr>                        ";
                    });
                    rows+="</tbody>";

                    //Paginator html
                    var htmlPaginator = renderPaginator();

                    objAttachment.find('table').html(rows);

                    section_element.find('td.singleDownload').click(function(e){
                        var redirectUrl = $(this).attr('downloadLink');
                        console.log(redirectUrl);
                        section_element.find('#single-download-iframe').attr('src',redirectUrl);
                    });
                    var searchHtml="<input type=\"text\" /><a id=\"search_attachments\" href=\"javascript:void(0)\">search</a>";
                    var objSearch=section_element.find('.attach_search');
                    objSearch.html(searchHtml);
                    ginipkg.attachments.noRecords = false;

                    section_element.find('div.attach_search a#search_attachments').click(function(e){
                        var keywords = $.trim(section_element.find('div.attach_search input[type="text"]').val().toLowerCase());
                        section_element.find('.mask').show();
                        section_element.find('.attach_loader').show();
                        searchAttachments(keywords);
                        section_element.find('div.attach_search input[type="text"]').val(keywords);
                        section_element.find('div.attach_search input[type="text"]').focus();
                    });
                    section_element.find('div.attach_search input[type="text"]').keyup(function(e){
                        if(e.keyCode == 13) {
                            var keywords = $.trim(section_element.find('div.attach_search input[type="text"]').val().toLowerCase());
                            section_element.find('.mask').show();
                            section_element.find('.attach_loader').show();
                            searchAttachments(keywords);
                            section_element.find('div.attach_search input[type="text"]').val(keywords);
                            $(this).focus();
                        }
                    });


                    var checkBoxes = section_element.find('.atchment_body_tab td .to_be_downloaded');
                    var chkbxDownloadAll = section_element.find('.atchment_body_tab #download-check');
                    chkbxDownloadAll.click(function() {
                        if ($(this).is(':checked')) {
                            checkBoxes.attr('checked', 'true');
                            $('.atchment_body_tab_cls .attachment-download').fadeIn('slow');
                        } else {
                            checkBoxes.attr('checked', '');
                            $('.atchment_body_tab_cls .attachment-download').fadeOut('slow');
                        }
                    });
                    checkBoxes.click(function() {
                        if($(this).is(':checked')) {
                            $('.atchment_body_tab_cls .attachment-download').fadeIn('slow');
                        } else {
                            var downloadFlag = 0;
                            $(checkBoxes).each(function (){
                                console.log($(this));
                                if($(this).is(':checked')){
                                    downloadFlag++;
                                }
                            })
                            if(downloadFlag == 0) {
                                $('.atchment_body_tab_cls .attachment-download').fadeOut('slow');
                            }
                            chkbxDownloadAll.attr('checked', '');
                        }
                    });
                    
                    
                    objAttachment.parent().find('.page_index').html(htmlPaginator);

                    section_element.find('.next').attr('title', 'Next').click(function(e){
                        paginatorNext();
                    });

                    section_element.find('.back').attr('title', 'Prev').click(function(e){
                        paginatorPrev();
                    });
                    section_element.find('.attachment-download').click(function (){
                        var postData = new Array();
                        var i = 0;
                        var url = "";
                        $(checkBoxes).each(function (){
                            if($(this).is(':checked')){
                                // console.log($(this));
                                url +="&data["+i+"][imageName]="+$(this).attr('imageName');
                                url +="&data["+i+"][threadId]="+$(this).attr('threadId');
                                url +="&data["+i+"][msgNo]="+$(this).attr('msgNo');
                                i++;
                            }

                        })
                        section_element.find('#download-iframe').attr('src',ginipkg.services_base_url+"/dbRequest.php?clientVersion="+ginipkg.clientVersion()+"&clientSource="+ginipkg.client_source+"&userEmail="+ginipkg.user_email+"&userDomain="+ginipkg.user_domain+"&email="+ginipkg.found_user_email+"&requestType=DB&userAction=openMultipleAttachment"+url);
                    });

                    //added table sorter
                    // $(".atchment_body_tab").tablesorter();

                }else{
                    ginipkg.attachments.noRecords = true;
                    objAttachment.html("<span style='width:100%;align:center;'>No Attachment found.</span>");
                }
            }
        }

        function renderPaginator() {
            var attachments             = ginipkg.attachments; 
            var numFetechedAttachments  = parseInt(Object.keys(attachments.masterList).length);
            var reachedEmailIndexStatus = (attachments.reachedEmailIndexStatus == 0) ? false : true;
            var filterListCount         = parseInt(Object.keys(attachments.displayList).length) ;
            //var filterListCount       = parseInt("5") ;
            var startIndex              = (parseInt(attachments.currentPageNumber) - 1) * parseInt(attachments.recordParPage);
            var endIndex                = parseInt(attachments.currentPageNumber) * parseInt(attachments.recordParPage);

            var showEndIndex            = '';
            showEndIndex                =  Math.min(filterListCount,endIndex);
            var htmlString              = "";
            
            if(attachments.currentPageNumber <= 1){
                htmlString += "<a href=\"javascript:void(0)\" class=\"no-back\"></a>";
            }else{
                htmlString +="<a href=\"javascript:void(0)\" class=\"back\">back</a>";
            }
            
            htmlString += "<span class=\"counting\">"+(startIndex + 1) + "-" + showEndIndex + " of " + filterListCount+"</span>";
            if(reachedEmailIndexStatus === false && filterListCount <= endIndex){
                htmlString +=  "<a href=\"javascript:void(0)\" class=\"no-next\"></a>";
            }else{
                htmlString +="<a href=\"javascript:void(0)\" class=\"next\">next</a>";
            }
            htmlString += "<a href=\"javascript:void(0)\" class=\"attachment-download\">Download</a>";

            return htmlString;
        }

        function paginatorPrev() {
            console.log('prev clicked');
            var attachments = ginipkg.attachments;
            attachments.currentPageNumber = parseInt(attachments.currentPageNumber - 1);
            ginipkg.attachments = attachments;
            section_element.find('.mask').show();
            section_element.find('.attach_loader').show();
            fetchAttachments();
        }


        function paginatorNext() {
            var attachments = ginipkg.attachments;
            var statusRequest = checkRequestQue(attachments);
            attachments.currentPageNumber = parseInt(attachments.currentPageNumber + 1);
            ginipkg.attachments = attachments;
            fsLog(ginipkg.attachments);
            section_element.find('.mask').show();
            section_element.find('.attach_loader').show();
            fetchAttachments();
        }

        function searchAttachments(searchKeywords) {
            if(ginipkg.attachments === undefined) { 
                var attachments = {};
                //attachments.recordParPage = 10;
                attachments.recordParPage = 10;
                attachments.currentPageNumber = 1;
                attachments.maxEmailIndex = 0;
                attachments.reachedEmailIndex = 0;
                attachments.reachedEmailIndexStatus = 1; //1== mail traversing left , 0== alll mail traversed 
                attachments.emailIndexList = '';
                attachments.masterList = '';
                attachments.displayList = '';
                attachments.searching = false;
                attachments.searchKeywords = '';
                attachments.requestInQue = false;
                attachments.noRecords = false;
                ginipkg.attachments = attachments;
            }

            var attachments = ginipkg.attachments;

            if(searchKeywords != "" && searchKeywords !== undefined) {
                attachments.searching = true;
                attachments.searchKeywords = searchKeywords;
                attachments.currentPageNumber = 1;
                ginipkg.attachments = attachments;
            } else if(attachments.searching === true) {
                attachments.searching = false;
                attachments.searchKeywords = "";
                attachments.currentPageNumber = 1;
                attachments.displayList = attachments.masterList;
                ginipkg.attachments = attachments;
            }
            fetchAttachments();
        }

        function fetchAttachments() {
            // console.log('CASE-2 Fetch Attachment');
            if(ginipkg.attachments !== undefined){ 
                var attachments = ginipkg.attachments;
            }else{
                return false;
            }
            //firsttime fetching
            var currentPageNumber = attachments.currentPageNumber; 
            var masterList = (attachments.masterList !== undefined) ? attachments.masterList : "";
            var noRecords  = attachments.noRecords;
            var numFetechedAttachments = 0;
            if(attachments.masterList != "" && attachments.masterList !== undefined) {
                numFetechedAttachments = parseInt(Object.keys(attachments.masterList).length);
            }
            var reachedEmailIndexStatus = (attachments.reachedEmailIndexStatus == 0) ? false : true; 

            if(currentPageNumber <= 1 && (masterList == "" || masterList === undefined) ) // First time fetching initiated 
            {
                console.log('CASE-2.1');
                section_element.find('.attach_err_box').html("<p>Loading Attachments! Please Wait...                    <img src=\""+img_base_url+"/loader.gif\" height=\"16\" width=\"16\" />                    </p>");
                fetchAttachmentsFromRemoteServer();
            } else if(attachments.searching === true) {
                var displayList = {};
                if(reachedEmailIndexStatus === false ) //search from local array
                {
                    // console.log('CASE-2.2');
                    var num = 0;
                    $.each(masterList ,function(i,details){
                        //console.log( " ---->" + details.name);
                        var attachmentName = details.name.toLowerCase();
                        if(attachmentName !== undefined && attachments.searchKeywords != "" && attachmentName.match('^'+attachments.searchKeywords) )
                        {
                            displayList[num] = details;
                            num++;
                        }           
                    });

                    attachments.displayList = displayList;
                    section_element.find('.mask').hide();
                    section_element.find('.attach_loader').hide();
                } else {
                    fetchAttachmentsFromRemoteServer();
                }
                ginipkg.attachments = attachments;
                getAttachmentHTML();
            } else {
                // console.log('CASE-2.3');
                var startIndex = (parseInt(attachments.currentPageNumber) - 1) * parseInt(attachments.recordParPage);
                var endIndex = parseInt(attachments.currentPageNumber) * parseInt(attachments.recordParPage);
         
                if(reachedEmailIndexStatus === false || numFetechedAttachments >= endIndex ) //search from local array
                {
                    // console.log('CASE-2.3.1');
                    getAttachmentHTML();
                    section_element.find('.mask').hide();
                    section_element.find('.attach_loader').hide();
                } else {
                   console.log('CASE-2.3.2');   
                   fetchAttachmentsFromRemoteServer();
                }
            }
        }
        function killAllAttachmentRequest(){
            $.killAllRequestQueue(false , false , true);
        }
        function fetchAttachmentsFromRemoteServer()
        {
            var attachments = ginipkg.attachments;
            var statusRequest = checkRequestQue(attachments);
            //Previous request already in Que
            if(statusRequest === false && attachments.searching === false)
            {
                return false;
            }
            if(attachments.searching === true) {
                killAllAttachmentRequest();
            }
            var reachedEmailIndexStatus = (attachments.reachedEmailIndexStatus == 0) ? false : true;
            if( reachedEmailIndexStatus === true ) {
                var mailIndex      = (attachments.emailIndexList !== undefined) ? attachments.emailIndexList : "";
                ginipkg.request({
                    server: 'profiles',    
                    // jsonp : 'true',
                    path  : '/dbRequest.php?',
                    beforeSend:function(){
                        attachments.requestInQue = true;
                        ginipkg.attachments = attachments;
                        
                        },
                    data  :{
                        email               : ginipkg.found_user_email,
                        requestType         : 'DB',
                        userAction          : 'getMailAttachmentList',
                        fetchAttachment     : '1',
                        fetchingAttachment  : '1',
                        recordsPerRequest   : attachments.recordParPage,
                        mailIndex           : mailIndex,
                        startCounter        : attachments.reachedEmailIndex,
                        isFullFetch         : (attachments.searching === true) ? true : false,
                        _method             : 'post',
                    },
                    success : function (response) {
                        section_element.find('.atchment_body_tab_cls').css('display','block');
                        section_element.find('.attach_loader').hide();
                        section_element.find('.mask').hide();
                        section_element.find('.attach_err_box').html('');
                        section_element.find('.attach_err_box').hide();
                        if(response.errCode == 0){
                            var tempAttachmentBody = response.result[ginipkg.found_user_email].attachmentBody;
                            for(var key in tempAttachmentBody) {
                                ginipkg.attachmentBody[key] = tempAttachmentBody[key];
                            }
                            setAttachmentMasterList(response.result[ginipkg.found_user_email]);
                            if(attachments.searching === true){
                                fetchAttachments();
                            }else{
                                // fsLog("In CASE 2.4");
                                getAttachmentHTML();
                            }
                            attachments.requestInQue = false;
                            ginipkg.attachments = attachments;
                            if(response.result[ginipkg.found_user_email].moreAttachment == '1'){
                                fetchAttachmentsFromRemoteServer();
                            }
                        }else{
                            if(response.errCode == 34 || response.errMsg === "Google authentication is required for accessing emails, attachments & meetings.") {
                                section_element.find('.attach_err_box').html("<p>"+response.errMsg+"<br/><br/><input type=\"button\" id=\"get-attach-auth\" value=\"Authenticate Google\" /></p>").show();
                                $("#get-attach-auth").bind("click",function(){
                                    ginipkg.createRemoteDialog(ginipkg, {
                                        id : 'social-connect-iframe',
                                        title: ginipkg.signupTitle || "Social Connect",
                                        url: ginipkg.proxy_base_url + '/googleapi/ext/navigation.php?from=google&userAction=usersetup&sId='+ginipkg.session_token+'&openId='+ginipkg.user_open_id+'&userEmail='+ginipkg.user_email+'&user_domain='+ginipkg.user_domain+'&client=extension&requestType=social&clientVersion='+ginipkg.client_version_base + '&clientSource=' + ginipkg.client_source,
                                        width: 650,
                                        height: 450,
                                        reason_for_authentication: "connect-social-networks",
                                        close: ginipkg.clearCacheThoroughly,
                                        css: {
                                            width: "500px",
                                            padding: 0
                                        }
                                    }).show();
                                });
                            } else {
                                flash(response.errMsg);
                            }
                            attachments.requestInQue = false;
                            ginipkg.attachments = attachments;
                        }
                        
                    },
                    error : function (data, text_status, xhr) { 
                        if(text_status !== 'network_failure') {
                            var html = "<p>"+app_name+" could not connect to Google's server. Please try again later.</p>";
                            section_element.find('.attach_err_box').html(html).show();
                            setTimeout(function() {
                                  // hide error message after 30 seconds.
                                section_element.find('.attach_err_box').hide();
                            }, 30000);
                            section_element.find('.attach_loader').hide();
                            section_element.find('.mask').hide();
                            if(attachments.currentPageNumber > 1){
                                attachments.currentPageNumber = parseInt(attachments.currentPageNumber - 1);    
                            }
                            attachments.requestInQue = false;
                            ginipkg.attachments = attachments;
                        }
                    }
                });
            } else {
                // console.log('All attachments fetched successfully.')
                return;
            }

        }

        function setAttachmentMasterList(result) {
            var attachments = ginipkg.attachments;    
            var masterIndex =  0;
            //console.log('Master list indexes...');
            if(attachments.masterList === undefined || attachments.masterList == '') {
                var masterList = {};
            } else {
                var masterList = attachments.masterList;   
                var maxIndexofMasterList = parseInt(Object.keys(masterList).length);
                masterIndex = (maxIndexofMasterList > 0) ? maxIndexofMasterList : 0;
            }
                
            if(attachments !== undefined && result.attachment != "") {
                var arrAttachment  = result.attachment;
                $.each(arrAttachment , function (i,attachment){
                    masterList[masterIndex] = attachment;
                    masterIndex++;
                });
                attachments.maxEmailIndex           = parseInt(result.mailIndex.length) -1;
                attachments.reachedEmailIndex       = result.attachCounter;
                attachments.reachedEmailIndexStatus = result.moreAttachment; //1== mail traversing left , 0== alll mail traversed 
                attachments.emailIndexList          = result.mailIndex;
                attachments.masterList              = masterList;
                attachments.displayList             = masterList;
                ginipkg.attachments = attachments;
            }
        }

        function checkRequestQue(attachments) {
            if(attachments.requestInQue === true){
                return false;
            }
        }
        return _public;
    };


    // Basic Info Section Starts Here
    components.basicInfoSection = function (ginipkg, context, section_element, image_should_crossfade) {
        target_element = section_element.first();
        var input, form_fields, counter, dialog, key, context_data;

        var _public = {}, _protected = {}, loading_image, real_image;
         lib.destroyable(_public, _protected);

        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'basic-info',
            display_element: section_element
        });
        
        /*
         * @desc - set the last updated value in phone number
         * */
        var lastUpdatedPhoneNumber;
        for(var key in context.contact.phoneList){
            if(context.contact.phoneList.hasOwnProperty(key)){
                lastUpdatedPhoneNumber = key;
            }
        }
        context.contact.phone = lastUpdatedPhoneNumber;
        /*till here*/

        _protected.renderFixedTemplate({
            template: 'basic_info/basic_info',
            contact_data: context
        });
        
        _public.measureSection();
        
        //code for contact information addition in ginipkg , to be used in crm_forms section.
        //while creating a crm record (leads,account,etc) the information now will be auto filled through this.
        console.log(ginipkg);
        if ((context !== undefined) && (context.contact !== undefined)) {
            console.log("inside if..........................");
            console.log(context);
            /*
             * @desc find the last value of phone number.
             */
            var lastUpdatedPhoneNumber;
            for(var key in context.contact.phoneList){
                if(context.contact.phoneList.hasOwnProperty(key)){
                    lastUpdatedPhoneNumber = key;
                }
            }
            
            /*
             * @desc salutation
             * */
            var salutation = '';
            salutation  = context.contact.dbProfile[0].salutation;
            
            //if ((context.contact.last_name !== undefined) && (context.contact.first_name !== undefined) && (context.contact.name !== undefined) && (context.contact.phone !== undefined) && (context.contact.summary !== undefined)) {
                ginipkg.personal_info_of_current_user = {
                    "current_contact_info": {
                        "first_name": context.contact.first_name,
                        "last_name": context.contact.last_name,
                        "name": context.contact.name,
                        "phone_number": lastUpdatedPhoneNumber,
                        "description": context.contact.summary,
                        "email": context.contact.email,
                        "title": context.contact.headline,
                        "company": context.company.name,
                        "salutation":salutation, 
                    }
                }
            //}
        }
        
        function status(text, spin) {
            dialog.find('.status-text').text(text).show();
            dialog.find('.comment-status').show().find('img').toggle( !! spin);
        }

        // gauravsyncbutton
        /*
        * sync button color change - when the ajax request is send the button is hidden
        * with the response the corresponding color is shown
        * in cache case also the color is shown.
        */
        if(context!==undefined && context!=''&&context.contact!=undefined){
            var syncContactTittle   = 'Create Contact';
            var resultElement       = target_element.find("div.edit_sync li.sync a");
            var contactExistCache   = undefined ;
            contactFirstName        = context.contact.first_name;
            contactLastName         = context.contact.last_name;
            contactEmail            = context.contact.email;
            if(ginipkg.dataCache[contactEmail] !== undefined){
                contactExistCache = ginipkg.dataCache[contactEmail]['crm_contact_exists'];
            }
            if(contactExistCache !== undefined ) {
                if(contactExistCache == 1) {
                    syncContactTittle = 'Update Contact';
                    resultElement.css({'display':'block','background':'url('+img_base_url+'/sprites.png) no-repeat scroll 1px -1650px'});
                    resultElement.attr("title","Contact exists in sugarCRM.");
                }
                else {
                    resultElement.css({'display':'block','background':'url('+img_base_url+'/sprites.png) no-repeat scroll 0px -1592px'});
                   resultElement.attr("title","Contact does not exist in sugarCRM.");
                }
            } else {
                ginipkg.request({
                    path: '/crm.php?',
                    server: 'crm',    
                    jsonp: 'true',
                    beforeSend  :function(){
                                    resultElement.hide();
                                 },
                    data: {
                             requestType:'CRM',
                             _method: 'post',
                             subType:'contact_exist',
                             email: ginipkg.found_user_email,
                             firstName:contactFirstName,
                             lastName :contactLastName,
                             contactEmail:contactEmail,
                           },
                    success: function (response){
                        if(ginipkg.dataCache[contactEmail] === undefined){
                            ginipkg.dataCache[contactEmail] = {};
                        }
                        ginipkg.dataCache[contactEmail]['crm_contact_exists'] = response.result.contact_exist;
                        if(response.result.contact_exist==1) {
                            syncContactTittle='Update Contact';
                            resultElement.css({'display':'block','background':'url('+img_base_url+'/sprites.png) no-repeat scroll 1px -1650px'});
                            resultElement.attr("title","Contact exists in sugarCRM.");
                        } else {
                            resultElement.css({'display':'block','background':'url('+img_base_url+'/sprites.png) no-repeat scroll 0px -1592px'});
                           resultElement.attr("title","Contact does not exist in sugarCRM.");
                        }
                        
                    },
                    error: function (data, text_status, xhr) {
                        //alert('Sorry, something broke! Please try again later');
                    }
                });
            }
            
        }
       
        function flash(message) {
            var flashed = message;
            status(message);
            window.setTimeout(function () {
                if (dialog.find('.status-text').text() === flashed) {
                    dialog.find('.status-text').fadeOut('fast');
                }
            }, 3500);
        }

        // show hide image edit button
        target_element.find('.person_pic').mouseover(function(event){
            $(this).find('.edit_image_button').css({'display':'block'});
        });
        
        target_element.find('.person_pic').mouseout(function(event){
            $(this).find('.edit_image_button').css({'display':'none'});
        });
        
        target_element.find('#edit_image').click(function(event){
            $(this).find('.edit_image_button').css('display','none');
            var imagePath   = context.contact.image_url_raw;
            var name        = context.contact.name;
            var domain_name = ginipkg.domain_from_url;
            var user_email  = ginipkg.found_user_email;
            ginipkg.createRemoteDialog(ginipkg, {
                   title: "Update Profile Picture",
                   url  : ginipkg.services_base_url + '/fileUpload.php?clientSource='+ginipkg.client_source+'&domain_name='+domain_name+'&found_user_email='+ user_email+ "&image_path=" + imagePath + "&name="+name,
                   width : 450,
                   height: 400,
                   reason_for_authentication: "Update Profile Picture",
                   close: ginipkg.reloadSideBar
             }).show();
             return false;
        });
        
        // show hide dropdown option
        target_element.find('.dropdown-toggle').click(function(e){
            e.stopImmediatePropagation();
            hideBubbles(e);
            target_element.find('ul.dropdown-menu').show('fast');
        });
        
        /*@author - Siddarth
         *@date created - 19 June 2014
         *@desc - This function opens a crm contact form.
         * The control passes then passes to the components.crm_forms.
         * @role of crm_contact_flag - If this flag is true the the form save request will go to sync.php 
         * instead of default behaviour.
         * Post request handling is done in the ajax request (components.crm_forms).
         * */
        target_element.find('.edit_contact').click(function(event){
            console.log("::::: add_edit contact starts :::::");
            console.log(context);
            if (ginipkg.has_crm === true) {
                var moduleName = 'contacts';    
                var row_data = context;
                var contact_data = context;
                var options = {
                    template: 'crm/sugar',
                    module: _.camelize(moduleName),
                    mode: 'add',
                    sugar_config : ginipkg.sugar_config,
                    contact_data: contact_data,
                    context_data: row_data,
                    crm_contact_flag:true,
                    email: '',
                    company_name: '',
                    site_name: 'sugarCRM'
                };
                _public.crm_forms = _public.chainedDestroyable(components.crm_forms(ginipkg, options));
                _public.crm_forms.edit(moduleName);
            } else {
                flash_sync("Sugar CRM Not Configured !!");
            }
            return false;
            console.log("::::: add_edit contact ends :::::");
        });
        // end edit profile detail

        function status_sync(text, spin) {
            target_element.find('.status-text').text(text).show();
            target_element.find('.comment-status').show().find('img').toggle( !! spin);
        }

        function flash_sync(message) {
            var flashed = message;
            status_sync(message);
            window.setTimeout(function () {
                if (target_element.find('.status-text').text() === flashed) {
                    target_element.find('.status-text').fadeOut('fast');
                    target_element.find('.comment-status').hide();
                }
            }, 10000);
     }
       /*
        * commenting the sync_contact button starts 23 July 2014
        * */
     // start sync contact 
//     target_element.find('.sync_contact').click(function(e){
//       console.log(".sync_contact");
//        _public.close = function(){
//
//            dialog.dialog("close");
//        };
//        function ValidateEmailByValue(emailId)
//        {
//            var reg = /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
//            if (reg.test(emailId)){
//               return true; 
//            }
//            else{
//                return false;
//            }
//        }
//        function validateFormData(form_fields){
//            var form_fields = form_fields.find(':input');
//            var error       = false;
//            jQuery.each(form_fields, function(index, field) { 
//                
//                jQuery(this).removeClass('error');
//                jQuery(this).parent().find('.error-msg').remove();
//                this.value = $.trim($.stripHTMLS(this.value));
//                field_value = jQuery(this).val();
//
//                if((field_value == '') && (jQuery(this).hasClass('required')))
//                {
//                    error = true;
//                    jQuery(this).addClass('error');
//                }
//
//                if(jQuery(this).hasClass('email') && field_value != '') {
//                    if(ValidateEmailByValue(field_value) === false)
//                    {
//                        error = true;
//                        jQuery(this).addClass('error');
//                        var errMsg = 'Please enter valid Email Id.';
//                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
//                    } 
//                }
//
//                if(jQuery(this).hasClass('phone') && field_value != '') {   
//                    if($.validatePhoneField(field_value) === false) {
//                        error = true;
//                        jQuery(this).addClass('error');
//                        var errMsg = 'Please enter valid Phone Number.';
//                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
//                    }
//                }
//                if((this.id == "first_name" || this.id == "last_name" || this.id == "title" ) && (field_value != '')) {
//                    if(/^[a-zA-Z0-9-.' ,]*$/.test(field_value) === false) {
//                        error = true;
//                        jQuery(this).addClass('error');
//                        var errMsg = 'Please enter valid ' + this.title + '.';
//                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
//                    } 
//                }
//                if(this.id == "company" && (field_value != '')) {
//                    if(/^[a-zA-Z0-9-._\(\)\[\]' ]*$/.test(field_value) === false) {   
//                        error = true;
//                        jQuery(this).addClass('error');
//                        var errMsg = 'Please enter valid '+this.title+' Name.';
//                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
//                    }   
//                }
//
//            });
//            
//            if(error == false ){
//                return true;
//            }else{
//                return false;
//            }  
//        }
//        function syncContact() {
//            
//            var form_fields = dialog.find('form').first(); 
//            var errorStatus = validateFormData(form_fields);
//            
//            if(errorStatus === true) {
//                var frmPostData = {};
//                $.each(jQuery(form_fields).serializeArray(), function(index,value) { 
//                    frmPostData[value.name] = value.value;
//                    if(value.name == 'contactEmail[]'){
//                        emails.push(value.value);
//                    }
//                })
//                console.log(frmPostData);
//                ginipkg.request({
//                    server      : 'profiles',    
//                    // jsonp       : 'true',
//                    path        : '/sync.php?',
//                    beforeSend  :function(){
//                        status("Syncing in progress...", true);
//                        jQuery(dialog).find('span.asterisk').remove();
//                    },
//                    data        :{
//                        email    :dialog.find('#emails').val(),
//                        requestType  :'syncSingleContactAccount',
//                        syncMode     :'person',
//                        data : frmPostData,
//                        _method      :'POST',
//                    },
//                    success     : function (response) {
//                        if(response.result == 'success') {
//                            ginipkg.isProfileUpdated = true;
//                        }
//                        flash(response.errMsg);
//                        
//                          
//                        jQuery(dialog).find( "form input:text" ).closest("div").each(function(){
//                            $(this).css("width","60%");
//                            $(this).css("word-break","break-all");
//                            $(this).html("<label style='line-height: 2;font-size: 14px;'>"+$(this).find("input").val()+"</label>");
//                        
//                        });
//                        jQuery(dialog).find( "form textarea" ).closest("div").each(function(){
//                            $(this).css("width","60%");
//                            $(this).css("word-break","break-all");
//                            $(this).html("<label style='line-height: 2;font-size: 14px;' title='"+$.escapeHtmls($(this).find("textarea").val())+"'>"+$.truncateText($(this).find("textarea").val() ,200)+"</label>")
//                        });
//
//                        dialog.dialog("option", "buttons", {
//                            
//                        });
//                        ginipkg.clearCacheThoroughly();
//                    },
//                    error       : function (data, text_status, xhr) {    
//                        flash("Sorry, something broke! Please try again later.");
//                    }
//                });
//            }
//        }
//        dialog      = _public.destroyableDiv();
//        ginipkg.renderTemplate('basic_info/sync_contact', ginipkg, context, dialog);
//
//        dialog.dialog({
//            title   : syncContactTittle,
//            modal   : true,
//            autoOpen: false,
//            width   : 550,
//            height  : 'auto'
//        });             
//
//        dialog.dialog("option", "buttons",{
//            "Submit" : syncContact,
//            "Cancel" : _public.close
//        });    
//        
//        dialog.dialog("open");
//
//        /*
//        * Code added By Rahul
//        * Date : 11 Dec 2013
//        * Last Modified : 12 Dec 2013
//        * To add event handler on enter press on the sync contact form.
//        */
//        dialog.find('div.form-fields').first().children().first().focus();
//        dialog.parent().keydown(function (event){
//            if(event.keyCode == 13) {
//                if(!($(':focus').is("select") || $(':focus').is("textarea"))){
//                    if( !( ($(':focus').is("button") || $(':focus').is("input:button")) 
//                    && ($(':focus').val() == 'Cancel' || $(':focus').val() == 'Close'
//                    || $(':focus').text() == 'Cancel' || $(':focus').text() == 'Close' ) ) ) {
//                        syncContact();
//                    }
//                }
//            }
//        });
//        /*
//        * End of code
//        */
//    });
    // end sync contact
        /*
         * commenting the sync_contact button ends 23 July 2014
         * */
       
    return _public;
};
     

client.sidebar_callbacks["basic_info/_name"] = function (ginipkg, jQuery, params, context, section) {
        //new code for popup
        var objNewTemplate = more_element.find('.add_new_template');
        objNewTemplate.bind('click',function(e){
            var domain_name = ginipkg.domain_from_url;
            var user_email  = ginipkg.found_user_email;
            var client_source = ginipkg.client_source;
            var cat_id = objNewTemplate.attr('cat_id');
            ginipkg.createRemoteDialog(ginipkg, {
                   title: "Add New Template",
                   //ask for path here
                   url  : ginipkg.services_base_url + '/../../googleapi/ext/addTemplate.php?clientSource='+client_source+'&domain_name='+domain_name+'&found_user_email='+ user_email+ "&cat_id="+cat_id,
                   width : 600,
                   height: 450,
                   reason_for_authentication: "Update Profile Picture",
                   close: '',
             }).show();
             return false;
        }); 
        //till here
};


client.sidebar_callbacks["basic_info/_image_and_location"] = function (ginipkg, jQuery, params, context, section) {

    fsLog(context.contact);
    target_element = jQuery.ginipkgContainer;
    var input, form_fields, counter, dialog, key, context_data;
    var _public = {}, _protected = jQuery.extend({}, context);
    lib.destroyable(_public, _protected);
    
    function status(text, spin) {
        dialog.find('.status-text').text(text).show();
        dialog.find('.comment-status').show().find('img').toggle( !! spin);
    }

    function flash(message) {
        var flashed = message;
        status(message);
        window.setTimeout(function () {
            if (dialog.find('.status-text').text() === flashed) {
                dialog.find('.status-text').fadeOut('fast');
            }
        }, 3500);
    }

    // show hide image edit button
    target_element.find('.prof-pic').mouseover(function(event){
        $(this).find('.edit_image_button').css({'display':'block'});
    });
    
    target_element.find('.prof-pic').mouseout(function(event){
        $(this).find('.edit_image_button').css({'display':'none'});
    });
    
    target_element.find('#edit_image').click(function(event){
        $(this).find('.edit_image_button').css('display','none');
        var imagePath   = context.contact.image_url_raw;
        var name        = context.contact.name;
        var domain_name = ginipkg.domain_from_url;
        var user_email  = ginipkg.found_user_email;
        ginipkg.createRemoteDialog(ginipkg, {
               title: "Update Profile Picture",
               url  : ginipkg.services_base_url + '/fileUpload.php?clientSource='+ginipkg.client_source+'&domain_name='+domain_name+'&found_user_email='+ user_email+ "&image_path=" + imagePath + "&name="+name,
               width : 450,
               height: 400,
               reason_for_authentication: "Update Profile Picture",
               close: ginipkg.reloadSideBar
         }).show();
         return false;
    });

    // show hide dropdown option
    target_element.find('.dropdown-toggle').click(function(e){
        e.stopImmediatePropagation();
        hideBubbles(e);
        target_element.find('ul.dropdown-menu').show('fast');
    });
        
    // start edit profile detail
    target_element.find('.edit_contact').click(function(event){
        fsLog(ginipkg.found_user_email);
        //Function to validate Email

        function ValidateEmailByValue(emailId) {
            var reg = /^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/;
            if (reg.test(emailId)){
               return true;
            }
            else{
                return false;
            }
        }

        function validateFormData(form_fields){
            var form_fields = form_fields.find(':input');
            var error       = false;
            jQuery.each(form_fields, function(index, field) { 
                jQuery(this).removeClass('error');
                jQuery(this).parent().find('.error-msg').remove();

                jQuery(this).val($.trim(jQuery(this).val()));
                if((jQuery(this).val() == '') && (jQuery(this).hasClass('required')))
                {
                    error = true;
                    var errMsg = '';
                    jQuery(this).addClass('error');
                    jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                }
                if(jQuery(this).hasClass('email') && jQuery(this).val() != '')
                {
                    if(ValidateEmailByValue(jQuery(this).val()) == false)
                    {
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter valid email.';
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    } 
                }

                if(jQuery(this).hasClass('phone') && jQuery(this).val() != '')
                {   
                    if(isNaN(jQuery(this).val()))
                    {
                        error = true;
                        jQuery(this).addClass('error');
                        var errMsg = 'Please enter valid Phone Number.';
                        jQuery(this).parent().append('<div class="error-msg">'+errMsg+'</div>');
                    }
                }
                
            });
            
            if(error == false ){
                return true;
            }else{
                return false;
            }  
        }

        function postComment(){
            fsLog(form_fields);
            var statusError = '';
            var frmPostData = {};
            var errorStatus = validateFormData(form_fields);
            var dialogContainer = dialog[0];
    
            if(errorStatus === true){
                var emails = new Array();
                $.each(jQuery(form_fields).serializeArray(), function(index,value) { 
                    frmPostData[value.name] = value.value;
                    if(value.name == 'contactEmail[]'){
                        emails.push(value.value);
                    }
                })  
                if(emails.length > 0){
                    frmPostData['contactEmailsString'] = emails.join(',');
                }
                
                ginipkg.request({
                    server      : 'profiles',    
                    // jsonp       : 'true',
                    path        : '/dbRequest.php?',
                    beforeSend  :function(){
                        status("Updating profile information...", true);
                        jQuery(dialogContainer).parent().find('.submit-box').hide();
                     },
                    data        :{
                                    email    :ginipkg.found_user_email,
                                    data         :frmPostData,
                                    requestType  :'DB',
                                    userAction   :'userProfile',
                                    _method      :  'post',
                                },
                    success     : function (response) {
                        jQuery(dialogContainer).parent().find('.submit-box').show();
                        fsLog(response);
                        dialog.dialog("option", "buttons", {
                            
                        });
                        status('Profile updated successfully.');
                        ginipkg.sidebar.clearContents();
                        ginipkg.sidebar.updateSidebarFromEmail(ginipkg.found_user_email,{
                            display_name:"Search User",
                            force:true
                        });
                    },
                    error       :function (data, text_status, xhr) {    
                          jQuery(dialogContainer).parent().find('.submit-box').show();
                          flash('Sorry, something broke! Please try again later');
                    }
                });
            }
            return false;
        }

        _public.close = function(){
            dialog.dialog("close");
        };
    
        if (!dialog) {
            dialog      = _public.destroyableDiv();
            ginipkg.renderTemplate('basic_info/profile_edit', ginipkg, context, dialog);
            
            dialog.find('#add-more-email').bind('click', function(event){
                var email = '<div class="form-row">';
                email += '<label class="form-label"><div id="data_labels">Email</div></label> ';
                email += '<div class="form-fields"><input type="text" name="contactEmail[]"  maxlength="90" size="20" class="required email" value="">';
                email += ' <img  src="'+img_base_url+'/minus_alt.png" width="10" style="cursor:pointer" class="remove-more-email">';
                email += '</div></div>';
                dialog.find(".editable-update").append(email);
                
                dialog.find(".remove-more-email").bind("click", function(){
                    $(this).closest('.form-row').remove();
                });
            });
            
             
            fsLog(context);
            form_fields = dialog.find('form').first();  
            dialog.dialog({
                title   : "Edit Profile",
                modal   : true,
                autoOpen: false,
                width   : 550,
                height  : 'auto'
            });             

            dialog.dialog("option", "buttons",{
                "Submit" : postComment,
                "Cancel" : _public.close
            });
        }
        dialog.dialog("open");
        /*
        * Code added By Rahul
        * Date : 11 Dec 2013
        * Last Modified : 12 Dec 2013
        * To add event handler on enter press on the edit contact form.
        */
        dialog.find('div.form-fields').first().children().first().focus();
        dialog.parent().keydown(function (event){
            if(event.keyCode == 13) {
                if(!($(':focus').is("select") || $(':focus').is("textarea") )){
                    if( !( ($(':focus').is("button") || $(':focus').is("input:button")) 
                    && ($(':focus').val() == 'Cancel' || $(':focus').val() == 'Close'
                    || $(':focus').text() == 'Cancel' || $(':focus').text() == 'Close' ) ) ) {
                        postComment();
                    }
                }
            }
        });
        /*
        * End of code
        */
    });
    // end edit profile detail

    function status_sync(text, spin) {
        target_element.find('.status-text').text(text).show();
        target_element.find('.comment-status').show().find('img').toggle( !! spin);
    }

    function flash_sync(message) {
        var flashed = message;
        status_sync(message);
        window.setTimeout(function () {
            if (target_element.find('.status-text').text() === flashed) {
                target_element.find('.status-text').fadeOut('fast');
                target_element.find('.comment-status').hide();
            }
        }, 10000);
    }

     // start sync contact 
    target_element.find('.sync_contact').click(function(e){ 
        console.log("here");
        e.stopImmediatePropagation();
        hideBubbles(e);
        target_element.find('ul.dropdown-menu').hide();

        ginipkg.request({
            server      : 'profiles',    
            // jsonp       : 'true',
            path        : '/sync.php?',
            beforeSend  :function(){
                status_sync("Syncing in progress...", true);
            },
            data        :{
                email    :ginipkg.found_user_email,
                requestType  :'syncSingleContactAccount',
                syncMode     :'person',
                firstName    :context.contact.first_name,
                lastName     :context.contact.last_name,            
                title        :'', 
                company      :context.company.name  ,
                _method      :'POST',
            },
            success     : function (response) {
                flash_sync(response.errMsg);
            },
            error       : function (data, text_status, xhr) {    
                flash_sync("Sorry, something broke! Please try again later.");
            }
        });
    });
    // end sync contact
        
};
// Basic Info Section Ends Here

//Recent conversation

components.companyInfoSection = function (ginipkg, contact_data, section_element, image_should_crossfade) {

        var _public = {}, _protected = {};
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'company-profile',
            display_element: section_element
        });
        if($.trim(contact_data.company.name).length > 0){
                _protected.renderFixedTemplate({
                template: 'company_profile/company_profile',
                contact_data: contact_data
            });
        } else {
            _protected.renderFixedTemplate({
                template: 'company_profile/company_profile_not_found',
                contact_data: contact_data
            });
        }
        
        _public.measureSection();
        
        var sourceSection = section_element.find(".cntnt .source");
        var source=contact_data.company.source;
        var css_class="";
        if(source=="linkedin") {
            css_class="in";
        } else if(source=="google+") {
            css_class="googleplus";
        }
        sourceSection.html("<p title=\""+source+"\" class='"+css_class+"'></p>");

        
        // show hide more / less link       
        var objMoreLink = section_element.find('.more-link');
        objMoreLink.click(function(e){
            e.stopImmediatePropagation();
            section_element.find(".profile-description").toggleClass("reveal-open");
            var strMoreLink = objMoreLink.text();
            if(strMoreLink == '[+ More]')
            {
                objMoreLink.text('[- Less]');
            }
            else if(strMoreLink == '[- Less]')
            {
                section_element.find(".profile-description").scrollTop(0);
                setTimeout(function() {
                    objMoreLink.text('[+ More]');
                }, 500);                
            }
            return false;
        });

        section_element.find('.edit_account').click(function(e){
        
                e.stopImmediatePropagation();
                hideBubbles(e);
                var editBox = section_element.find('p.companyNameBox'); 
                $(editBox).find("#companyNameStringBox").attr("maxlength","100")
                $(editBox).show();
                $.inlineErrorBox(editBox);
                section_element.find('div.no-company-msg').hide();
                section_element.find('p.companyName').hide(); 
                section_element.find('div.edit_sync_account').hide();
                var companyBox = section_element.find('input[name=companyNameStringBox]');
                companyBox.focus().select();
                return false;
        });
        
        function status_sync(text, spin) {
            section_element.find('.status-text').text(text).show();
            section_element.find('.comment-status').show().find('img').toggle( !! spin);
        }

        function flash_sync(message) {
                var flashed = message;
                status_sync(message);
                window.setTimeout(function () {
                    if (section_element.find('.status-text').text() === flashed) {
                        section_element.find('.status-text').fadeOut('fast');
                        section_element.find('.comment-status').hide();
                    }
                }, 5000);
        }
    
        function show_company(){
            window.setTimeout(function () {
                section_element.find('p.companyNameBox').hide();
                section_element.find('p.companyName').show();               
                section_element.find('input[name=companyNameStringBox]').val(contact_data.company.name);
                section_element.find('div.edit_sync_account').show();
            }, 1000);
        }

        function edit_account(input) {
            var companyString = $(input).val();
            input.value=companyString=$.stripHTMLS(companyString);
            companyString=$.escapeHtmls(companyString);
            if(companyString == ""){
                flash_sync("Company Name can not be empty.");
                show_company();        
            } else if(contact_data.company.name == companyString) {
                section_element.find('p.companyName').show();               
                section_element.find('p.companyNameBox').hide();
                section_element.find('div.edit_sync_account').show();
            } else {
                if(/^[a-zA-Z0-9-._\(\)\[\]' ]*$/.test($.unescapeHtml(companyString)) === false) {   
                    var errMsg = 'Please enter valid Company Name.';
                    flash_sync(errMsg);
                } else {
                    jQuery(input).addClass('input-spinner');   
                    ginipkg.request({
                        server: 'profiles',    
                        // jsonp : 'true',
                        path  : '/dbRequest.php?',
                        data  : {
                            email :ginipkg.found_user_email,
                            data  :{
                                     company : companyString,
                                     requestSource : 'ext',
                                     
                                   },
                            requestType:'DB',
                            userAction :'companyUpdate',
                            _method       :  'post',
                        },
                        success: function (response) {
                            jQuery(input).removeClass('input-spinner');
                            if(response.errCode <= 0) {
                                ginipkg.sidebar.refreshSidebar(true);
                            } else {
                                flash_sync(data.errMsg); 
                                show_company();
                            }
                        },
                        error : function (data, text_status, xhr) {    
                            jQuery(this).removeClass('input-spinner');
                            flash_sync("Sorry, something broke! Please try again later.");
                        },
                        complete:function(){
                        }
                   });
                }
            }
        }
        section_element.find('input[name=companyNameStringBox]').focusout(function (event) {
            edit_account(this);
        } );
        section_element.find('input[name=companyNameStringBox]').keydown(function (event) {
            if(event.keyCode == 13) {
                edit_account(this);
            }
        } );

        // start sync account
        section_element.find('.sync_account').click(function(event){
             ginipkg.request({
                server      : 'profiles',    
                // jsonp       : 'true',
                path        : '/sync.php?',
                beforeSend  :function(){    
                    status_sync("Syncing in progress...", true);
                },
                data        :{
                    email    :ginipkg.found_user_email,
                    requestType  :'syncSingleContactAccount',
                    syncMode     :'company', 
                    company      :(contact_data.company.name !== undefined ) ? contact_data.company.name : '',  
                    _method      :'POST',
                },
                success     : function (response) {
                    flash_sync(response.errMsg);
                },
                error       : function (data, text_status, xhr) {    
                    flash_sync("Sorry, something broke! Please try again later.");
                }
            });
        });
     // end sync account
    return _public;
    };

//Facebook Section Starts Here
    
    components.facebookSection = function (ginipkg, contact_data, membership, section_element) {
        var _public = {}, _protected = {};

        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'facebook',
            display_element: section_element
        });

        _protected.renderFixedTemplate({
            template: 'facebook/facebook',
            contact_data: contact_data,
            context: membership
        });
        return _public;
    };
    
    client.sidebar_callbacks["facebook/_facebook_status"] = function (ginipkg, jQuery, params, context, section)
    {
        jQuery = jQuery.jQueryFor(jQuery.ginipkgContainer.closest("div.facebook-section")[0]);
        if (context.widget.facebook_user_id) {
            populate_facebook_widget_content();
        }
        
        function populate_facebook_widget_content(after_population_callback) {
            ginipkg.request({
                url: context.widget.feed_url,
                // jsonp : true,
                data: {
                    id: context.username || context.profile_id,
                    fields: "id,feed"
                },
                timeout: 20000,
                success: function (data) {
                    // populate_social_button and populate_facebook_post
                    var target_element = jQuery.ginipkgContainer.closest("div.facebook-section");
                    jQuery.setSocialButton(target_element, data.result.facebook, context.widget); // setSocialButton1
                },
                complete: function (result) {
                    if (after_population_callback) {
                        after_population_callback();
                    }
                }
            });
        };  
  }
//Facebook Section Ends here

//Twitter Section 
    components.twitterSection = function (ginipkg, contact_data, membership, section_element, parent_section)
    {   
        var _public = {}, _protected = {}, widget = membership.widget,tweet_dialog, tweet_input, tweet_bubble; 
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'twitter',
            display_element: section_element,
        }); 
        
        _protected.renderFixedTemplate({
                template: 'twitter/twitter',
                contact_data: contact_data,
                context: membership,
            });
        return _public;
    };

    client.sidebar_callbacks["twitter/_twitter_status"] = function (ginipkg, jQuery, params, context, section)
    {
        jQuery = jQuery.jQueryFor(jQuery.ginipkgContainer.closest("div.twitter-section")[0]);
        
        
        if (context.widget.twitter_user_id !== undefined ) {
                populate_twitter_widget_content();
        }
            
        function populate_twitter_widget_content(){
            
                ginipkg.request({
                    url: context.widget.feed_url,
                    // jsonp : true,
                    data: {
                        id: context.username || context.profile_id,
                        fields: "id,feed"
                    },
                    timeout: 20000,
                    success: function (data) {
                        // populate_social_button
                        var target_element = jQuery.ginipkgContainer.closest("div.twitter-section");
                        jQuery.setSocialButton(target_element, data.result.twitter, context.widget); // setSocialButton1
                    },
                    complete: function (result) {
                        
                    }
                });
        }
    };
//Twitter section ends Here

//googleplus Section 
    components.googleplusSection = function (ginipkg, contact_data, membership, section_element) {
       
        var _public = {}, _protected = {}, widget = membership.widget;
        
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'googleplus',
            display_element: section_element
        }); 
        
        _protected.renderFixedTemplate({
                template: 'google_plus/google_plus',
                contact_data: contact_data,
                context: membership
            });
        
        _protected.expanded_container = section_element.find('div.googelplus-section.expanded').first();
        
        return _public;
    };
    
    client.sidebar_callbacks["google_plus/_google_plus_status"] = function (ginipkg, jQuery, params, context, section)
    {   
        jQuery = jQuery.jQueryFor(jQuery.ginipkgContainer.closest("div.googleplus-section")[0]);
        if (context.widget.google_plus_user_id) {
            populate_google_plus_widget_content();
        }
            
        function populate_google_plus_widget_content(){
            
            ginipkg.request({
                url: context.widget.feed_url,
                // jsonp : true,
                data: {
                    id: context.username || context.profile_id,
                    fields: "id,feed"
                },
                timeout: 20000,
                success: function (data) {
                    var target_element = jQuery.ginipkgContainer.closest("div.googleplus-section");
                        jQuery.setSocialButton(target_element, data.result.googleplus, context.widget); // setSocialButton1
                    window.___gcfg = {
                        lang: 'en-US'
                    };

                    (function() {
                        var po = document.createElement('script');
                        po.type = 'text/javascript';
                        po.async = true;
                        po.src = 'https://apis.google.com/js/plusone.js';
                        var s = document.getElementsByTagName('script')[0];
                        s.parentNode.insertBefore(po, s);
                    })();
                },
                complete: function (result) {
                }
            });
        }
    };
//Googleplus section ends Here

//linkedin Section 
    
    components.linkedInSection = function (ginipkg, contact_data, membership, section_element) {
        var _public = {}, _protected = {}, widget = membership.widget;
        
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'linked-in',
            display_element: section_element
        }); 
        
        _protected.renderFixedTemplate({
                template: 'linked_in/linked_in',
                contact_data: contact_data,
                context: membership
            });
            
        _protected.expanded_container = section_element.find('div.linked-in-section.expanded').first();
        
        return _public;
    };
    
    client.sidebar_callbacks["linkedin/_linkedin_status"] = function (ginipkg, jQuery, params, context, section)
    {   
        jQuery = jQuery.jQueryFor(jQuery.ginipkgContainer.closest("div.linked-in-section")[0]);
        if (context.widget.linkedin_user_id) {
                populate_linkedin_widget_content();
        }
            
        function populate_linkedin_widget_content(){
            
            function populate_linkedin_post(posts,post_element)
            {   
                for (p = 0; p < posts.length; p += 1)
                {
                    postElement.append("<span class='views'><a class='view' href='#'></a></span><p style='width:90%;'>"+posts[p]+"</p>");
                }
            }

            ginipkg.request({
                url: context.widget.feed_url,
                // jsonp : true,
                data: {
                    id: context.username || context.profile_id,
                    fields: "id,feed"
                },
                timeout: 20000,
                success: function (data) {
                    // populate_social_button
                    var target_element = jQuery.ginipkgContainer.closest("div.linked-in-section");
                    jQuery.setSocialButton(target_element, data.result.linkedin, context.widget ); // setSocialButton1
                },
                complete: function (result) {
                    
                }
            });
        }
    };
//linkedin section ends Here


//Error Section 
components.errorSection = function (ginipkg, error_data, section_element) {
        
        var _public = {}, _protected = {};
        
        var error_messages = {
            http_status_503: {
                title: ginipkg.app_name + ' overloaded',
                body: ["Sorry — we've got more people trying to use "+ginipkg.app_name+" than we can handle right now. " + "Great minds think alike!", 'We are busy adding more capacity, and we will be back shortly.']
            },
            buggy_cors_chrome: {
                title: 'Please upgrade Chrome',
                body: ["Sorry — you're using an old version of Google Chrome which is not compatible with "+ginipkg.app_name+".", 'Please upgrade Chrome by clicking the "wrench" icon next to the address bar, then ' + '"About Google Chrome", then "Update now".']
            },
            buggy_cors_safari: {
                title: 'Please upgrade Safari',
                body: ["Sorry — you're using an old version of Safari which is not compatible with "+ginipkg.app_name+".", 'Please upgrade Safari by choosing "Software Update" from the Apple menu, and restarting ' + 'your Mac.']
            },
            buggy_cors_mailplane: {
                title: 'Please update Mailplane settings',
                body: ["Sorry — to use "+ginipkg.app_name+" in this version in Mailplane, we need you to tweak the settings.", "1. Make sure you've got the latest version of Safari installed, by choosing " + '"Software Update" from the Apple menu.', '2. Go to Mailplane preferences → Advanced, and check the box next to "Use System WebKit".', '3. Restart Mailplane.']
            },
            not_cors_compatible: {
                title: 'Please upgrade your browser',
                body: ['Sorry! '+ginipkg.app_name+' no longer supports the web browser you are using.', 'Please upgrade to the latest version of ' + '<a class="text-link" href="http://www.google.com/chrome" target="_blank">Chrome</a>, ' + '<a class="text-link" href="http://www.mozilla.com/" target="_blank">Firefox</a> or ' + '<a class="text-link" href="http://www.apple.com/safari/" target="_blank">Safari</a> ' + 'in order to use '+ginipkg.app_name+'.']
            },
            blocked_locally: {
                title: "Something's in the way",
                body: ['Sorry! Something prevented '+ginipkg.app_name+' from looking up this email address.', 'If you have an ad-blocking extension like ' + '<a class="text-link" href="http://adblockplus.org" target="_blank">Adblock Plus</a>, ' + 'please disable it on "mail.google.com", "profiles.sugargini.com" and "sugargini.com".']
            },
            server_inaccessible: {
                title: 'Offline Mode!',
                body: ['We can\'t contact the '+ginipkg.app_name+' servers right now . '],
            },
            login_required: {
                title: 'Login Required!',
                body: ['You are not logged in to '+ginipkg.app_name+'. Please click on '+ginipkg.app_name+' in top navigation bar & then login to '+ginipkg.app_name+'.'],
            },
            unknown: {
                title: 'Sorry, something broke!',
                body: ['Please bear with us while we improve '+ginipkg.app_name+'. ' + "We've been notified of this issue and will look at it as soon as we can."],
            }
        };


        if(error_data.error_code === 'server_inaccessible'){
            error_data.error_message = 'It looks like you\'re not connected to the Internet.<br\> '+ginipkg.app_name+' will work start working as soon as your connection resumes.';
        }
        
        var message = error_messages[error_data.error_code] || error_messages.unknown;
        
        var body = _(message.body).map(function (paragraph) {
            return paragraph ;
        }).join('');
        
        components.fixed_section(_public, _protected, {
            ginipkg: ginipkg,
            section_name: 'error',
            display_element: section_element
        });
        
        _protected.renderFixedTemplate({
            template: 'error/error_section',
            contact_data: {
                title: message.title,
                body: body,
                error_code: error_data.error_code,
                error_message: error_data.error_message
            }
        });
        
        jQuery(section_element).siblings('li').not('.header-section').hide();
        jQuery(section_element).siblings('li.header-section > .searchbox').hide();
        jQuery(section_element).siblings('div.basic-info-section').hide();
        _public.measureSection();
        return _public;
    };


//Error section ends here

//MemberShip Section 

client.sidebar_callbacks["memberships/_expanded_membership"] = function (ginipkg, jQuery, params, context, section) {
    components.membership(ginipkg, params, context, jQuery.ginipkgContainer);
};

client.sidebar_callbacks["memberships/_grabbed_membership"] = function (ginipkg, jQuery, params, context, section) {
    components.membership(ginipkg, params, context, jQuery.ginipkgContainer);
};


client.templates["crm/crm-not-found"] = Handlebars.compile("    <div class=\"crm_not_found\" >        <span id=\"crm_not_found_error_span\" style=\"text-align:center\" >           You have not configured your SugarCRM.\<br/>        </span>        <span>            <input type=\"button\" class=\"config-sugarcrm\" value=\"Configure CRM\" />        </span>    </div>");
client.templates["conversation/layout"] = Handlebars.compile("    <html>     <head>        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />        <title>Untitled Document</title>        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">    </head>    <body>    <!--Outer container start-->    <div class=\"outer_div\">        <!--Main container start-->        <div class=\"main_header\">            <!--Top header start-->          <div class=\"top_header\">              <div class=\"logo\"></div>              <div class=\"header_dropdown\"><a href=\"javascript:void(0)\"></a></div>              <div class=\"search_box\">                    <div class=\"inactive-back-button\"></div>                    <input name=\"\" type=\"text\">                    <input name=\"\" title=\"Search\" type=\"button\">              </div>              <!-- Mails Details start-->                 {{#mail_list}}\n                  <div class=\"person_info\" style=\"border-bottom: 1px solid rgb(136, 129, 129)\">                    <div class=\"person_pic\"></div>                    <div class=\"person_details\" name=\"{{./name}}\" email=\"{{./email}}\">                        <div class=\"person_profile\">{{./name}}</div>                        <div class=\"person_Company\"><a href=\"javascript:void(0)\">{{./email}}</a></div>                    </div>                  </div>                {{/mail_list}}\n             <!-- Mails Details start-->            </div>          </div>        </div>    </div> ");


client.templates["loading/layout"] = Handlebars.compile("    <html>        <head>        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />        <title>Untitled Document</title>        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/style.css\">        </head>        <body>        <!--Outer container start-->        <div class=\"outer_div\">            <!--Main container start-->            <div class=\"main_header\">                <!--Top header start-->              <div class=\"top_header\">                <div class=\"logo\"></div>                <div class=\"header_dropdown\"><a href=\"javascript:void(0)\"></a></div>                  <div class=\"search_box\">                        <div class=\"inactive-back-button\"></div>                        <input name=\"\" type=\"text\">                        <input name=\"\" type=\"button\">                  </div>                  <div class=\"person_info\">                      <div class=\"person_name\"><div class=\"first_spinner\">{{{ spinner \"32px\" }}}</div></div>                  </div>                </div>                <!--Top Header Close-->              </div>    </html>");


client.templates["crm/basics"] = Handlebars.compile("    <div class=\"crm_container\">      <div class=\"add_dropdown\">         <p>            <select name=\"dropdown-menu\" id=\"module-dropdown-menu\">                {{#configured_modules}}\n                {{#if_notequal_text . \"RevenueLineItems\"}}                    <option id={{{ format_module_id . }}}>{{.}}</option>                {{/if_notequal_text}}                {{/configured_modules}}\n            </select>        </p>        <span><input name=\"Add\" type=\"button\" value=\"\" title=\"Create\" id=\"add-crm-module\"></span>    </div>");


client.templates["layout/initial"] = Handlebars.compile("\n    <div class=\"initial-container\">        <div first=\"true\" initialemail=\"{{contact/email}}\" class=\"primary-profile open-profile\" >            <div class=\"contact_exist_container\" contactemail=\"{{contact/email}}\"></div>            <div class=\"person_name\">{{ contact/name }}</div>            <div class=\"image-container\" >                <img src=\"{{ contact/image_url_raw }}\" width=\"50\" height=\"52\" />            </div>            <div class=\"primary-profile-container\" >                <div class=\"person_profile\">{{ contact/headline }}</div>                <!--<div class=\"person_Company\">{{ contact/companyName }}</div>-->                <!--<div class=\"person_email\">{{{ format_email contact/email }}} </div>-->                <div class=\"person_email\">{{ contact/email }}</div>                <div class=\"person_phone\">{{ contact/phone}}</div>                <!--<div><span class=\"img-container\"><img  src=\""+img_base_url+"/loader.gif\" height=\"10\" width=\"10\" /></span>                <span class=\"opportunity-container\">90</span></div>-->           </div>        </div>        <!--<div class=\"secondary-profile-container all-mail-receipts\" >-->        <div class=\"all-mail-receipts\" >            <ul>            {{#emails}}                <li class=\"open-profile\" initialemail=\"{{email}}\" username=\"{{name}}\" >                    <img class=\"avatar\" src=\"{{image}}\"/>                    <div class=\"contact_exist_container\" contactemail=\"{{email}}\">                        <!--<strong>{{{nameFromEmail email}}}</strong>-->                        <strong>{{name}}</strong>                    </div>                    <!--<em>Opportunity Amount: $ 100</em>-->                </li>            {{/emails}}            </ul>        </div>    </div>");
client.templates["layout/header"] = Handlebars.compile("\n  <div class=\"outer_div\">    <div class=\"main_header\">      <!--Top header start-->      <div class=\"top_header\">        <div class=\"logo\"></div>        <div class=\"header_dropdown\">            <ul class=\"top_nav\">                <li>                    <a class=\"first\" href=\"javascript:void(0)\" id=\"crmModule\" title=\"Create New Record In CRM.\">                        <ul class=\"dropdown-menu\" style=\"display:none;\">                            {{#configured_modules}}                                <li><a href=\"javascript:void(0)\" class=\"load_Module\">{{.}}</a></li>                            {{/configured_modules}}                        </ul>                    </a>                </li>            </ul>        </div>        <div class=\"search_box\">            <div class=\"inactive-back-button\"></div>            <input type=\"text\" value=\"\" name=\"search_email\" id=\"search_email\" title=\"Email\">            <input type=\"button\" value=\"\" id=\"Search\" title=\"Search\" class=\"search_email_button\">        </div>        <div class='err_msg'></div>      </div>    </div>   </div>");

/**------------------------------ End header Section -----------------------------------*/
//\n
/**------------------------------ Start Basic Info Section -----------------------------------*/
client.templates["basic_info/basic_info"] = Handlebars.compile("\n    <div class=\"comment-status handle_err_msg\" style=\"display:none;\">            {{{ spinner \"16px\" }}}\n            <span class=\"status-text\" style=\"color:red;font-size-10px\"></span>    </div>    <div class=\"person_info\">        <div class=\"person_name\">{{ contact/name }}</div>        <!--<div class=\"contact_check\" style=\"position: absolute;right: 50px;top: 12px;width: 15px;\">&nbsp;</div>-->        <div class=\"edit_sync\">            <ul>                <li class=\"sync\"><a href=\"javascript:void(0)\" class=\"sync_contact\">Sync</a></li>                <li class=\"edit\"><a href=\"javascript:void(0)\" title=\"Edit\" class=\"edit_contact\">Edit</a></li>            </ul>        </div>        <div class=\"person_pic\">            <img src=\"{{ contact/image_url_raw }}\" width=\"70\" height=\"72\" />            <div class=\"edit_image_button\" >                <a href=\"javascript:void(0)\" id=\"edit_image\">Edit</a>            </div>        </div>        <div class=\"person_details\">            <div class=\"person_profile\">{{ contact/headline }}</div>            <div class=\"person_Company\"><a href=\"{{ contact/companyURL }}\">{{ contact/companyName }}</a></div>            <div class=\"person_email\">{{{ format_email contact/email }}} </div>            <div class=\"person_phone\">{{ contact/phone}}</div>       </div>    </div>");             
/**------------------------------ End Basic Info Section -----------------------------------*/

/**------------------------------ Start Personal Section -----------------------------------*/
client.templates["layout/personal"] = Handlebars.compile("\n    <input type=\"radio\" checked name=\"tabs\" id=\"tab1\">    <label for=\"tab1\" ><div class=\"person\" title=\"Personal Details\"></div></label>    <div id=\"tab-content1\" class=\"tab-content animated fadeIn\">        <div id=\"personal-block\" class='child-section'></div>        <div class=\"social-sect\">            {{#if hasmemberships}}            <h3>Social</h3>            <div class=\"cntnt\">                <ul class='social-child-section'></ul>            </div>            {{/if}}        </div>    </div>");



client.templates["personal_profile/profile"] = Handlebars.compile("\n    <div class=\"abtus-sect\">         {{#if contact/summary}}            <h3>About</h3>            <div class=\"cntnt\">            <p class=\"profile-description\">{{ contact/summary }}</p>            {{#if_equal_length contact/summary \"100\"}}                <p class=\"more\"><a href=\"javascript:void(0)\" class=\"more-link\">[+ More]</a></p>            {{/if_equal_length}}            <div class=\"source\"></div>\n         {{/if}}\n        {{#if_length_zero contact/summary}}            <div class=\"cntnt\">                <p class=\"profile-description\">No profile summary available.</p>            </div>        {{/if_length_zero}}    </div>\n  </div>\n");

/**------------------------------ End Personal Section -----------------------------------*/

/**------------------------------ Start Company Section -----------------------------------*/
client.templates["layout/company"] = Handlebars.compile("\n    <input type=\"radio\" name=\"tabs\" id=\"tab2\">    <label for=\"tab2\"><div class=\"company\" title=\"Company Details\"></div></label>    <div id=\"tab-content2\" class=\"tab-content animated fadeIn\">        <div id=\"company-block\" class=\"child-section\"></div>        <div class=\"social-sect\">            <h3>Social</h3>            <div class=\"cntnt\">               <ul class='social-child-section'></ul>            </div>        </div>    </div>");


client.templates["company_profile/company_profile"] = Handlebars.compile("\n            {{> company_profile/profile}}");

client.templates["company_profile/profile"] = Handlebars.compile("\n    <div class=\"abtus-sect\">        <div class=\"comment-status handle_err_msg\" style=\"display:none;\">                {{{ spinner \"16px\" }}}\n                <span class=\"status-text\" style=\"color:red;font-size-10px\"></span>        </div>        <h3>Company</h3>        <div class=\"corporate_sect\">            <div class=\"company_pic\">                <img src=\"{{ company/logo }}\" width=\"100%\" height=\"100%\" />            </div>            <div class=\"company_details\">                <p title=\"{{ company/name }}\" class=\"comp_prof companyName\" >{{{ substr company/name }}}</p>                <p class=\"comp_prof companyNameBox\" style=\"display:none\">                        <input type=\"text\" name=\"companyNameStringBox\" size=\"15\" id=\"companyNameStringBox\" style=\"width:120px; height:16px; border: 1px solid #5FC4FA;\" value=\"{{ company/name }}\"/>                        <span class=\"errMsg\"></span>                </p>                <span class=\"comp_add\">{{ company/location }}</span>            </div>            <div class=\"edit_sync_account\">                <ul>                    <li class=\"sync\"><a href=\"javascript:void(0)\" class=\"sync_account\">Sync</a></li>                    <li class=\"edit\"><a href=\"javascript:void(0)\" title=\"Edit\" class=\"edit_account\">Edit</a></li>                </ul>            </div>            <div class=\"cntnt\">                {{#if company/summary}}                    <p class=\"profile-description\">{{ company/summary }}</p>                {{/if}}                {{#if_equal_length company/summary \"100\"}}                    <p class=\"more\"><a href=\"javascript:void(0)\" class=\"more-link\">[+ More]</a></p>                {{/if_equal_length}}                <div class=\"source\"></div>            </div>        </div>");

client.templates["company_profile/company_profile_not_found"] = Handlebars.compile("\n            <div id=\"tab-content2\" class=\"tab-content animated fadeIn\">            <div class=\"abtus-sect\">                <div class=\"comment-status handle_err_msg\" style=\"display:none;\">                        {{{ spinner \"16px\" }}}\n                        <span class=\"status-text\" style=\"color:red;font-size-10px\"></span>                </div>                <div class=\"corporate_sect\">                    <div class=\"cntnt\">                        <p class=\"comp_prof companyName\">                            We could not find any associated company to this user.Add associated company to this user.<br/>                            <span class=\"add_account\">                                <br>                                <input type=\"text\" name=\"companyNameStringBox\" size=\"25\" id=\"companyNameStringBox\" placeholder=\"Company Name\" />                            </span>                        </p>                    </div>                </div>            </div>");
/**------------------------------ End Company Section -----------------------------------*/


/**------------------------------ Start Attachment Section -----------------------------------*/

/*
* New Attachment Section UI.
* Date : 17 Jan 2014
*/
client.templates["layout/attachment"] = Handlebars.compile("\n    <input type=\"radio\" name=\"tabs\" id=\"tab3\">    <label for=\"tab3\"><div class=\"attachments\" title=\"Attachments\"></div></label>    <div id=\"tab-content3\" class=\"tab-content animated fadeIn\">        <div class=\"attachment_tab\">            <div class=\"mask\"></div>            <div class=\"attach_err_box\">                <p>Loading Attachments! Please Wait...                    <img src=\""+img_base_url+"/loader.gif\" height=\"16\" width=\"16\" />                </p>            </div>            <div class=\"attach_loader\" style=\"display:none;\">                <img src=\""+img_base_url+"/loader.gif\" height=\"32\" width=\"32\" />            </div>            <div class=\"atchment_body_tab_cls\">            </div>        </div>    </div>");

/**------------------------------ End Attachment Section -----------------------------------*/

/**------------------------------ Start Mail Section -----------------------------------*/

client.templates["layout/email"] = Handlebars.compile("\n    <input type=\"radio\" name=\"tabs\" id=\"tab4\">    <label for=\"tab4\"><div class=\"mails\" title=\"Emails\"></div></label>    <div id=\"tab-content4\" class=\"tab-content animated fadeIn\">        <div class=\"email_tab\">            <div class=\"mask\"></div>            <div class=\"email_err_box\">                <p>Loading Emails! Please Wait...                    <img src=\""+img_base_url+"/loader.gif\" height=\"16\" width=\"16\" />                </p>            </div>            <div class=\"email_loader\" style=\"display:none;\">                <img src=\""+img_base_url+"/loader.gif\" height=\"32\" width=\"32\" />            </div>            <!--<div class=\"email_details\">-->            <div class=\"email_body_tab_cls\">            </div>            <!--<div class=\"email-pagination\">            </div>-->        </div>    </div>");
/**------------------------------ End Mail Section -----------------------------------*/

/**------------------------------ Start Social Section -----------------------------------*/
client.templates["memberships/_expanded_membership"] = Handlebars.compile("  <li class={{ icon_name }}>        <span class=\"sttngs\">            <span class=\"views\" title=\"Maximize\">view</span>            <span class=\"follow social_button\" style=\"display:none;\" title=\"Follow\">follow</span>            <span class=\"edit\">edit</span>        </span>        <span class=\"handleLink\">           <a class='membership-link' target='_blank' title='{{ formatted }}' site_name='{{ site_name }}' href='{{ profile_url }}'>{{{ truncate_membership_title formatted }}}</a>        </span>        <span class=\"handleBox\" style=\"display:none\">            <input type=\"text\"   name=\"handleStringBox\" style=\"width:125px; height:16px; border: 1px solid #5FC4FA;\" value=\"\" id=\"handleStringBox\"/>        </span>  </li>");


client.templates["twitter/twitter"] = Handlebars.compile("\n                                                          {{> memberships/_expanded_membership }}                                                           {{> twitter/_twitter_status }}                                                        ");
client.templates["facebook/facebook"] = Handlebars.compile("\n                                                           {{> memberships/_expanded_membership }}                                                           {{> facebook/_facebook_status }}                                                          ");
client.templates["google_plus/google_plus"] = Handlebars.compile("\n                                                                  {{> memberships/_expanded_membership }}                                                                  {{> google_plus/_google_plus_status }}                                                                ");
client.templates["linked_in/linked_in"] = Handlebars.compile("\n                                                                {{> memberships/_expanded_membership }}                                                                {{> linkedin/_linkedin_status }}                                                            ");

client.templates["twitter/_twitter_status"]         = Handlebars.compile("<div class='posts'    style='display:none'></div>");
client.templates["facebook/_facebook_status"]       = Handlebars.compile("<div class='posts'    style='display:none'></div>");
client.templates["google_plus/_google_plus_status"] = Handlebars.compile("<div class='posts'    style='display:none'></div>");
client.templates["linkedin/_linkedin_status"]       = Handlebars.compile("<div class='posts'    style='display:none'></div>");

/**------------------------------ End Social Section -----------------------------------*/

/**------------------------------ Start CRM Section -----------------------------------*/

client.templates["layout/crm"] = Handlebars.compile("<input type=\"radio\" name=\"tabs\" id=\"tab5\">    <label for=\"tab5\" ><div class=\"crm\" title=\"CRM\"></div></label>    <div id=\"tab-content5\" class=\"tab-content animated fadeIn\">        <div id=\"crm-block\" class=\"child-section\"></div>    </div>");



client.templates["crm/listing"] = Handlebars.compile("\n    <section class=\"ac-container\">    <ul>        <li>            <input id=\"ac-2\" name=\"accordion-2\" type=\"radio\" checked>            <label><span>Leads</span></label>            <div>                <div class=\"spinner-container\" style=\"display:block;\">\n{{{ spinner \"16px\" }}}\n</div>\n            </div>        </li>        <li>            <input id=\"ac-3\" name=\"accordion-3\" type=\"radio\" checked>            <label><span>Opportunities</span></label>            <div>                <div class=\"spinner-container\" style=\"display:block;\">\n{{{ spinner \"16px\" }}}\n</div>\n            </div>        </li>        <li>            <input id=\"ac-1\" name=\"accordion-1\" type=\"radio\" checked>            <label><span>Cases</span></label>            <div>                <div class=\"spinner-container\" style=\"display:block;\">\n{{{ spinner \"16px\" }}}\n</div>\n            </div>        </li>    </ul>    </section>");
client.templates["basic_info/profile_edit"] = Handlebars.compile("    <div class=\"comment-status\" style=\"display:none;\">\n        {{{ spinner \"32px\" }}}\n        <span class=\"status-text\"></span>\n    </div>\n    <div class=\"info-dialog \">\n        <form method=\"post\" action=\"#\">\n            <div class=\"editable-update\">\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">First Name : <span style='color:red;'>*</span></div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"First Name\" name=\"first_name\" id=\"first_name\" maxlength=\"30\" size=\"10\" class=\"required\" value=\"{{{addSlashes contact/first_name }}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Last Name : </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Last Name\"  name=\"last_name\" id=\"last_name\" maxlength=\"30\" size=\"10\" class=\"\" value=\"{{{addSlashes contact/last_name }}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Title : </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Title\"  name=\"title\" id=\"title\" maxlength=\"50\" size=\"10\" class=\"\" value=\"{{{addSlashes contact/headline }}}\" ></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Company : </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Company\"  name=\"company\" id=\"company\" maxlength=\"50\" size=\"10\" class=\"\" value=\"{{{addSlashes company/name}}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Phone : </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Phone\"  name=\"phone\" id=\"phone\" maxlength=\"15\" size=\"10\" class=\"phone\" value=\"{{{addSlashes contact/phone }}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Email : </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Email\"  name=\"emails\" id=\"emails\" maxlength=\"90\" size=\"20\" class=\"required email\" readonly=\"readonly\" value=\"{{ contact/email }}\">\n                        <img src=\""+ img_base_url+"/plus-icn.png\" width=\"10\" style=\"cursor:pointer\" id=\"add-more-email\"/>\n                    </div>\n                </div>\n            <div>\n        </form>\n    </div>\n");
client.templates["basic_info/sync_contact"] = Handlebars.compile("    <div class=\"comment-status\" style=\"display:none;\">\n        {{{ spinner \"32px\" }}}\n        <span class=\"status-text\"></span>\n    </div>\n    <div class=\"info-dialog \">\n        <form method=\"post\" action=\"#\">\n            <div class=\"editable-update\">\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">First Name : </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"First Name\" name=\"first_name\" id=\"first_name\" maxlength=\"30\" size=\"10\" class=\"\" value=\"{{{addSlashes contact/first_name }}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Last Name <span class=\"asterisk\" style='color:red;'>*</span>: </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Last Name\"  name=\"last_name\" id=\"last_name\" maxlength=\"30\" size=\"10\" class=\"required\" value=\"{{{addSlashes contact/last_name }}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Company <span class=\"asterisk\" style='color:red;'>*</span>: </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Company\"  name=\"company\" id=\"company\" maxlength=\"50\" size=\"10\"class=\"required\" value=\"{{{addSlashes company/name}}}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Email <span class=\"asterisk\" style='color:red;'>*</span>: </div>\</label> \n                    <div class=\"form-fields\"><input type=\"text\" title=\"Email\"  name=\"emails\" id=\"emails\" maxlength=\"90\" size=\"20\" class=\"required email\" readonly=\"readonly\" value=\"{{ contact/email }}\"></div>\n                </div>\n                <div class=\"form-row\">\n                    <label class=\"form-label\"><div id=\"data_labels\">Description : </div>\</label> \n                    <div class=\"form-fields\">\n                    <textarea title=\"Profile Description\"  name=\"description\" id=\"description\" rows=\"4\" cols=\"50\" >{{ contact/summary }}</textarea>\n                    </div>\n                </div>\n            <div>\n        </form>\n    </div>\n");

client.templates["crm_options/menu"] = Handlebars.compile("        <div class=\"gini-dropdown\" style=\"text-align: left;position:relative;\">    <ul>        <li class=\"archieve\"><input type='hidden' id='chkArchAjxrequest' value='0'><a>Archive</a></li>        <li class=\"mail-only\"><span><a flag='this-mail-only' href=\"javascript:void(0);\">This Mail Only</a><span></li>        <li class=\"archieve-always archive-fixed\" id=\"archieve-always\"><span><a flag='archive-always' href=\"javascript:void(0);\">Archive Always</a></span></li>        <li class=\"convert\"><a>Convert To</a></li>        {{#configured_modules}}        {{#if_equal_text . \"Leads\"}}                            <li><span><a href=\"javascript:void(0)\" class=\"convert-leads\" flag='leads'>Lead</a></span></li>                        {{/if_equal_text}}         {{#if_equal_text . \"Opportunities\"}}                           <li><span><a href=\"javascript:void(0)\" class=\"convert-Opportunities\" flag='opportunities'>Opportunity</a></span></li>                        {{/if_equal_text}}         {{#if_equal_text .  \"Cases\"}}                            <li><span><a href=\"javascript:void(0)\" class=\"convert-cases\" flag='cases'>Case</a></span></li>                        {{/if_equal_text}}                             {{/configured_modules}}    </ul></div>    ");
    
    
client.templates["login_steps/first"] = Handlebars.compile("       <div class=\"login_steps\"><div class=\"header\">  <img src=\"ginicube_40px.png\">  <a href=\"javascript:void(0)\" class=\"close\">Close</a></div>  <div class=\"content\">   <div class=\"nav_menu\">       <a href=\"javascript:void(0)\" class=\"one\"></a>       <a href=\"javascript:void(0)\" class=\"two\"></a>       <a href=\"javascript:void(0)\" class=\"three\"></a>       <a href=\"javascript:void(0)\" class=\"four\"></a>     </div>     <span class=\"message\">     'Thanks You For Installing "+app_name+"'    </span>  </div>  <div class=\"next\">    <a href=\"javascript:void(0)\" class=\"nextbtn\">Start exploring "+app_name+" </a>  </div></div>");    

client.templates["toolbar_menu/toolbar_menu"] = Handlebars.compile("    <div class=\"T-I J-J5-Ji ar7 nf T-I-ax7 L3\">                <span class=\"Ykrj7b\">"+app_name+"</span>                <div class=\"G-asx T-I-J3 J-J5-Ji\">&nbsp;</div>            </div>            <div class=\"J-M agd\" style=\"display: none;\"></div>            <div class=\"J-M agd\" style=\"display: none;\"></div>            <div id=\"gini-toolbar-items\" class=\"J-M jQjAxd\" style=\"-webkit-user-select: none;left:-104px;width:125px; position:relative;\" role=\"menu\">                <div class=\"SK AX\" style=\"-webkit-user-select: none;\" aria-haspopup=\"true\">                        {{#configured_modules}}                        {{#if_notequal_text . \"RevenueLineItems\"}}                            <div class=\"J-N\" selector=\"{{.}}\" role=\"menuitem-{{.}}\" style=\"-webkit-user-select: none;\">                                <div class=\"J-N-Jz\" style=\"-webkit-user-select: none;\">                                    <a href=\"javascript:void(0)\" style=\"display:block;width:100%;\" class=\"gbmt crm-module\">{{.}}</a>\n                                </div>                            </div>                        {{/if_notequal_text}}                        {{/configured_modules}}                </div>            </div>");
//convert posts to leads

client.templates["toolbar_menu_convert/toolbar_menu"] = Handlebars.compile("    <div class=\"J-M agd\" style=\"display: none;\"></div>    <div class=\"J-M agd\" style=\"display: none;\"></div>    <div class=\"J-M jQjAxd\" style=\"-webkit-user-select: none;left: 72px;top: 13px;width:126px;\" role=\"menu\">        <div class=\"SK AX\" style=\"-webkit-user-select: none;\" aria-haspopup=\"true\">                {{#configured_modules}}                {{#if_equal_text . \"Leads\"}}                    <div class=\"J-N\" selector=\"{{this}}\" role=\"menuitem-{{this}}\" style=\"-webkit-user-select: none;\">                        <div class=\"J-N-Jz\" style=\"-webkit-user-select: none;\">                            <a href=\"javascript:void(0)\" style=\"display:block;width:100%;\" class=\"gbmt crm-module\">Lead</a>\n                        </div>                    </div>                    {{/if_equal_text}}                    {{#if_equal_text . \"Opportunities\"}}                    <div class=\"J-N\" selector=\"{{this}}\" role=\"menuitem-{{this}}\" style=\"-webkit-user-select: none;\">                        <div class=\"J-N-Jz\" style=\"-webkit-user-select: none;\">                            <a href=\"javascript:void(0)\" style=\"display:block;width:100%;\" class=\"gbmt crm-module\">Opportunity</a>\n                        </div>                    </div>                    {{/if_equal_text}}                    {{#if_equal_text . \"Cases\"}}                    <div class=\"J-N\" selector=\"{{this}}\" role=\"menuitem-{{this}}\" style=\"-webkit-user-select: none;\">                        <div class=\"J-N-Jz\" style=\"-webkit-user-select: none;\">                            <a href=\"javascript:void(0)\" style=\"display:block;width:100%;\" class=\"gbmt crm-module\">Case</a>\n                        </div>                    </div>                    {{/if_equal_text}}                {{/configured_modules}}        </div>    </div>");


client.templates["toolbar_menu1/toolbar_menu"] = Handlebars.compile("    <div class=\"T-I J-J5-Ji ar7 nf T-I-ax7 L3\">        <span class=\"Ykrj7b\">"+"Gks"+"</span>        <div class=\"G-asx T-I-J3 J-J5-Ji\">&nbsp;</div>    </div>    <div class=\"J-M agd\" style=\"display: none;\"></div>    <div class=\"J-M agd\" style=\"display: none;\"></div>    <div id=\"gini-toolbar-items\" class=\"J-M jQjAxd\" style=\"-webkit-user-select: none; top:29px;left:-103px;\" role=\"menu\">        <div class=\"SK AX\" style=\"-webkit-user-select: none;\" aria-haspopup=\"true\">                {{#configured_modules}}                    <div class=\"J-N\" selector=\"{{this}}\" role=\"menuitem-{{this}}\" style=\"-webkit-user-select: none;\">                        <div class=\"J-N-Jz\" style=\"-webkit-user-select: none;\">                            <a href=\"javascript:void(0)\" class=\"gbmt crm-module\">{{this}}</a>\n                        </div>                    </div>                {{/configured_modules}}        </div>    </div>");


client.templates["crm/sugar"] = Handlebars.compile("    <div class=\"comment-status\" >\n        <!--{{{ spinner \"32px\" }}}-->\n        <span class=\"status-text\" ></span>\n    </div>\n    <div class=\"info-dialog crm-dialog crm-leads-dialog\" title=\"{{module}}\">\n            <div class=\"top-legends\"><span class=\"error-mark\">*</span> Fields are required.</div>\n            <form>\n            <div class=\"editable-update\">\n                    {{#module_config}}                    {{#if_equal field_type \"hidden\"}}                            <input type=\"hidden\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"{{field_value}}\" >\n                    {{/if_equal}}                    {{#if_equal field_type \"text\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" > \n                            <input type=\"text\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"{{field_value}}\" maxlength=\"{{field_length}}\" class =\"{{#if required}}required{{/if}}\">\n                            <div id=\"slide-div\"  class='block' style=\"display:none;\" > \n                                <Select size=\"4\" id='companyNameSelect'>{{field_value}}</Select>\n                            </div>\n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"date\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" > \n                            <input type=\"text\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"{{ setDateFormat field_value}}\" maxlength=\"{{field_length}}\" class =\"{{#if required}}required {{/if}} date_picker\" readonly=\"readonly\" >\n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"textarea\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" >  \n                            <textarea rows=\"4\" cols=\"50\" name=\"{{field_name}}\" id=\"{{field_name}}\"  class =\"{{#if required}}required{{/if}}\" >{{field_value}}</textarea>\n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"select\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" > \n                            <select name=\"{{field_name}}\" id=\"{{field_name}}\" class =\"{{#if required}}required{{/if}}\" >                                {{#select_options dd_options field_value \"<option value=''>&nbsp;</option>\" }}&nbsp; {{/select_options}}\n                            </select>\n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"checkbox\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" >  \n                            <input type=\"hidden\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"0\">                            <input type=\"checkbox\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"1\"  class =\"{{#if required}}required{{/if}}\" {{#if_equal field_value \"1\"}}checked{{/if_equal}} >\n                        </div>\n                    </div>\n                     {{/if_equal}}                    {{#if_equal field_type \"radio\"}}                        <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                            <label class=\"form-label\">\n                                <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                            </label> \n                            <div class=\"form-fields\" >  \n                                {{#radio_options dd_options field_name  field_value \"\" }}&nbsp; {{/radio_options}}\n                            </div>\n                        </div>\n                    {{/if_equal}}                  {{/module_config}}            </div>\n\n        </form>\n    </div>\n");

client.templates["crm/sugar_activity"] = Handlebars.compile("    <div class=\"comment-status\" style=\"display:none;\">\n        <!--{{{ spinner \"32px\" }}}-->\n        <span class=\"status-text\" style=\"display:none;\"></span>\n    </div>\n    <div class=\"info-dialog crm-dialog crm-leads-dialog\" title=\"{{module}}\">\n            <div class=\"top-legends\"><span class=\"error-mark\">*</span> Fields are required.</div>\n            <form>\n            <div class=\"editable-update\">\n                    {{#module_config}}                    {{#if_equal field_type \"hidden\"}}                            <input type=\"hidden\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"{{field_value}}\" >\n                    {{/if_equal}}                    {{#if_equal field_type \"text\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" > \n                            <input type=\"text\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"{{field_value}}\" maxlength=\"{{field_length}}\" class =\"{{#if required}}required {{/if}} {{#if dependency}} dependency-text {{/if}} \">\n                            \n                            {{#if  dependency}}\n                                {{#dependency}}\n                                {{#if_equal field_type \"select\"}}                                        <select name=\"{{field_name}}\" id=\"{{field_name}}\"  class =\"{{#if required}} required {{/if}} dependency-text-select\" >                                            {{#select_options dd_options field_value \"<option value=''>&nbsp;</option>\" }}&nbsp; {{/select_options}}\n                                        </select>\n                                {{/if_equal}}                                {{/dependency}}\n                            {{/if}}\n                            \n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"date\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" > \n                            <input type=\"text\" name=\"{{field_name}}\" id=\"{{field_name}}\" value=\"{{ setDateFormat field_value}}\" maxlength=\"{{field_length}}\" class =\"{{#if required}}required {{/if}} {{#if dependency}} dependency-date {{/if}}  date_picker\" readonly=\"readonly\" >\n                            \n                            {{#if  dependency}}\n                                {{#dependency}}\n                                {{#if_equal field_type \"select\"}}                                        <select name=\"{{field_name}}\" id=\"{{field_name}}\"  class =\"{{#if required}} required {{/if}} dependency-select\" >                                            {{#select_options dd_options field_value \"<option value=''>&nbsp;</option>\" }}&nbsp; {{/select_options}}\n                                        </select>\n                                {{/if_equal}}                                {{/dependency}}\n                            {{/if}}\n                            \n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"textarea\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" >  \n                            <textarea rows=\"4\" cols=\"50\" name=\"{{field_name}}\" id=\"{{field_name}}\"  class =\"{{#if required}}required{{/if}}\" >{{field_value}}</textarea>\n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"select\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" > \n                            <select name=\"{{field_name}}\" id=\"{{field_name}}\" class =\"{{#if required}}required{{/if}} {{#if dependency}} dependency-date {{/if}}\" style=\"{{#if dependency}} width:34%; {{/if}}\">                                {{#select_options dd_options field_value \"<option value=''>&nbsp;</option>\" }}&nbsp; {{/select_options}}\n                            </select>\n                            \n                            {{#if  dependency}}\n                                {{#dependency}}\n                                        <input type=\"text\" name=\"parent_name\" id=\"parent_name\" value=\"{{field_value}}\" maxlength=\"{{field_length}}\" class =\"{{#if required}}required {{/if}} dependency-select  \"style=\" width:56%;\">\n                                {{/dependency}}\n                            {{/if}}\n                        </div>\n                    </div>\n                    {{/if_equal}}                    {{#if_equal field_type \"checkbox\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" >  \n                            <input type=\"checkbox\" name=\"{{field_name}}\" id=\"{{field_name}}\"  class =\"{{#if required}}required{{/if}}\">\n                        </div>\n                    </div>\n                     {{/if_equal}}                     {{#if_equal field_type \"radio\"}}                    <div class=\"form-row\" title=\"{{{trim_chars field_label}}}\" >\n                        <label class=\"form-label\">\n                            <div id=\"data_labels\">{{{truncateText field_label \"18\"}}}: {{#if required}}<span style='color:red;'>*</span>{{/if}}</div>                        </label> \n                        <div class=\"form-fields\" >  \n                            <input type=\"radio\" name=\"{{field_name}}\" id=\"{{field_name}}\"   class =\"{{#if required}}required{{/if}}\">\n                        </div>\n                    </div>\n                    {{/if_equal}}                  {{/module_config}}            </div>\n\n        </form>\n    </div>\n");


client.templates["recent_conversations/recent_conversations"] = Handlebars.compile("\n            <div class=\"block4 block-remove-doted\">\n                <span class=\"cnt\">\n                    <a class=\"recent-conversations-link\" target=\"_blank\" href=\"{{ url }}\">\n                        <img src=\"{{ ginipkg_base_url }}/images/rcnt-mail.jpg\" width=\"17\" height=\"12\" />\n                        Recent Mail\n                    </a>\n\n                </span>\n                <button class=\"button email-link\" style=\"margin-right:-3px\" email=\"{{email}}\" >COMPOSE</button>\n            </div>\n            <div class=\" block4 recent_mail block-remove-doted block-border\">\n                <img src=\"{{ ginipkg_base_url }}/images/rcnt-mail.jpg\" width=\"17\" height=\"12\" />&nbsp;&nbsp;Recent Mails\n                <span class=\"mail_detail\">\n                    <div class=\"mail-comment-status\" style=\"display:none;text-align:left;padding:5px\">                        {{{ spinner \"16px\" }}}\n                        <span class=\"status-text\" style=\"color:red;font-size-10px\"></span>                    </div>\n                    <div class=\"mail_list\"></div>\n                </span>\n                <span class=\"info\">\n                        <div class=\"dropdown\">\n                            <a class=\"dropdown-toggle info-settings mail-dropdown-toggle\" data-toggle=\"dropdown\" href=\"javascript:void(0)\">Dropdown trigger</a>\n                            <ul class=\"dropdown-menu mail-dropdown-menu\" >\n                                <li><a href=\"javascript:void(0)\" class=\"toggle_mail\">Maximize</a></li>\n                            </ul>\n                        </div>\n                </span>\n            </div>\n            <div class=\" block4 recent_attachment block-remove-doted block-border\">\n                <img src=\"{{ ginipkg_base_url }}/images/attachment.png\" width=\"17\" height=\"12\" />&nbsp;&nbsp;Recent Attachments\n                <span class=\"attachment_detail\">\n                    <div class=\"comment-status\" style=\"display:none;text-align:left;padding:5px\">                        {{{ spinner \"16px\" }}}\n                        <span class=\"status-text\" style=\"color:red;font-size-10px\"></span>                    </div>                    <div class=\"attachment\" style=\"display:none\">\n                        <div class=\"search_box\" style='margin: 6px 2px 1px 3px;'>\n                            <input type=\"text\" name=\"search_text\" id=\"search_text\" value=''></input>\n                            <input type=\"button\" name=\"search_button\" title=\"Search\" id=\"search_button\" value=\"Search\"></input>\n                        </div>\n                        <div class=\"attachment_list\">\n                        </div>\n                    </div>\n                </span>\n                <span class=\"info\">\n                        <div class=\"dropdown\">\n                            <a class=\"dropdown-toggle info-settings attachment-dropdown-toggle\" data-toggle=\"dropdown\" href=\"javascript:void(0)\">Dropdown trigger</a>\n                            <ul class=\"dropdown-menu attachment-dropdown-menu\" >\n                                <li><a href=\"javascript:void(0)\" class=\"toggle_attachment\">Maximize</a></li>\n                                <li class=\"dowonload_all_attachment\" style=\"display:none\"></li>\n                            </ul>\n                        </div>\n                </span>\n            </div>\n            <div class=\"block-border block-remove-doted \"/>\n");


client.templates["navigation_menu/navigation_menu"] = Handlebars.compile("    <a class=\"gbgt gini-top-link\" href=\"javascript:void(0);\">\n            <span class=\"gbtb2\"></span>            <span class=\"gbts gbtsa\">                <img src='"+img_base_url+"/ginicube_50px.png' style=\"margin-top: 23px;height: 27px;\">                        <span class=\"gbma\"></span>            </span>    </a>\n\n    <span>\n            <div id=\"ginipkg-navigation-menu\" class=\"gini-nav-menu\" style=\"display: block;position: absolute;top: 66px;left: -19px;text-align: left;padding: 0px;\">    \n                <div class=\"arrow\"></div>                <ul>\n                    <li class=\"login_required\"><a href=\"javascript:void(0)\">Log In to "+app_name+" </a></li>\n                    <li class=\"signup_required\"><a href=\"javascript:void(0)\">Signup Wizard</a></li>\n                    <li class=\"already_login\"><a href=\"javascript:void(0);\" style=\"cursor:default!important;\">Logged in as {{ authenticated_as }}</a></li>\n                    <li class=\"sugarcrm\"><a href=\"javascript:void(0)\">SugarCRM Credentials</a></li>\n                    <li class=\"sync\"><a href=\"javascript:void(0)\">Sync</a></li>\n                    <li style=\"height:105px;display:none;min-width:350px;\"class=\"sync1\"><iframe style=\"border:none;height:109px;width:100%;\" src=\"{{ proxy_base_url }}/googleapi/ext/navigation.php?from=google&userAction=usersetup                    &sId={{ session_token }}&openId={{user_open_id}}&userEmail={{user_email}}&user_domain={{user_domain}}                    &last_contacts_sync={{ features/contacts/last_sync }}&last_calendar_sync={{ features/calendar/last_sync }}&last_templates_sync={{ features/templates/last_sync }}                    &client=extension&requestType=sync&clientVersion={{client_version_base}}&clientSource={{client_source}}\"></iframe></li>\n                    <li class=\"crm_not_available\" style=\"display:none;margin-left: 35px;color: grey;line-height:20px;\"><p style=\"color:red;\">Provide SugarCRM Credentials to use Syncing!!</p><p>Sync Contacts</p><p>Sync Calendar</p><p>Sync Templates</p></li>                    <!--<li class=\"menu_sync_contact\"><a href=\"javascript:void(0)\">Sync Contacts</a></li>-->\n                    <!--<li class=\"menu_sync_calendar\"><a href=\"javascript:void(0)\">Sync Calendar</a></li>-->\n                    <li class=\"networks\"><a href=\"javascript:void(0)\">Social Connect</a></li>\n                    <!--<li class=\"callsetup\"><a href=\"javascript:void(0)\">Call Setup</a></li>-->\n                    <li class=\"settings\"><a href=\"javascript:void(0)\">Manage Your Settings</a></li>\n                    <li class=\"about-ginicube\"><span id='about-menu-link'>About "+app_name+"</span>\n                    <div class=\"about-ginicube-toggle\">\n                    <span id='version_details'>Current Version : V"+app_version_number+"\n                    <!--<a href='"+proxy_base_url+"/services/v2/requestLog.php?&subType=request_log&userEmail={{user_email}}&user_domain={{user_domain}}&clientVersion=ChromeExtension%2BGiniCube%2B1.1&clientSource=ext&callback=_jqjsp&_115674606196830676777=' target='_blank'>request log</a>-->                    <p>For more details <a href=\"http://ginicube.com/\" target=\"_blank\" class='about-gini-website-link'>Visit Our website</a></p></span></div></li>\n                    <!--<li class=\"billing\"><a href=\"javascript:void(0)\">Manage Your Billing</a></li>-->\n                    <!--<li class=\"billing\"><a href=\"javascript:void(0)\">Manage Your Billing</a></li>-->\n                    <li class=\"logout\"><a href=\"javascript:void(0)\">Disable / Logout "+app_name+"</a></li>\n                </ul>\n            </div>\n    </span>\n");

//siddarth 
/* @modified by - GAURAV SHARMA
 * @date - 07 july 2014 ,09 july 2014,10 july 2014
 * @desc - For some UI changes.*/
client.templates["tracking/classic_compose_bar"] = Handlebars.compile("\n<div>\n    <div class=\"Gini_templates\" style=\"/*height:380px*/\">   <div class=\"search_box\" style=\"background:none;height:45px;\"><input type=\"text\" value=\"\" name=\"search_email\" id=\"search_email\" title=\"Email\" class=\"text-label\" style=\"color: rgb(77, 75, 75);\"> <select class=\"tpl_search_select\" size = \"5\" style = \"padding:left:5px;display:none;font-size:12px;width: 220px;position: absolute;top: 35px;z-index: 4;border-color: lightgrey;left: 12px;\"></select><input type=\"button\" value=\"\" id=\"Search\" title=\"Search\" class=\"search_email_button\"> </div>     <div class=\"fav_category\">            <ul class=\"tabs\">  <li>    <input type=\"radio\" checked name=\"tabs1\" id=\"tpl1\">                    <label for=\"tpl1\" ><div title=\"Favorite Templates\" class=\"gini_fav\">Favorites</div></label>                    <div id=\"tab-content1\" style=\"z-index:1;\" class=\"tab-content animated fadeIn tpl_fav\">                        <div class=\"fav_list\" style=\"height: 203px;width:240px;overflow: auto;\">                            <ul class = \"gini_uls_avoid_crm_uls_fav\">                                {{#favourites}}                                    <li class= \"gini_lis_avoid_crm_lis_fav\"><span style=\"margin-left: 7px;\"><input name=\"\" type=\"checkbox\" class=\"chkFav\" value=\"\"></span> <span  tId=\"{{id}}\" title=\"{{name}} [ {{{returnNoneIfEmpty categoryName}}} ]\" class=\"fav-tpl template-use tooltip discard\" style=\"font-weight: normal;\"><span class=\"innerTemplateText\"><div class= \"detail_template\">{{{returnSame description}}}{{{returnAttachmentForTemplate attachment_details}}}</div><div tid = \"{{id}}\" class=\"view_template_edit_insert\"><input type=\"button\" tid = \"{{id}}\" class = \"editTemplate\" value=\"edit\"><input tid = \"{{id}}\" class = \"template-used\" type=\"button\" value=\"insert\"></div></span>{{{substr name}}}</span><span tId=\"{{id}}\" name=\"usability\" title=\"Usability\" class=\"most_used most_used_{{id}}\">{{usability}}</span><div tId=\"{{id}}\" name=\"Edit\" title=\"Edit This Template\" class=\"edit editTemplate\">Edit</div>                                {{/favourites}}                            </ul>                        </div>                    </div>      <div id =\"tpl_searchedTemplates\"> </div>  </li>  <li>    <input type=\"radio\" name=\"tabs1\" id=\"tpl2\">                    <label for=\"tpl2\" style=\"z-index:1;\"><div title=\"Categories Of Templates\" class=\"gini_category\">Tags</div></label>                    <div id=\"tab-content2\" class=\"tab-content animated fadeIn tpl_cat\" style=\"display:none;z-index:1\">                        <div class=\"fav_list\" style=\"height: 205px;width:240px;overflow: auto;\">                            <ul style=\"margin-left: 5px;\">                                {{#categories}}                                    <li><a href=\"javascript:void(0)\" class=\"template-button\" style=\"font-weight:bold;padding: 10px;color: #919090;text-decoration: none;\"title=\"Category {{cName}}\" cId=\"{{cId}}\">{{{substr cName}}}</a><span> {{no_of_tpl}}</span>{{returnSystemTagsEdit cName}}</li>                                    <li style=\"display:none;\" class=\"containNewCat\"><input name=\"\" type=\"text\" cId=\"{{cId}}\" class=\"editTemplateTextBox\" value=\"{{{addSlashes cName}}}\" style=\"margin-left:10px;height:16px;border:1px solid #5FC4FA;\"></li>                                    <ul class=\"gini-templates-category-{{cId}} gini_uls_avoid_crm_uls_tag\" style=\"display:none;margin-left:10px;list-style-type:none;\">                                        {{#templates}}                                            <li class=\"gini_lis_avoid_crm_lis_cat\"><span style=\"margin-left: 7px;\"><input name=\"\" type=\"checkbox\" class=\"chkTpl\" value=\"\"></span> <span  tId=\"{{id}}\"  class=\"template-use tooltip discard\" style=\"font-weight: normal;\"><span class=\"innerTemplateText\"><div class= \"detail_template\">{{{returnSame description}}}{{{returnAttachmentForTemplate attachment_details}}}</div><div tid = \"{{id}}\" class=\"view_template_edit_insert\"><input type=\"button\" tid = \"{{id}}\" class = \"editTemplate\" value=\"edit\"><input tid = \"{{id}}\" class = \"template-used\" type=\"button\" value=\"insert\"></div></span>{{{substr name}}}</span><span tId=\"{{id}}\" name=\"usability\" title=\"Usability\" class=\"most_used most_used_{{id}}\">{{usability}}</span><span tId=\"{{id}}\" status=\"{{returnFav favourite }}\" name=\"favourites\" title=\"favourites\" class=\"make_tpl_fav_unfav make_tpl_fav_unfav_{{id}} tpl_fav_unfav\" style = \"{{returnFavCss favourite}}\"></span><div tId=\"{{id}}\" name=\"Edit\" title=\"Edit This Template\" class=\"edit editTemplate\">Edit</div>                                        {{/templates}}                                    </ul>                                {{/categories}}                                     <li style=\"display:none;\" class=\"containNewCat\"><input name=\"\" type=\"text\" cId=\"-1\" class=\"editTemplateTextBox\" value=\"Shared\" style=\"margin-left:10px;height:16px;border:1px solid #5FC4FA;\"></li>                                    <ul class=\"gini-templates-category--1\" style=\"display:none;margin-left:10px;list-style-type:none;\">                                        {{#shared}}                                            <li><span style=\"margin-left: 7px;\"><input name=\"\" type=\"checkbox\" class=\"chkTpl\" value=\"\"></span> <span  tId=\"{{id}}\"  class=\"template-use tooltip discard\" style=\"font-weight: normal;\"><span class=\"innerTemplateText\">{{{returnSame description}}}</span>{{{substr name}}}</span><span class= \"most_used\">10</span><span class=\"tpl_fav_unfav\"></span>  <div tId=\"{{id}}\" name=\"Edit\" title=\"Edit This Template\" class=\"edit editTemplate\">Edit</div>                                        {{/shared}}                                    </ul>                            </ul>                        </div>                    </div>                </li>            </ul>        </div>        <div class=\"futter_bar\">            <ul>                <li class=\"del deleteTemplate\" style=\"display:none;font-size: 11px;\"><a href=\"javascript:void(0)\"> Delete</a></li>                <li class=\"del deleteTemplateCategory\" style=\"display:none;font-size: 11px;\"><a href=\"javascript:void(0)\"> Delete</a></li>                <li class=\"add_template newTemplate\"><a href=\"javascript:void(0)\" style=\"font-size: 11px;\"> Add</a></li>                <li class=\"save_template\"><a href=\"javascript:void(0)\" style=\"font-size: 11px;\">Save</a></li>            </ul>        </div>    </div></div>");

/* @modified by - GAURAV SHARMA
 * @date - 09 july 2014 ,10 july 2014
 * @desc - For some UI changes.*/
client.templates["tracking/classic_template_search"]= Handlebars.compile("\n<div id=\"tab-content2\" class=\"tab-content animated fadeIn tpl_cat\" style=\"display:none;z-index:1\">                          <div class=\"fav_list\" style=\"height: 205px;width:240px;overflow: auto;\">                            <ul style=\"margin-left: 5px;\">                                {{#categories}}                                    <li><a href=\"javascript:void(0)\" class=\"template-button\" style=\"font-weight:bold;padding: 10px;color: #919090;text-decoration: none;\"title=\"Category {{cName}}\" cId=\"{{cId}}\">{{{substr cName}}}</a><span> {{no_of_tpl}}</span>{{returnSystemTagsEdit cName}}</li>                                    <li style=\"display:none;\" class=\"containNewCat\"><input name=\"\" type=\"text\" cId=\"{{cId}}\" class=\"editTemplateTextBox\" value=\"{{{addSlashes cName}}}\" style=\"margin-left:10px;height:16px;border:1px solid #5FC4FA;\"></li>                                    <ul class=\"gini-templates-category-{{cId}} gini_uls_avoid_crm_uls_tag\" style=\"display:none;margin-left:10px;list-style-type:none;\">                                        {{#templates}}                                            <li class = \"gini_lis_avoid_crm_lis_cat\"><span style=\"margin-left: 7px;\"><input name=\"\" type=\"checkbox\" class=\"chkTpl\" value=\"\"></span> <span  tId=\"{{id}}\"  class=\"template-use tooltip discard\" style=\"font-weight: normal;\"><span class=\"innerTemplateText\"><div class= \"detail_template\">{{{returnSame description}}}{{{returnAttachmentForTemplate attachment_details}}}</div><div tid = \"{{id}}\" class=\"view_template_edit_insert\"><input type=\"button\" tid = \"{{id}}\" class = \"editTemplate\" value=\"edit\"><input tid = \"{{id}}\" class = \"template-used\" type=\"button\" value=\"insert\"></div></span>{{{substr name}}}</span><span tId=\"{{id}}\" name=\"usability\" title=\"Usability\" class=\"most_used most_used_{{id}}\">{{usability}}</span><span tId=\"{{id}}\" status=\"{{returnFav favourite }}\" name=\"favourites\" title=\"favourites\" class=\"make_tpl_fav_unfav make_tpl_fav_unfav_{{id}} tpl_fav_unfav\" style = \"{{returnFavCss favourite}}\"></span><div tId=\"{{id}}\" name=\"Edit\" title=\"Edit This Template\" class=\"edit editTemplate\">Edit</div>                                        {{/templates}}                                    </ul>                                {{/categories}}                                     <li style=\"display:none;\" class=\"containNewCat\"><input name=\"\" type=\"text\" cId=\"-1\" class=\"editTemplateTextBox\" value=\"Shared\" style=\"margin-left:10px;height:16px;border:1px solid #5FC4FA;\"></li>                                    <ul class=\"gini-templates-category--1\" style=\"display:none;margin-left:10px;list-style-type:none;\">                                        {{#shared}}                                            <li><span style=\"margin-left: 7px;\"><input name=\"\" type=\"checkbox\" class=\"chkTpl\" value=\"\"></span> <span  tId=\"{{id}}\"  class=\"template-use tooltip discard\" style=\"font-weight: normal;\"><span class=\"innerTemplateText\">{{{returnSame description}}}</span>{{{substr name}}}</span><span class= \"most_used\">10</span><span class=\"tpl_fav_unfav\"></span>  <div tId=\"{{id}}\" name=\"Edit\" title=\"Edit This Template\" class=\"edit editTemplate\">Edit</div>                                        {{/shared}}                                    </ul>                            </ul>                        </div>                    </div>");
//for generating outer skeleton of task bar.
client.templates["tracking/taskbar_structure"] = Handlebars.compile("\n     <div class=\"gini_taskbar_oc\">    <ul class=\"nav\">      <li><a href=\"javascript:void(0)\" class=\"op_task active\" flag=1>Open Task(s)</a></li>      <li><a href=\"javascript:void(0)\" class=\"op_task\" flag=2>Closed Task(s)</a></li>          <div class=\"right_close_add\">          <a href=\"javascript:void(0)\" class=\"add_task\" title=\"Create Task\" style=\"display:none\"></a>          <a href=\"javascript:void(0)\" class=\"collapse\"></a>          </div>         <div class='gini_taskbar_oc_search'>            <div class=\"taskbar-gini-logo\"></div>            <input name='search' type='text' id=\"search_task\" placeholder='Search Tasks' title=\"Search tasks in expanded tab\">            <a href='#' class=\"op_task active\" flag=3>search</a>       </div>    </ul>    <div class=\"content\" style=\"display:none;\">    <div class=\"gini_taskbar_oc_mask\" style=\"position: absolute;left: 47%;top: 45%;display:none;\">    <img src='"+img_base_url+"/loader.gif'\">    </div>    <div class=\"gini_taskbar_oc_mask\" style=\"display: none;position: absolute;width: 100%;top: 0px;height: 100%;z-index: 1;background: rgba(155, 155, 155, 0.2);min-height: 113px;\"></div>    <div class=\"in_content\"></div> </div>  </div>  <div style=\"clear:both\"></div>\n");
// for generating inner items(tasks).
client.templates["tracking/taskBar"] = Handlebars.compile("\n   <div class=\"open_task\">     <table class=\"task_bd\">    <tHead><tr>                <td style=\"height: 23px;\" id=\"name\"><input type=\"checkbox\" class=\"open_main_checkBox\"  title=\"Select all\"/></td>               <th value='name' sort='0'>Name</th>               <th value='created_by_name' sort='0'>Owner</th>               <th value='parent_type' sort='0'>Related To</th>              <th value='assigned_user_name' sort='0'>Assigned To</th>              <th value='date_due' sort='0'>Due Date</th>              <th value='status' sort='0'>Status</th>      </tr>     </tHead>    <tbody class='openTabTasks'>     {{#open}}        <tr>             <td> <input type=\"checkbox\" value=\"{{id}}\"/> </td>            <td class=\"edit_task\"><a href=\"javascript:void(0)\" title=\"Edit Task\">{{{truncateTextWithoutTrim name \"20\"}}}</a></td>            <td>{{{truncateTextWithoutTrim created_by_name \"20\"}}</td>            <td>{{#if parent_type}}                    {{{truncateTextWithoutTrim parent_type \"13\"}}}                {{/if}}                {{#if parent_name}}                      : <a href=\"{{taskInSugar}}\" target=\"_blank\" title=\"Open record in CRM\">{{{truncateTextWithoutTrim parent_name \"7\"}}}</a>                {{/if}}            </td>            <td>{{{truncateTextWithoutTrim assigned_user_name \"20\"}}</td>            <td>{{date_due}}</td>            <td>{{status}}</td>            <td style=\"display:none;\" class=\"taskdata\">{{jsonvalue}}</td>        </tr>        {{/open}}    </tbody></table><div class=\"page_index\">     <a href=\"javascript:void(0)\" class=\"del\" title=\"Delete selected task(s)\">back</a>          <div class=\"pagination_task\">            <a href=\"javascript:void(0)\" class=\"back\" title=\"Back\">back</a>            <span class=\"counting\">1 of 3</span>            <a href=\"javascript:void(0)\" class=\"next\" title=\"Next\">next</a>          </div>    </div></div>\n");



//Added by Mohit Gupta for archive this_mail_only functionality.  
client.templates["gini/archive_this_mail"] = Handlebars.compile("\n<div>\n    <div class=\"archive_bar\">        <ul>            <li class=\"add_record\" ><a href=\"javascript:void(0)\" flag=\"leads\"> Create Lead</a></li>            <li class=\"add_record\" ><a href=\"javascript:void(0)\" flag=\"accounts\"> Create Account</a></li>            <li class=\"add_record\" ><a href=\"javascript:void(0)\" flag=\"contacts\"> Create Contact</a></li>        </ul>    </div></div>");



client.templates["error/error_section"] = Handlebars.compile("\n    <!--Error section Starts Here -->\n    <div class=\"personal error\">\n        <div class=\"error_alert\">\n            <Strong>{{ title }}</Strong>\n            <p>\n                {{{ body }}}\n            </p>\n            \n            <div class=\"error_details\">\n            <p>\n                    <i>\n                        <b>Code</b> : {{error_code}} \n                    </i>\n            </p>\n\n            \n            <p>\n                \t <br\>\n                    <i>\n                        <b>Details</b> : {{error_message}} \n                    </i>\n            </p>\n\n            </div>\n            \n            <p>\n                \t <br\>\n                    <i>\n                        If you need any help, please feel free to contact us at \n                        \t<br/><a class=\"text-link\" href=\"mailto:techsupport@ginicube.com\">techsupport@<wbr>ginicube.com</a>.\n                    </i>\n            </p>\n\n            {{#in_development}}\n            {{#error}}\n                <h4>Backtrace:</h4>\n                <ul class=\"backtrace\">\n                    {{#backtrace}}\n                    <li><tt>{{ this }}</tt></li>\n                    {{/backtrace}}\n                 </ul>\n             {{/error}}\n             {{/in_development}}\n             \n        </div>\n        \n        <div id=\"error-block\" class=\"child-section\"></div>\n    </div>\n");

    //Hide Gini related bubbles 
    function hideBubbles(event){
        var target = $(event.target);
        if(event !== undefined && event != '') {
            event.stopImmediatePropagation();
            var target = $(event.target);
            if (target.hasClass('dropdown-menu') === false && target.parents('ul').hasClass('dropdown-menu') === false) {
                jQuery(document).find('ul.dropdown-menu').hide();       
            }
        }
    }


    function hideBubblesCrm(event){
        var target = $(event.target);
        if(event !== undefined && event != '') {
            event.stopImmediatePropagation();
            var target = $(event.target);
            if (target.hasClass('dropdown-menu') === false && target.parents('div').hasClass('dropdown-menu') === false) {
                jQuery(document).find('div.dropdown-menu').hide();      
            }
        }
    }

    function hideBubblesPost(event){
        var target = $(event.target);
        if(event !== undefined && event != '') {
            event.stopImmediatePropagation();
            var target = $(event.target);
            if (target.parent().parent().hasClass('dropDownAppend') === false && target.parents('div').hasClass('dropDownAppend') === false) 
            {
                jQuery(document).find('div.ginipkg-toolbar_convert').hide();      
            }
        }
    }

    function hideBubblesGiniOptions(event){
        var target = $(event.target);
        if(event !== undefined && event != '') {
            event.stopImmediatePropagation();
            var target = $(event.target);
            if (target.hasClass('gini-dropdown') === false  && target.hasClass('ginipkg-crm-options-menu') === false &&
                target.hasClass('gini-dropdown-image') ===false && target.parents('div').hasClass('gini-dropdown') === false)
            {
                jQuery(document).find('div.gini-dropdown').hide();
            } else {
                jQuery(document).find('div.gini-dropdown').hide();
                target.find('div.gini-dropdown').show();
                target.parent().find('div.gini-dropdown').show();
            }
        }
    }

    function hideBubblesTemplate(event){
        var target = $(event.target);
        if (event !== undefined && event !='') {
            event.stopImmediatePropagation();
            if (target.hasClass('ginipkg-templatebar') ===false && target.parents('div').hasClass('ginipkg-templatebar') === false ) {
                if (jQuery(document).find('div.ginipkg-templatebar div.ginipkg-templatebar').is(':visible')){
                    if (target[0].className != "templateToggle") {
                        $('div.ginipkg-templatebar div.ginipkg-templatebar').hide();
                        $('.hx .gH').css({'position':''});
                    }
                }   
            }

        }
    }

    function hideBubblesTopMenu(event){
        var target = $(event.target);
        if(event !== undefined && event != '') {
            event.stopImmediatePropagation();
            var target = $(event.target);
            if (target.hasClass('gini-nav-menu') === false && target.parents('div').hasClass('gini-top') === false) {
                jQuery(document).find('div#ginipkg-navigation-menu').hide();       
            }
        }
    }

    $(document).bind('click', function(event) {
        hideBubbles(event);
        hideBubblesCrm(event);
        hideBubblesTemplate(event);
        hideBubblesGiniOptions(event);
        hideBubblesTopMenu(event);
        hideBubblesPost(event);
    });
   
    jQuery(function () {
        client.initialize({
            "reminder_hosts"        : ["crm.osscube.com", "sugargini.com", "ginimail.com"],
            "user_is_admin"         : false,
            "app_name"  : app_name,
            "client_version_base"   : app_version,
            "client_source" : "ext",
            "min_log_level"         : "info",
            "ginipkg_base_url"  : server_url,
            "user_email"            : null,
            "user_domain"       : null,
            "redirect_url"          : server_url + "/redirect",
            "proxy_base_url"        : proxy_base_url, 
            "services_base_url"     : services_base_url, 
            "profiles_base_url"     : profiles_base_url,
            "crm_base_url"          : crm_base_url,
            //"clientCodeTimestamp" : 1366201112,
            //"server_identifier"   : "",
            //"hide_share_button"   : true,
            //"ginipkg_proxy_url": server_url,
            "sugar_config":null,
        });

    });
    
}());
